//********************************************************
//********************************************************
//**	Quantum.c										**
//**	Author	-Max Lawlor								**
//**													**
//**	'WORLD EVENT ENGINE'	Copyright 2006			**
//**													**
//********************************************************
//********************************************************



void World_Event_Engine(void)
	{

			   /*********************************************************
		---------------<<{{{{[ WORLD EVENT ENGINE ]}}}}>>---------------
		   *********************************************************/


	//***********
	geActor_GetBoneTransform(playact.Actor, "BIP01 R HAND", &player.RFistPos);
	geActor_GetBoneTransform(playact.Actor, "BIP01 L HAND", &player.LFistPos);
	//**********


	//#### Jump Special Effects (Move this to World Event Engine?)

	if(player.AJPushOffON == 1 && player.AJPushOff.Done == 0)	//## Push Off Expandro
		{
		if(player.AJPushOff.Init == 0)
			{
			player.AJPushOff.Init = 1;

			player.AJPushOff.StartFade = 145;
			player.AJPushOff.Radius = 0;

			player.AJPushOff.Pos = playact.ActorXform.Translation;
			player.AJPushOff.Pos.Y += 10;
			

			if(player.AJPushOffType == 0)
				{
				geXForm3d_GetLeft(&playact.ActorXform,&player.AJPushOff.Leftvec);
				geXForm3d_GetIn(&playact.ActorXform,&player.AJPushOff.Forvec);
				geXForm3d_GetUp(&playact.ActorXform,&player.AJPushOff.Upvec);
				}


			if(player.AJPushOffType == 1)
				{
				geXForm3d_GetLeft(&playact.ActorXform,&player.AJPushOff.Leftvec);
				geXForm3d_GetUp(&playact.ActorXform,&player.AJPushOff.Forvec);
				geXForm3d_GetIn(&playact.ActorXform,&player.AJPushOff.Upvec);

				geVec3d_MA(&player.AJPushOff.Pos, -45, &player.AJPushOff.Forvec, &player.AJPushOff.Pos);
				}
			}


		if(player.AJPushOff.StartFade > 0)	//250
			{
			player.AJPushOff.Vert1 = player.AJPushOff.Pos;


			geVec3d_MA(&player.AJPushOff.Vert1, player.AJPushOff.Radius, &player.AJPushOff.Upvec, &player.AJPushOff.Vert1);
									//Distance to the Left of the player
			geVec3d_MA(&player.AJPushOff.Vert1, player.AJPushOff.Radius, &player.AJPushOff.Leftvec, &player.AJPushOff.Vert1);

							//Distance to the Right of the player from the left
			geVec3d_MA(&player.AJPushOff.Vert1, -player.AJPushOff.Radius * 2, &player.AJPushOff.Leftvec, &player.AJPushOff.Vert2);

							//Distance to the Top of the player
			geVec3d_MA(&player.AJPushOff.Vert2, -player.AJPushOff.Radius * 2, &player.AJPushOff.Upvec, &player.AJPushOff.Vert3);

							//Distance to the Top of the player
			geVec3d_MA(&player.AJPushOff.Vert1, -player.AJPushOff.Radius * 2, &player.AJPushOff.Upvec, &player.AJPushOff.Vert4);

			player.AJPushOff.Lvert[0].a = player.AJPushOff.StartFade;
			player.AJPushOff.Lvert[0].b = 255;
			player.AJPushOff.Lvert[0].g = 120;
			player.AJPushOff.Lvert[0].r = 120;
			player.AJPushOff.Lvert[0].u = 0;
			player.AJPushOff.Lvert[0].v = 0;
			player.AJPushOff.Lvert[0].X = player.AJPushOff.Vert1.X;
			player.AJPushOff.Lvert[0].Y = player.AJPushOff.Vert1.Y;
			player.AJPushOff.Lvert[0].Z = player.AJPushOff.Vert1.Z;

			player.AJPushOff.Lvert[1].a = player.AJPushOff.StartFade;
			player.AJPushOff.Lvert[1].b = 255;
			player.AJPushOff.Lvert[1].g = 120;
			player.AJPushOff.Lvert[1].r = 120;
			player.AJPushOff.Lvert[1].u = 1;
			player.AJPushOff.Lvert[1].v = 0;
			player.AJPushOff.Lvert[1].X = player.AJPushOff.Vert2.X;
			player.AJPushOff.Lvert[1].Y = player.AJPushOff.Vert2.Y;
			player.AJPushOff.Lvert[1].Z = player.AJPushOff.Vert2.Z;

			player.AJPushOff.Lvert[2].a = player.AJPushOff.StartFade;
			player.AJPushOff.Lvert[2].b = 255;
			player.AJPushOff.Lvert[2].g = 120;
			player.AJPushOff.Lvert[2].r = 120;
			player.AJPushOff.Lvert[2].u = 1;
			player.AJPushOff.Lvert[2].v = 1;
			player.AJPushOff.Lvert[2].X = player.AJPushOff.Vert3.X;
			player.AJPushOff.Lvert[2].Y = player.AJPushOff.Vert3.Y;
			player.AJPushOff.Lvert[2].Z = player.AJPushOff.Vert3.Z;

			player.AJPushOff.Lvert[3].a = player.AJPushOff.StartFade;
			player.AJPushOff.Lvert[3].b = 255;
			player.AJPushOff.Lvert[3].g = 120;
			player.AJPushOff.Lvert[3].r = 120;
			player.AJPushOff.Lvert[3].u = 0;
			player.AJPushOff.Lvert[3].v = 1;
			player.AJPushOff.Lvert[3].X = player.AJPushOff.Vert4.X;
			player.AJPushOff.Lvert[3].Y = player.AJPushOff.Vert4.Y;
			player.AJPushOff.Lvert[3].Z = player.AJPushOff.Vert4.Z;


			if(player.AJPushOff.Radius < 200) player.AJPushOff.Radius += (200/10);	//30

			if(player.AJPushOff.Radius >= 100) player.AJPushOff.StartFade -= 30;

			player.AJPushOff.MaterialCNT = (( player.AJPushOff.Radius / 200 ) * 31 ) + 11;
			if(player.AJPushOff.MaterialCNT > 42) player.AJPushOff.MaterialCNT = 42;
			if(player.AJPushOff.MaterialCNT < 11) player.AJPushOff.MaterialCNT = 11;

			//FROZEN TO BE FIXED
			geWorld_AddPolyOnce(World, &player.AJPushOff.Lvert[0], 4, PulsarMid[player.AJPushOff.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DEPTH_SORT_BF, 1.0f);
			}
		else
			{
			player.AJPushOffON = 0;
			player.AJPushOff.Init = 0;
			player.AJPushOff.Done = 0;
			}
		}



	SCRAM = 0;
	while(SCRAM < NomAI)
		{
		if(Forge[SCRAM].LIVE == 1)
			{
			if(Forge[SCRAM].AJPushOffON == 1 && Forge[SCRAM].AJPushOff.Done == 0)	//## Push Off Expandro
				{
				if(Forge[SCRAM].AJPushOff.Init == 0)
					{
					Forge[SCRAM].AJPushOff.Init = 1;

					Forge[SCRAM].AJPushOff.StartFade = 145;
					Forge[SCRAM].AJPushOff.Radius = 0;

					Forge[SCRAM].AJPushOff.Pos = Forge[SCRAM].Avatar.ActorXform.Translation;
					Forge[SCRAM].AJPushOff.Pos.Y += 10;
					

					if(Forge[SCRAM].AJPushOffType == 0)
						{
						geXForm3d_GetLeft(&Forge[SCRAM].Avatar.ActorXform,&Forge[SCRAM].AJPushOff.Leftvec);
						geXForm3d_GetIn(&Forge[SCRAM].Avatar.ActorXform,&Forge[SCRAM].AJPushOff.Forvec);
						geXForm3d_GetUp(&Forge[SCRAM].Avatar.ActorXform,&Forge[SCRAM].AJPushOff.Upvec);
						}


					if(Forge[SCRAM].AJPushOffType == 1)
						{
						geXForm3d_GetLeft(&Forge[SCRAM].Avatar.ActorXform,&Forge[SCRAM].AJPushOff.Leftvec);
						geXForm3d_GetUp(&Forge[SCRAM].Avatar.ActorXform,&Forge[SCRAM].AJPushOff.Forvec);
						geXForm3d_GetIn(&Forge[SCRAM].Avatar.ActorXform,&Forge[SCRAM].AJPushOff.Upvec);

						geVec3d_MA(&Forge[SCRAM].AJPushOff.Pos, -45, &Forge[SCRAM].AJPushOff.Forvec, &Forge[SCRAM].AJPushOff.Pos);
						}
					}


				if(Forge[SCRAM].AJPushOff.StartFade > 0)	//250
					{
					Forge[SCRAM].AJPushOff.Vert1 = Forge[SCRAM].AJPushOff.Pos;


					geVec3d_MA(&Forge[SCRAM].AJPushOff.Vert1, Forge[SCRAM].AJPushOff.Radius, &Forge[SCRAM].AJPushOff.Upvec, &Forge[SCRAM].AJPushOff.Vert1);
											//Distance to the Left of the Forge[SCRAM]
					geVec3d_MA(&Forge[SCRAM].AJPushOff.Vert1, Forge[SCRAM].AJPushOff.Radius, &Forge[SCRAM].AJPushOff.Leftvec, &Forge[SCRAM].AJPushOff.Vert1);

									//Distance to the Right of the Forge[SCRAM] from the left
					geVec3d_MA(&Forge[SCRAM].AJPushOff.Vert1, -Forge[SCRAM].AJPushOff.Radius * 2, &Forge[SCRAM].AJPushOff.Leftvec, &Forge[SCRAM].AJPushOff.Vert2);

									//Distance to the Top of the Forge[SCRAM]
					geVec3d_MA(&Forge[SCRAM].AJPushOff.Vert2, -Forge[SCRAM].AJPushOff.Radius * 2, &Forge[SCRAM].AJPushOff.Upvec, &Forge[SCRAM].AJPushOff.Vert3);

									//Distance to the Top of the Forge[SCRAM]
					geVec3d_MA(&Forge[SCRAM].AJPushOff.Vert1, -Forge[SCRAM].AJPushOff.Radius * 2, &Forge[SCRAM].AJPushOff.Upvec, &Forge[SCRAM].AJPushOff.Vert4);

					Forge[SCRAM].AJPushOff.Lvert[0].a = Forge[SCRAM].AJPushOff.StartFade;
					Forge[SCRAM].AJPushOff.Lvert[0].b = 255;
					Forge[SCRAM].AJPushOff.Lvert[0].g = 120;
					Forge[SCRAM].AJPushOff.Lvert[0].r = 120;
					Forge[SCRAM].AJPushOff.Lvert[0].u = 0;
					Forge[SCRAM].AJPushOff.Lvert[0].v = 0;
					Forge[SCRAM].AJPushOff.Lvert[0].X = Forge[SCRAM].AJPushOff.Vert1.X;
					Forge[SCRAM].AJPushOff.Lvert[0].Y = Forge[SCRAM].AJPushOff.Vert1.Y;
					Forge[SCRAM].AJPushOff.Lvert[0].Z = Forge[SCRAM].AJPushOff.Vert1.Z;

					Forge[SCRAM].AJPushOff.Lvert[1].a = Forge[SCRAM].AJPushOff.StartFade;
					Forge[SCRAM].AJPushOff.Lvert[1].b = 255;
					Forge[SCRAM].AJPushOff.Lvert[1].g = 120;
					Forge[SCRAM].AJPushOff.Lvert[1].r = 120;
					Forge[SCRAM].AJPushOff.Lvert[1].u = 1;
					Forge[SCRAM].AJPushOff.Lvert[1].v = 0;
					Forge[SCRAM].AJPushOff.Lvert[1].X = Forge[SCRAM].AJPushOff.Vert2.X;
					Forge[SCRAM].AJPushOff.Lvert[1].Y = Forge[SCRAM].AJPushOff.Vert2.Y;
					Forge[SCRAM].AJPushOff.Lvert[1].Z = Forge[SCRAM].AJPushOff.Vert2.Z;

					Forge[SCRAM].AJPushOff.Lvert[2].a = Forge[SCRAM].AJPushOff.StartFade;
					Forge[SCRAM].AJPushOff.Lvert[2].b = 255;
					Forge[SCRAM].AJPushOff.Lvert[2].g = 120;
					Forge[SCRAM].AJPushOff.Lvert[2].r = 120;
					Forge[SCRAM].AJPushOff.Lvert[2].u = 1;
					Forge[SCRAM].AJPushOff.Lvert[2].v = 1;
					Forge[SCRAM].AJPushOff.Lvert[2].X = Forge[SCRAM].AJPushOff.Vert3.X;
					Forge[SCRAM].AJPushOff.Lvert[2].Y = Forge[SCRAM].AJPushOff.Vert3.Y;
					Forge[SCRAM].AJPushOff.Lvert[2].Z = Forge[SCRAM].AJPushOff.Vert3.Z;

					Forge[SCRAM].AJPushOff.Lvert[3].a = Forge[SCRAM].AJPushOff.StartFade;
					Forge[SCRAM].AJPushOff.Lvert[3].b = 255;
					Forge[SCRAM].AJPushOff.Lvert[3].g = 120;
					Forge[SCRAM].AJPushOff.Lvert[3].r = 120;
					Forge[SCRAM].AJPushOff.Lvert[3].u = 0;
					Forge[SCRAM].AJPushOff.Lvert[3].v = 1;
					Forge[SCRAM].AJPushOff.Lvert[3].X = Forge[SCRAM].AJPushOff.Vert4.X;
					Forge[SCRAM].AJPushOff.Lvert[3].Y = Forge[SCRAM].AJPushOff.Vert4.Y;
					Forge[SCRAM].AJPushOff.Lvert[3].Z = Forge[SCRAM].AJPushOff.Vert4.Z;

						
					if(Forge[SCRAM].AJPushOff.Radius < 200) Forge[SCRAM].AJPushOff.Radius += (200/10);	//30

					if(Forge[SCRAM].AJPushOff.Radius >= 100) Forge[SCRAM].AJPushOff.StartFade -= 30;
						
					Forge[SCRAM].AJPushOff.MaterialCNT = (( Forge[SCRAM].AJPushOff.Radius / 200 ) * 31 ) + 11;
					if(Forge[SCRAM].AJPushOff.MaterialCNT > 42) Forge[SCRAM].AJPushOff.MaterialCNT = 42;
					if(Forge[SCRAM].AJPushOff.MaterialCNT < 11) Forge[SCRAM].AJPushOff.MaterialCNT = 11;

					//FROZEN TO BE FIXED
					geWorld_AddPolyOnce(World, &Forge[SCRAM].AJPushOff.Lvert[0], 4, PulsarMid[Forge[SCRAM].AJPushOff.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DEPTH_SORT_BF, 1.0f);
					}
				else
					{
					Forge[SCRAM].AJPushOffON = 0;
					Forge[SCRAM].AJPushOff.Init = 0;
					Forge[SCRAM].AJPushOff.Done = 0;
					}
				}
			}
		SCRAM++;
		}

	#pragma message ("EDITINC - Key down check")

	if(KEY_DOWN(0x54))
		{
		helly = 0;
		while(helly < NomAI)
			{
			Forge[helly].Q_Brain.MindState = MIND_ACTIVEINIT;
			helly++;
			}
		}


	//####### TEMPORARY BUILD ITEMS

	//##### SENTRY CONTROL

	SCRAM=0;
	while(SCRAM < NomQBMSentry)
		{
		if(QBMSentry[SCRAM].LIVE == 1)
			{
			//#### EFFECTS DRAW SENTRY
			QBMSentry[SCRAM].ImageLvert.X = QBMSentry[SCRAM].Pos.X;
			QBMSentry[SCRAM].ImageLvert.Y = QBMSentry[SCRAM].Pos.Y;
			QBMSentry[SCRAM].ImageLvert.Z = QBMSentry[SCRAM].Pos.Z;
			QBMSentry[SCRAM].ImageLvert.r = 255;
			QBMSentry[SCRAM].ImageLvert.g = (55 + ((float)(QObject[QBMSentry[SCRAM].QObjID].StrengthBANK / QObject[QBMSentry[SCRAM].QObjID].StrengthMAX) * 200));
			QBMSentry[SCRAM].ImageLvert.b = 255;
			QBMSentry[SCRAM].ImageLvert.a = 200;

			geWorld_AddPolyOnce(World, &QBMSentry[SCRAM].ImageLvert, 1, QAEFF12, GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF | GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);


			//##### SENTRY BULLET EFFECTS
			
			if(NetworkOption != 1)
				{
				if(Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID == 250)
					{
					jet=0;	//##### AI Check (AvatarID respective) for in range
					while(jet < NomAI)
						{
						TESTPosS = Forge[jet].Avatar.ActorXform.Translation;
						TESTPosS.Y += 60;
						TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &QBMSentry[SCRAM].Pos);

						if(TESTShieldDIST < QBMSentry[SCRAM].Range && Forge[jet].HB_Dead == 0)
							{
							if(QBMSentry[SCRAM].FireRateCNT[jet] >= (1 - ((float)QBMSentry[SCRAM].FireRate / 5000)) * 36) QBMSentry[SCRAM].FireRateCNT[jet] = 0;
							else if(QBMSentry[SCRAM].FireRateCNT[jet] > 0) QBMSentry[SCRAM].FireRateCNT[jet] += 1 * TimeScale;

							if(QBMSentry[SCRAM].FireRateCNT[jet] == 0)	//FIRE!
								{
								QBMSentry[SCRAM].FireRateCNT[jet] = 1;

								SCRAMJET = 0;
								while((SCRAMJET < QBMSentry[SCRAM].BulletCNT) && (NomBullet < 398))	//V-- Maximum bullet restriction
									{
									//Trajectory
									Q_Bullet[NomBullet].WorldPos = QBMSentry[SCRAM].Pos;
									Q_Bullet[NomBullet].ORIGPos = QBMSentry[SCRAM].Pos;
									geVec3d_Subtract(&TESTPosS, &QBMSentry[SCRAM].Pos, &Q_Bullet[NomBullet].TrajVec);
									geVec3d_Normalize(&Q_Bullet[NomBullet].TrajVec);
									geVec3d_MA(&Q_Bullet[NomBullet].WorldPos, 4.5, &Q_Bullet[NomBullet].TrajVec, &Q_Bullet[NomBullet].WorldPos);

									Q_Bullet[NomBullet].TrajVec.X += ((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*(((5000 - QBMSentry[SCRAM].Accuracy) / 5000) * 3);
									Q_Bullet[NomBullet].TrajVec.Y += ((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*(((5000 - QBMSentry[SCRAM].Accuracy) / 5000) * 3);
									Q_Bullet[NomBullet].TrajVec.Z += ((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*(((5000 - QBMSentry[SCRAM].Accuracy) / 5000) * 3);

									if(fab(Q_Bullet[NomBullet].TrajVec.Y) > fab(Q_Bullet[NomBullet].TrajVec.X))
										{
										major = 1;
										if(fab(Q_Bullet[NomBullet].TrajVec.Z) > fab(Q_Bullet[NomBullet].TrajVec.Y))
											major = 2;
										}
									else
										{
										if(fab(Q_Bullet[NomBullet].TrajVec.Z) > fab(Q_Bullet[NomBullet].TrajVec.X))
											major = 2;
										}
									
									if(fab(Q_Bullet[NomBullet].TrajVec.X)==1.0f || fab(Q_Bullet[NomBullet].TrajVec.Y)==1.0f || fab(Q_Bullet[NomBullet].TrajVec.Z)==1.0f)
										{
										if ((major == 0 && Q_Bullet[NomBullet].TrajVec.X > 0) || major == 1)
											{
												TempVec1.X = 0.0f;
												TempVec1.Y = 0.0f;
												TempVec1.Z = -1.0f;
											}
										else if (major == 0)
											{
												TempVec1.X = 0.0f;
												TempVec1.Y = 0.0f;
												TempVec1.Z = 1.0f;
											}
										else 
											{
												TempVec1.X = Q_Bullet[NomBullet].TrajVec.Z;
												TempVec1.Y = 0.0f;
												TempVec1.Z = 0.0f;
											}
										}
									else geVec3d_CrossProduct(&Axis[major], &Q_Bullet[NomBullet].TrajVec, &TempVec1);

									geVec3d_CrossProduct(&Q_Bullet[NomBullet].TrajVec, &TempVec1, &TempVec2);
									geVec3d_Normalize(&TempVec2);
									geVec3d_Normalize(&TempVec1);
									geVec3d_Inverse(&TempVec1);

									geXForm3d_SetIdentity(&Q_Bullet[NomBullet].AlignMatrix);
									geXForm3d_SetFromLeftUpIn(&Q_Bullet[NomBullet].AlignMatrix, &TempVec1, &TempVec2, &Q_Bullet[NomBullet].TrajVec);
									geXForm3d_Orthonormalize(&Q_Bullet[NomBullet].AlignMatrix);

									geXForm3d_SetYRotation(&rotmat, PI);
									geXForm3d_Multiply(&Q_Bullet[NomBullet].AlignMatrix, &rotmat, &Q_Bullet[NomBullet].AlignMatrix);

									Q_Bullet[NomBullet].ActorID = Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID;

									//Spin
									Q_Bullet[NomBullet].Xrot = 0;
									Q_Bullet[NomBullet].Yrot = 0;
									Q_Bullet[NomBullet].Zrot = 0;

									Q_Bullet[NomBullet].BulletDMG = ((float)QBMSentry[SCRAM].Damage / 5000) * 65;
									Q_Bullet[NomBullet].BulletPWR = ((float)QBMSentry[SCRAM].Power / 5000) * 65;

									Q_Bullet[NomBullet].JDamageLVL = 0;

									Q_Bullet[NomBullet].ZSpin = ((float)rand() / 32767)/3;

									Q_Bullet[NomBullet].Gravity = 0.0001;

									Q_Bullet[NomBullet].Scale = 0.5;
									Q_Bullet[NomBullet].Speed = 250;

									Q_Bullet[NomBullet].Live = 1;

									NomBullet++;

									geSound3D_GetConfig(World, &player.ViewXForm, &QBMSentry[SCRAM].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									//'FIRE' SOUND

									geSound_PlaySoundDef(SoundSys, S_RifleFire[7], Volume, Pan, S_TimeScale, GE_FALSE);
									
									SCRAMJET++;
									}
								}
							}

						jet++;
						}
					}
				else
					{
					TESTPosS = playact.ActorXform.Translation;
					TESTPosS.Y += 60;
					TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &QBMSentry[SCRAM].Pos);

					if(TESTShieldDIST < QBMSentry[SCRAM].Range && player.HB_Dead == 0)
						{
						if(QBMSentry[SCRAM].FireRateCNT[250] >= (1 - ((float)QBMSentry[SCRAM].FireRate / 5000)) * 36) QBMSentry[SCRAM].FireRateCNT[250] = 0;
						else if(QBMSentry[SCRAM].FireRateCNT[250] > 0) QBMSentry[SCRAM].FireRateCNT[250] += 1 * TimeScale;

						if(QBMSentry[SCRAM].FireRateCNT[250] == 0)	//FIRE!
							{
							QBMSentry[SCRAM].FireRateCNT[250] = 1;

							SCRAMJET = 0;
							while((SCRAMJET < QBMSentry[SCRAM].BulletCNT) && (NomBullet < 398))	//V-- Maximum bullet restriction
								{
								//Trajectory
								Q_Bullet[NomBullet].WorldPos = QBMSentry[SCRAM].Pos;
								Q_Bullet[NomBullet].ORIGPos = QBMSentry[SCRAM].Pos;
								geVec3d_Subtract(&TESTPosS, &QBMSentry[SCRAM].Pos, &Q_Bullet[NomBullet].TrajVec);
								geVec3d_Normalize(&Q_Bullet[NomBullet].TrajVec);
								geVec3d_MA(&Q_Bullet[NomBullet].WorldPos, 4.5, &Q_Bullet[NomBullet].TrajVec, &Q_Bullet[NomBullet].WorldPos);

								Q_Bullet[NomBullet].TrajVec.X += ((((float)rand() / 32767)-0.5)/((Forge[Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID].CharDATA.WeaponSKILL.Accuracy/5000)*500))*(((5000 - QBMSentry[SCRAM].Accuracy) / 5000) * 3);
								Q_Bullet[NomBullet].TrajVec.Y += ((((float)rand() / 32767)-0.5)/((Forge[Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID].CharDATA.WeaponSKILL.Accuracy/5000)*500))*(((5000 - QBMSentry[SCRAM].Accuracy) / 5000) * 3);
								Q_Bullet[NomBullet].TrajVec.Z += ((((float)rand() / 32767)-0.5)/((Forge[Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID].CharDATA.WeaponSKILL.Accuracy/5000)*500))*(((5000 - QBMSentry[SCRAM].Accuracy) / 5000) * 3);

								if(fab(Q_Bullet[NomBullet].TrajVec.Y) > fab(Q_Bullet[NomBullet].TrajVec.X))
									{
									major = 1;
									if(fab(Q_Bullet[NomBullet].TrajVec.Z) > fab(Q_Bullet[NomBullet].TrajVec.Y))
										major = 2;
									}
								else
									{
									if(fab(Q_Bullet[NomBullet].TrajVec.Z) > fab(Q_Bullet[NomBullet].TrajVec.X))
										major = 2;
									}
								
								if(fab(Q_Bullet[NomBullet].TrajVec.X)==1.0f || fab(Q_Bullet[NomBullet].TrajVec.Y)==1.0f || fab(Q_Bullet[NomBullet].TrajVec.Z)==1.0f)
									{
									if ((major == 0 && Q_Bullet[NomBullet].TrajVec.X > 0) || major == 1)
										{
											TempVec1.X = 0.0f;
											TempVec1.Y = 0.0f;
											TempVec1.Z = -1.0f;
										}
									else if (major == 0)
										{
											TempVec1.X = 0.0f;
											TempVec1.Y = 0.0f;
											TempVec1.Z = 1.0f;
										}
									else 
										{
											TempVec1.X = Q_Bullet[NomBullet].TrajVec.Z;
											TempVec1.Y = 0.0f;
											TempVec1.Z = 0.0f;
										}
									}
								else geVec3d_CrossProduct(&Axis[major], &Q_Bullet[NomBullet].TrajVec, &TempVec1);

								geVec3d_CrossProduct(&Q_Bullet[NomBullet].TrajVec, &TempVec1, &TempVec2);
								geVec3d_Normalize(&TempVec2);
								geVec3d_Normalize(&TempVec1);
								geVec3d_Inverse(&TempVec1);

								geXForm3d_SetIdentity(&Q_Bullet[NomBullet].AlignMatrix);
								geXForm3d_SetFromLeftUpIn(&Q_Bullet[NomBullet].AlignMatrix, &TempVec1, &TempVec2, &Q_Bullet[NomBullet].TrajVec);
								geXForm3d_Orthonormalize(&Q_Bullet[NomBullet].AlignMatrix);

								geXForm3d_SetYRotation(&rotmat, PI);
								geXForm3d_Multiply(&Q_Bullet[NomBullet].AlignMatrix, &rotmat, &Q_Bullet[NomBullet].AlignMatrix);

								Q_Bullet[NomBullet].ActorID = Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID;

								//Spin
								Q_Bullet[NomBullet].Xrot = 0;
								Q_Bullet[NomBullet].Yrot = 0;
								Q_Bullet[NomBullet].Zrot = 0;

								Q_Bullet[NomBullet].BulletDMG = ((float)QBMSentry[SCRAM].Damage / 5000) * 65;
								Q_Bullet[NomBullet].BulletPWR = ((float)QBMSentry[SCRAM].Power / 5000) * 65;

								Q_Bullet[NomBullet].JDamageLVL = 0;

								Q_Bullet[NomBullet].ZSpin = ((float)rand() / 32767)/3;

								Q_Bullet[NomBullet].Gravity = 0.0001;

								Q_Bullet[NomBullet].Scale = 0.5;
								Q_Bullet[NomBullet].Speed = 250;

								Q_Bullet[NomBullet].Live = 1;

								NomBullet++;

								geSound3D_GetConfig(World, &player.ViewXForm, &QBMSentry[SCRAM].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									//'FIRE' SOUND

								geSound_PlaySoundDef(SoundSys, S_RifleFire[7], Volume, Pan, S_TimeScale, GE_FALSE);
								
								SCRAMJET++;
								}
							}
						}

					jet=0;  //##### Player Check (AvatarID respective) for in range
					while(jet < NomAI)
						{
						if(jet != Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID && Forge[Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID].Team != Forge[jet].Team)
							{
							TESTPosS = Forge[jet].Avatar.ActorXform.Translation;
							TESTPosS.Y += 60;
							TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &QBMSentry[SCRAM].Pos);

							if(TESTShieldDIST < QBMSentry[SCRAM].Range && Forge[jet].HB_Dead == 0)
								{
								if(QBMSentry[SCRAM].FireRateCNT[jet] >= (1 - ((float)QBMSentry[SCRAM].FireRate / 5000)) * 36) QBMSentry[SCRAM].FireRateCNT[jet] = 0;
								else if(QBMSentry[SCRAM].FireRateCNT[jet] > 0) QBMSentry[SCRAM].FireRateCNT[jet] += 1 * TimeScale;

								if(QBMSentry[SCRAM].FireRateCNT[jet] == 0)	//FIRE!
									{
									QBMSentry[SCRAM].FireRateCNT[jet] = 1;

									SCRAMJET = 0;
									while((SCRAMJET < QBMSentry[SCRAM].BulletCNT) && (NomBullet < 398))	//V-- Maximum bullet restriction
										{
										//Trajectory
										Q_Bullet[NomBullet].WorldPos = QBMSentry[SCRAM].Pos;
										Q_Bullet[NomBullet].ORIGPos = QBMSentry[SCRAM].Pos;
										geVec3d_Subtract(&TESTPosS, &QBMSentry[SCRAM].Pos, &Q_Bullet[NomBullet].TrajVec);
										geVec3d_Normalize(&Q_Bullet[NomBullet].TrajVec);
										geVec3d_MA(&Q_Bullet[NomBullet].WorldPos, 4.5, &Q_Bullet[NomBullet].TrajVec, &Q_Bullet[NomBullet].WorldPos);

										Q_Bullet[NomBullet].TrajVec.X += ((((float)rand() / 32767)-0.5)/((Forge[Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID].CharDATA.WeaponSKILL.Accuracy/5000)*500))*(((5000 - QBMSentry[SCRAM].Accuracy) / 5000) * 3);
										Q_Bullet[NomBullet].TrajVec.Y += ((((float)rand() / 32767)-0.5)/((Forge[Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID].CharDATA.WeaponSKILL.Accuracy/5000)*500))*(((5000 - QBMSentry[SCRAM].Accuracy) / 5000) * 3);
										Q_Bullet[NomBullet].TrajVec.Z += ((((float)rand() / 32767)-0.5)/((Forge[Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID].CharDATA.WeaponSKILL.Accuracy/5000)*500))*(((5000 - QBMSentry[SCRAM].Accuracy) / 5000) * 3);

										if(fab(Q_Bullet[NomBullet].TrajVec.Y) > fab(Q_Bullet[NomBullet].TrajVec.X))
											{
											major = 1;
											if(fab(Q_Bullet[NomBullet].TrajVec.Z) > fab(Q_Bullet[NomBullet].TrajVec.Y))
												major = 2;
											}
										else
											{
											if(fab(Q_Bullet[NomBullet].TrajVec.Z) > fab(Q_Bullet[NomBullet].TrajVec.X))
												major = 2;
											}
										
										if(fab(Q_Bullet[NomBullet].TrajVec.X)==1.0f || fab(Q_Bullet[NomBullet].TrajVec.Y)==1.0f || fab(Q_Bullet[NomBullet].TrajVec.Z)==1.0f)
											{
											if ((major == 0 && Q_Bullet[NomBullet].TrajVec.X > 0) || major == 1)
												{
													TempVec1.X = 0.0f;
													TempVec1.Y = 0.0f;
													TempVec1.Z = -1.0f;
												}
											else if (major == 0)
												{
													TempVec1.X = 0.0f;
													TempVec1.Y = 0.0f;
													TempVec1.Z = 1.0f;
												}
											else 
												{
													TempVec1.X = Q_Bullet[NomBullet].TrajVec.Z;
													TempVec1.Y = 0.0f;
													TempVec1.Z = 0.0f;
												}
											}
										else geVec3d_CrossProduct(&Axis[major], &Q_Bullet[NomBullet].TrajVec, &TempVec1);

										geVec3d_CrossProduct(&Q_Bullet[NomBullet].TrajVec, &TempVec1, &TempVec2);
										geVec3d_Normalize(&TempVec2);
										geVec3d_Normalize(&TempVec1);
										geVec3d_Inverse(&TempVec1);

										geXForm3d_SetIdentity(&Q_Bullet[NomBullet].AlignMatrix);
										geXForm3d_SetFromLeftUpIn(&Q_Bullet[NomBullet].AlignMatrix, &TempVec1, &TempVec2, &Q_Bullet[NomBullet].TrajVec);
										geXForm3d_Orthonormalize(&Q_Bullet[NomBullet].AlignMatrix);

										geXForm3d_SetYRotation(&rotmat, PI);
										geXForm3d_Multiply(&Q_Bullet[NomBullet].AlignMatrix, &rotmat, &Q_Bullet[NomBullet].AlignMatrix);

										Q_Bullet[NomBullet].ActorID = Q_EnergyMatrix.QMATBlock[QBMSentry[SCRAM].ZoneID].AVID;

										//Spin
										Q_Bullet[NomBullet].Xrot = 0;
										Q_Bullet[NomBullet].Yrot = 0;
										Q_Bullet[NomBullet].Zrot = 0;

										Q_Bullet[NomBullet].BulletDMG = ((float)QBMSentry[SCRAM].Damage / 5000) * 65;
										Q_Bullet[NomBullet].BulletPWR = ((float)QBMSentry[SCRAM].Power / 5000) * 65;

										Q_Bullet[NomBullet].JDamageLVL = 0;

										Q_Bullet[NomBullet].ZSpin = ((float)rand() / 32767)/3;

										Q_Bullet[NomBullet].Gravity = 0.0001;

										Q_Bullet[NomBullet].Scale = 0.5;
										Q_Bullet[NomBullet].Speed = 250;

										Q_Bullet[NomBullet].Live = 1;

										NomBullet++;

										geSound3D_GetConfig(World, &player.ViewXForm, &QBMSentry[SCRAM].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
										//'FIRE' SOUND

										geSound_PlaySoundDef(SoundSys, S_RifleFire[7], Volume, Pan, S_TimeScale, GE_FALSE);

										SCRAMJET++;
										}
									}
								}
							}

						jet++;
						}
					}
				}


			//##### HANDLE OBJECT DESTRUCTION
			if(QObject[QBMSentry[SCRAM].QObjID].StrengthBANK <= 0)
				{
				QBMSentry[SCRAM].LIVE = 0;
				}
			}

		SCRAM++;
		}


	//####### POWER FLIGHT EFFECTS CONTROL #######

	//#### Increment DUST
	if((player.Mposestate == 16 || player.Mposestate == 15) || (player.Mposestate == 14 && player.attackon == 1) && (player.Aposestate != 200) && (player.Aposestate != 201) && (player.Aposestate != 202) && (player.Aposestate != 203) && (player.Aposestate != 204) && (player.Aposestate != 208))
		{
		if(player.PowerFlightDUSTCNT < 100) player.PowerFlightDUSTCNT += 20 * TimeScale;
		else player.PowerFlightDUSTCNT = 100;
		}

	//########  - Dust Cloud Control -  ########

	if(player.PowerFlightDUSTCNT > 0)
		{
		player.PowerFlightDUSTCNT -= 10;

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].Class == 0)
			{
			player.PowerFlightPOWERF = (((1 - (player.JINK3_PowerFactor/50)) * 1000) + 1);
			}

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].Class == 1)
			{
			player.PowerFlightPOWERF = (((1 - (player.JINK3_WeaponFactor/50)) * 1000) + 1);
			}

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].Class == 2)
			{
			player.PowerFlightPOWERF = (((1 - (player.JINK3_PowerFactor/50)) * 1000) + 1);
			}

		if(player.PowerFlightPOWERF < 0) player.PowerFlightPOWERF *= -1;
		if(player.PowerFlightPOWERF == 0) player.PowerFlightPOWERF = 1;

		//##### Extend Vec Down to Ground
		geXForm3d_GetIn(&playact.ActorXform, &player.Up);

		playact.OldPos = playact.ActorXform.Translation;
		playact.NewPos = playact.ActorXform.Translation;
		playact.OldPos.Y += 20 + (50*(((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*2));
		playact.NewPos.Y += 20 + (50*(((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*2));

		geVec3d_MA(&playact.NewPos, ((player.JINK3_PowerFactor * 7) + 100), &player.Up, &playact.NewPos);

		if(geWorld_Collision(World, NULL, NULL, &playact.OldPos, &playact.NewPos, GE_CONTENTS_SOLID_CLIP, GE_COLLIDE_MODELS, 0xffffffff, NULL, NULL, &playact.Collision))
			{
			player.PowerFlightRADIUS = ((player.JINK3_PowerFactor * 7) + 100) - geVec3d_DistanceBetween(&playact.OldPos, &playact.Collision.Impact);

			helly=0;
			while(helly < (((player.PowerFlightDUSTCNT / player.PowerFlightPOWERF) * 100) * TimeScale))
				{
				//#### Locate The Cloud
				player.JB_PlaceVec.X = (((float)rand() / 32767)-0.5)*2;
				player.JB_PlaceVec.Z = (((float)rand() / 32767)-0.5)*2;
				player.JB_PlaceVec.Y = 0;
				geVec3d_Normalize(&player.JB_PlaceVec);

				player.JB_Origin = playact.Collision.Impact;
				Q_Cloud[NomCloud].CloudPos = playact.Collision.Impact;
				Q_Cloud[NomCloud].CloudPos.Y += 5;
				geVec3d_MA(&Q_Cloud[NomCloud].CloudPos, player.PowerFlightRADIUS, &player.JB_PlaceVec, &Q_Cloud[NomCloud].CloudPos);

				//##### Find Trajectory
				geVec3d_Subtract(&Q_Cloud[NomCloud].CloudPos, &player.JB_Origin, &Q_Cloud[NomCloud].CloudTraVec);

				//##### Register the Cloud
				Q_Cloud[NomCloud].CloudType = 7;
				Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*80)+170;
				Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.75;	//0.23
				Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)*0.03) + (player.JINK3_PowerFactor * 0.01);
				Q_Cloud[NomCloud].CloudMatCNT = 0;
				Q_Cloud[NomCloud].CloudLive = 1;

				NomCloud++;
				if(NomCloud > 4999) NomCloud = 0;

				helly++;
				}
			}
		}


	//####### AI POWER FLIGHT EFFECTS CONTROL #######

	//#### Increment DUST
	SCRAM = 0;
	while(SCRAM < NomAI)
		{
		if((Forge[SCRAM].Mposestate == 16 || Forge[SCRAM].Mposestate == 15) || (Forge[SCRAM].Mposestate == 14 && Forge[SCRAM].attackon == 1) && (Forge[SCRAM].Aposestate != 200) && (Forge[SCRAM].Aposestate != 201) && (Forge[SCRAM].Aposestate != 202) && (Forge[SCRAM].Aposestate != 203) && (Forge[SCRAM].Aposestate != 204) && (Forge[SCRAM].Aposestate != 208))
			{
			if(Forge[SCRAM].PowerFlightDUSTCNT < 100) Forge[SCRAM].PowerFlightDUSTCNT += 20 * TimeScale;
			else Forge[SCRAM].PowerFlightDUSTCNT = 100;
			}

		//########  - Dust Cloud Control -  ########

		if(Forge[SCRAM].PowerFlightDUSTCNT > 0)
			{
			Forge[SCRAM].PowerFlightDUSTCNT -= 10;

			if(Forge[SCRAM].CharDATA.Class == 0)
				{
				Forge[SCRAM].PowerFlightPOWERF = (((1 - (Forge[SCRAM].JINK3_PowerFactor/50)) * 1000) + 1);
				}

			if(Forge[SCRAM].CharDATA.Class == 1)
				{
				Forge[SCRAM].PowerFlightPOWERF = (((1 - (Forge[SCRAM].JINK3_WeaponFactor/50)) * 1000) + 1);
				}

			if(Forge[SCRAM].CharDATA.Class == 2)
				{
				Forge[SCRAM].PowerFlightPOWERF = (((1 - (Forge[SCRAM].JINK3_PowerFactor/50)) * 1000) + 1);
				}


			//##### Extend Vec Down to Ground
			geXForm3d_GetIn(&Forge[SCRAM].Avatar.ActorXform, &Forge[SCRAM].Up);

			Forge[SCRAM].Avatar.OldPos = Forge[SCRAM].Avatar.ActorXform.Translation;
			Forge[SCRAM].Avatar.NewPos = Forge[SCRAM].Avatar.ActorXform.Translation;
			Forge[SCRAM].Avatar.OldPos.Y += 20 + (50*(((Forge[SCRAM].CharDATA.BodySKILL.Height/100)-0.5)*2));
			Forge[SCRAM].Avatar.NewPos.Y += 20 + (50*(((Forge[SCRAM].CharDATA.BodySKILL.Height/100)-0.5)*2));

			geVec3d_MA(&Forge[SCRAM].Avatar.NewPos, ((Forge[SCRAM].JINK3_PowerFactor * 7) + 100), &Forge[SCRAM].Up, &Forge[SCRAM].Avatar.NewPos);

			if(geWorld_Collision(World, NULL, NULL, &Forge[SCRAM].Avatar.OldPos, &Forge[SCRAM].Avatar.NewPos, GE_CONTENTS_SOLID_CLIP, GE_COLLIDE_MODELS, 0xffffffff, NULL, NULL, &Forge[SCRAM].Avatar.Collision))
				{
				Forge[SCRAM].PowerFlightRADIUS = ((Forge[SCRAM].JINK3_PowerFactor * 7) + 100) - geVec3d_DistanceBetween(&Forge[SCRAM].Avatar.OldPos, &Forge[SCRAM].Avatar.Collision.Impact);

				helly=0;
				while(helly < (((Forge[SCRAM].PowerFlightDUSTCNT / Forge[SCRAM].PowerFlightPOWERF) * 100) * TimeScale))
					{
					//#### Locate The Cloud
					Forge[SCRAM].JB_PlaceVec.X = (((float)rand() / 32767)-0.5)*2;
					Forge[SCRAM].JB_PlaceVec.Z = (((float)rand() / 32767)-0.5)*2;
					Forge[SCRAM].JB_PlaceVec.Y = 0;
					geVec3d_Normalize(&Forge[SCRAM].JB_PlaceVec);

					Forge[SCRAM].JB_Origin = Forge[SCRAM].Avatar.Collision.Impact;
					Q_Cloud[NomCloud].CloudPos = Forge[SCRAM].Avatar.Collision.Impact;
					Q_Cloud[NomCloud].CloudPos.Y += 5;
					geVec3d_MA(&Q_Cloud[NomCloud].CloudPos, Forge[SCRAM].PowerFlightRADIUS, &Forge[SCRAM].JB_PlaceVec, &Q_Cloud[NomCloud].CloudPos);

					//##### Find Trajectory
					geVec3d_Subtract(&Q_Cloud[NomCloud].CloudPos, &Forge[SCRAM].JB_Origin, &Q_Cloud[NomCloud].CloudTraVec);

					//##### Register the Cloud
					Q_Cloud[NomCloud].CloudType = 7;
					Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*80)+170;
					Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.75;	//0.23
					Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)*0.03) + (Forge[SCRAM].JINK3_PowerFactor * 0.01);
					Q_Cloud[NomCloud].CloudMatCNT = 0;
					Q_Cloud[NomCloud].CloudLive = 1;

					NomCloud++;
					if(NomCloud > 4999) NomCloud = 0;

					helly++;
					}
				}
			}

		SCRAM++;
		}


	//============== PLAYER AFFECT MATRIX ===============

	//player check
	if(NetworkOption != 1)
		{
		if(player.EnergyArchitect.AffectMatrixON == 1 && player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE != 250)
			{
			geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &player.EnergyArchitect.CurrentPOSMAT);

			//#### DETERMINE POSITION MINS
			player.EnergyArchitect.CurrentPOSX = player.EnergyArchitect.CurrentPOSMAT.Translation.X;
			player.EnergyArchitect.CurrentPOSY = player.EnergyArchitect.CurrentPOSMAT.Translation.Y;
			player.EnergyArchitect.CurrentPOSZ = player.EnergyArchitect.CurrentPOSMAT.Translation.Z;

			player.EnergyArchitect.CurrentPOSX /= Q_EnergyMatrix.GlobalSCALE;
			player.EnergyArchitect.CurrentPOSY /= Q_EnergyMatrix.GlobalSCALE;
			player.EnergyArchitect.CurrentPOSZ /= Q_EnergyMatrix.GlobalSCALE;

			player.EnergyArchitect.CurrentDTESTX = floor( player.EnergyArchitect.CurrentPOSX );
			player.EnergyArchitect.CurrentDTESTY = floor( player.EnergyArchitect.CurrentPOSY );
			player.EnergyArchitect.CurrentDTESTZ = floor( player.EnergyArchitect.CurrentPOSZ );

			player.EnergyArchitect.CurrentMINS.X = player.EnergyArchitect.CurrentDTESTX;
			player.EnergyArchitect.CurrentMINS.Y = player.EnergyArchitect.CurrentDTESTY;
			player.EnergyArchitect.CurrentMINS.Z = player.EnergyArchitect.CurrentDTESTZ;

			player.EnergyArchitect.CurrentMINS.X *= Q_EnergyMatrix.GlobalSCALE;
			player.EnergyArchitect.CurrentMINS.Y *= Q_EnergyMatrix.GlobalSCALE;
			player.EnergyArchitect.CurrentMINS.Z *= Q_EnergyMatrix.GlobalSCALE;

			//#### DETERMINE POSITION MAXS
			player.EnergyArchitect.CurrentPOSX = player.EnergyArchitect.CurrentPOSMAT.Translation.X;
			player.EnergyArchitect.CurrentPOSY = player.EnergyArchitect.CurrentPOSMAT.Translation.Y;
			player.EnergyArchitect.CurrentPOSZ = player.EnergyArchitect.CurrentPOSMAT.Translation.Z;

			player.EnergyArchitect.CurrentPOSX /= Q_EnergyMatrix.GlobalSCALE;
			player.EnergyArchitect.CurrentPOSY /= Q_EnergyMatrix.GlobalSCALE;
			player.EnergyArchitect.CurrentPOSZ /= Q_EnergyMatrix.GlobalSCALE;

			player.EnergyArchitect.CurrentDTESTX = ceil( player.EnergyArchitect.CurrentPOSX );
			player.EnergyArchitect.CurrentDTESTY = ceil( player.EnergyArchitect.CurrentPOSY );
			player.EnergyArchitect.CurrentDTESTZ = ceil( player.EnergyArchitect.CurrentPOSZ );

			player.EnergyArchitect.CurrentMAXS.X = player.EnergyArchitect.CurrentDTESTX;
			player.EnergyArchitect.CurrentMAXS.Y = player.EnergyArchitect.CurrentDTESTY;
			player.EnergyArchitect.CurrentMAXS.Z = player.EnergyArchitect.CurrentDTESTZ;

			player.EnergyArchitect.CurrentMAXS.X *= Q_EnergyMatrix.GlobalSCALE;
			player.EnergyArchitect.CurrentMAXS.Y *= Q_EnergyMatrix.GlobalSCALE;
			player.EnergyArchitect.CurrentMAXS.Z *= Q_EnergyMatrix.GlobalSCALE;

			//#### SEARCH LOOP TO FIND IF CURRENT ZONE IS OWNED
			player.EnergyArchitect.ZoneACTIVE = 0;
			SCRAM=0;
			while(SCRAM < Q_EnergyMatrix.NomQMatBlocks)
				{
				if(Q_EnergyMatrix.QMATBlock[SCRAM].Active == 1)
					{
					if(Q_EnergyMatrix.QMATBlock[SCRAM].Mins.X == player.EnergyArchitect.CurrentMINS.X
						&& Q_EnergyMatrix.QMATBlock[SCRAM].Mins.Y == player.EnergyArchitect.CurrentMINS.Y
						&& Q_EnergyMatrix.QMATBlock[SCRAM].Mins.Z == player.EnergyArchitect.CurrentMINS.Z
						&& Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.X == player.EnergyArchitect.CurrentMAXS.X
						&& Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.Y == player.EnergyArchitect.CurrentMAXS.Y
						&& Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.Z == player.EnergyArchitect.CurrentMAXS.Z)
						{
						player.EnergyArchitect.ZoneACTIVE = 1;
						player.EnergyArchitect.ZoneCHECK = SCRAM;
						}
					}

				SCRAM++;
				}


			//TEST ZONE VALUES

			//==- Check IDs -==
			if(player.EnergyArchitect.ZoneACTIVE == 0)
				{
				//====---- AQUIRE ZONE ----====
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Active = 1;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].AVID = 250;

				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins = player.EnergyArchitect.CurrentMINS;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs = player.EnergyArchitect.CurrentMAXS;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS = player.EnergyArchitect.CurrentMINS;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS = player.EnergyArchitect.CurrentMAXS;

				//### FIND CORE
				geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
				geVec3d_Scale(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, 0.5, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
				geVec3d_Add(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);

				//### EXPAND OUTWARDS MINS AND MAXS
				geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core);
				geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core);
				geVec3d_MA(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS, -(Q_EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS);

				geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core);
				geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core);
				geVec3d_MA(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS, -(Q_EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS);

				//Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = player.EnergyArchitect.ExpandSTRENGTH;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = TestFloatALPHA1;

				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Smoke = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Smoke;

				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[0] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[0];
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[1] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[1];
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[2] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[2];
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[3] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[3];
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[4] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[4];

				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Fog = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Fog;

				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].FogLight = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].FogLight;

				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_TimeScale = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_TimeScale;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Gravity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Gravity;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LifeINC = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LifeINC;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyINC = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_EnergyINC;

				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_IntBoost = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_IntBoost;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyEff = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_EnergyEff;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Height = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Height;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Weight = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Weight;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Strength = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Strength;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Quickness = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Quickness;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Dexterity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Dexterity;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Constitution = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Constitution;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_AggPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_AggPower;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_DefPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_DefPower;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_RArmStr;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LArmStr;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_RLegStr;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LLegStr;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_RArmSnap;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LArmSnap;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_RLegSnap;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LLegSnap;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPAccuracy = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_WEPAccuracy;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPDrawSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_WEPDrawSPD;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPReloadSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_WEPReloadSPD;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPRecoilHR = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_WEPRecoilHR;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKmovespeed = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_JINKmovespeed;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKpower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_JINKpower;
				Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINK3intensity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_JINK3intensity;

				Corner = Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins;
				geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &TempVec1);
				DX = TempVec1;
				DX.Y = 0;
				DX.Z = 0;
				DY = TempVec1;
				DY.X = 0;
				DY.Z = 0;
				DZ = TempVec1;
				DZ.Y = 0;
				DZ.X = 0;
				DrawOrientedBoundBox(World, &Corner, &DX, &DY, &DZ);

				if(Q_EnergyMatrix.NomQMatBlocks < 9998)
					{
					if(NetworkOption == 2)
						{
						Q_EnergyMatrix.NetZONEINC[Q_EnergyMatrix.NomNetZonesINC] = Q_EnergyMatrix.NomQMatBlocks;
						Q_EnergyMatrix.NomNetZonesINC++;
						}

					Q_EnergyMatrix.NomQMatBlocks++;
					}

				geSound3D_GetConfig(World, &player.ViewXForm, &player.EnergyArchitect.CurrentPOSMAT.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
				geSound_PlaySoundDef(SoundSys, S_ZoneCapture, Volume, Pan, S_TimeScale, GE_FALSE);
				}
			else
				{
				if(Q_EnergyMatrix.QMATBlock[player.EnergyArchitect.ZoneCHECK].Active == 0)	//Zone Owned
					{	//Check Ownership
					if(Q_EnergyMatrix.QMATBlock[player.EnergyArchitect.ZoneCHECK].AVID != 250)	//Player Does Not Own this Zone
						{	//TODO add strength of ownership
						//====---- AQUIRE ZONE ----====
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Active = 1;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].AVID = 250;

						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core = player.EnergyArchitect.CurrentPOSMAT.Translation;

						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins = player.EnergyArchitect.CurrentMINS;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs = player.EnergyArchitect.CurrentMAXS;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS = player.EnergyArchitect.CurrentMINS;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS = player.EnergyArchitect.CurrentMAXS;

						//### FIND CORE
						geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
						geVec3d_Scale(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, 0.5, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
						geVec3d_Add(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);

						//### EXPAND OUTWARDS MINS AND MAXS
						geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core);
						geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core);
						geVec3d_MA(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS, -(Q_EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS);

						geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core);
						geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core);
						geVec3d_MA(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS, -(Q_EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS);

						//Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = player.EnergyArchitect.ExpandSTRENGTH;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = TestFloatALPHA1;

						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Smoke = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Smoke;

						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[0] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[0];
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[1] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[1];
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[2] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[2];
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[3] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[3];
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[4] = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Effect[4];

						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Fog = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].Fog;

						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].FogLight = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].FogLight;

						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_TimeScale = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_TimeScale;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Gravity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Gravity;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LifeINC = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LifeINC;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyINC = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_EnergyINC;

						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_IntBoost = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_IntBoost;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyEff = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_EnergyEff;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Height = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Height;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Weight = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Weight;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Strength = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Strength;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Quickness = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Quickness;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Dexterity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Dexterity;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Constitution = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_Constitution;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_AggPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_AggPower;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_DefPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_DefPower;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_RArmStr;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LArmStr;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_RLegStr;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LLegStr;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_RArmSnap;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LArmSnap;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_RLegSnap;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_LLegSnap;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPAccuracy = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_WEPAccuracy;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPDrawSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_WEPDrawSPD;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPReloadSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_WEPReloadSPD;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPRecoilHR = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_WEPRecoilHR;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKmovespeed = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_JINKmovespeed;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKpower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_JINKpower;
						Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINK3intensity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrZCAPTURE].QA_ITEMINC_JINK3intensity;

						Corner = Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins;
						geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &TempVec1);
						DX = TempVec1;
						DX.Y = 0;
						DX.Z = 0;
						DY = TempVec1;
						DY.X = 0;
						DY.Z = 0;
						DZ = TempVec1;
						DZ.Y = 0;
						DZ.X = 0;
						DrawOrientedBoundBox(World, &Corner, &DX, &DY, &DZ);

						if(Q_EnergyMatrix.NomQMatBlocks < 9998)
							{
							if(NetworkOption == 2)
								{
								Q_EnergyMatrix.NetZONEINC[Q_EnergyMatrix.NomNetZonesINC] = Q_EnergyMatrix.NomQMatBlocks;
								Q_EnergyMatrix.NomNetZonesINC++;
								}
							Q_EnergyMatrix.NomQMatBlocks++;
							}

						geSound3D_GetConfig(World, &player.ViewXForm, &player.EnergyArchitect.CurrentPOSMAT.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
						geSound_PlaySoundDef(SoundSys, S_ZoneCapture, Volume, Pan, S_TimeScale, GE_FALSE);
						}
					}
				}
			}
		}


	//============== AVATAR AFFECT MATRIX ===============

	//avatar loop check
	if(NetworkOption != 1)
		{
		SCRAMJET=0;
		while(SCRAMJET < NomAI)
			{
			if(Forge[SCRAMJET].EnergyArchitect.AffectMatrixON == 1 && Forge[SCRAMJET].CharDATA.CurrZCAPTURE != 250)
				{
				geActor_GetBoneTransform(Forge[SCRAMJET].Avatar.Actor, "BIP01 HEAD", &Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT);

				//#### DETERMINE POSITION MINS
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSX = Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT.Translation.X;
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSY = Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT.Translation.Y;
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSZ = Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT.Translation.Z;

				Forge[SCRAMJET].EnergyArchitect.CurrentPOSX /= Q_EnergyMatrix.GlobalSCALE;
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSY /= Q_EnergyMatrix.GlobalSCALE;
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSZ /= Q_EnergyMatrix.GlobalSCALE;

				Forge[SCRAMJET].EnergyArchitect.CurrentDTESTX = floor( Forge[SCRAMJET].EnergyArchitect.CurrentPOSX );
				Forge[SCRAMJET].EnergyArchitect.CurrentDTESTY = floor( Forge[SCRAMJET].EnergyArchitect.CurrentPOSY );
				Forge[SCRAMJET].EnergyArchitect.CurrentDTESTZ = floor( Forge[SCRAMJET].EnergyArchitect.CurrentPOSZ );

				Forge[SCRAMJET].EnergyArchitect.CurrentMINS.X = Forge[SCRAMJET].EnergyArchitect.CurrentDTESTX;
				Forge[SCRAMJET].EnergyArchitect.CurrentMINS.Y = Forge[SCRAMJET].EnergyArchitect.CurrentDTESTY;
				Forge[SCRAMJET].EnergyArchitect.CurrentMINS.Z = Forge[SCRAMJET].EnergyArchitect.CurrentDTESTZ;

				Forge[SCRAMJET].EnergyArchitect.CurrentMINS.X *= Q_EnergyMatrix.GlobalSCALE;
				Forge[SCRAMJET].EnergyArchitect.CurrentMINS.Y *= Q_EnergyMatrix.GlobalSCALE;
				Forge[SCRAMJET].EnergyArchitect.CurrentMINS.Z *= Q_EnergyMatrix.GlobalSCALE;

				//#### DETERMINE POSITION MAXS
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSX = Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT.Translation.X;
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSY = Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT.Translation.Y;
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSZ = Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT.Translation.Z;

				Forge[SCRAMJET].EnergyArchitect.CurrentPOSX /= Q_EnergyMatrix.GlobalSCALE;
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSY /= Q_EnergyMatrix.GlobalSCALE;
				Forge[SCRAMJET].EnergyArchitect.CurrentPOSZ /= Q_EnergyMatrix.GlobalSCALE;

				Forge[SCRAMJET].EnergyArchitect.CurrentDTESTX = ceil( Forge[SCRAMJET].EnergyArchitect.CurrentPOSX );
				Forge[SCRAMJET].EnergyArchitect.CurrentDTESTY = ceil( Forge[SCRAMJET].EnergyArchitect.CurrentPOSY );
				Forge[SCRAMJET].EnergyArchitect.CurrentDTESTZ = ceil( Forge[SCRAMJET].EnergyArchitect.CurrentPOSZ );

				Forge[SCRAMJET].EnergyArchitect.CurrentMAXS.X = Forge[SCRAMJET].EnergyArchitect.CurrentDTESTX;
				Forge[SCRAMJET].EnergyArchitect.CurrentMAXS.Y = Forge[SCRAMJET].EnergyArchitect.CurrentDTESTY;
				Forge[SCRAMJET].EnergyArchitect.CurrentMAXS.Z = Forge[SCRAMJET].EnergyArchitect.CurrentDTESTZ;

				Forge[SCRAMJET].EnergyArchitect.CurrentMAXS.X *= Q_EnergyMatrix.GlobalSCALE;
				Forge[SCRAMJET].EnergyArchitect.CurrentMAXS.Y *= Q_EnergyMatrix.GlobalSCALE;
				Forge[SCRAMJET].EnergyArchitect.CurrentMAXS.Z *= Q_EnergyMatrix.GlobalSCALE;

				//#### SEARCH LOOP TO FIND IF CURRENT ZONE IS OWNED
				Forge[SCRAMJET].EnergyArchitect.ZoneACTIVE = 0;
				SCRAM=0;
				while(SCRAM < Q_EnergyMatrix.NomQMatBlocks)
					{
					if(Q_EnergyMatrix.QMATBlock[SCRAM].Active == 1)
						{
						if(Q_EnergyMatrix.QMATBlock[SCRAM].Mins.X == Forge[SCRAMJET].EnergyArchitect.CurrentMINS.X
							&& Q_EnergyMatrix.QMATBlock[SCRAM].Mins.Y == Forge[SCRAMJET].EnergyArchitect.CurrentMINS.Y
							&& Q_EnergyMatrix.QMATBlock[SCRAM].Mins.Z == Forge[SCRAMJET].EnergyArchitect.CurrentMINS.Z
							&& Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.X == Forge[SCRAMJET].EnergyArchitect.CurrentMAXS.X
							&& Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.Y == Forge[SCRAMJET].EnergyArchitect.CurrentMAXS.Y
							&& Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.Z == Forge[SCRAMJET].EnergyArchitect.CurrentMAXS.Z)
							{
							Forge[SCRAMJET].EnergyArchitect.ZoneACTIVE = 1;
							Forge[SCRAMJET].EnergyArchitect.ZoneCHECK = SCRAM;
							}
						}

					SCRAM++;
					}


				//TEST ZONE VALUES

				//==- Check IDs -==
				if(Forge[SCRAMJET].EnergyArchitect.ZoneACTIVE == 0)
					{
					//====---- AQUIRE ZONE ----====
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Active = 1;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].AVID = 250;

					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins = Forge[SCRAMJET].EnergyArchitect.CurrentMINS;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs = Forge[SCRAMJET].EnergyArchitect.CurrentMAXS;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS = Forge[SCRAMJET].EnergyArchitect.CurrentMINS;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS = Forge[SCRAMJET].EnergyArchitect.CurrentMAXS;

					//### FIND CORE
					geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
					geVec3d_Scale(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, 0.5, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
					geVec3d_Add(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);

					//### EXPAND OUTWARDS MINS AND MAXS
					geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core);
					geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core);
					geVec3d_MA(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS, -(Q_EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS);

					geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core);
					geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core);
					geVec3d_MA(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS, -(Q_EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS);

					//Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = Forge[SCRAMJET].EnergyArchitect.ExpandSTRENGTH;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = TestFloatALPHA1;

					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Smoke = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Smoke;

					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[0] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[0];
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[1] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[1];
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[2] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[2];
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[3] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[3];
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[4] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[4];

					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Fog = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Fog;

					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].FogLight = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].FogLight;

					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_TimeScale = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_TimeScale;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Gravity = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Gravity;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LifeINC = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LifeINC;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyINC = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_EnergyINC;

					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_IntBoost = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_IntBoost;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyEff = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_EnergyEff;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Height = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Height;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Weight = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Weight;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Strength = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Strength;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Quickness = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Quickness;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Dexterity = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Dexterity;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Constitution = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Constitution;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_AggPower = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_AggPower;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_DefPower = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_DefPower;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmStr = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_RArmStr;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmStr = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LArmStr;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegStr = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_RLegStr;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegStr = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LLegStr;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmSnap = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_RArmSnap;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmSnap = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LArmSnap;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegSnap = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_RLegSnap;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegSnap = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LLegSnap;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPAccuracy = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_WEPAccuracy;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPDrawSPD = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_WEPDrawSPD;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPReloadSPD = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_WEPReloadSPD;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPRecoilHR = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_WEPRecoilHR;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKmovespeed = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_JINKmovespeed;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKpower = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_JINKpower;
					Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINK3intensity = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_JINK3intensity;

					Corner = Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins;
					geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &TempVec1);
					DX = TempVec1;
					DX.Y = 0;
					DX.Z = 0;
					DY = TempVec1;
					DY.X = 0;
					DY.Z = 0;
					DZ = TempVec1;
					DZ.Y = 0;
					DZ.X = 0;
					DrawOrientedBoundBox(World, &Corner, &DX, &DY, &DZ);

					if(Q_EnergyMatrix.NomQMatBlocks < 9998)
						{
						if(NetworkOption == 2)
							{
							Q_EnergyMatrix.NetZONEINC[Q_EnergyMatrix.NomNetZonesINC] = Q_EnergyMatrix.NomQMatBlocks;
							Q_EnergyMatrix.NomNetZonesINC++;
							}
						Q_EnergyMatrix.NomQMatBlocks++;
						}

					geSound3D_GetConfig(World, &player.ViewXForm, &Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
					geSound_PlaySoundDef(SoundSys, S_ZoneCapture, Volume, Pan, S_TimeScale, GE_FALSE);
					}
				else
					{
					if(Q_EnergyMatrix.QMATBlock[Forge[SCRAMJET].EnergyArchitect.ZoneCHECK].Active == 0)	//Zone Owned
						{	//Check Ownership
						if(Q_EnergyMatrix.QMATBlock[Forge[SCRAMJET].EnergyArchitect.ZoneCHECK].AVID != 250)	//Player Does Not Own this Zone
							{	//TODO add strength of ownership
							//====---- AQUIRE ZONE ----====
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Active = 1;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].AVID = 250;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core = Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT.Translation;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins = Forge[SCRAMJET].EnergyArchitect.CurrentMINS;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs = Forge[SCRAMJET].EnergyArchitect.CurrentMAXS;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS = Forge[SCRAMJET].EnergyArchitect.CurrentMINS;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS = Forge[SCRAMJET].EnergyArchitect.CurrentMAXS;

							//### FIND CORE
							geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
							geVec3d_Scale(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, 0.5, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
							geVec3d_Add(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);

							//### EXPAND OUTWARDS MINS AND MAXS
							geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core);
							geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core);
							geVec3d_MA(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS, -(Q_EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MINS2Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS);

							geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core);
							geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core);
							geVec3d_MA(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS, -(Q_EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].MAXS2Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS);

							//Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = Forge[SCRAMJET].EnergyArchitect.ExpandSTRENGTH;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = TestFloatALPHA1;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Smoke = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Smoke;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[0] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[0];
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[1] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[1];
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[2] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[2];
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[3] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[3];
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[4] = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Effect[4];

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Fog = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].Fog;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].FogLight = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].FogLight;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_TimeScale = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_TimeScale;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Gravity = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Gravity;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LifeINC = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LifeINC;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyINC = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_EnergyINC;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_IntBoost = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_IntBoost;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyEff = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_EnergyEff;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Height = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Height;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Weight = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Weight;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Strength = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Strength;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Quickness = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Quickness;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Dexterity = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Dexterity;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Constitution = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_Constitution;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_AggPower = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_AggPower;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_DefPower = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_DefPower;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmStr = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_RArmStr;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmStr = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LArmStr;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegStr = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_RLegStr;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegStr = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LLegStr;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmSnap = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_RArmSnap;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmSnap = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LArmSnap;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegSnap = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_RLegSnap;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegSnap = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_LLegSnap;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPAccuracy = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_WEPAccuracy;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPDrawSPD = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_WEPDrawSPD;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPReloadSPD = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_WEPReloadSPD;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPRecoilHR = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_WEPRecoilHR;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKmovespeed = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_JINKmovespeed;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKpower = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_JINKpower;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINK3intensity = Forge[SCRAMJET].CharDATA.ItemDATA[Forge[SCRAMJET].CharDATA.CurrZCAPTURE].QA_ITEMINC_JINK3intensity;

							Corner = Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins;
							geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &TempVec1);
							DX = TempVec1;
							DX.Y = 0;
							DX.Z = 0;
							DY = TempVec1;
							DY.X = 0;
							DY.Z = 0;
							DZ = TempVec1;
							DZ.Y = 0;
							DZ.X = 0;
							DrawOrientedBoundBox(World, &Corner, &DX, &DY, &DZ);

							if(Q_EnergyMatrix.NomQMatBlocks < 9998)
								{
								if(NetworkOption == 2)
									{
									Q_EnergyMatrix.NetZONEINC[Q_EnergyMatrix.NomNetZonesINC] = Q_EnergyMatrix.NomQMatBlocks;
									Q_EnergyMatrix.NomNetZonesINC++;
									}
								Q_EnergyMatrix.NomQMatBlocks++;
								}

							geSound3D_GetConfig(World, &player.ViewXForm, &Forge[SCRAMJET].EnergyArchitect.CurrentPOSMAT.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
							geSound_PlaySoundDef(SoundSys, S_ZoneCapture, Volume, Pan, S_TimeScale, GE_FALSE);
							}
						}
					}
				}

			SCRAMJET++;
			}
		}


	//============== ENERGY MATRIX CONTROL ====== ZONE CONTROL

	//### RESET PLAYER ZONING
	player.EnergyArchitect.ZONINGSTR = player.EnergyArchitect.ZONING;
	player.EnergyArchitect.ZONING = 0;

	helly = 0;
	while(helly < NomAI)
		{
		if(Forge[helly].LIVE == 1)
			{
			Forge[helly].EnergyArchitect.ZONINGSTR = Forge[helly].EnergyArchitect.ZONING;
			Forge[helly].EnergyArchitect.ZONING = 0;
			}
		helly++;
		}


	SCRAM=0;
	while(SCRAM < Q_EnergyMatrix.NomQMatBlocks)
		{
		if(Q_EnergyMatrix.QMATBlock[SCRAM].Active == 1)
			{
			//###### CHECKS TO FIND AVATARS WITHIN BLOCK
			//#### CHECK PLAYER WITHIN
			geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &player.EnergyArchitect.CurrentPOSMAT);

			if((player.EnergyArchitect.CurrentPOSMAT.Translation.X < Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.X
			&& player.EnergyArchitect.CurrentPOSMAT.Translation.X > Q_EnergyMatrix.QMATBlock[SCRAM].Mins.X
			&& player.EnergyArchitect.CurrentPOSMAT.Translation.Y < Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.Y
			&& player.EnergyArchitect.CurrentPOSMAT.Translation.Y > Q_EnergyMatrix.QMATBlock[SCRAM].Mins.Y
			&& player.EnergyArchitect.CurrentPOSMAT.Translation.Z < Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.Z
			&& player.EnergyArchitect.CurrentPOSMAT.Translation.Z > Q_EnergyMatrix.QMATBlock[SCRAM].Mins.Z) && player.HB_Dead == 0)
				{
				if(player.EnergyArchitect.ZONINGSTR == 0 || player.EnergyArchitect.WithinZONEAVID != Q_EnergyMatrix.QMATBlock[SCRAM].AVID)
					{
					//+++ NEW ZONE ENTERED
					Q_DeactivateItems();

					player.EnergyArchitect.ZONING = 1;
					player.EnergyArchitect.WithinZONEAVID = Q_EnergyMatrix.QMATBlock[SCRAM].AVID;
					player.EnergyArchitect.WithinZONE = SCRAM;

					//### RESET FOG
					if(player.EnergyArchitect.FogON == 1)
						{
						player.EnergyArchitect.FogON = 0;
						geWorld_RemoveFog(World, player.EnergyArchitect.Fogobj);
						}

					if(player.EnergyArchitect.FogLightON == 1)
						{
						player.EnergyArchitect.FogLightON = 0;
						geWorld_RemoveLight(World, player.EnergyArchitect.FogLightobj);
						}

					//####### REACTIVATE ITEM ATTRIBUTES
					Q_ActivateItems();
					}

				player.EnergyArchitect.ZONING = 1;
				player.EnergyArchitect.WithinZONEAVID = Q_EnergyMatrix.QMATBlock[SCRAM].AVID;
				player.EnergyArchitect.WithinZONE = SCRAM;

				//+++ PLAYER WITHIN ZONE +++

				//+++ FOG CONTROL +++

				if(Q_EnergyMatrix.QMATBlock[SCRAM].Fog.ON == 1)
					{
					if(player.EnergyArchitect.FogON == 0)
						{
						player.EnergyArchitect.FogON = 1;
						player.EnergyArchitect.Fogobj = geWorld_AddFog(World);

						player.EnergyArchitect.FogColour.r = Q_EnergyMatrix.QMATBlock[SCRAM].Fog.Red;
						player.EnergyArchitect.FogColour.g = Q_EnergyMatrix.QMATBlock[SCRAM].Fog.Green;
						player.EnergyArchitect.FogColour.b = Q_EnergyMatrix.QMATBlock[SCRAM].Fog.Blue;
						player.EnergyArchitect.FogColour.a = Q_EnergyMatrix.QMATBlock[SCRAM].Fog.Alpha;
						}

					geFog_SetAttributes(player.EnergyArchitect.Fogobj, &player.EnergyArchitect.CurrentPOSMAT.Translation, &player.EnergyArchitect.FogColour, 50, Q_EnergyMatrix.QMATBlock[SCRAM].Fog.Scale, 20000);
					}


				if(Q_EnergyMatrix.QMATBlock[SCRAM].FogLight.ON == 1)
					{
					if(player.EnergyArchitect.FogLightON == 0)
						{
						player.EnergyArchitect.FogLightON = 1;
						player.EnergyArchitect.FogLightobj = geWorld_AddLight(World);

						player.EnergyArchitect.FogLightColour.r = Q_EnergyMatrix.QMATBlock[SCRAM].FogLight.Red;
						player.EnergyArchitect.FogLightColour.g = Q_EnergyMatrix.QMATBlock[SCRAM].FogLight.Green;
						player.EnergyArchitect.FogLightColour.b = Q_EnergyMatrix.QMATBlock[SCRAM].FogLight.Blue;
						player.EnergyArchitect.FogLightColour.a = Q_EnergyMatrix.QMATBlock[SCRAM].FogLight.Alpha;
						}
					
					geWorld_SetLightAttributes(World, player.EnergyArchitect.FogLightobj, &player.EnergyArchitect.CurrentPOSMAT.Translation, &player.EnergyArchitect.FogLightColour, Q_EnergyMatrix.QMATBlock[SCRAM].FogLight.Scale, GE_TRUE);
					}


				//+++ GRAVITY CHANGE +++

				if(Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Gravity != 1 && Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Gravity != 0)
					{
					player.GravityAlter += ((Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Gravity - player.GravityAlter) / 5);
					}

				//+++ TIMESCALE ALTERING +++

				if(Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_TimeScale != 1 && Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_TimeScale != 0)
					{
					TimeScaleALTER += ((Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_TimeScale - TimeScaleALTER) / 5);
					}

				//+++ NO WEAPON ZONE +++
				if(Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_NoWEP == 1 && (player.WeaponStatus != 0 && player.WeaponStatus != 7))
					{
					player.attposecnt = 1.0;
					player.WeaponStatus = 7;
					player.blendamount[25] = 0;
					}

				//+++ PLAYER LIFE/ENERGY INCREMENT +++

				player.HB_Energy += Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_EnergyINC;
				if(player.HB_Energy < 0) player.HB_Energy = 0;
				if(player.HB_Energy > player.HB_MaxEnergy) player.HB_Energy = player.HB_MaxEnergy;

				player.HB_Health += (Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LifeINC) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75);
				if(player.HB_Health < 0) player.HB_Health = 0;
				if(player.HB_Health > player.HB_MaxHealth) player.HB_Health = player.HB_MaxHealth;

				//### Experience Storage
				if(Q_EnergyMatrix.QMATBlock[SCRAM].AVID == 250) player.AvatarDMGSTORE[250] += (Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LifeINC) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75);
				else Forge[Q_EnergyMatrix.QMATBlock[SCRAM].AVID].AvatarDMGSTORE[250] += (Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LifeINC) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75);

				if(player.HB_Health <= 0)
					{
					player.HB_Health = 0;

					geSound3D_GetConfig(World, &player.ViewXForm,&player.ViewXForm.Translation,600.0f,2.0f,&Volume,&Pan,&Frequency);

					//'AVATAR DEATH' SOUND
					geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

					if(TimeHole == 0) { TimeHole = 4;
					TimeRotate = 1; }

					player.HB_Dead = 1;

					//### Add Experience to attacking AVATAR
					if(Q_EnergyMatrix.QMATBlock[SCRAM].AVID == 250)
						{
						if((player.AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
							{ player.CDATA->CharDATA[player.CDATA->CurrCHAR].UnusedXP += player.AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000); }
						}
					else
						{
						if((Forge[Q_EnergyMatrix.QMATBlock[SCRAM].AVID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
							{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_EnergyMatrix.QMATBlock[SCRAM].AVID].CDATID].UnusedXP += Forge[Q_EnergyMatrix.QMATBlock[SCRAM].AVID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000); }
						}

					//##### Find KO Owner
					UniversalDMGSTR = 0;

					jet = 0;
					while(jet < NomAI)
						{
						if(Forge[jet].LIVE == 1)
							{
							if(Forge[jet].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
							}
						jet++;
						}

					//##### Check All Active Avatars for XP and KO's
					AVATARCNT = 0;
					while(AVATARCNT < NomAI)
						{
						if(Forge[AVATARCNT].LIVE == 1)
							{
							if((Forge[AVATARCNT].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
								{
								//### Add Experience to attacking AVATAR
								player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[AVATARCNT].AVDATID].CDATID].UnusedXP += Forge[AVATARCNT].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000);

								//### Force Net player to update (Net Play Only)
								if(Forge[AVATARCNT].NETPLAYERFLAG == 1) Netplayer[Forge[AVATARCNT].NetPID].UpdateCHAR = 1;
								}

							if(DeliverKOID == AVATARCNT)
								{
								//### Create Item for attacking Avatar
								Forge[AVATARCNT].DecFinger = ((float)rand() / 32767) * 6;

								if(Forge[AVATARCNT].DecFinger <= 100 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level/1000))
									{
									//### CREATE NEW ITEM
									if(Forge[AVATARCNT].NETPLAYERFLAG == 1)
										{
										Netplayer[Forge[AVATARCNT].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[AVATARCNT].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);

										Netplayer[Forge[AVATARCNT].NetPID].UpdateCHAR = 2;
										}
									else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[AVATARCNT].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);
									}
								}
							}

						AVATARCNT++;
						}

					//####### DEACTIVATE ITEM ATTRIBUTES
					Q_DeactivateItems();

					//### Write out CHARDATA
					WriteNEWCharacterData(player.CDATA);

					//####### REACTIVATE ITEM ATTRIBUTES
					Q_ActivateItems();
					}
				}

			helly = 0;
			while(helly < NomAI)
				{
				if(Forge[helly].LIVE == 1)
					{
					//#### CHECK AI WITHIN
					geActor_GetBoneTransform(Forge[helly].Avatar.Actor, "BIP01 HEAD", &Forge[helly].EnergyArchitect.CurrentPOSMAT);

					if((Forge[helly].EnergyArchitect.CurrentPOSMAT.Translation.X > Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.X
					&& Forge[helly].EnergyArchitect.CurrentPOSMAT.Translation.X < Q_EnergyMatrix.QMATBlock[SCRAM].Mins.X
					&& Forge[helly].EnergyArchitect.CurrentPOSMAT.Translation.Y > Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.Y
					&& Forge[helly].EnergyArchitect.CurrentPOSMAT.Translation.Y < Q_EnergyMatrix.QMATBlock[SCRAM].Mins.Y
					&& Forge[helly].EnergyArchitect.CurrentPOSMAT.Translation.Z > Q_EnergyMatrix.QMATBlock[SCRAM].Maxs.Z
					&& Forge[helly].EnergyArchitect.CurrentPOSMAT.Translation.Z < Q_EnergyMatrix.QMATBlock[SCRAM].Mins.Z) && Forge[helly].HB_Dead == 0)
						{
						if(Forge[helly].EnergyArchitect.ZONINGSTR == 0 || Forge[helly].EnergyArchitect.WithinZONEAVID != Q_EnergyMatrix.QMATBlock[SCRAM].AVID)
							{
							Q_DeactivateItemsAI(helly);

							Forge[helly].EnergyArchitect.ZONING = 1;
							Forge[helly].EnergyArchitect.WithinZONEAVID = Q_EnergyMatrix.QMATBlock[SCRAM].AVID;
							Forge[helly].EnergyArchitect.WithinZONE = SCRAM;

							//####### REACTIVATE ITEM ATTRIBUTES
							Q_ActivateItemsAI(helly);
							}

						Forge[helly].EnergyArchitect.ZONING = 1;
						Forge[helly].EnergyArchitect.WithinZONEAVID = Q_EnergyMatrix.QMATBlock[SCRAM].AVID;
						Forge[helly].EnergyArchitect.WithinZONE = SCRAM;

						//+++ AVATAR WITHIN ZONE +++

						//+++ GRAVITY CHANGE +++

						if(Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Gravity != 1 && Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Gravity != 0)
							{
							Forge[helly].GravityAlter += ((Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Gravity - Forge[helly].GravityAlter) / 5);
							}

						//+++ TIMESCALE ALTERING +++

						if(Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_TimeScale != 1 && Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_TimeScale != 0)
							{
							TimeScaleALTER += ((Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_TimeScale - TimeScaleALTER) / 5);
							}

						//+++ NO WEAPON ZONE +++
						if(Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_NoWEP == 1 && (Forge[helly].WeaponStatus != 0 && Forge[helly].WeaponStatus != 7))
							{
							Forge[helly].attposecnt = 1.0;
							Forge[helly].WeaponStatus = 7;
							Forge[helly].blendamount[25] = 0;
							}


						//+++ AVATAR LIFE/ENERGY INCREMENT +++

						Forge[helly].HB_Energy += Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_EnergyINC;
						if(Forge[helly].HB_Energy < 0) Forge[helly].HB_Energy = 0;
						if(Forge[helly].HB_Energy > Forge[helly].HB_MaxEnergy) Forge[helly].HB_Energy = Forge[helly].HB_MaxEnergy;

						Forge[helly].HB_Health += (Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LifeINC) * ((1 - (Forge[helly].CharDATA.BodySKILL.Constitution / 400)) + 0.75);
						if(Forge[helly].HB_Health < 0) Forge[helly].HB_Health = 0;
						if(Forge[helly].HB_Health > Forge[helly].HB_MaxHealth) Forge[helly].HB_Health = Forge[helly].HB_MaxHealth;

						//### Experience Storage
						if(Q_EnergyMatrix.QMATBlock[SCRAM].AVID == 250) player.AvatarDMGSTORE[helly] += (Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LifeINC) * ((1 - (Forge[helly].CharDATA.BodySKILL.Constitution / 400)) + 0.75);
						else Forge[Q_EnergyMatrix.QMATBlock[SCRAM].AVID].AvatarDMGSTORE[helly] += (Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LifeINC) * ((1 - (Forge[helly].CharDATA.BodySKILL.Constitution / 400)) + 0.75);

								//#### Avatar DEATH
						if(Q_EnergyMatrix.QMATBlock[SCRAM].AVID == 250)
							{
							if(Forge[helly].HB_Health <= 0)
								{
								Forge[helly].HB_Health = 0;

								geSound3D_GetConfig(World, &player.ViewXForm, &player.ViewXForm.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);

								//'AVATAR DEATH' SOUND
								geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
								{ TimeHole = 4;	TimeRotate = 1; }

								Forge[helly].HB_Dead = 1;

								if((player.AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000)) > 0)
									{
									//### Add Experience to attacking AVATAR
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].UnusedXP += player.AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000);

									player.MSG_XPON = 1;
									player.MSG_XPInit = 0;
									player.MSG_XPScreenDIST = 0;
									player.MSG_XPScreenDistINC = 50;
									player.MSG_XPScreenDIR = 0;
									player.MSG_XpInc = player.AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000);
									}

								//##### Find KO Owner
								UniversalDMGSTR = 0;
								
								if(player.AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

								jet = 0;
								while(jet < NomAI)
									{
									if(Forge[jet].LIVE == 1)
										{
										if(Forge[jet].AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
										}
									jet++;
									}

								if(DeliverKOID == 250)
									{
									//### Create Item for attacking Avatar
									player.DecFinger = ((float)rand() / 32767) * 6;

									if((player.DecFinger <= 100 * (Forge[helly].CharDATA.Level/1000)))
										{
										player.MSG_ItemREF = Q_CreatePlayerItem(Forge[helly].CharDATA.Level);
										player.MSG_ITEMON = 1;
										player.MSG_ITEMInit = 0;
										player.MSG_ITEMScreenDIST = 800;
										player.MSG_ITEMScreenDistINC = 17;
										player.MSG_ITEMScreenDIR = 0;
										}

									//SET Knockout
									KnockOutFLAG = 1;
									KnockOutTIMER = 0;
									KnockOutCNT = 0;
									KnockOutINIT = 0;
									KnockOutHEIGHT = 0;
									}


								//##### Check All Active Avatars for XP and KO's
								SCRAMJET = 0;
								while(SCRAMJET < NomAI)
									{
									if(Forge[SCRAMJET].LIVE == 1)
										{
										if((Forge[SCRAMJET].AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000)) > 0)
											{
											//### Add Experience to attacking AVATAR
											player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAMJET].AVDATID].CDATID].UnusedXP += Forge[SCRAMJET].AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000);

											//### Force Net player to update (Net Play Only)
											if(Forge[SCRAMJET].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAMJET].NetPID].UpdateCHAR = 1;
											}

										if(DeliverKOID == SCRAMJET)
											{
											//### Create Item for attacking Avatar
											Forge[SCRAMJET].DecFinger = ((float)rand() / 32767) * 6;

											if(Forge[SCRAMJET].DecFinger <= 100 * (Forge[helly].CharDATA.Level/1000))
												{
												//### CREATE NEW ITEM
												if(Forge[SCRAMJET].NETPLAYERFLAG == 1)
													{
													Netplayer[Forge[SCRAMJET].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAMJET].AVDATID].CDATID,Forge[helly].CharDATA.Level);

													Netplayer[Forge[SCRAMJET].NetPID].UpdateCHAR = 2;
													}
												else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAMJET].AVDATID].CDATID,Forge[helly].CharDATA.Level);
												}
											}
										}

									SCRAMJET++;
									}

								//####### DEACTIVATE ITEM ATTRIBUTES
								Q_DeactivateItems();

								//### Write out CHARDATA
								WriteNEWCharacterData(player.CDATA);

								//####### REACTIVATE ITEM ATTRIBUTES
								Q_ActivateItems();
								}
							}
						else
							{
							if(Forge[helly].HB_Health <= 0)
								{
								Forge[helly].HB_Health = 0;

								geSound3D_GetConfig(World, &player.ViewXForm, &player.ViewXForm.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);

								//'AVATAR DEATH' SOUND
								geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
								{ TimeHole = 4;	TimeRotate = 1; }

								Forge[helly].HB_Dead = 1;

								//### Add XP to avatar
								if((Forge[Q_EnergyMatrix.QMATBlock[SCRAM].AVID].AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000)) > 0)
									{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_EnergyMatrix.QMATBlock[SCRAM].AVID].CDATID].UnusedXP += Forge[Q_EnergyMatrix.QMATBlock[SCRAM].AVID].AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000); }

								//##### Find KO Owner
								UniversalDMGSTR = 0;
								
								if(Forge[Q_EnergyMatrix.QMATBlock[SCRAM].AVID].AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

								jet = 0;
								while(jet < NomAI)
									{
									if(Forge[jet].LIVE == 1)
										{
										if(Forge[jet].AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
										}
									jet++;
									}

								if(DeliverKOID == 250)
									{
									//### Create Item for attacking Avatar
									player.DecFinger = ((float)rand() / 32767) * 6;

									if(player.DecFinger <= 100 * (Forge[helly].CharDATA.Level/1000))
										{
										player.MSG_ItemREF = Q_CreatePlayerItem(Forge[helly].CharDATA.Level);
										player.MSG_ITEMON = 1;
										player.MSG_ITEMInit = 0;
										player.MSG_ITEMScreenDIST = 800;
										player.MSG_ITEMScreenDistINC = 17;
										player.MSG_ITEMScreenDIR = 0;
										}

									//SET Knockout
									KnockOutFLAG = 1;
									KnockOutTIMER = 0;
									KnockOutCNT = 0;
									KnockOutINIT = 0;
									KnockOutHEIGHT = 0;
									}

								//##### Check All Active Avatars for XP and KO's
								SCRAMJET = 0;
								while(SCRAMJET < NomAI)
									{
									if(Forge[SCRAMJET].LIVE == 1)
										{
										if((Forge[SCRAMJET].AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000)) > 0)
											{
											//### Add Experience to attacking AVATAR
											player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAMJET].AVDATID].CDATID].UnusedXP += Forge[SCRAMJET].AvatarDMGSTORE[helly] * (10 * Forge[helly].CharDATA.Level / 1000);

											//### Force Net player to update (Net Play Only)
											if(Forge[SCRAMJET].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAMJET].NetPID].UpdateCHAR = 1;
											}

										if(DeliverKOID == SCRAMJET)
											{
											//### Create Item for attacking Avatar
											Forge[SCRAMJET].DecFinger = ((float)rand() / 32767) * 6;

											if(Forge[SCRAMJET].DecFinger <= 100 * (Forge[helly].CharDATA.Level/1000))
												{
												//### CREATE NEW ITEM
												if(Forge[SCRAMJET].NETPLAYERFLAG == 1)
													{
													Netplayer[Forge[SCRAMJET].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAMJET].AVDATID].CDATID,Forge[helly].CharDATA.Level);

													Netplayer[Forge[SCRAMJET].NetPID].UpdateCHAR = 2;
													}
												else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAMJET].AVDATID].CDATID,Forge[helly].CharDATA.Level);
												}
											}
										}

									SCRAMJET++;
									}

								//####### DEACTIVATE ITEM ATTRIBUTES
								Q_DeactivateItems();

								//### Write out CHARDATA
								WriteNEWCharacterData(player.CDATA);

								//####### REACTIVATE ITEM ATTRIBUTES
								Q_ActivateItems();
								}
							}
						}
					}
				helly++;
				}


			//+++ SMOKE GEN +++
			if(Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.ON == 1)
				{
				Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.CNT += (1 * TimeScale);

				if(Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.CNT > Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.TIMER)
					{
					Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.CNT = 0;

					TempInt1 = Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.TYPE;

					switch(TempInt1)
						{
						case 0:	//TYPE ZERO
							{
							aero = 0;
							while(aero < Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.INT)
								{
								Q_Cloud[NomCloud].CloudType = 12;

								Q_Cloud[NomCloud].CloudPos = Q_EnergyMatrix.QMATBlock[SCRAM].Mins;
								
								Q_Cloud[NomCloud].CloudPos.X += ((float)rand() / 32767)*Q_EnergyMatrix.GlobalSCALE;
								Q_Cloud[NomCloud].CloudPos.Y += ((float)rand() / 32767)*Q_EnergyMatrix.GlobalSCALE;
								Q_Cloud[NomCloud].CloudPos.Z += ((float)rand() / 32767)*Q_EnergyMatrix.GlobalSCALE;

								Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.Alpha)+(Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.Alpha/2);
								Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.Scale;

								geVec3d_Clear(&Q_Cloud[NomCloud].CloudTraVec);

								Q_Cloud[NomCloud].CloudTraVec.X += (((float)rand() / 32767)-0.5)*0.1;
								Q_Cloud[NomCloud].CloudTraVec.Y += ((float)rand() / 32767) * -1;
								Q_Cloud[NomCloud].CloudTraVec.Z += (((float)rand() / 32767)-0.5)*0.1;

								Q_Cloud[NomCloud].CloudRED = Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.Red;
								Q_Cloud[NomCloud].CloudBLUE = Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.Blue;
								Q_Cloud[NomCloud].CloudGREEN = Q_EnergyMatrix.QMATBlock[SCRAM].Smoke.Green;

								Q_Cloud[NomCloud].CloudMins = Q_EnergyMatrix.QMATBlock[SCRAM].Mins;
								Q_Cloud[NomCloud].CloudMaxs = Q_EnergyMatrix.QMATBlock[SCRAM].Maxs;

								Q_Cloud[NomCloud].CloudSpeed = ((float)rand() / 32767)*3;

								Q_Cloud[NomCloud].CloudALPHAINC = (((float)rand() / 32767)*13) + 6;

								Q_Cloud[NomCloud].CloudSCALEINC = (((float)rand() / 32767)*0.075) + 0.03;

								Q_Cloud[NomCloud].CloudGRAVITY = (((float)rand() / 32767)*0.5) + 0.1;

								Q_Cloud[NomCloud].CloudMatCNT = 0;

								Q_Cloud[NomCloud].CloudLive = 1;

								NomCloud++;
								if(NomCloud > 4999) NomCloud = 0;
								aero++;
								}

							}break;
						}
					}
				}


			//#### ZONE WALL FLICKER
			Q_EnergyMatrix.QMATBlock[SCRAM].WallCNT += (((float)rand() / 32767)*10);

			if(Q_EnergyMatrix.QMATBlock[SCRAM].WallCNT > 500)
				{
				Q_EnergyMatrix.QMATBlock[SCRAM].WallCNT = 0;

				Corner = Q_EnergyMatrix.QMATBlock[SCRAM].Mins;
				geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[SCRAM].Maxs, &Q_EnergyMatrix.QMATBlock[SCRAM].Mins, &TempVec1);
				DX = TempVec1;
				DX.Y = 0;
				DX.Z = 0;
				DY = TempVec1;
				DY.X = 0;
				DY.Z = 0;
				DZ = TempVec1;
				DZ.Y = 0;
				DZ.X = 0;
				DrawOrientedBoundBox(World, &Corner, &DX, &DY, &DZ);
				}


			//+++ EFFECTS GEN +++
			/*aero = 0;
			while(aero < 5)
				{
				if(Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].ON == 1)
					{
					Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].CNT += (1 * TimeScale);

					if(Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].CNT > Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].TIMER)
						{
						Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].CNT = 0;

						TempInt1 = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].TYPE;

						switch(TempInt1)
							{
							case 0:	//TYPE ZERO
								{
								jet=0;
								while(jet < (Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].INT*TimeScale))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
									Q_PntSprite[NomPntSprite].Scale = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].Scale;		//0.025f//0.002f
									Q_PntSprite[NomPntSprite].PartType = 60;

									Q_PntSprite[NomPntSprite].IR = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].Red;
									Q_PntSprite[NomPntSprite].IG = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].Green;
									Q_PntSprite[NomPntSprite].IB = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[aero].Blue;

									Q_PntSprite[NomPntSprite].Alpha = 255;
									Q_PntSprite[NomPntSprite].Speed = 3;
									Q_PntSprite[NomPntSprite].Pos = Q_EnergyMatrix.QMATBlock[SCRAM].Mins;

									//Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5)* 5;
									//Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

									Q_PntSprite[NomPntSprite].Pos.X += ((float)rand() / 32767)*Q_EnergyMatrix.GlobalSCALE;
									Q_PntSprite[NomPntSprite].Pos.Y += ((float)rand() / 32767)*Q_EnergyMatrix.GlobalSCALE;
									Q_PntSprite[NomPntSprite].Pos.Z += ((float)rand() / 32767)*Q_EnergyMatrix.GlobalSCALE;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									if(NomPntSprite > 499) NomPntSprite = 0;
									jet++;
									}

								}break;
							}
						}
					}

				aero++;
				}*/


			//#### ---==== ENERGY EXPANDING TECH ====--- #######

			//### FIND CORE
			geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[SCRAM].Maxs, &Q_EnergyMatrix.QMATBlock[SCRAM].Mins, &Q_EnergyMatrix.QMATBlock[SCRAM].Core);
			geVec3d_Scale(&Q_EnergyMatrix.QMATBlock[SCRAM].Core, 0.5, &Q_EnergyMatrix.QMATBlock[SCRAM].Core);
			geVec3d_Add(&Q_EnergyMatrix.QMATBlock[SCRAM].Mins, &Q_EnergyMatrix.QMATBlock[SCRAM].Core, &Q_EnergyMatrix.QMATBlock[SCRAM].Core);

			//### EXPAND OUTWARDS MINS AND MAXS
			geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMINS, &Q_EnergyMatrix.QMATBlock[SCRAM].Core, &Q_EnergyMatrix.QMATBlock[SCRAM].MINS2Core);
			geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[SCRAM].MINS2Core);
			geVec3d_MA(&Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMINS, Q_EnergyMatrix.QMATBlock[SCRAM].ExpandSTRENGTH, &Q_EnergyMatrix.QMATBlock[SCRAM].MINS2Core, &Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMINS);

			geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMAXS, &Q_EnergyMatrix.QMATBlock[SCRAM].Core, &Q_EnergyMatrix.QMATBlock[SCRAM].MAXS2Core);
			geVec3d_Normalize(&Q_EnergyMatrix.QMATBlock[SCRAM].MAXS2Core);
			geVec3d_MA(&Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMAXS, Q_EnergyMatrix.QMATBlock[SCRAM].ExpandSTRENGTH, &Q_EnergyMatrix.QMATBlock[SCRAM].MAXS2Core, &Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMAXS);

			Q_EnergyMatrix.QMATBlock[SCRAM].ExpandSTRENGTH /= TestFloatALPHA2;

			//#### OBTAIN CORRECT 3D PARENTHESIS

			//#### POSITION MIN-MINS
			Q_EnergyMatrix.CurrentPOSX = Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMINS.X;
			Q_EnergyMatrix.CurrentPOSY = Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMINS.Y;
			Q_EnergyMatrix.CurrentPOSZ = Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMINS.Z;

			Q_EnergyMatrix.CurrentPOSX /= Q_EnergyMatrix.GlobalSCALE;
			Q_EnergyMatrix.CurrentPOSY /= Q_EnergyMatrix.GlobalSCALE;
			Q_EnergyMatrix.CurrentPOSZ /= Q_EnergyMatrix.GlobalSCALE;

			Q_EnergyMatrix.CurrentDTESTX = floor( Q_EnergyMatrix.CurrentPOSX );
			Q_EnergyMatrix.CurrentDTESTY = floor( Q_EnergyMatrix.CurrentPOSY );
			Q_EnergyMatrix.CurrentDTESTZ = floor( Q_EnergyMatrix.CurrentPOSZ );

			Q_EnergyMatrix.CurrentMINS.X = Q_EnergyMatrix.CurrentDTESTX;
			Q_EnergyMatrix.CurrentMINS.Y = Q_EnergyMatrix.CurrentDTESTY;
			Q_EnergyMatrix.CurrentMINS.Z = Q_EnergyMatrix.CurrentDTESTZ;

			Q_EnergyMatrix.ActualMINS.X = Q_EnergyMatrix.CurrentMINS.X * Q_EnergyMatrix.GlobalSCALE;
			Q_EnergyMatrix.ActualMINS.Y = Q_EnergyMatrix.CurrentMINS.Y * Q_EnergyMatrix.GlobalSCALE;
			Q_EnergyMatrix.ActualMINS.Z = Q_EnergyMatrix.CurrentMINS.Z * Q_EnergyMatrix.GlobalSCALE;


			//#### POSITION MAX-MAXS
			Q_EnergyMatrix.CurrentPOSX = Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMAXS.X;
			Q_EnergyMatrix.CurrentPOSY = Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMAXS.Y;
			Q_EnergyMatrix.CurrentPOSZ = Q_EnergyMatrix.QMATBlock[SCRAM].ExpandMAXS.Z;

			Q_EnergyMatrix.CurrentPOSX /= Q_EnergyMatrix.GlobalSCALE;
			Q_EnergyMatrix.CurrentPOSY /= Q_EnergyMatrix.GlobalSCALE;
			Q_EnergyMatrix.CurrentPOSZ /= Q_EnergyMatrix.GlobalSCALE;

			Q_EnergyMatrix.CurrentDTESTX = ceil( Q_EnergyMatrix.CurrentPOSX );
			Q_EnergyMatrix.CurrentDTESTY = ceil( Q_EnergyMatrix.CurrentPOSY );
			Q_EnergyMatrix.CurrentDTESTZ = ceil( Q_EnergyMatrix.CurrentPOSZ );

			Q_EnergyMatrix.CurrentMAXS.X = Q_EnergyMatrix.CurrentDTESTX;
			Q_EnergyMatrix.CurrentMAXS.Y = Q_EnergyMatrix.CurrentDTESTY;
			Q_EnergyMatrix.CurrentMAXS.Z = Q_EnergyMatrix.CurrentDTESTZ;

			Q_EnergyMatrix.ActualMAXS.X = Q_EnergyMatrix.CurrentMAXS.X * Q_EnergyMatrix.GlobalSCALE;
			Q_EnergyMatrix.ActualMAXS.Y = Q_EnergyMatrix.CurrentMAXS.Y * Q_EnergyMatrix.GlobalSCALE;
			Q_EnergyMatrix.ActualMAXS.Z = Q_EnergyMatrix.CurrentMAXS.Z * Q_EnergyMatrix.GlobalSCALE;

			//#### Shadow Increments
			//Q_EnergyMatrix.ShadINCX = (Q_EnergyMatrix.ActualMAXS.X - Q_EnergyMatrix.ActualMINS.X);
			//Q_EnergyMatrix.ShadINCY = (Q_EnergyMatrix.ActualMAXS.Y - Q_EnergyMatrix.ActualMINS.Y);
			//Q_EnergyMatrix.ShadINCZ = (Q_EnergyMatrix.ActualMAXS.Z - Q_EnergyMatrix.ActualMINS.Z);


			//### SHADOW ZONE LOOP ITERATION LEVEL ONE
			SHADOWY = Q_EnergyMatrix.ActualMINS.Y;
			while(SHADOWY < Q_EnergyMatrix.ActualMAXS.Y)
				{
				//### SHADOW ZONE LOOP ITERATION LEVEL TWO
				SHADOWZ = Q_EnergyMatrix.ActualMINS.Z;
				while(SHADOWZ < Q_EnergyMatrix.ActualMAXS.Z)
					{
					//### SHADOW ZONE LOOP ITERATION LEVEL THREE
					SHADOWX = Q_EnergyMatrix.ActualMINS.X;
					while(SHADOWX < Q_EnergyMatrix.ActualMAXS.X)
						{
						//##### CONSTRUCT MINS AND MAXS
						Q_EnergyMatrix.ConstructMINS.X = SHADOWX;
						Q_EnergyMatrix.ConstructMINS.Y = SHADOWY;
						Q_EnergyMatrix.ConstructMINS.Z = SHADOWZ;

						Q_EnergyMatrix.ConstructMAXS.X = SHADOWX + Q_EnergyMatrix.GlobalSCALE;
						Q_EnergyMatrix.ConstructMAXS.Y = SHADOWY + Q_EnergyMatrix.GlobalSCALE;
						Q_EnergyMatrix.ConstructMAXS.Z = SHADOWZ + Q_EnergyMatrix.GlobalSCALE;

						//ZONE CHECK ########
						//#### SEARCH LOOP TO FIND IF CURRENT ZONE IS OWNED
						Q_EnergyMatrix.ZoneACTIVE = 0;
						SCRAMJET=0;
						while(SCRAMJET < Q_EnergyMatrix.NomQMatBlocks)
							{
							if(Q_EnergyMatrix.QMATBlock[SCRAMJET].Active == 1)
								{
								if(Q_EnergyMatrix.QMATBlock[SCRAMJET].Mins.X == Q_EnergyMatrix.ConstructMINS.X
									&& Q_EnergyMatrix.QMATBlock[SCRAMJET].Mins.Y == Q_EnergyMatrix.ConstructMINS.Y
									&& Q_EnergyMatrix.QMATBlock[SCRAMJET].Mins.Z == Q_EnergyMatrix.ConstructMINS.Z
									&& Q_EnergyMatrix.QMATBlock[SCRAMJET].Maxs.X == Q_EnergyMatrix.ConstructMAXS.X
									&& Q_EnergyMatrix.QMATBlock[SCRAMJET].Maxs.Y == Q_EnergyMatrix.ConstructMAXS.Y
									&& Q_EnergyMatrix.QMATBlock[SCRAMJET].Maxs.Z == Q_EnergyMatrix.ConstructMAXS.Z)
									{
									Q_EnergyMatrix.ZoneACTIVE = 1;
									Q_EnergyMatrix.ZoneCHECK = SCRAMJET;
									}
								}

							SCRAMJET++;
							}

						//TEST ZONE VALUES

						//==- Check IDs -==
						if(Q_EnergyMatrix.ZoneACTIVE == 0)
							{
							//====---- AQUIRE ZONE ----====
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Active = 1;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].AVID = 250;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins = Q_EnergyMatrix.ConstructMINS;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs = Q_EnergyMatrix.ConstructMAXS;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS = Q_EnergyMatrix.ConstructMINS;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS = Q_EnergyMatrix.ConstructMAXS;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = 0;//(((Q_EnergyMatrix.QMATBlock[SCRAM].ExpandSTRENGTH - 1) / TestFloatALPHA2) + 1);

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Smoke = Q_EnergyMatrix.QMATBlock[SCRAM].Smoke;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[0] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[0];
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[1] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[1];
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[2] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[2];
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[3] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[3];
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[4] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[4];

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Fog = Q_EnergyMatrix.QMATBlock[SCRAM].Fog;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].FogLight = Q_EnergyMatrix.QMATBlock[SCRAM].FogLight;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_TimeScale = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_TimeScale;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Gravity = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Gravity;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LifeINC = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LifeINC;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyINC = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_EnergyINC;

							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_IntBoost = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_IntBoost;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyEff = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_EnergyEff;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Height = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Height;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Weight = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Weight;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Strength = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Strength;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Quickness = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Quickness;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Dexterity = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Dexterity;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Constitution = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Constitution;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_AggPower = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_AggPower;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_DefPower = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_DefPower;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmStr = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_RArmStr;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmStr = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LArmStr;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegStr = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_RLegStr;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegStr = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LLegStr;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmSnap = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_RArmSnap;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmSnap = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LArmSnap;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegSnap = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_RLegSnap;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegSnap = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LLegSnap;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPAccuracy = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_WEPAccuracy;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPDrawSPD = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_WEPDrawSPD;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPReloadSPD = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_WEPReloadSPD;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPRecoilHR = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_WEPRecoilHR;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKmovespeed = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_JINKmovespeed;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKpower = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_JINKpower;
							Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINK3intensity = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_JINK3intensity;

							Corner = Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins;
							geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &TempVec1);
							DX = TempVec1;
							DX.Y = 0;
							DX.Z = 0;
							DY = TempVec1;
							DY.X = 0;
							DY.Z = 0;
							DZ = TempVec1;
							DZ.Y = 0;
							DZ.X = 0;
							DrawOrientedBoundBox(World, &Corner, &DX, &DY, &DZ);

							if(Q_EnergyMatrix.NomQMatBlocks < 9998) Q_EnergyMatrix.NomQMatBlocks++;

							//### FIND CORE
							geVec3d_Subtract(&Q_EnergyMatrix.ConstructMAXS, &Q_EnergyMatrix.ConstructMINS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
							geVec3d_Scale(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, 0.5, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
							geVec3d_Add(&Q_EnergyMatrix.ConstructMINS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);

							geSound3D_GetConfig(World, &player.ViewXForm, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
							geSound_PlaySoundDef(SoundSys, S_ZoneCapture, Volume, Pan, S_TimeScale, GE_FALSE);
							}
						else
							{
							if(Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.ZoneCHECK].Active == 0)	//Zone Owned
								{	//Check Ownership
								if(Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.ZoneCHECK].AVID != 250)	//Player Does Not Own this Zone
									{	//TODO add strength of ownership
									//====---- AQUIRE ZONE ----====
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Active = 1;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].AVID = 250;

									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins = Q_EnergyMatrix.ConstructMINS;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs = Q_EnergyMatrix.ConstructMAXS;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMINS = Q_EnergyMatrix.ConstructMINS;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandMAXS = Q_EnergyMatrix.ConstructMAXS;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = 0;//(((Q_EnergyMatrix.QMATBlock[SCRAM].ExpandSTRENGTH - 1) / TestFloatALPHA2) + 1);

									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Smoke = Q_EnergyMatrix.QMATBlock[SCRAM].Smoke;

									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[0] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[0];
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[1] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[1];
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[2] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[2];
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[3] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[3];
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Effect[4] = Q_EnergyMatrix.QMATBlock[SCRAM].Effect[4];

									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Fog = Q_EnergyMatrix.QMATBlock[SCRAM].Fog;

									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].FogLight = Q_EnergyMatrix.QMATBlock[SCRAM].FogLight;

									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_TimeScale = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_TimeScale;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Gravity = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Gravity;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LifeINC = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LifeINC;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyINC = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_EnergyINC;

									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_IntBoost = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_IntBoost;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyEff = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_EnergyEff;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Height = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Height;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Weight = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Weight;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Strength = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Strength;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Quickness = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Quickness;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Dexterity = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Dexterity;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_Constitution = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_Constitution;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_AggPower = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_AggPower;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_DefPower = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_DefPower;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmStr = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_RArmStr;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmStr = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LArmStr;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegStr = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_RLegStr;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegStr = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LLegStr;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RArmSnap = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_RArmSnap;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LArmSnap = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LArmSnap;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_RLegSnap = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_RLegSnap;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_LLegSnap = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_LLegSnap;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPAccuracy = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_WEPAccuracy;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPDrawSPD = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_WEPDrawSPD;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPReloadSPD = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_WEPReloadSPD;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_WEPRecoilHR = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_WEPRecoilHR;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKmovespeed = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_JINKmovespeed;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINKpower = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_JINKpower;
									Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].ZONEINC_JINK3intensity = Q_EnergyMatrix.QMATBlock[SCRAM].ZONEINC_JINK3intensity;

									Corner = Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins;
									geVec3d_Subtract(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Mins, &TempVec1);
									DX = TempVec1;
									DX.Y = 0;
									DX.Z = 0;
									DY = TempVec1;
									DY.X = 0;
									DY.Z = 0;
									DZ = TempVec1;
									DZ.Y = 0;
									DZ.X = 0;
									DrawOrientedBoundBox(World, &Corner, &DX, &DY, &DZ);

									if(Q_EnergyMatrix.NomQMatBlocks < 9998) Q_EnergyMatrix.NomQMatBlocks++;

									//### FIND CORE
									geVec3d_Subtract(&Q_EnergyMatrix.ConstructMAXS, &Q_EnergyMatrix.ConstructMINS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
									geVec3d_Scale(&Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, 0.5, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);
									geVec3d_Add(&Q_EnergyMatrix.ConstructMINS, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core);

									geSound3D_GetConfig(World, &player.ViewXForm, &Q_EnergyMatrix.QMATBlock[Q_EnergyMatrix.NomQMatBlocks].Core, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_ZoneCapture, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								}
							}

						SHADOWX += Q_EnergyMatrix.GlobalSCALE;
						}
					SHADOWZ += Q_EnergyMatrix.GlobalSCALE;
					}
				SHADOWY += Q_EnergyMatrix.GlobalSCALE;
				}

			}
		SCRAM++;
		}


	//##### CHECK FOR MOVING OUTSIDE ALL ZONES

	if(player.EnergyArchitect.ZONINGSTR == 1 && player.EnergyArchitect.ZONING == 0)
		{
		player.EnergyArchitect.ZONING = 1;

		Q_DeactivateItems();

		player.EnergyArchitect.ZONING = 0;

		Q_ActivateItems();
		}

	//##### GRAVITY RESETING +++ NON ZONING

	if(player.EnergyArchitect.ZONING == 0 || Q_EnergyMatrix.QMATBlock[player.EnergyArchitect.WithinZONE].ZONEINC_Gravity == 1)
		{
		player.GravityAlter += ((1 - player.GravityAlter) / 5);
		}


	helly = 0;
	while(helly < NomAI)
		{
		if(Forge[helly].LIVE == 1)
			{
			if(Forge[helly].EnergyArchitect.ZONINGSTR == 1 && Forge[helly].EnergyArchitect.ZONING == 0)
				{
				Forge[helly].EnergyArchitect.ZONING = 1;

				Q_DeactivateItemsAI(helly);

				Forge[helly].EnergyArchitect.ZONING = 0;

				Q_ActivateItemsAI(helly);
				}

			//##### GRAVITY RESETING +++ NON ZONING

			if(Forge[helly].EnergyArchitect.ZONING == 0 || Q_EnergyMatrix.QMATBlock[Forge[helly].EnergyArchitect.WithinZONE].ZONEINC_Gravity == 1)
				{
				Forge[helly].GravityAlter += ((1 - Forge[helly].GravityAlter) / 5);
				}
			}
		helly++;
		}


	//##### TIMESCALE RESETING +++ NON ZONING

	if(player.EnergyArchitect.ZONING == 0 || Q_EnergyMatrix.QMATBlock[player.EnergyArchitect.WithinZONE].ZONEINC_TimeScale == 1 && !(player.Scan == 1 && player.ScanUP == 0))
		{
		TimeScaleALTER += ((1 - TimeScaleALTER) / 5);
		}


	if(player.EnergyArchitect.ZONING == 0)
		{
		if(player.EnergyArchitect.FogON == 1)
			{
			player.EnergyArchitect.FogON = 0;
			geWorld_RemoveFog(World, player.EnergyArchitect.Fogobj);
			}

		if(player.EnergyArchitect.FogLightON == 1)
			{
			player.EnergyArchitect.FogLightON = 0;
			geWorld_RemoveLight(World, player.EnergyArchitect.FogLightobj);
			}
		}


	//########  - VAPOR TRAILS CONTROL VAPOR SYSTEM -  ########//

if(0)
	{
	if(NetworkOption != 1)
		{
		if(NomVaporTrails > 0)
			{
			aero = 0;
			while(aero < NomVaporTrails)
				{
				if(Q_VaporTrail[aero].Live == 1)
					{
					SCRAM = 0;
					while(SCRAM < Q_VaporTrail[aero].NomPoints)
						{
						switch(Q_VaporTrail[aero].TrailPoint[SCRAM].TYPE)
							{
							case 0:
								{
								Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed += (geFloat)(TimeScale)*(0.1);
								if (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed > Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint && Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint)
									{
									Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed = Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint;
									Q_VaporTrail[aero].TrailPoint[SCRAM].Live = 0;

									//### Array Reorder
									K = SCRAM;
									while(K < Q_VaporTrail[aero].NomPoints - 1)
										{
										Q_VaporTrail[aero].TrailPoint[K] = Q_VaporTrail[aero].TrailPoint[K+1];
										K++;
										}

									Q_VaporTrail[aero].NomPoints--;

									if(Q_VaporTrail[aero].NomPoints <= 0)
										{
										Q_VaporTrail[aero].Live = 0;

										//### Array Reorder
										K = aero;
										while(K < NomVaporTrails - 1)
											{
											Q_VaporTrail[K] = Q_VaporTrail[K+1];
											K++;
											}

										NomVaporTrails--;
										}
									}

								}break;

							}//END SWITCH

						SCRAM++;
						}

					if(Q_VaporTrail[aero].NomPoints > 1)
						{
						NumQuads = (Q_VaporTrail[aero].NomPoints-1);

						/*/
						Vec3d Norm1, Norm2;
						ptr = m_PointList;
						if (ptr && ptr->Next)
						{
							cross = (ptr->Point - ptr->Next->Point) * (player.ViewXForm.Translation - ptr->Point);
							cross = Normalize(cross);
							Q_VaporTrail[aero].Verts[i] = cross * m_Width + ptr->Point;
							Q_VaporTrail[aero].Verts[i+1] = cross * (-m_Width) + ptr->Point;
							i += 2;
							Q_VaporTrail[aero].Verts[i] = cross * m_Width + ptr->Point;
							Q_VaporTrail[aero].Verts[i+1] = cross * (-m_Width) + ptr->Point;
						}
						for (ptr = m_PointList; ptr && ptr->Next && ptr->Next->Next; ptr = ptr->Next)
						{
							cross = (ptr->Point - ptr->Next->Point) * (player.ViewXForm.Translation - ptr->Point);
							Norm1 = cross * (ptr->Point - ptr->Next->Point);
							cross = (ptr->Next->Point - ptr->Next->Next->Point) * (player.ViewXForm.Translation - ptr->Next->Point);
							Norm2 = cross * (ptr->Next->Point - ptr->Next->Next->Point);
							Norm1 = Normalize(Norm1);
							Norm2 = Normalize(Norm2);
							//cross = (Norm1 + Norm2)*0.5f;
							//cross = Normalize(cross * (player.ViewXForm.Translation - ptr->Next->Point));
							cross = Norm1 * Norm2;		// line of intersection btwn planes
							Q_VaporTrail[aero].Verts[i] = cross * m_Width + ptr->Next->Point;
							Q_VaporTrail[aero].Verts[i+1] = cross * (-m_Width) + ptr->Next->Point;

							i +=2 ;
						}
						if (ptr && ptr->Next)
						{
							cross = (ptr->Next->Point - ptr->Point) * (player.ViewXForm.Translation - ptr->Next->Point);
							cross = Normalize(cross);
							Q_VaporTrail[aero].Verts[i] = cross * m_Width + ptr->Next->Point;
							Q_VaporTrail[aero].Verts[i+1] = cross * (-m_Width) + ptr->Next->Point;
						}
						/*/

						/*i = 0;
						for (SCRAM = 0; SCRAM < Q_VaporTrail[aero].NomPoints-1; SCRAM++)
						{
							geVec3d_Subtract(&Q_VaporTrail[aero].TrailPoint[SCRAM].Pos, &Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos, &Sub1);
							geVec3d_Subtract(&player.ViewXForm.Translation, &Q_VaporTrail[aero].TrailPoint[SCRAM].Pos, &Sub2);
							geVec3d_CrossProduct(&Sub1, &Sub2, &cross);
							geVec3d_Normalize(&cross);
							geVec3d_CrossProduct(&cross, &Sub1, &Mult1);
							Sub3 = Sub2;
							geVec3d_Normalize(&Sub3);
							if (geVec3d_DotProduct(&Mult1, &Sub3) > 0)
								cross.X = cross.X * -1.0f;
								cross.Y = cross.Y * -1.0f;
								cross.Z = cross.Z * -1.0f;
							if (Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint > 0.0f)
							{
								Q_VaporTrail[aero].LVerts[i*4+0].r = Q_VaporTrail[aero].LVerts[i*4+1].r = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.r - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r;
								Q_VaporTrail[aero].LVerts[i*4+0].g = Q_VaporTrail[aero].LVerts[i*4+1].g = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.g - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g;
								Q_VaporTrail[aero].LVerts[i*4+0].b = Q_VaporTrail[aero].LVerts[i*4+1].b = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.b - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b;
								Q_VaporTrail[aero].LVerts[i*4+0].a = Q_VaporTrail[aero].LVerts[i*4+1].a = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.a - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a;
								Q_VaporTrail[aero].LVerts[i*4+2].r = Q_VaporTrail[aero].LVerts[i*4+3].r = (Q_VaporTrail[aero].TrailPoint[SCRAM+1].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.r - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r;
								Q_VaporTrail[aero].LVerts[i*4+2].g = Q_VaporTrail[aero].LVerts[i*4+3].g = (Q_VaporTrail[aero].TrailPoint[SCRAM+1].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.g - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g;
								Q_VaporTrail[aero].LVerts[i*4+2].b = Q_VaporTrail[aero].LVerts[i*4+3].b = (Q_VaporTrail[aero].TrailPoint[SCRAM+1].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.b - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b;
								Q_VaporTrail[aero].LVerts[i*4+2].a = Q_VaporTrail[aero].LVerts[i*4+3].a = (Q_VaporTrail[aero].TrailPoint[SCRAM+1].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.a - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a;
							}
							else
							{
								Q_VaporTrail[aero].LVerts[i*4+0].r = Q_VaporTrail[aero].LVerts[i*4+1].r = ((geFloat)(i) / Q_VaporTrail[aero].NomPoints) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.r - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r;
								Q_VaporTrail[aero].LVerts[i*4+0].g = Q_VaporTrail[aero].LVerts[i*4+1].g = ((geFloat)(i) / Q_VaporTrail[aero].NomPoints) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.g - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g;
								Q_VaporTrail[aero].LVerts[i*4+0].b = Q_VaporTrail[aero].LVerts[i*4+1].b = ((geFloat)(i) / Q_VaporTrail[aero].NomPoints) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.b - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b;
								Q_VaporTrail[aero].LVerts[i*4+0].a = Q_VaporTrail[aero].LVerts[i*4+1].a = ((geFloat)(i) / Q_VaporTrail[aero].NomPoints) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.a - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a;
								Q_VaporTrail[aero].LVerts[i*4+2].r = Q_VaporTrail[aero].LVerts[i*4+3].r = ((geFloat)(i+1) / Q_VaporTrail[aero].NomPoints) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.r - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r;
								Q_VaporTrail[aero].LVerts[i*4+2].g = Q_VaporTrail[aero].LVerts[i*4+3].g = ((geFloat)(i+1) / Q_VaporTrail[aero].NomPoints) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.g - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g;
								Q_VaporTrail[aero].LVerts[i*4+2].b = Q_VaporTrail[aero].LVerts[i*4+3].b = ((geFloat)(i+1) / Q_VaporTrail[aero].NomPoints) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.b - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b;
								Q_VaporTrail[aero].LVerts[i*4+2].a = Q_VaporTrail[aero].LVerts[i*4+3].a = ((geFloat)(i+1) / Q_VaporTrail[aero].NomPoints) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.a - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a;
							}
							Width1 = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed * Q_VaporTrail[aero].WidthExpand) + Q_VaporTrail[aero].StartWidth;
							Width2 = (Q_VaporTrail[aero].TrailPoint[SCRAM+1].TimeElapsed * Q_VaporTrail[aero].WidthExpand) + Q_VaporTrail[aero].StartWidth;

							Drift.X = Q_VaporTrail[aero].TrailPoint[SCRAM].DriftVec.X * (geFloat)(TimeScale * (((geFloat)rand()/32767)/100+0.99));
							Drift.Y = Q_VaporTrail[aero].TrailPoint[SCRAM].DriftVec.Y * (geFloat)(TimeScale * (((geFloat)rand()/32767)/100+0.99));
							Drift.Z = Q_VaporTrail[aero].TrailPoint[SCRAM].DriftVec.Z * (geFloat)(TimeScale * (((geFloat)rand()/32767)/100+0.99));

							//Drift2 = (Q_VaporTrail[aero].TrailPoint[SCRAM].DriftVec) * TimeScale * (((geFloat)rand()/32767)/100+0.99);
							//Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos = Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos + Drift2;

							Mult3.X = cross.X * Width1;
							Mult3.Y = cross.Y * Width1;
							Mult3.Z = cross.Z * Width1;
							Q_VaporTrail[aero].Verts[i*4+0].X = Mult3.X + Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.X;
							Q_VaporTrail[aero].Verts[i*4+0].Y = Mult3.Y + Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Y;
							Q_VaporTrail[aero].Verts[i*4+0].Z = Mult3.Z + Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Z;

							Mult3.X = cross.X * (-Width1);
							Mult3.Y = cross.Y * (-Width1);
							Mult3.Z = cross.Z * (-Width1);
							Q_VaporTrail[aero].Verts[i*4+0].X = Mult3.X + Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.X;
							Q_VaporTrail[aero].Verts[i*4+0].Y = Mult3.Y + Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Y;
							Q_VaporTrail[aero].Verts[i*4+0].Z = Mult3.Z + Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Z;

							Mult3.X = cross.X * (-Width2);
							Mult3.Y = cross.Y * (-Width2);
							Mult3.Z = cross.Z * (-Width2);
							Q_VaporTrail[aero].Verts[i*4+0].X = Mult3.X + Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos.X;
							Q_VaporTrail[aero].Verts[i*4+0].Y = Mult3.Y + Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos.Y;
							Q_VaporTrail[aero].Verts[i*4+0].Z = Mult3.Z + Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos.Z;

							Mult3.X = cross.X * Width2;
							Mult3.Y = cross.Y * Width2;
							Mult3.Z = cross.Z * Width2;
							Q_VaporTrail[aero].Verts[i*4+0].X = Mult3.X + Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos.X;
							Q_VaporTrail[aero].Verts[i*4+0].Y = Mult3.Y + Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos.Y;
							Q_VaporTrail[aero].Verts[i*4+0].Z = Mult3.Z + Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos.Z;

							Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.X = Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.X + Drift.X;
							Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Y = Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Y + Drift.Y;
							Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Z = Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Z + Drift.Z;

							i++;
						}
						Width1 = (Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].TimeElapsed * Q_VaporTrail[aero].WidthExpand) + Q_VaporTrail[aero].StartWidth;

						Drift.X = Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].DriftVec.X * (geFloat)(TimeScale * (((geFloat)rand()/32767)/100+0.99));
						Drift.Y = Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].DriftVec.Y * (geFloat)(TimeScale * (((geFloat)rand()/32767)/100+0.99));
						Drift.Z = Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].DriftVec.Z * (geFloat)(TimeScale * (((geFloat)rand()/32767)/100+0.99));

						Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].Pos.X = Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].Pos.X + Drift.X;
						Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].Pos.Y = Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].Pos.Y + Drift.Y;
						Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].Pos.Z = Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].Pos.Z + Drift.Z;

						if (i >= 1)
							{
							// in 2.0f/16*... 16 is the texture size, so update as necessary
							GE_LVertex EndCapVert;
							EndCapVert.X = Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints-1].Pos.X;
							EndCapVert.Y = Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints-1].Pos.Y;
							EndCapVert.Z = Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints-1].Pos.Z;
							EndCapVert.r = Q_VaporTrail[aero].LVerts[i*4+3-4].r;
							EndCapVert.g = Q_VaporTrail[aero].LVerts[i*4+3-4].g;
							EndCapVert.b = Q_VaporTrail[aero].LVerts[i*4+3-4].b;
							EndCapVert.a = Q_VaporTrail[aero].LVerts[i*4+3-4].a;
							EndCapVert.u = EndCapVert.v = 0;
							Width1 = 2.0f/16*(Q_VaporTrail[aero].TrailPoint[Q_VaporTrail[aero].NomPoints].TimeElapsed * Q_VaporTrail[aero].WidthExpand + Q_VaporTrail[aero].StartWidth);
							geWorld_AddPolyOnce(World, &EndCapVert, 1, VaporCAP, GE_TEXTURED_POINT,
												GE_RENDER_DEPTH_SORT_BF | GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Width1);
							EndCapVert.X = Q_VaporTrail[aero].TrailPoint[0].Pos.X;
							EndCapVert.Y = Q_VaporTrail[aero].TrailPoint[0].Pos.Y;
							EndCapVert.Z = Q_VaporTrail[aero].TrailPoint[0].Pos.Z;
							EndCapVert.r = Q_VaporTrail[aero].LVerts[0].r;
							EndCapVert.g = Q_VaporTrail[aero].LVerts[0].g;
							EndCapVert.b = Q_VaporTrail[aero].LVerts[0].b;
							EndCapVert.a = Q_VaporTrail[aero].LVerts[0].a;
							EndCapVert.u = EndCapVert.v = 0;
							Width2 = 2.0f/16*(Q_VaporTrail[aero].TrailPoint[0].TimeElapsed * Q_VaporTrail[aero].WidthExpand + Q_VaporTrail[aero].StartWidth);
							geWorld_AddPolyOnce(World, &EndCapVert, 1, VaporCAP, GE_TEXTURED_POINT,
												GE_RENDER_DEPTH_SORT_BF | GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Width2);
							}

						//GE_LVertex Q_VaporTrail[aero].LVerts[4];
						for (i = 0; i < NumQuads; i++)
							{
							Q_VaporTrail[aero].LVerts[i*4+0].u = 0.0f;
							Q_VaporTrail[aero].LVerts[i*4+0].v = 0.0f;
							Q_VaporTrail[aero].LVerts[i*4+1].u = 0.0f;
							Q_VaporTrail[aero].LVerts[i*4+1].v = 1.0f;
							Q_VaporTrail[aero].LVerts[i*4+2].u = 1.0f;
							Q_VaporTrail[aero].LVerts[i*4+2].v = 1.0f;
							Q_VaporTrail[aero].LVerts[i*4+3].u = 1.0f;
							Q_VaporTrail[aero].LVerts[i*4+3].v = 0.0f;
							}
						for (i = 0; i < (Q_VaporTrail[aero].NomPoints-1)*4; i++)
							{
							Q_VaporTrail[aero].LVerts[i].X = Q_VaporTrail[aero].Verts[i].X;
							Q_VaporTrail[aero].LVerts[i].Y = Q_VaporTrail[aero].Verts[i].Y;
							Q_VaporTrail[aero].LVerts[i].Z = Q_VaporTrail[aero].Verts[i].Z;
							}
						for (i = 0; i < NumQuads; i++)
							{*/
							/*/
							Q_VaporTrail[aero].LVerts[0].X = Q_VaporTrail[aero].Verts[i*4+0].X;
							Q_VaporTrail[aero].LVerts[0].Y = Q_VaporTrail[aero].Verts[i*4+0].Y;
							Q_VaporTrail[aero].LVerts[0].Z = Q_VaporTrail[aero].Verts[i*4+0].Z;
							Q_VaporTrail[aero].LVerts[1].X = Q_VaporTrail[aero].Verts[i*4+1].X;
							Q_VaporTrail[aero].LVerts[1].Y = Q_VaporTrail[aero].Verts[i*4+1].Y;
							Q_VaporTrail[aero].LVerts[1].Z = Q_VaporTrail[aero].Verts[i*4+1].Z;
							Q_VaporTrail[aero].LVerts[2].X = Q_VaporTrail[aero].Verts[i*4+2].X;
							Q_VaporTrail[aero].LVerts[2].Y = Q_VaporTrail[aero].Verts[i*4+2].Y;
							Q_VaporTrail[aero].LVerts[2].Z = Q_VaporTrail[aero].Verts[i*4+2].Z;
							Q_VaporTrail[aero].LVerts[3].X = Q_VaporTrail[aero].Verts[i*4+3].X;
							Q_VaporTrail[aero].LVerts[3].Y = Q_VaporTrail[aero].Verts[i*4+3].Y;
							Q_VaporTrail[aero].LVerts[3].Z = Q_VaporTrail[aero].Verts[i*4+3].Z;
							/*/

							// add the quad that covers the 2 points
							/*geWorld_AddPolyOnce(World, &Q_VaporTrail[aero].LVerts[i*4], 4, VaporLINE, GE_TEXTURED_POLY,
												GE_RENDER_DEPTH_SORT_BF | GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
							// add the quad that joins the 2 quads at a point
							if (i < NumQuads-1)
								geWorld_AddPolyOnce(World, &Q_VaporTrail[aero].LVerts[i*4+2], 4, VaporLINE, GE_TEXTURED_POLY,
												GE_RENDER_DEPTH_SORT_BF | GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
							*/
							/*/
							Q_VaporTrail[aero].LVerts[0].X = Q_VaporTrail[aero].Verts[i*2+1].X;
							Q_VaporTrail[aero].LVerts[0].Y = Q_VaporTrail[aero].Verts[i*2+1].Y;
							Q_VaporTrail[aero].LVerts[0].Z = Q_VaporTrail[aero].Verts[i*2+1].Z;
							Q_VaporTrail[aero].LVerts[1].X = Q_VaporTrail[aero].Verts[i*2+2].X;
							Q_VaporTrail[aero].LVerts[1].Y = Q_VaporTrail[aero].Verts[i*2+2].Y;
							Q_VaporTrail[aero].LVerts[1].Z = Q_VaporTrail[aero].Verts[i*2+2].Z;
							Q_VaporTrail[aero].LVerts[2].X = Q_VaporTrail[aero].Verts[i*2+3].X;
							Q_VaporTrail[aero].LVerts[2].Y = Q_VaporTrail[aero].Verts[i*2+3].Y;
							Q_VaporTrail[aero].LVerts[2].Z = Q_VaporTrail[aero].Verts[i*2+3].Z;
							geWorld_AddPolyOnce(m_pWorld.GetgeWorld(), Q_VaporTrail[aero].LVerts, 3, NULL, GE_GOURAUD_POLY,
												GE_RENDER_DEPTH_SORT_BF, 1.0f);
							/*/
							//}
						}

					}//END LIVE
				aero++;
				}
			}
		}
		}
	else
		{
	if(NetworkOption != 1)
		{
		if(NomVaporTrails > 0)
			{
			aero = 0;
			while(aero < NomVaporTrails)
				{
				if(Q_VaporTrail[aero].Live == 1)
					{
					SCRAM = 0;
					while(SCRAM < Q_VaporTrail[aero].NomPoints)
						{
						switch(Q_VaporTrail[aero].TrailPoint[SCRAM].TYPE)
							{
							case 0:
								{
								//#### Increase timer
								Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed += (geFloat)(TimeScale)*0.2;

								//##### Set Width
								Q_VaporTrail[aero].TrailPoint[SCRAM].Width = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed * Q_VaporTrail[aero].WidthExpand) + Q_VaporTrail[aero].StartWidth;

								//###### Drift Point
								geVec3d_MA(&Q_VaporTrail[aero].TrailPoint[SCRAM].Pos, Q_VaporTrail[aero].TrailPoint[SCRAM].DriftSTR, &Q_VaporTrail[aero].TrailPoint[SCRAM].DriftVec, &Q_VaporTrail[aero].TrailPoint[SCRAM].Pos);

								//###### Apply Wind
								geVec3d_MA(&Q_VaporTrail[aero].TrailPoint[SCRAM].Pos, WindSTR, &Wind, &Q_VaporTrail[aero].TrailPoint[SCRAM].Pos);

								if (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed > Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint && Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint > 0)
									{
									Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed = Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint;
									Q_VaporTrail[aero].TrailPoint[SCRAM].Live = 0;

									//### Array Reorder
									K = SCRAM;
									while(K < Q_VaporTrail[aero].NomPoints - 1)
										{
										Q_VaporTrail[aero].TrailPoint[K] = Q_VaporTrail[aero].TrailPoint[K+1];
										K++;
										}

									Q_VaporTrail[aero].NomPoints--;

									if(Q_VaporTrail[aero].NomPoints <= 0)
										{
										Q_VaporTrail[aero].Live = 0;

										//### Array Reorder
										K = aero;
										while(K < NomVaporTrails - 1)
											{
											Q_VaporTrail[K] = Q_VaporTrail[K+1];
											K++;
											}

										NomVaporTrails--;
										}
									}


								//##### DRAW LASERS QUAD AND ENDCAPS
								if(SCRAM < Q_VaporTrail[aero].NomPoints - 1)
									{
									geVec3d_Subtract(&player.ViewXForm.Translation, &Q_VaporTrail[aero].TrailPoint[SCRAM].Pos, &Q_VaporTrail[aero].TrailPoint[SCRAM].CameraVector);
									geVec3d_Subtract(&Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos, &Q_VaporTrail[aero].TrailPoint[SCRAM].Pos, &Q_VaporTrail[aero].TrailPoint[SCRAM].LaserVector);
									geVec3d_CrossProduct(&Q_VaporTrail[aero].TrailPoint[SCRAM].CameraVector, &Q_VaporTrail[aero].TrailPoint[SCRAM].LaserVector, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight);
									geVec3d_Copy(&Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft);
									geVec3d_Inverse(&Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft);
									geVec3d_Normalize(&Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight);
									geVec3d_Normalize(&Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft);	
									geVec3d_Scale(&Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft, Q_VaporTrail[aero].TrailPoint[SCRAM].Width, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft);
									geVec3d_Scale(&Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight,Q_VaporTrail[aero].TrailPoint[SCRAM].Width, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight);
									geVec3d_Add(&Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft, &Q_VaporTrail[aero].TrailPoint[SCRAM].EndLeft);
									geVec3d_Add(&Q_VaporTrail[aero].TrailPoint[SCRAM+1].Pos, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight, &Q_VaporTrail[aero].TrailPoint[SCRAM].EndRight);
									geVec3d_Add(&Q_VaporTrail[aero].TrailPoint[SCRAM].Pos, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft);
									geVec3d_Add(&Q_VaporTrail[aero].TrailPoint[SCRAM].Pos, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight, &Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight);
									
									for(i=0; i < 4; i++)
										{
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[i].r = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.r - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[i].g = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.g - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[i].b = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.b - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[i].a = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.a - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a;
										}
									
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].X = Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft.X;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].Y = Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft.Y;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].Z = Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft.Z;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[1].X = Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight.X;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[1].Y = Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight.Y;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[1].Z = Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight.Z;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[2].X = Q_VaporTrail[aero].TrailPoint[SCRAM].EndRight.X;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[2].Y = Q_VaporTrail[aero].TrailPoint[SCRAM].EndRight.Y;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[2].Z = Q_VaporTrail[aero].TrailPoint[SCRAM].EndRight.Z;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[3].X = Q_VaporTrail[aero].TrailPoint[SCRAM].EndLeft.X;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[3].Y = Q_VaporTrail[aero].TrailPoint[SCRAM].EndLeft.Y;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[3].Z = Q_VaporTrail[aero].TrailPoint[SCRAM].EndLeft.Z;

									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].u = 0.0f;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].v = 1.0f;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[1].u = 1.0f;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[1].v = 1.0f;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[2].u = 1.0f;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[2].v = 0.0f;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[3].u = 0.0f;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[3].v = 0.0f;

									geWorld_AddPolyOnce(World, &Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0], 4, VaporLINE, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);

									if(SCRAM > 0)
										{
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].X = Q_VaporTrail[aero].TrailPoint[SCRAM-1].EndLeft.X;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].Y = Q_VaporTrail[aero].TrailPoint[SCRAM-1].EndLeft.Y;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].Z = Q_VaporTrail[aero].TrailPoint[SCRAM-1].EndLeft.Z;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[1].X = Q_VaporTrail[aero].TrailPoint[SCRAM-1].EndRight.X;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[1].Y = Q_VaporTrail[aero].TrailPoint[SCRAM-1].EndRight.Y;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[1].Z = Q_VaporTrail[aero].TrailPoint[SCRAM-1].EndRight.Z;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[2].X = Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight.X;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[2].Y = Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight.Y;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[2].Z = Q_VaporTrail[aero].TrailPoint[SCRAM].StartRight.Z;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[3].X = Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft.X;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[3].Y = Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft.Y;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[3].Z = Q_VaporTrail[aero].TrailPoint[SCRAM].StartLeft.Z;

										geWorld_AddPolyOnce(World, &Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0], 4, VaporLINE, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
										}
									else
										{		//##### DRAW START POINT
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].r = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.r - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].g = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.g - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].b = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.b - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].a = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.a - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].X = Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.X;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].Y = Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Y;
										Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].Z = Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Z;

										Q_VaporTrail[aero].TrailPoint[SCRAM].Width2 = 2.0f/16*(Q_VaporTrail[aero].TrailPoint[SCRAM].Width);
										geWorld_AddPolyOnce(World, &Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0], 1, VaporCAP, GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF | GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_VaporTrail[aero].TrailPoint[SCRAM].Width2/7);
										}
									}
								else
									{		//##### DRAW END POINT
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].r = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.r - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.r;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].g = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.g - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.g;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].b = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.b - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.b;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].a = (Q_VaporTrail[aero].TrailPoint[SCRAM].TimeElapsed / Q_VaporTrail[aero].TrailPoint[SCRAM].LifeOfPoint) * (Q_VaporTrail[aero].TrailPoint[SCRAM].EndColor.a - Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a) + Q_VaporTrail[aero].TrailPoint[SCRAM].StartColor.a;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].X = Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.X;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].Y = Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Y;
									Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0].Z = Q_VaporTrail[aero].TrailPoint[SCRAM].Pos.Z;

									Q_VaporTrail[aero].TrailPoint[SCRAM].Width2 = 2.0f/16*(Q_VaporTrail[aero].TrailPoint[SCRAM].Width);
									geWorld_AddPolyOnce(World, &Q_VaporTrail[aero].TrailPoint[SCRAM].LVerts[0], 1, VaporCAP, GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF | GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_VaporTrail[aero].TrailPoint[SCRAM].Width2/7);
									}

								}break;

							}//END SWITCH

						SCRAM++;
						}

					}//END LIVE
				aero++;
				}
			}
		}
		}



	//########  - CLERIC PLASMA ENERGY TRANSFER CONTROL -  ########//

	if(NetworkOption != 1)
		{
		if(NomPlasma > 0)
			{
			aero = 0;
			while(aero < NomPlasma)
				{
				if(Q_ClericPlasma[aero].Live == 1)
					{
					switch(Q_ClericPlasma[aero].PartType)
						{
						case 0:
							{
							Q_ClericPlasma[aero].TIMER += TimeScale;

							Q_ClericPlasma[aero].CNTR += 1;
							Q_ClericPlasma[aero].RoTAMT = 0;

							if(Q_ClericPlasma[aero].CNTR > 0)
								{
								Q_ClericPlasma[aero].CNTR = -8;

								jet=0;
								while((jet < 15) && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
									Q_PntSprite[NomPntSprite].Scale = 0.019f;		//0.025f//0.002f
									Q_PntSprite[NomPntSprite].PartType = 21;

									Q_PntSprite[NomPntSprite].IR = 255;
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 55;
									Q_PntSprite[NomPntSprite].Speed = 0.2;
									Q_PntSprite[NomPntSprite].SpeedDIR = 0.2;
									Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[aero].Pos;

									Q_PntSprite[NomPntSprite].VecUp = Q_ClericPlasma[aero].TraVec;

										//Calculate Direction Vectors
									geXForm3d_SetYRotation(&RotateMatrix, PI/2);
									geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);
									Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);
									
									geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);
									geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);
									geXForm3d_SetYRotation(&RotateMatrix3, Q_ClericPlasma[aero].RoTAMT);

									Q_ClericPlasma[aero].RoTAMT += 0.393;

									geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
									geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);
									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

									Q_PntSprite[NomPntSprite].ActorID = 250;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}
								}

							if(Q_ClericPlasma[aero].ActorID == 250)
								{
								if(Q_ClericPlasma[aero].Speed + ((15 + (250 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[2].Speed / 5000))) / 10) * TimeScale < (15 + (250 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[2].Speed / 5000)))) Q_ClericPlasma[aero].Speed += ((15 + (250 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[2].Speed / 5000))) / 10) * TimeScale;
								else Q_ClericPlasma[aero].Speed = (15 + (250 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[2].Speed / 5000)));
								}
							else
								{
								if(Q_ClericPlasma[aero].Speed + ((15 + (250 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[2].Speed / 5000))) / 10) * TimeScale < (15 + (250 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[2].Speed / 5000)))) Q_ClericPlasma[aero].Speed += ((15 + (250 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[2].Speed / 5000))) / 10) * TimeScale;
								else Q_ClericPlasma[aero].Speed = (15 + (250 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[2].Speed / 5000)));
								}

							Q_ClericPlasma[aero].OldPos = Q_ClericPlasma[aero].Pos;

							//### Move Sprite
							geVec3d_MA(&Q_ClericPlasma[aero].Pos, Q_ClericPlasma[aero].Speed*TimeScale, &Q_ClericPlasma[aero].TraVec, &Q_ClericPlasma[aero].Pos);

							DrawLaser(World, &Q_ClericPlasma[aero].Pos, &Q_ClericPlasma[aero].OldPos, &player.ViewXForm.Translation, 0.2 * 70, QAEFF03, Q_ClericPlasma[aero].Alpha, 255, 255, 255, 0);

							//##### Render Main Sprite

							Q_ClericPlasma[aero].Lvert.X = Q_ClericPlasma[aero].Pos.X;
							Q_ClericPlasma[aero].Lvert.Y = Q_ClericPlasma[aero].Pos.Y;
							Q_ClericPlasma[aero].Lvert.Z = Q_ClericPlasma[aero].Pos.Z;
							Q_ClericPlasma[aero].Lvert.r = 255;
							Q_ClericPlasma[aero].Lvert.g = 255;
							Q_ClericPlasma[aero].Lvert.b = 255;
							Q_ClericPlasma[aero].Lvert.a = Q_ClericPlasma[aero].Alpha;

							geWorld_AddPolyOnce (World, &Q_ClericPlasma[aero].Lvert, 1, QAEFF01, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 0.155f);

							Q_ClericPlasma[aero].Lvert.X = Q_ClericPlasma[aero].Pos.X;
							Q_ClericPlasma[aero].Lvert.Y = Q_ClericPlasma[aero].Pos.Y;
							Q_ClericPlasma[aero].Lvert.Z = Q_ClericPlasma[aero].Pos.Z;
							Q_ClericPlasma[aero].Lvert.r = 255;
							Q_ClericPlasma[aero].Lvert.g = 255;
							Q_ClericPlasma[aero].Lvert.b = 255;
							Q_ClericPlasma[aero].Lvert.a = Q_ClericPlasma[aero].Alpha/2.2;

							geWorld_AddPolyOnce(World, &Q_ClericPlasma[aero].Lvert, 1, SparkCorona[Q_ClericPlasma[aero].CoronaMatCnt], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 0.15);

							//### Increment Corona Material
							if(Q_ClericPlasma[aero].CoronaMatCntDIR == 0)
								{
								Q_ClericPlasma[aero].CoronaMatCnt++;
								if(Q_ClericPlasma[aero].CoronaMatCnt > 3)
									{
									Q_ClericPlasma[aero].CoronaMatCnt = 3;
									Q_ClericPlasma[aero].CoronaMatCntDIR = 1;
									}
								}
							else
								{
								Q_ClericPlasma[aero].CoronaMatCnt--;
								if(Q_ClericPlasma[aero].CoronaMatCnt < 0)
									{
									Q_ClericPlasma[aero].CoronaMatCnt = 0;
									Q_ClericPlasma[aero].CoronaMatCntDIR = 0;
									}
								}

							if(Q_ClericPlasma[aero].LightON == 1)
								{
								Q_ClericPlasma[aero].LightColor.r = 255.0f;
								Q_ClericPlasma[aero].LightColor.g = 35.0f;
								Q_ClericPlasma[aero].LightColor.b = 255.0f;
								Q_ClericPlasma[aero].LightColor.a = 155.0f;

								geWorld_SetLightAttributes(World, Q_ClericPlasma[aero].Light, &Q_ClericPlasma[aero].Pos, &Q_ClericPlasma[aero].LightColor, 200, GE_TRUE);
								}

							if(geWorld_Collision(World,
								 NULL,
								 NULL,
								 &Q_ClericPlasma[aero].OldPos,
								 &Q_ClericPlasma[aero].Pos,
								 GE_CONTENTS_CANNOT_OCCUPY,
								 GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
								 0xffffffff, NULL, NULL,
								 &Q_ClericPlasma[aero].Collision))
								{
								if(Q_ClericPlasma[aero].Collision.Actor != NULL)
									{
									if(Q_ClericPlasma[aero].ActorID == 250)
										{
										if(Q_ClericPlasma[aero].Collision.Actor->IDflag == 250)
											{
											Q_ClericPlasma[aero].Alpha = 0;
											Q_ClericPlasma[aero].Live = 0;

											if(Q_ClericPlasma[aero].LightON == 1)
												{
												Q_ClericPlasma[aero].LightON = 0;
												geWorld_RemoveLight(World, Q_ClericPlasma[aero].Light);
												}

											//### Array Reorder
											K = aero;
											while(K < NomPlasma - 1)
												{
												Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
												K++;
												}

											NomPlasma--;

											jet=0;
											while((jet < 50) && (NomPntSprite < 24998))
												{
												Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
												Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
												Q_PntSprite[NomPntSprite].Scale = 0.095f;		//0.025f//0.002f
												Q_PntSprite[NomPntSprite].PartType = 21;

												Q_PntSprite[NomPntSprite].IR = 255;
												Q_PntSprite[NomPntSprite].IG = 255;
												Q_PntSprite[NomPntSprite].IB = 255;

												Q_PntSprite[NomPntSprite].Alpha = 150;
												Q_PntSprite[NomPntSprite].Speed = 1;
												Q_PntSprite[NomPntSprite].SpeedDIR = 0.2;
												Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[aero].Pos;

												Q_PntSprite[NomPntSprite].VecUp = Q_ClericPlasma[aero].TraVec;

													//Calculate Direction Vectors
												geXForm3d_SetYRotation(&RotateMatrix, PI/2);
												geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);
												Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
												geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);
												
												geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);
												geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);
												geXForm3d_SetYRotation(&RotateMatrix3, Q_ClericPlasma[aero].RoTAMT);

												Q_ClericPlasma[aero].RoTAMT += 0.1179;

												geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
												geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);
												geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

												Q_PntSprite[NomPntSprite].ActorID = 250;

												Q_PntSprite[NomPntSprite].Live = 1;

												NomPntSprite++;
												jet++;
												}

											//##### Energy Gain
											player.HB_Energy += 25 + (550 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[2].Potency / 5000));
											if(player.HB_Energy > player.HB_MaxEnergy) player.HB_Energy = player.HB_MaxEnergy;
											}
										else
											{
											Q_ClericPlasma[aero].Alpha = 0;
											Q_ClericPlasma[aero].Live = 0;

											if(Q_ClericPlasma[aero].Collision.Actor->IDflag >= 0 && Q_ClericPlasma[aero].Collision.Actor->IDflag < NomAI)
												{ Q_ClericPlasma[aero].HealTarget = Q_ClericPlasma[aero].Collision.Actor->IDflag; }

											if(Q_ClericPlasma[aero].LightON == 1)
												{
												Q_ClericPlasma[aero].LightON = 0;
												geWorld_RemoveLight(World, Q_ClericPlasma[aero].Light);
												}

											//### Array Reorder
											K = aero;
											while(K < NomPlasma - 1)
												{
												Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
												K++;
												}

											NomPlasma--;

											jet=0;
											while((jet < 50) && (NomPntSprite < 24998))
												{
												Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
												Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
												Q_PntSprite[NomPntSprite].Scale = 0.095f;		//0.025f//0.002f
												Q_PntSprite[NomPntSprite].PartType = 21;

												Q_PntSprite[NomPntSprite].IR = 255;
												Q_PntSprite[NomPntSprite].IG = 255;
												Q_PntSprite[NomPntSprite].IB = 255;

												Q_PntSprite[NomPntSprite].Alpha = 150;
												Q_PntSprite[NomPntSprite].Speed = 1;
												Q_PntSprite[NomPntSprite].SpeedDIR = 0.2;
												Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[aero].Pos;

												Q_PntSprite[NomPntSprite].VecUp = Q_ClericPlasma[aero].TraVec;

													//Calculate Direction Vectors
												geXForm3d_SetYRotation(&RotateMatrix, PI/2);
												geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);
												Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
												geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);
												
												geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);
												geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);
												geXForm3d_SetYRotation(&RotateMatrix3, Q_ClericPlasma[aero].RoTAMT);

												Q_ClericPlasma[aero].RoTAMT += 0.1179;

												geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
												geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);
												geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

												Q_PntSprite[NomPntSprite].ActorID = 250;

												Q_PntSprite[NomPntSprite].Live = 1;

												NomPntSprite++;
												jet++;
												}

											//##### Energy Gain
											Forge[Q_ClericPlasma[aero].HealTarget].HB_Energy += 25 + (550 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[2].Potency / 5000));
											if(Forge[Q_ClericPlasma[aero].HealTarget].HB_Energy > Forge[Q_ClericPlasma[aero].HealTarget].HB_MaxEnergy) Forge[Q_ClericPlasma[aero].HealTarget].HB_Energy = Forge[Q_ClericPlasma[aero].HealTarget].HB_MaxEnergy;
											}
										}
									else
										{
										if(Q_ClericPlasma[aero].Collision.Actor->IDflag == 250)
											{
											Q_ClericPlasma[aero].Alpha = 0;
											Q_ClericPlasma[aero].Live = 0;

											if(Q_ClericPlasma[aero].LightON == 1)
												{
												Q_ClericPlasma[aero].LightON = 0;
												geWorld_RemoveLight(World, Q_ClericPlasma[aero].Light);
												}

											//### Array Reorder
											K = aero;
											while(K < NomPlasma - 1)
												{
												Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
												K++;
												}

											NomPlasma--;

											jet=0;
											while((jet < 50) && (NomPntSprite < 24998))
												{
												Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
												Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
												Q_PntSprite[NomPntSprite].Scale = 0.095f;		//0.025f//0.002f
												Q_PntSprite[NomPntSprite].PartType = 21;

												Q_PntSprite[NomPntSprite].IR = 255;
												Q_PntSprite[NomPntSprite].IG = 255;
												Q_PntSprite[NomPntSprite].IB = 255;

												Q_PntSprite[NomPntSprite].Alpha = 150;
												Q_PntSprite[NomPntSprite].Speed = 1;
												Q_PntSprite[NomPntSprite].SpeedDIR = 0.2;
												Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[aero].Pos;

												Q_PntSprite[NomPntSprite].VecUp = Q_ClericPlasma[aero].TraVec;

													//Calculate Direction Vectors
												geXForm3d_SetYRotation(&RotateMatrix, PI/2);
												geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);
												Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
												geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);
												
												geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);
												geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);
												geXForm3d_SetYRotation(&RotateMatrix3, Q_ClericPlasma[aero].RoTAMT);

												Q_ClericPlasma[aero].RoTAMT += 0.1179;

												geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
												geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);
												geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

												Q_PntSprite[NomPntSprite].ActorID = 250;

												Q_PntSprite[NomPntSprite].Live = 1;

												NomPntSprite++;
												jet++;
												}

											//##### Energy Gain
											player.HB_Energy += 25 + (550 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[2].Potency / 5000));
											if(player.HB_Energy > player.HB_MaxEnergy) player.HB_Energy = player.HB_MaxEnergy;
											}
										else
											{
											Q_ClericPlasma[aero].Alpha = 0;
											Q_ClericPlasma[aero].Live = 0;

											if(Q_ClericPlasma[aero].Collision.Actor->IDflag >= 0 && Q_ClericPlasma[aero].Collision.Actor->IDflag < NomAI)
												{ Q_ClericPlasma[aero].HealTarget = Q_ClericPlasma[aero].Collision.Actor->IDflag; }

											if(Q_ClericPlasma[aero].LightON == 1)
												{
												Q_ClericPlasma[aero].LightON = 0;
												geWorld_RemoveLight(World, Q_ClericPlasma[aero].Light);
												}

											//### Array Reorder
											K = aero;
											while(K < NomPlasma - 1)
												{
												Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
												K++;
												}

											NomPlasma--;

											jet=0;
											while((jet < 50) && (NomPntSprite < 24998))
												{
												Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
												Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
												Q_PntSprite[NomPntSprite].Scale = 0.095f;		//0.025f//0.002f
												Q_PntSprite[NomPntSprite].PartType = 21;

												Q_PntSprite[NomPntSprite].IR = 255;
												Q_PntSprite[NomPntSprite].IG = 255;
												Q_PntSprite[NomPntSprite].IB = 255;

												Q_PntSprite[NomPntSprite].Alpha = 150;
												Q_PntSprite[NomPntSprite].Speed = 1;
												Q_PntSprite[NomPntSprite].SpeedDIR = 0.2;
												Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[aero].Pos;

												Q_PntSprite[NomPntSprite].VecUp = Q_ClericPlasma[aero].TraVec;

													//Calculate Direction Vectors
												geXForm3d_SetYRotation(&RotateMatrix, PI/2);
												geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);
												Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
												geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);
												
												geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);
												geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);
												geXForm3d_SetYRotation(&RotateMatrix3, Q_ClericPlasma[aero].RoTAMT);

												Q_ClericPlasma[aero].RoTAMT += 0.1179;

												geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
												geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);
												geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

												Q_PntSprite[NomPntSprite].ActorID = 250;

												Q_PntSprite[NomPntSprite].Live = 1;

												NomPntSprite++;
												jet++;
												}

											//##### Energy Gain
											Forge[Q_ClericPlasma[aero].HealTarget].HB_Energy += 25 + (550 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[2].Potency / 5000));
											if(Forge[Q_ClericPlasma[aero].HealTarget].HB_Energy > Forge[Q_ClericPlasma[aero].HealTarget].HB_MaxEnergy) Forge[Q_ClericPlasma[aero].HealTarget].HB_Energy = Forge[Q_ClericPlasma[aero].HealTarget].HB_MaxEnergy;
											}
										}
									}
								else	//Spark Impacts With Geometry
									{
									if(Q_ClericPlasma[aero].TIMER > 500)
										{
										Q_ClericPlasma[aero].Alpha = 0;
										Q_ClericPlasma[aero].Live = 0;

										if(Q_ClericPlasma[aero].LightON == 1)
											{
											Q_ClericPlasma[aero].LightON = 0;
											geWorld_RemoveLight(World, Q_ClericPlasma[aero].Light);
											}

										//### Array Reorder
										K = aero;
										while(K < NomPlasma - 1)
											{
											Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
											K++;
											}

										NomPlasma--;
										}
									else Q_ClericPlasma[aero].TraVec = PHY_BounceVector(Q_ClericPlasma[aero].TraVec, Q_ClericPlasma[aero].Collision.Plane.Normal);
									}
								}
							}break;

						case 1:	//OFFENSIVE PLASMA
							{
							Q_ClericPlasma[aero].TIMER += TimeScale;

							Q_ClericPlasma[aero].CNTR += 1;
							Q_ClericPlasma[aero].RoTAMT = 0;

							if(Q_ClericPlasma[aero].CNTR > 0)
								{
								Q_ClericPlasma[aero].CNTR = -8;

								jet=0;
								while((jet < 15) && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
									Q_PntSprite[NomPntSprite].Scale = 0.019f;		//0.025f//0.002f
									Q_PntSprite[NomPntSprite].PartType = 21;

									Q_PntSprite[NomPntSprite].IR = 0;
									Q_PntSprite[NomPntSprite].IG = 0;
									Q_PntSprite[NomPntSprite].IB = 0;

									Q_PntSprite[NomPntSprite].Alpha = 55;
									Q_PntSprite[NomPntSprite].Speed = 0.2;
									Q_PntSprite[NomPntSprite].SpeedDIR = 0.2;
									Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[aero].Pos;

									Q_PntSprite[NomPntSprite].VecUp = Q_ClericPlasma[aero].TraVec;

										//Calculate Direction Vectors
									geXForm3d_SetYRotation(&RotateMatrix, PI/2);
									geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);
									Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);
									
									geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);
									geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);
									geXForm3d_SetYRotation(&RotateMatrix3, Q_ClericPlasma[aero].RoTAMT);

									Q_ClericPlasma[aero].RoTAMT += 0.393;

									geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
									geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);
									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

									Q_PntSprite[NomPntSprite].ActorID = 250;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}
								}

							if(Q_ClericPlasma[aero].ActorID == 250)
								{
								if(Q_ClericPlasma[aero].Speed + ((15 + (250 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[3].Speed / 5000))) / 10) * TimeScale < (15 + (250 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[3].Speed / 5000)))) Q_ClericPlasma[aero].Speed += ((15 + (250 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[3].Speed / 5000))) / 10) * TimeScale;
								else Q_ClericPlasma[aero].Speed = (15 + (250 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[3].Speed / 5000)));
								}
							else
								{
								if(Q_ClericPlasma[aero].Speed + ((15 + (250 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[3].Speed / 5000))) / 10) * TimeScale < (15 + (250 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[3].Speed / 5000)))) Q_ClericPlasma[aero].Speed += ((15 + (250 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[3].Speed / 5000))) / 10) * TimeScale;
								else Q_ClericPlasma[aero].Speed = (15 + (250 * (Forge[Q_ClericPlasma[aero].ActorID].CharDATA.CLSClericSKILL[3].Speed / 5000)));
								}

							Q_ClericPlasma[aero].OldPos = Q_ClericPlasma[aero].Pos;

							//### Move Sprite
							geVec3d_MA(&Q_ClericPlasma[aero].Pos, Q_ClericPlasma[aero].Speed*TimeScale, &Q_ClericPlasma[aero].TraVec, &Q_ClericPlasma[aero].Pos);

							DrawLaser(World, &Q_ClericPlasma[aero].Pos, &Q_ClericPlasma[aero].OldPos, &player.ViewXForm.Translation, 0.2 * 70, QAEFF31, Q_ClericPlasma[aero].Alpha, 255, 255, 255, 0);

							//##### Render Main Sprite

							Q_ClericPlasma[aero].Lvert.X = Q_ClericPlasma[aero].Pos.X;
							Q_ClericPlasma[aero].Lvert.Y = Q_ClericPlasma[aero].Pos.Y;
							Q_ClericPlasma[aero].Lvert.Z = Q_ClericPlasma[aero].Pos.Z;
							Q_ClericPlasma[aero].Lvert.r = 255;
							Q_ClericPlasma[aero].Lvert.g = 255;
							Q_ClericPlasma[aero].Lvert.b = 255;
							Q_ClericPlasma[aero].Lvert.a = Q_ClericPlasma[aero].Alpha;

							geWorld_AddPolyOnce (World, &Q_ClericPlasma[aero].Lvert, 1, QAEFF30, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 0.155f);

							Q_ClericPlasma[aero].Lvert.X = Q_ClericPlasma[aero].Pos.X;
							Q_ClericPlasma[aero].Lvert.Y = Q_ClericPlasma[aero].Pos.Y;
							Q_ClericPlasma[aero].Lvert.Z = Q_ClericPlasma[aero].Pos.Z;
							Q_ClericPlasma[aero].Lvert.r = 255;
							Q_ClericPlasma[aero].Lvert.g = 255;
							Q_ClericPlasma[aero].Lvert.b = 255;
							Q_ClericPlasma[aero].Lvert.a = Q_ClericPlasma[aero].Alpha/2.2;

							geWorld_AddPolyOnce(World, &Q_ClericPlasma[aero].Lvert, 1, EGrabCorona[Q_ClericPlasma[aero].CoronaMatCnt], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 0.15);

							//### Increment Corona Material
							if(Q_ClericPlasma[aero].CoronaMatCntDIR == 0)
								{
								Q_ClericPlasma[aero].CoronaMatCnt++;
								if(Q_ClericPlasma[aero].CoronaMatCnt > 3)
									{
									Q_ClericPlasma[aero].CoronaMatCnt = 3;
									Q_ClericPlasma[aero].CoronaMatCntDIR = 1;
									}
								}
							else
								{
								Q_ClericPlasma[aero].CoronaMatCnt--;
								if(Q_ClericPlasma[aero].CoronaMatCnt < 0)
									{
									Q_ClericPlasma[aero].CoronaMatCnt = 0;
									Q_ClericPlasma[aero].CoronaMatCntDIR = 0;
									}
								}


							//###### Heal Energy Cancellation
							SCRAM=0;
							while(SCRAM < NomHSpark)
								{
								if(HealSparks[SCRAM].Live == 1)
									{


									if(Q_ClericPlasma[aero].ActorID == 250)
										{
										if(HealSparks[SCRAM].ActorID != 250 || 1)
											{
											if(((Forge[HealSparks[SCRAM].ActorID].Team != player.Team) || 1) && (geVec3d_DistanceBetween(&HealSparks[SCRAM].Pos, &Q_ClericPlasma[aero].Pos) < 50))
												{
												//### Kill Spark
												HealSparks[SCRAM].Absorbed = 4;

												jet=0;
												while(jet < 15 && (NomPntSprite < 24998))
													{
													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
													Q_PntSprite[NomPntSprite].Scale = 0.065f;
													Q_PntSprite[NomPntSprite].PartType = 58;

													Q_PntSprite[NomPntSprite].IR = 0;
													Q_PntSprite[NomPntSprite].IG = 0;
													Q_PntSprite[NomPntSprite].IB = 0;

													Q_PntSprite[NomPntSprite].Alpha = 75;
													Q_PntSprite[NomPntSprite].Speed = 0.1;
													Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[NomPlasma].Pos;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

													Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}

												jet=0;
												while(jet < 15 && (NomPntSprite < 24998))
													{
													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
													Q_PntSprite[NomPntSprite].Scale = 0.065f;
													Q_PntSprite[NomPntSprite].PartType = 58;

													Q_PntSprite[NomPntSprite].IR = 255;
													Q_PntSprite[NomPntSprite].IG = 255;
													Q_PntSprite[NomPntSprite].IB = 255;

													Q_PntSprite[NomPntSprite].Alpha = 75;
													Q_PntSprite[NomPntSprite].Speed = 0.1;
													Q_PntSprite[NomPntSprite].Pos = HealSparks[SCRAM].Pos;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

													Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}
												}
											}
										}
									else
										{
										if(HealSparks[SCRAM].ActorID == 250 || 1)
											{
											if(((Forge[Q_ClericPlasma[aero].ActorID].Team != player.Team) || 1) && (geVec3d_DistanceBetween(&HealSparks[SCRAM].Pos, &Q_ClericPlasma[aero].Pos) < 50))
												{
												//### Kill Spark
												HealSparks[SCRAM].Absorbed = 4;

												jet=0;
												while(jet < 15 && (NomPntSprite < 24998))
													{
													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
													Q_PntSprite[NomPntSprite].Scale = 0.065f;
													Q_PntSprite[NomPntSprite].PartType = 58;

													Q_PntSprite[NomPntSprite].IR = 0;
													Q_PntSprite[NomPntSprite].IG = 0;
													Q_PntSprite[NomPntSprite].IB = 0;

													Q_PntSprite[NomPntSprite].Alpha = 75;
													Q_PntSprite[NomPntSprite].Speed = 0.1;
													Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[NomPlasma].Pos;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

													Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}

												jet=0;
												while(jet < 15 && (NomPntSprite < 24998))
													{
													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
													Q_PntSprite[NomPntSprite].Scale = 0.065f;
													Q_PntSprite[NomPntSprite].PartType = 58;

													Q_PntSprite[NomPntSprite].IR = 255;
													Q_PntSprite[NomPntSprite].IG = 255;
													Q_PntSprite[NomPntSprite].IB = 255;

													Q_PntSprite[NomPntSprite].Alpha = 75;
													Q_PntSprite[NomPntSprite].Speed = 0.1;
													Q_PntSprite[NomPntSprite].Pos = HealSparks[SCRAM].Pos;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

													Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}
												}
											}
										else
											{
											if(((Forge[Q_ClericPlasma[aero].ActorID].Team != Forge[HealSparks[SCRAM].ActorID].Team) || 1) && (geVec3d_DistanceBetween(&HealSparks[SCRAM].Pos, &Q_ClericPlasma[aero].Pos) < 50))
												{
												//### Kill Spark
												HealSparks[SCRAM].Absorbed = 4;

												jet=0;
												while(jet < 15 && (NomPntSprite < 24998))
													{
													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
													Q_PntSprite[NomPntSprite].Scale = 0.065f;
													Q_PntSprite[NomPntSprite].PartType = 58;

													Q_PntSprite[NomPntSprite].IR = 0;
													Q_PntSprite[NomPntSprite].IG = 0;
													Q_PntSprite[NomPntSprite].IB = 0;

													Q_PntSprite[NomPntSprite].Alpha = 75;
													Q_PntSprite[NomPntSprite].Speed = 0.1;
													Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[NomPlasma].Pos;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

													Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}

												jet=0;
												while(jet < 15 && (NomPntSprite < 24998))
													{
													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
													Q_PntSprite[NomPntSprite].Scale = 0.065f;
													Q_PntSprite[NomPntSprite].PartType = 58;

													Q_PntSprite[NomPntSprite].IR = 255;
													Q_PntSprite[NomPntSprite].IG = 255;
													Q_PntSprite[NomPntSprite].IB = 255;

													Q_PntSprite[NomPntSprite].Alpha = 75;
													Q_PntSprite[NomPntSprite].Speed = 0.1;
													Q_PntSprite[NomPntSprite].Pos = HealSparks[SCRAM].Pos;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

													Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}
												}
											}
										}
									}

								SCRAM++;
								}


							//###### Plasma Energy Cancellation
							SCRAM=0;
							while(SCRAM < NomPlasma)
								{
								if(Q_ClericPlasma[SCRAM].Live == 1)
									{
									if(Q_ClericPlasma[aero].ActorID == 250)
										{
										if(Q_ClericPlasma[SCRAM].ActorID != 250)
											{
											if((Forge[Q_ClericPlasma[SCRAM].ActorID].Team != player.Team) && (geVec3d_DistanceBetween(&Q_ClericPlasma[SCRAM].Pos, &Q_ClericPlasma[aero].Pos) < 50))
												{
												if(Q_ClericPlasma[aero].Live == 1)
													{
													//### Stop Plasma
													Q_ClericPlasma[aero].Alpha = 0;
													Q_ClericPlasma[aero].Live = 0;

													//### Array Reorder
													K = aero;
													while(K < NomPlasma - 1)
														{
														Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
														K++;
														}

													NomPlasma--;

													jet=0;
													while(jet < 15 && (NomPntSprite < 24998))
														{
														Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
														Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
														Q_PntSprite[NomPntSprite].Scale = 0.065f;
														Q_PntSprite[NomPntSprite].PartType = 58;

														Q_PntSprite[NomPntSprite].IR = 0;
														Q_PntSprite[NomPntSprite].IG = 0;
														Q_PntSprite[NomPntSprite].IB = 0;

														Q_PntSprite[NomPntSprite].Alpha = 75;
														Q_PntSprite[NomPntSprite].Speed = 0.1;
														Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[NomPlasma].Pos;

														Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

														Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

														Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

														Q_PntSprite[NomPntSprite].Live = 1;

														NomPntSprite++;
														jet++;
														}
													}

												if(Q_ClericPlasma[SCRAM].Live == 1)
													{
													//### Stop Plasma
													Q_ClericPlasma[SCRAM].Alpha = 0;
													Q_ClericPlasma[SCRAM].Live = 0;

													if(Q_ClericPlasma[SCRAM].Light != NULL) geWorld_RemoveLight(World, Q_ClericPlasma[SCRAM].Light);
													Q_ClericPlasma[SCRAM].LightON = 0;

													//### Array Reorder
													K = SCRAM;
													while(K < NomPlasma - 1)
														{
														Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
														K++;
														}

													NomPlasma--;

													jet=0;
													while(jet < 15 && (NomPntSprite < 24998))
														{
														Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
														Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
														Q_PntSprite[NomPntSprite].Scale = 0.065f;
														Q_PntSprite[NomPntSprite].PartType = 58;

														Q_PntSprite[NomPntSprite].IR = 80;
														Q_PntSprite[NomPntSprite].IG = 0;
														Q_PntSprite[NomPntSprite].IB = 180;

														Q_PntSprite[NomPntSprite].Alpha = 75;
														Q_PntSprite[NomPntSprite].Speed = 0.1;
														Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[SCRAM].Pos;

														Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

														Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

														Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

														Q_PntSprite[NomPntSprite].Live = 1;

														NomPntSprite++;
														jet++;
														}
													}
												}
											}
										}
									else
										{
										if(Q_ClericPlasma[SCRAM].ActorID == 250)
											{
											if((Forge[Q_ClericPlasma[aero].ActorID].Team != player.Team) && (geVec3d_DistanceBetween(&Q_ClericPlasma[SCRAM].Pos, &Q_ClericPlasma[aero].Pos) < 50))
												{
												if(Q_ClericPlasma[aero].Live == 1)
													{
													//### Stop Plasma
													Q_ClericPlasma[aero].Alpha = 0;
													Q_ClericPlasma[aero].Live = 0;

													if(Q_ClericPlasma[SCRAM].Light != NULL) geWorld_RemoveLight(World, Q_ClericPlasma[SCRAM].Light);
													Q_ClericPlasma[SCRAM].LightON = 0;

													//### Array Reorder
													K = aero;
													while(K < NomPlasma - 1)
														{
														Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
														K++;
														}

													NomPlasma--;

													jet=0;
													while(jet < 15 && (NomPntSprite < 24998))
														{
														Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
														Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
														Q_PntSprite[NomPntSprite].Scale = 0.065f;
														Q_PntSprite[NomPntSprite].PartType = 58;

														Q_PntSprite[NomPntSprite].IR = 0;
														Q_PntSprite[NomPntSprite].IG = 0;
														Q_PntSprite[NomPntSprite].IB = 0;

														Q_PntSprite[NomPntSprite].Alpha = 75;
														Q_PntSprite[NomPntSprite].Speed = 0.1;
														Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[NomPlasma].Pos;

														Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

														Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

														Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

														Q_PntSprite[NomPntSprite].Live = 1;

														NomPntSprite++;
														jet++;
														}
													}

												if(Q_ClericPlasma[SCRAM].Live == 1)
													{
													//### Stop Plasma
													Q_ClericPlasma[SCRAM].Alpha = 0;
													Q_ClericPlasma[SCRAM].Live = 0;

													//### Array Reorder
													K = SCRAM;
													while(K < NomPlasma - 1)
														{
														Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
														K++;
														}

													NomPlasma--;

													jet=0;
													while(jet < 15 && (NomPntSprite < 24998))
														{
														Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
														Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
														Q_PntSprite[NomPntSprite].Scale = 0.065f;
														Q_PntSprite[NomPntSprite].PartType = 58;

														Q_PntSprite[NomPntSprite].IR = 80;
														Q_PntSprite[NomPntSprite].IG = 0;
														Q_PntSprite[NomPntSprite].IB = 180;

														Q_PntSprite[NomPntSprite].Alpha = 75;
														Q_PntSprite[NomPntSprite].Speed = 0.1;
														Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[SCRAM].Pos;

														Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

														Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

														Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

														Q_PntSprite[NomPntSprite].Live = 1;

														NomPntSprite++;
														jet++;
														}
													}
												}
											}
										else
											{
											if((Forge[Q_ClericPlasma[aero].ActorID].Team != Forge[Q_ClericPlasma[SCRAM].ActorID].Team) && (geVec3d_DistanceBetween(&Q_ClericPlasma[SCRAM].Pos, &Q_ClericPlasma[aero].Pos) < 50))
												{
												if(Q_ClericPlasma[aero].Live == 1)
													{
													//### Stop Plasma
													Q_ClericPlasma[aero].Alpha = 0;
													Q_ClericPlasma[aero].Live = 0;

													if(Q_ClericPlasma[SCRAM].Light != NULL) geWorld_RemoveLight(World, Q_ClericPlasma[SCRAM].Light);
													Q_ClericPlasma[SCRAM].LightON = 0;

													//### Array Reorder
													K = aero;
													while(K < NomPlasma - 1)
														{
														Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
														K++;
														}

													NomPlasma--;

													jet=0;
													while(jet < 15 && (NomPntSprite < 24998))
														{
														Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
														Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
														Q_PntSprite[NomPntSprite].Scale = 0.065f;
														Q_PntSprite[NomPntSprite].PartType = 58;

														Q_PntSprite[NomPntSprite].IR = 0;
														Q_PntSprite[NomPntSprite].IG = 0;
														Q_PntSprite[NomPntSprite].IB = 0;

														Q_PntSprite[NomPntSprite].Alpha = 75;
														Q_PntSprite[NomPntSprite].Speed = 0.1;
														Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[NomPlasma].Pos;

														Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

														Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

														Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

														Q_PntSprite[NomPntSprite].Live = 1;

														NomPntSprite++;
														jet++;
														}
													}

												if(Q_ClericPlasma[SCRAM].Live == 1)
													{
													//### Stop Plasma
													Q_ClericPlasma[SCRAM].Alpha = 0;
													Q_ClericPlasma[SCRAM].Live = 0;

													//### Array Reorder
													K = SCRAM;
													while(K < NomPlasma - 1)
														{
														Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
														K++;
														}

													NomPlasma--;

													jet=0;
													while(jet < 15 && (NomPntSprite < 24998))
														{
														Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
														Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
														Q_PntSprite[NomPntSprite].Scale = 0.065f;
														Q_PntSprite[NomPntSprite].PartType = 58;

														Q_PntSprite[NomPntSprite].IR = 80;
														Q_PntSprite[NomPntSprite].IG = 0;
														Q_PntSprite[NomPntSprite].IB = 180;

														Q_PntSprite[NomPntSprite].Alpha = 75;
														Q_PntSprite[NomPntSprite].Speed = 0.1;
														Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[SCRAM].Pos;

														Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
														Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

														Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
														Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

														Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[NomPlasma].ActorID;

														Q_PntSprite[NomPntSprite].Live = 1;

														NomPntSprite++;
														jet++;
														}
													}
												}
											}
										}
									}

								SCRAM++;
								}


							if(geWorld_Collision(World,
								 NULL,
								 NULL,
								 &Q_ClericPlasma[aero].OldPos,
								 &Q_ClericPlasma[aero].Pos,
								 GE_CONTENTS_CANNOT_OCCUPY,
								 GE_COLLIDE_MODELS,
								 0xffffffff, NULL, NULL,
								 &Q_ClericPlasma[aero].Collision))
								{
								if(Q_ClericPlasma[aero].TIMER > 500)
									{
									Q_ClericPlasma[aero].Alpha = 0;
									Q_ClericPlasma[aero].Live = 0;

									//### Array Reorder
									K = aero;
									while(K < NomPlasma - 1)
										{
										Q_ClericPlasma[K] = Q_ClericPlasma[K+1];
										K++;
										}

									NomPlasma--;
									}
								else Q_ClericPlasma[aero].TraVec = PHY_BounceVector(Q_ClericPlasma[aero].TraVec, Q_ClericPlasma[aero].Collision.Plane.Normal);
								}
							}break;

						}//End Switch

					}//End Live

				aero++;
				}
			}
		}
	else		//#### Phantom Cleric Plasma
		{
		if(NomPlasma > 0)
			{
			aero = 0;
			while(aero < NomPlasma)
				{
				if(Q_ClericPlasma[aero].Live == 1)
					{
					switch(Q_ClericPlasma[aero].PartType)
						{
						case 0:
							{
							if(Q_ClericPlasma[aero].LightON == 0)
								{
								Q_ClericPlasma[aero].Light = geWorld_AddLight(World);
								Q_ClericPlasma[aero].LightON = 1;
								}

							Q_ClericPlasma[aero].CNTR += 1;
							Q_ClericPlasma[aero].RoTAMT = 0;

							if(Q_ClericPlasma[aero].CNTR > 0)
								{
								Q_ClericPlasma[aero].CNTR = -8;

								jet=0;
								while((jet < 15) && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
									Q_PntSprite[NomPntSprite].Scale = 0.019f;		//0.025f//0.002f
									Q_PntSprite[NomPntSprite].PartType = 21;

									Q_PntSprite[NomPntSprite].IR = 255;
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 55;
									Q_PntSprite[NomPntSprite].Speed = 0.2;
									Q_PntSprite[NomPntSprite].SpeedDIR = 0.2;
									Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[aero].Pos;

									Q_PntSprite[NomPntSprite].VecUp = Q_ClericPlasma[aero].TraVec;

										//Calculate Direction Vectors
									geXForm3d_SetYRotation(&RotateMatrix, PI/2);
									geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);
									Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);
									
									geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);
									geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);
									geXForm3d_SetYRotation(&RotateMatrix3, Q_ClericPlasma[aero].RoTAMT);

									Q_ClericPlasma[aero].RoTAMT += 0.393;

									geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
									geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);
									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

									Q_PntSprite[NomPntSprite].ActorID = Q_ClericPlasma[aero].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}
								}

							Q_ClericPlasma[aero].OldPos = Q_ClericPlasma[aero].Pos;

							//### Move Sprite
							geVec3d_MA(&Q_ClericPlasma[aero].Pos, -Q_ClericPlasma[aero].Speed*TimeScale, &Q_ClericPlasma[aero].TraVec, &Q_ClericPlasma[aero].Pos);

							DrawLaser(World, &Q_ClericPlasma[aero].Pos, &Q_ClericPlasma[aero].OldPos, &player.ViewXForm.Translation, Q_ClericPlasma[aero].Scale * 70, QAEFF03, Q_ClericPlasma[aero].Alpha, 255, 255, 255, 0);

							//##### Render Main Sprite

							Q_ClericPlasma[aero].Lvert.X = Q_ClericPlasma[aero].Pos.X;
							Q_ClericPlasma[aero].Lvert.Y = Q_ClericPlasma[aero].Pos.Y;
							Q_ClericPlasma[aero].Lvert.Z = Q_ClericPlasma[aero].Pos.Z;
							Q_ClericPlasma[aero].Lvert.r = 255;
							Q_ClericPlasma[aero].Lvert.g = 255;
							Q_ClericPlasma[aero].Lvert.b = 255;
							Q_ClericPlasma[aero].Lvert.a = Q_ClericPlasma[aero].Alpha;

							geWorld_AddPolyOnce (World, &Q_ClericPlasma[aero].Lvert, 1, QAEFF01, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 0.155f);

							Q_ClericPlasma[aero].Lvert.X = Q_ClericPlasma[aero].Pos.X;
							Q_ClericPlasma[aero].Lvert.Y = Q_ClericPlasma[aero].Pos.Y;
							Q_ClericPlasma[aero].Lvert.Z = Q_ClericPlasma[aero].Pos.Z;
							Q_ClericPlasma[aero].Lvert.r = 255;
							Q_ClericPlasma[aero].Lvert.g = 255;
							Q_ClericPlasma[aero].Lvert.b = 255;
							Q_ClericPlasma[aero].Lvert.a = Q_ClericPlasma[aero].Alpha/2.2;

							geWorld_AddPolyOnce(World, &Q_ClericPlasma[aero].Lvert, 1, SparkCorona[Q_ClericPlasma[aero].CoronaMatCnt], GE_TEXTURED_POINT, Q_ClericPlasma[aero].RenderFlags, 0.15);

							//### Increment Corona Material
							if(Q_ClericPlasma[aero].CoronaMatCntDIR == 0)
								{
								Q_ClericPlasma[aero].CoronaMatCnt++;
								if(Q_ClericPlasma[aero].CoronaMatCnt > 3)
									{
									Q_ClericPlasma[aero].CoronaMatCnt = 3;
									Q_ClericPlasma[aero].CoronaMatCntDIR = 1;
									}
								}
							else
								{
								Q_ClericPlasma[aero].CoronaMatCnt--;
								if(Q_ClericPlasma[aero].CoronaMatCnt < 0)
									{
									Q_ClericPlasma[aero].CoronaMatCnt = 0;
									Q_ClericPlasma[aero].CoronaMatCntDIR = 0;
									}
								}

							if(Q_ClericPlasma[aero].LightON == 1)
								{
								Q_ClericPlasma[NomPlasma].LightColor.r = 255.0f;
								Q_ClericPlasma[NomPlasma].LightColor.g = 35.0f;
								Q_ClericPlasma[NomPlasma].LightColor.b = 255.0f;
								Q_ClericPlasma[NomPlasma].LightColor.a = 155.0f;

								geWorld_SetLightAttributes(World, Q_ClericPlasma[aero].Light, &Q_ClericPlasma[aero].Pos, &Q_ClericPlasma[aero].LightColor, 200, GE_TRUE);
								}
							}break; //End Friendly Plasma

						case 1:	//OFFENSIVE PLASMA
							{
							Q_ClericPlasma[aero].TIMER += TimeScale;

							Q_ClericPlasma[aero].CNTR += 1;
							Q_ClericPlasma[aero].RoTAMT = 0;

							if(Q_ClericPlasma[aero].CNTR > 0)
								{
								Q_ClericPlasma[aero].CNTR = -8;

								jet=0;
								while((jet < 15) && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
									Q_PntSprite[NomPntSprite].Scale = 0.019f;		//0.025f//0.002f
									Q_PntSprite[NomPntSprite].PartType = 21;

									Q_PntSprite[NomPntSprite].IR = 255;
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 55;
									Q_PntSprite[NomPntSprite].Speed = 0.2;
									Q_PntSprite[NomPntSprite].SpeedDIR = 0.2;
									Q_PntSprite[NomPntSprite].Pos = Q_ClericPlasma[aero].Pos;

									Q_PntSprite[NomPntSprite].VecUp = Q_ClericPlasma[aero].TraVec;

										//Calculate Direction Vectors
									geXForm3d_SetYRotation(&RotateMatrix, PI/2);
									geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);
									Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);
									
									geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);
									geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);
									geXForm3d_SetYRotation(&RotateMatrix3, Q_ClericPlasma[aero].RoTAMT);

									Q_ClericPlasma[aero].RoTAMT += 0.393;

									geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
									geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);
									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

									Q_PntSprite[NomPntSprite].ActorID = 250;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}
								}

							if(Q_ClericPlasma[aero].Speed + 15 *TimeScale < 160) Q_ClericPlasma[aero].Speed += 15 * TimeScale;
							else Q_ClericPlasma[aero].Speed = 160;

							Q_ClericPlasma[aero].OldPos = Q_ClericPlasma[aero].Pos;

							//### Move Sprite
							geVec3d_MA(&Q_ClericPlasma[aero].Pos, Q_ClericPlasma[aero].Speed*TimeScale, &Q_ClericPlasma[aero].TraVec, &Q_ClericPlasma[aero].Pos);

							DrawLaser(World, &Q_ClericPlasma[aero].Pos, &Q_ClericPlasma[aero].OldPos, &player.ViewXForm.Translation, 0.2 * 70, QAEFF31, Q_ClericPlasma[aero].Alpha, 255, 255, 255, 0);

							//##### Render Main Sprite

							Q_ClericPlasma[aero].Lvert.X = Q_ClericPlasma[aero].Pos.X;
							Q_ClericPlasma[aero].Lvert.Y = Q_ClericPlasma[aero].Pos.Y;
							Q_ClericPlasma[aero].Lvert.Z = Q_ClericPlasma[aero].Pos.Z;
							Q_ClericPlasma[aero].Lvert.r = 255;
							Q_ClericPlasma[aero].Lvert.g = 255;
							Q_ClericPlasma[aero].Lvert.b = 255;
							Q_ClericPlasma[aero].Lvert.a = Q_ClericPlasma[aero].Alpha;

							geWorld_AddPolyOnce (World, &Q_ClericPlasma[aero].Lvert, 1, QAEFF30, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 0.155f);

							Q_ClericPlasma[aero].Lvert.X = Q_ClericPlasma[aero].Pos.X;
							Q_ClericPlasma[aero].Lvert.Y = Q_ClericPlasma[aero].Pos.Y;
							Q_ClericPlasma[aero].Lvert.Z = Q_ClericPlasma[aero].Pos.Z;
							Q_ClericPlasma[aero].Lvert.r = 255;
							Q_ClericPlasma[aero].Lvert.g = 255;
							Q_ClericPlasma[aero].Lvert.b = 255;
							Q_ClericPlasma[aero].Lvert.a = Q_ClericPlasma[aero].Alpha/2.2;

							geWorld_AddPolyOnce(World, &Q_ClericPlasma[aero].Lvert, 1, EGrabCorona[Q_ClericPlasma[aero].CoronaMatCnt], GE_TEXTURED_POINT, Q_ClericPlasma[aero].RenderFlags, 0.15);

							//### Increment Corona Material
							if(Q_ClericPlasma[aero].CoronaMatCntDIR == 0)
								{
								Q_ClericPlasma[aero].CoronaMatCnt++;
								if(Q_ClericPlasma[aero].CoronaMatCnt > 3)
									{
									Q_ClericPlasma[aero].CoronaMatCnt = 3;
									Q_ClericPlasma[aero].CoronaMatCntDIR = 1;
									}
								}
							else
								{
								Q_ClericPlasma[aero].CoronaMatCnt--;
								if(Q_ClericPlasma[aero].CoronaMatCnt < 0)
									{
									Q_ClericPlasma[aero].CoronaMatCnt = 0;
									Q_ClericPlasma[aero].CoronaMatCntDIR = 0;
									}
								}

							}break;

						}
					}
				aero++;
				}
			
			}
		}



	//########  - POINT SPRITES -  ########//

	if(NomPntSprite > 0)
		{
		TempNomPntSprite = NomPntSprite;
		helly = 0;
		while(helly < TempNomPntSprite)
			{
			if(Q_PntSprite[helly].Live == 1)
				{
				switch(Q_PntSprite[helly].PartType)
					{
					case 0:
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (40*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (40*TimeScale);	//25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						//if(Q_PntSprite[helly].Speed - 0.5 > 0) Q_PntSprite[helly].Speed -= 0.5;
						//else Q_PntSprite[helly].Speed = 0;

						if(Q_PntSprite[helly].Speed + 0.5 > 0) Q_PntSprite[helly].Speed += 0.5;
						else Q_PntSprite[helly].Speed = 0;


						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;


						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = 255;
						Q_PntSprite[helly].Lvert.g = 255;
						Q_PntSprite[helly].Lvert.b = 255;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 1

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 2

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 3

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 4

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						} break;

					case 1:
						{
						//### Progress Speed
						if(Q_PntSprite[helly].Direction < 3)
							{
							if(Q_PntSprite[helly].Speed - (12.5*TimeScale) > 0) Q_PntSprite[helly].Speed -= (12.5*TimeScale);
							else
								{
								Q_PntSprite[helly].Direction++;
								Q_PntSprite[helly].Speed = 0;
								}
							}
						else
							{
							geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE2", &BoneMat);

							if(Q_PntSprite[helly].Speed - (20*TimeScale) > -65) Q_PntSprite[helly].Speed -= (20*TimeScale);
							else Q_PntSprite[helly].Speed = -65;

							geVec3d_Subtract(&Q_PntSprite[helly].Pos, &BoneMat.Translation, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);


							if(Q_PntSprite[helly].Pos.X > BoneMat.Translation.X - 30 && Q_PntSprite[helly].Pos.X < BoneMat.Translation.X + 30
								&& Q_PntSprite[helly].Pos.Y > BoneMat.Translation.Y - 30 && Q_PntSprite[helly].Pos.Y < BoneMat.Translation.Y + 30
								&& Q_PntSprite[helly].Pos.Z > BoneMat.Translation.Z - 30 && Q_PntSprite[helly].Pos.Z < BoneMat.Translation.Z + 30)
								{
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}


						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;


						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = 255;
						Q_PntSprite[helly].Lvert.g = 255;
						Q_PntSprite[helly].Lvert.b = 255;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 1

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 2

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 3

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 4

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						} break;

					case 2:
						{
						//### Progress Speed
						/*if(Q_PntSprite[helly].Direction < 16)
							{
							if(Q_PntSprite[helly].Speed - (10*TimeScale) > 0) Q_PntSprite[helly].Speed -= (10*TimeScale);
							else
								{
								Q_PntSprite[helly].Direction++;
								Q_PntSprite[helly].Speed = 0;
								}
							}
						else
							{
							geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE2", &BoneMat);

							if(Q_PntSprite[helly].Speed - (15*TimeScale) > -65) Q_PntSprite[helly].Speed -= (15*TimeScale);
							else Q_PntSprite[helly].Speed = -65;

							geVec3d_Subtract(&Q_PntSprite[helly].Pos, &BoneMat.Translation, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);


							if(Q_PntSprite[helly].Pos.X > BoneMat.Translation.X - 30 && Q_PntSprite[helly].Pos.X < BoneMat.Translation.X + 30
								&& Q_PntSprite[helly].Pos.Y > BoneMat.Translation.Y - 30 && Q_PntSprite[helly].Pos.Y < BoneMat.Translation.Y + 30
								&& Q_PntSprite[helly].Pos.Z > BoneMat.Translation.Z - 30 && Q_PntSprite[helly].Pos.Z < BoneMat.Translation.Z + 30) Q_PntSprite[helly].Live = 0;
							}*/


						if(Q_PntSprite[helly].Direction < 16)
							{
							if(Q_PntSprite[helly].Speed - (2*TimeScale) > 0) Q_PntSprite[helly].Speed -= (2*TimeScale);
							else
								{
								Q_PntSprite[helly].Direction++;
								Q_PntSprite[helly].Speed = 0;
								}
							}
						else
							{
							//### Progress Alpha
							if(Q_PntSprite[helly].Alpha - (40*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (40*TimeScale);
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}


						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;


						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = 255;
						Q_PntSprite[helly].Lvert.g = 255;
						Q_PntSprite[helly].Lvert.b = 255;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 1

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 2

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 3

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 4

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						} break;

					case 3:		//Trail Sprites
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (35*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.5*TimeScale < 20) Q_PntSprite[helly].Speed += 0.5*TimeScale;
						else Q_PntSprite[helly].Speed = 20;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed/7)*TimeScale;

						Q_PntSprite[helly].TraVec.Y -= 0.09;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, attsprite, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 4:		//KO Sprites
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (10*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (10*TimeScale);	//25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.45*TimeScale < 20) Q_PntSprite[helly].Speed += 0.45*TimeScale;
						else Q_PntSprite[helly].Speed = 0;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= Q_PntSprite[helly].Speed*TimeScale;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = 255;
						Q_PntSprite[helly].Lvert.g = 255;
						Q_PntSprite[helly].Lvert.b = 255;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, attsprite, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 5:		//Trail Sprites II
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (35*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (35*TimeScale);	//25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 1*TimeScale < 20) Q_PntSprite[helly].Speed += 1*TimeScale;
						else Q_PntSprite[helly].Speed = 0;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed/3)*TimeScale;

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = 255;
						Q_PntSprite[helly].Lvert.g = 255;
						Q_PntSprite[helly].Lvert.b = 255;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, attsprite, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 6:		//Trail Sprites III
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (20*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (20*TimeScale);	//25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 3.5 * TimeScale < 20) Q_PntSprite[helly].Speed += 3.5 * TimeScale;
						else Q_PntSprite[helly].Speed = 0;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].TraVec.X += (((float)rand() / 32767)-0.5)/4;
						Q_PntSprite[helly].TraVec.Y += (((float)rand() / 32767)-0.5)/4;
						Q_PntSprite[helly].TraVec.Z += (((float)rand() / 32767)-0.5)/4;

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = 255;
						Q_PntSprite[helly].Lvert.g = 255;
						Q_PntSprite[helly].Lvert.b = 255;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, attsprite, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 7:
						{
						//### Progress Speed
						if(Q_PntSprite[helly].Direction < 3)
							{
							if(Q_PntSprite[helly].Speed - (12.5*TimeScale) > 0) Q_PntSprite[helly].Speed -= (12.5*TimeScale);
							else
								{
								Q_PntSprite[helly].Direction++;
								Q_PntSprite[helly].Speed = 0;
								}
							}
						else
							{
							geActor_GetBoneTransform(Forge[Q_PntSprite[helly].AvatarID].Avatar.Actor, "BIP01 SPINE2", &BoneMat);

							if(Q_PntSprite[helly].Speed - (20*TimeScale) > -65) Q_PntSprite[helly].Speed -= (20*TimeScale);
							else Q_PntSprite[helly].Speed = -65;

							geVec3d_Subtract(&Q_PntSprite[helly].Pos, &BoneMat.Translation, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);


							if(Q_PntSprite[helly].Pos.X > BoneMat.Translation.X - 30 && Q_PntSprite[helly].Pos.X < BoneMat.Translation.X + 30
								&& Q_PntSprite[helly].Pos.Y > BoneMat.Translation.Y - 30 && Q_PntSprite[helly].Pos.Y < BoneMat.Translation.Y + 30
								&& Q_PntSprite[helly].Pos.Z > BoneMat.Translation.Z - 30 && Q_PntSprite[helly].Pos.Z < BoneMat.Translation.Z + 30)
								{
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}


						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;


						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = 255;
						Q_PntSprite[helly].Lvert.g = 255;
						Q_PntSprite[helly].Lvert.b = 255;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 1

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 2

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 3

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 4

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, greenyN2, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						} break;

					case 8:		//QA EFFECT 01
						{

						//Particle ejjector LVL02
						Q_PntSprite[helly].CNTR += 1 *TimeScale;

						jet=0;
						while((jet < 5 * TimeScale) && (Q_PntSprite[helly].CNTR > 3) && (NomPntSprite < 24998))
							{
							Q_PntSprite[helly].CNTR = 0;

							Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
							Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
							Q_PntSprite[NomPntSprite].Scale = 0.06f;		//0.025f//0.002f
							Q_PntSprite[NomPntSprite].PartType = 10;

							Q_PntSprite[NomPntSprite].IR = 255;
							Q_PntSprite[NomPntSprite].IG = Q_PntSprite[helly].Alpha;
							Q_PntSprite[NomPntSprite].IB = 255;

							if(Q_PntSprite[NomPntSprite].IR > 255) Q_PntSprite[NomPntSprite].IR = 255;
							if(Q_PntSprite[NomPntSprite].IG > 255) Q_PntSprite[NomPntSprite].IG = 255;
							if(Q_PntSprite[NomPntSprite].IB > 255) Q_PntSprite[NomPntSprite].IB = 255;

							Q_PntSprite[NomPntSprite].Alpha = Q_PntSprite[helly].Alpha;
							//if(Q_PntSprite[NomPntSprite].Alpha > 255) Q_PntSprite[helly].Alpha = 255;

							Q_PntSprite[NomPntSprite].Speed = 0.4;
							Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

							Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

							Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

							Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

							Q_PntSprite[NomPntSprite].Live = 1;

							NomPntSprite++;
							//if(NomPntSprite > 249998) NomPntSprite = 0;
							jet++;
							}

						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[NomPntSprite].Scale * 215, QAEFF03, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (2*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (2*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;
							//Q_PntSprite[helly].ATTLightON = 0;
							//geWorld_RemoveLight(World, Q_PntSprite[helly].ATTLight);

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.05 *TimeScale < 9) Q_PntSprite[helly].Speed += 0.05 * TimeScale;
						else Q_PntSprite[helly].Speed = 9;	//0.2


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed/6)*TimeScale;

						//Q_PntSprite[helly].TraVec.Y -= 0.02/player.TestVALUE09;

						//geWorld_SetLightAttributes(World, Q_PntSprite[helly].ATTLight, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].ATTLightColor, 200, GE_TRUE);
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF01, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 9:	//Mind Flakes
						{
						player.CNTR1 += 1 *TimeScale;

						jet=0;
						while((jet < 2 * TimeScale) && (player.CNTR1 > 3) && (NomPntSprite < 24998))
							{
							player.CNTR1 = 0;

							Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
							Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
							Q_PntSprite[NomPntSprite].Scale = 0.045f * player.TestVALUE03;		//0.025f//0.002f
							Q_PntSprite[NomPntSprite].PartType = 10;

							Q_PntSprite[NomPntSprite].IR = 255;
							Q_PntSprite[NomPntSprite].IG = 255;
							Q_PntSprite[NomPntSprite].IB = 255;

							Q_PntSprite[NomPntSprite].Alpha = 255;
							Q_PntSprite[NomPntSprite].Speed = 0.5;
							Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

							Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

							Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*7;
							Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*7;
							Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*7;

							Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

							Q_PntSprite[NomPntSprite].Live = 1;

							NomPntSprite++;
							//if(NomPntSprite > 2499) NomPntSprite = 0;
							jet++;
							}

						//Particle ejector LVL02

						//geWorld_SetLightAttributes(World, Q_PntSprite[helly].ATTLight, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].ATTLightColor, 250, GE_TRUE);


						//### Progress Speed
						geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &BoneMat);

						if(Q_PntSprite[helly].Speed + (0.1*TimeScale) > 10) Q_PntSprite[helly].Speed += (0.1*TimeScale);
						else Q_PntSprite[helly].Speed = 3;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						geVec3d_Subtract(&Q_PntSprite[helly].Pos, &BoneMat.Translation, &Q_PntSprite[helly].TempVec1);

						Q_PntSprite[helly].TempDist = geVec3d_Length(&Q_PntSprite[helly].TempVec1);

						geVec3d_Normalize(&Q_PntSprite[helly].TempVec1);

						geVec3d_MA(&Q_PntSprite[helly].Pos, 30 - Q_PntSprite[helly].TempDist, &Q_PntSprite[helly].TempVec1, &Q_PntSprite[helly].Pos);


						Q_PntSprite[helly].TraVec.X += (((float)rand() / 32767)-0.5) * 0.15;
						Q_PntSprite[helly].TraVec.Y += (((float)rand() / 32767)-0.5) * 0.15;
						Q_PntSprite[helly].TraVec.Z += (((float)rand() / 32767)-0.5) * 0.15;


						if(Q_PntSprite[helly].AlphaDIR == 0)
							{
							if(Q_PntSprite[helly].Alpha + (30*TimeScale) <= 200) Q_PntSprite[helly].Alpha += (30*TimeScale);	//3  //25
							else
								{
								Q_PntSprite[helly].Alpha = 200;
								Q_PntSprite[helly].AlphaDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Alpha - (5*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (5*TimeScale);	//3  //25
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].AlphaDIR = 0;
								Q_PntSprite[helly].AlphaCNT++;

								if(Q_PntSprite[helly].AlphaCNT > 2)
									{
									Q_PntSprite[helly].Live = 0;
									Q_PntSprite[helly].ATTLightON = 0;
									geWorld_RemoveLight(World, Q_PntSprite[helly].ATTLight);

									//### Array Reorder
									K = helly;
									while(K < NomPntSprite - 1)
										{
										Q_PntSprite[K] = Q_PntSprite[K+1];
										K++;
										}

									NomPntSprite--;
									}
								}
							}


						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;

						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;


						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, attsprite, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 1

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, attsprite, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 2

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, attsprite, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 3

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, attsprite, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						//##### Sprite Trail 4

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 50 >= 0) Q_PntSprite[helly].AlphaSTR -= 50;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, attsprite, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);


						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						} break;


					case 10:		//QA EFFECT 03
						{

						//Particle ejjector LVL02
						/*jet=0;
						while((jet < 1) && (NomPntSprite < 24999))
							{
							Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
							Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
							Q_PntSprite[NomPntSprite].Scale = 0.015f;		//0.025f//0.002f
							Q_PntSprite[NomPntSprite].PartType = 10;

							Q_PntSprite[NomPntSprite].IR = 255;
							Q_PntSprite[NomPntSprite].IG = 255;
							Q_PntSprite[NomPntSprite].IB = 255;

							Q_PntSprite[NomPntSprite].Alpha = 255;
							Q_PntSprite[NomPntSprite].Speed = 0.1;
							Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

							Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

							Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*7;
							Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*7;
							Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*7;

							Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

							Q_PntSprite[NomPntSprite].Live = 1;

							NomPntSprite++;
							//if(NomPntSprite > 2499) NomPntSprite = 0;
							jet++;
							}*/

						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[NomPntSprite].Scale * 215, QAEFF03, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (4*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (4*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.5*TimeScale < 9) Q_PntSprite[helly].Speed += 0.5*TimeScale;
						else Q_PntSprite[helly].Speed = 9;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						Q_PntSprite[helly].TraVec.Y -= 0.02;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF01, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 11:		//QA EFFECT 03
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (2*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (2*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.2*TimeScale < 6) Q_PntSprite[helly].Speed += 0.2*TimeScale;
						else Q_PntSprite[helly].Speed = 18;

						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						Q_PntSprite[helly].TraVec.Y -= 0.03;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						
						if(geWorld_Collision(World,
							 NULL,
							 NULL,
							 &Q_PntSprite[helly].OldPos,
							 &Q_PntSprite[helly].Pos,
							 GE_CONTENTS_CANNOT_OCCUPY,
							 GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
							 0xffffffff, NULL, NULL,
							 &Q_PntSprite[helly].Collision))
							{
							Q_PntSprite[helly].Pos = Q_PntSprite[helly].OldPos;

							/*if(BSparks[helly].Bounce < 2)	//2
								{*/
								Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);

								//BETTER
								//Q_PntSprite[helly].Gravity = Q_PntSprite[helly].Gravity * 2;
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].Speed / 1.5;
							/*	Q_PntSprite[helly].Bounce++;
								}
							else
								{
								BSparks[helly].Live = 0;
								BSparks[helly].Pos.Y = -255;

								//### Array Reorder
								K = helly;
								while(K < NomSparks - 1)
									{
									BSparks[K] = BSparks[K+1];
									K++;
									}

								NomSparks--;
								}*/
							}

				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF01, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 12:		//QA EFFECT 01
						{
						//Particle ejjector LVL02
						Q_PntSprite[helly].CNTR += 1 *TimeScale;

						jet=0;
						while((jet < 5 * TimeScale) && (Q_PntSprite[helly].CNTR > 3) && (NomPntSprite < 24998))
							{
							Q_PntSprite[helly].CNTR = 0;

							Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
							Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
							Q_PntSprite[NomPntSprite].Scale = 0.06f;		//0.025f//0.002f
							Q_PntSprite[NomPntSprite].PartType = 13;

							Q_PntSprite[NomPntSprite].IR = 255;
							Q_PntSprite[NomPntSprite].IG = Q_PntSprite[helly].Alpha;
							Q_PntSprite[NomPntSprite].IB = 255;

							if(Q_PntSprite[NomPntSprite].IR > 255) Q_PntSprite[NomPntSprite].IR = 255;
							if(Q_PntSprite[NomPntSprite].IG > 255) Q_PntSprite[NomPntSprite].IG = 255;
							if(Q_PntSprite[NomPntSprite].IB > 255) Q_PntSprite[NomPntSprite].IB = 255;

							Q_PntSprite[NomPntSprite].Alpha = Q_PntSprite[helly].Alpha;
							//if(Q_PntSprite[NomPntSprite].Alpha > 255) Q_PntSprite[helly].Alpha = 255;

							Q_PntSprite[NomPntSprite].Speed = 0.4;
							Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

							Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

							Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

							Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

							Q_PntSprite[NomPntSprite].Live = 1;

							NomPntSprite++;
							//if(NomPntSprite > 249998) NomPntSprite = 0;
							jet++;
							}

						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[NomPntSprite].Scale * 215, QAEFF05, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (2*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (2*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;
							//Q_PntSprite[helly].ATTLightON = 0;
							//geWorld_RemoveLight(World, Q_PntSprite[helly].ATTLight);

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.2 *TimeScale < 9) Q_PntSprite[helly].Speed += 0.2 * TimeScale;
						else Q_PntSprite[helly].Speed = 9;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed/6)*TimeScale;

						//Q_PntSprite[helly].TraVec.Y -= 0.02/player.TestVALUE09;

						//geWorld_SetLightAttributes(World, Q_PntSprite[helly].ATTLight, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].ATTLightColor, 200, GE_TRUE);
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF04, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 13:		//QA EFFECT 03
						{
						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[NomPntSprite].Scale * 215, QAEFF05, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (4*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (4*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.5*TimeScale < 9) Q_PntSprite[helly].Speed += 0.5*TimeScale;
						else Q_PntSprite[helly].Speed = 9;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						Q_PntSprite[helly].TraVec.Y -= 0.02;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF04, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 14:		//ORIG SPRITE EFF QA EFFECT 01
						{

						//Particle ejjector LVL02
						Q_PntSprite[helly].CNTR += 1 *TimeScale;

						jet=0;
						while((jet < 5 * TimeScale) && (Q_PntSprite[helly].CNTR > 3) && (NomPntSprite < 24998))
							{
							Q_PntSprite[helly].CNTR = 0;

							Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
							Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
							Q_PntSprite[NomPntSprite].Scale = 0.06f;		//0.025f//0.002f
							Q_PntSprite[NomPntSprite].PartType = 15;

							Q_PntSprite[NomPntSprite].IR = 255;
							Q_PntSprite[NomPntSprite].IG = Q_PntSprite[helly].Alpha;
							Q_PntSprite[NomPntSprite].IB = 255;

							if(Q_PntSprite[NomPntSprite].IR > 255) Q_PntSprite[NomPntSprite].IR = 255;
							if(Q_PntSprite[NomPntSprite].IG > 255) Q_PntSprite[NomPntSprite].IG = 255;
							if(Q_PntSprite[NomPntSprite].IB > 255) Q_PntSprite[NomPntSprite].IB = 255;

							Q_PntSprite[NomPntSprite].Alpha = Q_PntSprite[helly].Alpha;
							//if(Q_PntSprite[NomPntSprite].Alpha > 255) Q_PntSprite[helly].Alpha = 255;

							Q_PntSprite[NomPntSprite].Speed = 0.4;
							Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

							Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

							Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

							Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

							Q_PntSprite[NomPntSprite].Live = 1;

							NomPntSprite++;
							//if(NomPntSprite > 249998) NomPntSprite = 0;
							jet++;
							}

						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (2*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (2*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.2 *TimeScale < 9) Q_PntSprite[helly].Speed += 0.2 * TimeScale;
						else Q_PntSprite[helly].Speed = 9;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed/6)*TimeScale;

						//Q_PntSprite[helly].TraVec.Y -= 0.02/player.TestVALUE09;

						//geWorld_SetLightAttributes(World, Q_PntSprite[helly].ATTLight, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].ATTLightColor, 200, GE_TRUE);
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF01, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 15:		//QA EFFECT 03
						{
						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (4*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (4*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.5*TimeScale < 9) Q_PntSprite[helly].Speed += 0.5*TimeScale;
						else Q_PntSprite[helly].Speed = 9;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						Q_PntSprite[helly].TraVec.Y -= 0.02;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF01, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 16:	//QA EFFECT 01
						{
						//Particle ejjector LVL02
						Q_PntSprite[helly].CNTR += 1 *TimeScale;

						jet=0;
						while((jet < 5 * TimeScale) && (Q_PntSprite[helly].CNTR > 3) && (NomPntSprite < 24998))
							{
							Q_PntSprite[helly].CNTR = 0;

							Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
							Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
							Q_PntSprite[NomPntSprite].Scale = 0.06f;		//0.025f//0.002f
							Q_PntSprite[NomPntSprite].PartType = 17;

							Q_PntSprite[NomPntSprite].IR = 255;
							Q_PntSprite[NomPntSprite].IG = Q_PntSprite[helly].Alpha;
							Q_PntSprite[NomPntSprite].IB = 255;

							if(Q_PntSprite[NomPntSprite].IR > 255) Q_PntSprite[NomPntSprite].IR = 255;
							if(Q_PntSprite[NomPntSprite].IG > 255) Q_PntSprite[NomPntSprite].IG = 255;
							if(Q_PntSprite[NomPntSprite].IB > 255) Q_PntSprite[NomPntSprite].IB = 255;

							Q_PntSprite[NomPntSprite].Alpha = Q_PntSprite[helly].Alpha;
							//if(Q_PntSprite[NomPntSprite].Alpha > 255) Q_PntSprite[helly].Alpha = 255;

							Q_PntSprite[NomPntSprite].Speed = 0.4;
							Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

							Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

							Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

							Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

							Q_PntSprite[NomPntSprite].Live = 1;

							NomPntSprite++;
							//if(NomPntSprite > 249998) NomPntSprite = 0;
							jet++;
							}

						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[NomPntSprite].Scale * 215, QAEFF03, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (2*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (2*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.8 *TimeScale < 35) Q_PntSprite[helly].Speed += 0.8 * TimeScale;
						else Q_PntSprite[helly].Speed = 35;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF01, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 17:		//QA EFFECT 03
						{
						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[NomPntSprite].Scale * 215, QAEFF03, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (4*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (4*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.5*TimeScale < 9) Q_PntSprite[helly].Speed += 0.5*TimeScale;
						else Q_PntSprite[helly].Speed = 9;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						Q_PntSprite[helly].TraVec.Y -= 0.02;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF01, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 18:		//QA EFFECT 03
						{
						//Particle ejjector LVL02
						Q_PntSprite[helly].CNTR += 1 *TimeScale;

						jet=0;
						while((jet < 8 * TimeScale) && (Q_PntSprite[helly].CNTR > 2) && (NomPntSprite < 24998))
							{
							Q_PntSprite[helly].CNTR = 0;

							Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
							Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
							Q_PntSprite[NomPntSprite].Scale = 0.06f;		//0.025f//0.002f
							Q_PntSprite[NomPntSprite].PartType = 19;

							Q_PntSprite[NomPntSprite].IR = 255;
							Q_PntSprite[NomPntSprite].IG = Q_PntSprite[helly].Alpha;
							Q_PntSprite[NomPntSprite].IB = 255;

							if(Q_PntSprite[NomPntSprite].IR > 255) Q_PntSprite[NomPntSprite].IR = 255;
							if(Q_PntSprite[NomPntSprite].IG > 255) Q_PntSprite[NomPntSprite].IG = 255;
							if(Q_PntSprite[NomPntSprite].IB > 255) Q_PntSprite[NomPntSprite].IB = 255;

							Q_PntSprite[NomPntSprite].Alpha = Q_PntSprite[helly].Alpha;
							//if(Q_PntSprite[NomPntSprite].Alpha > 255) Q_PntSprite[helly].Alpha = 255;

							Q_PntSprite[NomPntSprite].Speed = 0.4;
							Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

							Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
							Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

							Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
							Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

							Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

							Q_PntSprite[NomPntSprite].Live = 1;

							NomPntSprite++;
							//if(NomPntSprite > 249998) NomPntSprite = 0;
							jet++;
							}

						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						//DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[NomPntSprite].Scale * 215, QAEFF03, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (4*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (4*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.8*TimeScale < 20) Q_PntSprite[helly].Speed += 0.8*TimeScale;
						else Q_PntSprite[helly].Speed = 20;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						Q_PntSprite[helly].TraVec.Y -= 0.02;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF06, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 19:		//QA EFFECT 03
						{
						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						//DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[NomPntSprite].Scale * 215, QAEFF03, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);


						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (5*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (5*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}


						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + 0.25*TimeScale < 4) Q_PntSprite[helly].Speed += 0.25*TimeScale;
							else
								{
								Q_PntSprite[helly].Speed = 4;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - 0.5*TimeScale > 0.3) Q_PntSprite[helly].Speed += 0.5*TimeScale;
							else Q_PntSprite[helly].Speed = 0.3;
							}

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						//Q_PntSprite[helly].TraVec.Y -= 0.02;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF07, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 20:	//QA EFFECT PLASMA EJECTOR
						{
						//Particle ejjector LVL02
						player.CNTR5 += 1;
						RotAMT = 0;

						TempVec1 = Q_PntSprite[helly].Pos;

						//TempVec1.Y += (((float)rand() / 32767)-0.5)*9;

						if(player.CNTR5 > 3)
							{
							player.CNTR5 = 0;

							jet=0;
							while((jet < 20) && (NomPntSprite < 24998))
								{
								Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
								Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
								Q_PntSprite[NomPntSprite].Scale = 0.0165f;		//0.025f//0.002f
								Q_PntSprite[NomPntSprite].PartType = 21;

								Q_PntSprite[NomPntSprite].IR = 255;
								Q_PntSprite[NomPntSprite].IG = 255;
								Q_PntSprite[NomPntSprite].IB = 255;

								Q_PntSprite[NomPntSprite].Alpha = 55;
								Q_PntSprite[NomPntSprite].Speed = 0.2;
								Q_PntSprite[NomPntSprite].SpeedDIR = 0.2;
								Q_PntSprite[NomPntSprite].Pos = TempVec1;

								Q_PntSprite[NomPntSprite].VecUp = Q_PntSprite[helly].TraVec;

									//Calculate Direction Vectors
								geXForm3d_SetYRotation(&RotateMatrix, PI/2);
								geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);
								Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
								geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);
								
								geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);
								geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);
								geXForm3d_SetYRotation(&RotateMatrix3, RotAMT);

								RotAMT += 0.314;

								geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
								geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);
								geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

								Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

								Q_PntSprite[NomPntSprite].Live = 1;

								NomPntSprite++;
								jet++;
								}
							}

						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (2*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (2*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//Q_PntSprite[helly].ATTLightON = 0;
							//geWorld_RemoveLight(World, Q_PntSprite[helly].ATTLight);

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						//if(Q_PntSprite[helly].Speed + 0.8 *TimeScale < 35) Q_PntSprite[helly].Speed += 0.8 * TimeScale;
						//else Q_PntSprite[helly].Speed = 35;


						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*7*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);


						DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[helly].Scale * 70, QAEFF03, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);

						//geWorld_SetLightAttributes(World, Q_PntSprite[helly].ATTLight, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].ATTLightColor, 200, GE_TRUE);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF01, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = 255;
						Q_PntSprite[helly].Lvert.g = 255;
						Q_PntSprite[helly].Lvert.b = 255;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha/2.2;

						geWorld_AddPolyOnce(World, &Q_PntSprite[helly].Lvert, 1, SparkCorona[Q_PntSprite[helly].CoronaMatCnt], GE_TEXTURED_POINT, Q_PntSprite[helly].RenderFlags, 0.15);

						//### Increment Corona Material
						if(Q_PntSprite[helly].CoronaMatCntDIR == 0)
							{
							Q_PntSprite[helly].CoronaMatCnt++;
							if(Q_PntSprite[helly].CoronaMatCnt > 3)
								{
								Q_PntSprite[helly].CoronaMatCnt = 3;
								Q_PntSprite[helly].CoronaMatCntDIR = 1;
								}
							}
						else
							{
							Q_PntSprite[helly].CoronaMatCnt--;
							if(Q_PntSprite[helly].CoronaMatCnt < 0)
								{
								Q_PntSprite[helly].CoronaMatCnt = 0;
								Q_PntSprite[helly].CoronaMatCntDIR = 0;
								}
							}
						} break;


					case 21:		//QA EFFECT 03
						{
						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						//DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, Q_PntSprite[NomPntSprite].Scale * 215, QAEFF03, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);

						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (7*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (7*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}


						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + 0.25*TimeScale < 10) Q_PntSprite[helly].Speed += 0.25*TimeScale;
							else
								{
								Q_PntSprite[helly].Speed = 10;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - 0.5*TimeScale > 0.3) Q_PntSprite[helly].Speed += 0.5*TimeScale;
							else Q_PntSprite[helly].Speed = 0.3;
							}

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						//Q_PntSprite[helly].TraVec.Y -= 0.02;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF07, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 23:	//SOLID QA EFFECT INTELLIGENCE BOOST
						{
						if(Q_PntSprite[helly].Speed < 0.25 && Q_PntSprite[helly].SpeedDIR == 0) Q_PntSprite[helly].Alpha = 1;
						else
							{
							if(Q_PntSprite[helly].AlphaLOCK == 0)
								{
								Q_PntSprite[helly].AlphaLOCK = 1;
								Q_PntSprite[helly].Alpha = Q_PntSprite[helly].AlphaSTR;
								Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
								}
							}

						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (0.65*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (0.65*TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}


						if(Q_PntSprite[helly].HeightPos < 7.5) Q_PntSprite[helly].SpeedMAX = (Q_PntSprite[helly].HeightPos/3) * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500);
						else Q_PntSprite[helly].SpeedMAX = ((15 - Q_PntSprite[helly].HeightPos)/3) * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + (Q_PntSprite[helly].SpeedMAX/7)*TimeScale < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += (Q_PntSprite[helly].SpeedMAX/7)*TimeScale;
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - (Q_PntSprite[helly].SpeedMAX/3)*TimeScale > 0.1) Q_PntSprite[helly].Speed -= (Q_PntSprite[helly].SpeedMAX/3)*TimeScale;
							else Q_PntSprite[helly].Speed = 0.1;
							}


						Q_PntSprite[helly].PushOUT += Q_PntSprite[helly].Speed*TimeScale;

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 HEAD", &player.QA_EFF_BONEMATRIX);
						TempVec1 = player.QA_EFF_BONEMATRIX.Translation;
						TempVec1.Y += 10;
						TempVec1.Y -= Q_PntSprite[helly].HeightPos;
						Q_PntSprite[helly].InitPos = TempVec1;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF07, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 24:	//SOLID QA EFFECT REL ENERGY EFFICIENCY
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (7*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (7*TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + (0.15*TimeScale) < 2) Q_PntSprite[helly].Speed += (0.15*TimeScale);
						else Q_PntSprite[helly].Speed = 2;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, (Q_PntSprite[helly].Speed*TimeScale), &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].Alpha;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF09 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 25:	//SOLID QA EFFECT REL ENERGY EFFICIENCY
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY/250))) * TimeScale) > 0) Q_PntSprite[helly].Alpha -= ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY/250))) * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/7) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/7) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 HEAD", &player.QA_EFF_BONEMATRIX);
						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].CNTR += (1 * TimeScale);
						
						if(Q_PntSprite[helly].CNTR > (8 + (23 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/250)))))
							{
							Q_PntSprite[helly].CNTR = 0;

							jet=0;
							while(jet < 3 && (NomPntSprite < 24998))
								{
								Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
								Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
								Q_PntSprite[NomPntSprite].Scale = 0.012f;
								Q_PntSprite[NomPntSprite].PartType = 24;

								Q_PntSprite[NomPntSprite].IR = 120;
								Q_PntSprite[NomPntSprite].IG = 255;
								Q_PntSprite[NomPntSprite].IB = 255;

								Q_PntSprite[NomPntSprite].Alpha = 75;
								Q_PntSprite[NomPntSprite].Speed = 0.1;
								Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

								Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
								Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
								Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

								Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
								Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
								Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

								Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

								Q_PntSprite[NomPntSprite].Live = 1;

								NomPntSprite++;
								jet++;
								}
							}

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF09, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 26:		//QA EFFECT 03
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (0.85) > 0) Q_PntSprite[helly].Alpha -= (0.85);	//1  //3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + 0.1 < 0.9) Q_PntSprite[helly].Speed += 0.1;
							else
								{
								Q_PntSprite[helly].Speed = 0.9;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - 0.05 > 0.02) Q_PntSprite[helly].Speed -= 0.05;
							else Q_PntSprite[helly].Speed = 0.02;
							}

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);


						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].Alpha+130;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].Alpha+130;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF04 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 27:	//SOLID QA EFFECT STRENGTH BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (5.3 * TimeScale) > 0) Q_PntSprite[helly].Alpha -= (5.3 * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 10 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 L FOREARM", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 L FOREARM", &player.QA_EFF_BONEMATRIX);

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &Q_PntSprite[helly].VecUp);


						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

						Q_PntSprite[helly].RotAMT += (0.025 + (0.45 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500))) * TimeScale;

						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
						Q_PntSprite[helly].RotAMTSTR = Q_PntSprite[helly].RotAMT;
						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 50)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 1
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 100)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 2
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 150)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 3
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 250)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 4
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						Q_PntSprite[helly].RotAMT = Q_PntSprite[helly].RotAMTSTR;
						} break;


					case 28:	//SOLID QA EFFECT INTELLIGENCE BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (5.3 * TimeScale) > 0) Q_PntSprite[helly].Alpha -= (5.3 * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 10 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 R FOREARM", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 R FOREARM", &player.QA_EFF_BONEMATRIX);

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &Q_PntSprite[helly].VecUp);


						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

						Q_PntSprite[helly].RotAMT += (0.025 + (0.45 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500))) * TimeScale;

						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
						Q_PntSprite[helly].RotAMTSTR = Q_PntSprite[helly].RotAMT;
						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 50)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 1
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 100)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 2
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 150)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 3
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 250)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 4
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						Q_PntSprite[helly].RotAMT = Q_PntSprite[helly].RotAMTSTR;
						} break;


					case 29:	//SOLID QA EFFECT PHYSICAL STR BOOST
						{
						if(Q_PntSprite[helly].Speed < 0.25 && Q_PntSprite[helly].SpeedDIR == 0) Q_PntSprite[helly].Alpha = 1;
						else
							{
							if(Q_PntSprite[helly].AlphaLOCK == 0)
								{
								Q_PntSprite[helly].AlphaLOCK = 1;
								Q_PntSprite[helly].Alpha = Q_PntSprite[helly].AlphaSTR;
								Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
								}
							}

						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (0.75) > 0) Q_PntSprite[helly].Alpha -= (0.75);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}


						//if(Q_PntSprite[helly].HeightPos < 7.5) Q_PntSprite[helly].SpeedMAX = Q_PntSprite[helly].HeightPos/3;
						//else Q_PntSprite[helly].SpeedMAX = (15 - Q_PntSprite[helly].HeightPos)/3;

						Q_PntSprite[helly].SpeedMAX = 3;

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + (Q_PntSprite[helly].SpeedMAX/3) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += (Q_PntSprite[helly].SpeedMAX/3);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - (Q_PntSprite[helly].SpeedMAX/2) > 0.1) Q_PntSprite[helly].Speed -= (Q_PntSprite[helly].SpeedMAX/2);
							else Q_PntSprite[helly].Speed = 0.1;
							}


						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += Q_PntSprite[helly].Speed;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);


						//geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed);

						//Q_PntSprite[helly].TraVec.Y -= 0.02;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 30:	//SOLID QA EFFECT QUICKNESS BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - ((0.75 * (((float)rand() / 32767) * (Q_PntSprite[helly].QA_EFF_INTENSITY/1000))) * TimeScale) > 0) Q_PntSprite[helly].Alpha -= ((0.75 * (((float)rand() / 32767) * (Q_PntSprite[helly].QA_EFF_INTENSITY/1000))) * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 3;

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + (Q_PntSprite[helly].SpeedMAX/3) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += (Q_PntSprite[helly].SpeedMAX/3);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - (Q_PntSprite[helly].SpeedMAX/2) > 0.1) Q_PntSprite[helly].Speed -= (Q_PntSprite[helly].SpeedMAX/2);
							else Q_PntSprite[helly].Speed = 0.1;

							Q_PntSprite[helly].CNTR += 1;
						
							if((Q_PntSprite[helly].CNTR > (20 - (8 * (Q_PntSprite[helly].QA_EFF_INTENSITY/5000)))) && (((float)rand() / 32767) < (((float)rand() / 32767) * Q_PntSprite[helly].QA_EFF_INTENSITY/2000)))
								{
								Q_PntSprite[helly].CNTR = 0;

								jet=0;
								while(jet < 1 && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
									Q_PntSprite[NomPntSprite].Scale = 0.012f;
									Q_PntSprite[NomPntSprite].PartType = 31;

									Q_PntSprite[NomPntSprite].IR = 255;
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 65;
									Q_PntSprite[NomPntSprite].Speed = 0.3;
									Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

									Q_PntSprite[NomPntSprite].TraVec = Q_PntSprite[helly].TraVec;

									Q_PntSprite[NomPntSprite].TraVec.X += (((float)rand() / 32767)-0.5)*0.3;
									Q_PntSprite[NomPntSprite].TraVec.Y += ((((float)rand() / 32767)-0.5)*0.5)+0.75;
									Q_PntSprite[NomPntSprite].TraVec.Z += (((float)rand() / 32767)-0.5)*0.3;

									Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

									Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}

								Q_PntSprite[helly].CoronaON = 1;
								Q_PntSprite[helly].CoronaALPHADIR = 0;
								Q_PntSprite[helly].CoronaALPHA = 0;
								}
							}


						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].CoronaON == 1)
							{
							if(Q_PntSprite[helly].CoronaALPHADIR == 0)
								{
								if(Q_PntSprite[helly].CoronaALPHA + 4*TimeScale < 30) Q_PntSprite[helly].CoronaALPHA += 4*TimeScale;
								else
									{
									Q_PntSprite[helly].CoronaALPHA = 85;
									Q_PntSprite[helly].CoronaALPHADIR = 1;
									}
								}
							else
								{
								if(Q_PntSprite[helly].CoronaALPHA - 3*TimeScale > 0) Q_PntSprite[helly].CoronaALPHA -= 3*TimeScale;
								else
									{
									Q_PntSprite[helly].CoronaON = 0;
									Q_PntSprite[helly].CoronaALPHA = 0;
									}
								}

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.r = 255;
							Q_PntSprite[helly].Lvert.g = 255;
							Q_PntSprite[helly].Lvert.b = 255;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].CoronaALPHA;

							geWorld_AddPolyOnce(World, &Q_PntSprite[helly].Lvert, 1, SparkCorona[Q_PntSprite[helly].CoronaMatCnt], GE_TEXTURED_POINT, Q_PntSprite[helly].RenderFlags, 0.05);

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].OldPos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].OldPos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].OldPos.Z;
							Q_PntSprite[helly].Lvert.r = 255;
							Q_PntSprite[helly].Lvert.g = 255;
							Q_PntSprite[helly].Lvert.b = 255;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].CoronaALPHA;

							geWorld_AddPolyOnce(World, &Q_PntSprite[helly].Lvert, 1, SparkCorona[Q_PntSprite[helly].CoronaMatCnt], GE_TEXTURED_POINT, Q_PntSprite[helly].RenderFlags, 0.05);

							//### Increment Corona Material
							if(Q_PntSprite[helly].CoronaMatCntDIR == 0)
								{
								Q_PntSprite[helly].CoronaMatCnt++;
								if(Q_PntSprite[helly].CoronaMatCnt > 3)
									{
									Q_PntSprite[helly].CoronaMatCnt = 3;
									Q_PntSprite[helly].CoronaMatCntDIR = 1;
									}
								}
							else
								{
								Q_PntSprite[helly].CoronaMatCnt--;
								if(Q_PntSprite[helly].CoronaMatCnt < 0)
									{
									Q_PntSprite[helly].CoronaMatCnt = 0;
									Q_PntSprite[helly].CoronaMatCntDIR = 0;
									}
								}
							}

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF17, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 31:	//SOLID QA EFFECT QUICKNESS
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (3*TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.2*TimeScale < 8) Q_PntSprite[helly].Speed += 0.2*TimeScale;
						else Q_PntSprite[helly].Speed = 8;

						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(geWorld_Collision(World,
							 NULL,
							 NULL,
							 &Q_PntSprite[helly].OldPos,
							 &Q_PntSprite[helly].Pos,
							 GE_CONTENTS_CANNOT_OCCUPY,
							 GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
							 0xffffffff, NULL, NULL,
							 &Q_PntSprite[helly].Collision))
							{
							if(Q_PntSprite[helly].Collision.Actor == NULL)
								{
								Q_PntSprite[helly].Pos = Q_PntSprite[helly].OldPos;
								Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
								}
							else
								{
								if(Q_PntSprite[helly].Collision.Actor->IDflag != playact.Actor->IDflag)
									{
									Q_PntSprite[helly].Pos = Q_PntSprite[helly].OldPos;
									Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
									}
								}
							}

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF04 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 32:	//SOLID QA EFFECT CONSTITUTION BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (5.3 * TimeScale) > 0) Q_PntSprite[helly].Alpha -= (5.3 * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 16 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &Q_PntSprite[helly].VecUp);


						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

						Q_PntSprite[helly].RotAMT += (0.025 + (0.45 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500))) * TimeScale;

						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
						Q_PntSprite[helly].RotAMTSTR = Q_PntSprite[helly].RotAMT;
						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						DrawLaser(World, &Q_PntSprite[helly].Pos, &player.QA_EFF_BONEMATRIX.Translation, &player.ViewXForm.Translation, 1, QAEFF32, Q_PntSprite[helly].AlphaSTR, 255, 255, 255, 0);
						//geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF32, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 50)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 1
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							DrawLaser(World, &Q_PntSprite[helly].Pos, &player.QA_EFF_BONEMATRIX.Translation, &player.ViewXForm.Translation, 1, QAEFF32, Q_PntSprite[helly].AlphaSTR, 255, 255, 255, 0);
							//geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF32, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 100)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 2
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							DrawLaser(World, &Q_PntSprite[helly].Pos, &player.QA_EFF_BONEMATRIX.Translation, &player.ViewXForm.Translation, 1, QAEFF32, Q_PntSprite[helly].AlphaSTR, 255, 255, 255, 0);
							//geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF32, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 150)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 3
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							DrawLaser(World, &Q_PntSprite[helly].Pos, &player.QA_EFF_BONEMATRIX.Translation, &player.ViewXForm.Translation, 1, QAEFF32, Q_PntSprite[helly].AlphaSTR, 255, 255, 255, 0);
							//geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF32, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 250)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 4
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							DrawLaser(World, &Q_PntSprite[helly].Pos, &player.QA_EFF_BONEMATRIX.Translation, &player.ViewXForm.Translation, 1, QAEFF32, Q_PntSprite[helly].AlphaSTR, 255, 255, 255, 0);
							//geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF32, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						Q_PntSprite[helly].RotAMT = Q_PntSprite[helly].RotAMTSTR;
						} break;


					case 33:	//SOLID QA EFFECT DEXTERITY BOOST
						{
						if(Q_PntSprite[helly].Speed < 0.25 && Q_PntSprite[helly].SpeedDIR == 0) Q_PntSprite[helly].Alpha = 1;
						else
							{
							if(Q_PntSprite[helly].AlphaLOCK == 0)
								{
								Q_PntSprite[helly].AlphaLOCK = 1;
								Q_PntSprite[helly].Alpha = Q_PntSprite[helly].AlphaSTR;
								Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
								}
							}

						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (0.75)*TimeScale > 0) Q_PntSprite[helly].Alpha -= (0.75*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}


						//Anti Gravity
						//Q_PntSprite[helly].TraVec.Y += 0.02;

						//Q_PntSprite[helly].Scale += 0.003;


						Q_PntSprite[helly].SpeedMAX = 5;

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + (Q_PntSprite[helly].SpeedMAX/4)*TimeScale < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += (Q_PntSprite[helly].SpeedMAX/4)*TimeScale;
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - (Q_PntSprite[helly].SpeedMAX/3)*TimeScale > 0.05) Q_PntSprite[helly].Speed -= (Q_PntSprite[helly].SpeedMAX/3)*TimeScale;
							else Q_PntSprite[helly].Speed = 0.05;

							//Q_PntSprite[helly].TraVec.Y += (((float)rand() / 32767)-0.5)*0.95;
							//Q_PntSprite[helly].TraVec.X += (((float)rand() / 32767)-0.5)*0.1;
							//Q_PntSprite[helly].TraVec.Z += (((float)rand() / 32767)-0.5)*0.1;

							Q_PntSprite[helly].CNTR += ((float)rand() / 32767)*10;
						
							if(Q_PntSprite[helly].CNTR > 60 && Q_PntSprite[helly].LinkALPHADIR == 0)
								{
								Q_PntSprite[helly].CNTR = 0;

								if((NomPntSprite > 1) && (helly - 1) >= 0)
									{
									TempInt1 = helly - 1;

									if(geVec3d_DistanceBetween(&Q_PntSprite[helly].Pos, &Q_PntSprite[TempInt1].Pos) < 150)
										{
										Q_PntSprite[helly].LinkON = 1;
										Q_PntSprite[helly].LinkTARGET = TempInt1;
										Q_PntSprite[helly].LinkALPHA = 0;
										Q_PntSprite[helly].LinkALPHADIR = 0;
										Q_PntSprite[helly].Alpha = 70;
										Q_PntSprite[Q_PntSprite[helly].LinkTARGET].Alpha = 70;
										}
									}
								}
							}


						if(Q_PntSprite[helly].LinkON == 1)
							{
							if(Q_PntSprite[helly].LinkALPHADIR == 0)
								{
								if(Q_PntSprite[helly].LinkALPHA + 20*TimeScale < 85) Q_PntSprite[helly].LinkALPHA += 20*TimeScale;
								else
									{
									Q_PntSprite[helly].LinkALPHA = 85;
									Q_PntSprite[helly].LinkALPHADIR = 1;
									}
								}
							else
								{
								if(Q_PntSprite[helly].LinkALPHA - 20*TimeScale > 0) Q_PntSprite[helly].LinkALPHA -= 20*TimeScale;
								else
									{
									Q_PntSprite[helly].LinkALPHA = 0;
									Q_PntSprite[helly].LinkON = 0;
									Q_PntSprite[helly].LinkTARGET = TempInt1;
									Q_PntSprite[helly].LinkALPHA = 0;
									}
								}

							Q_PntSprite[helly].OldPos = Q_PntSprite[Q_PntSprite[helly].LinkTARGET].Pos;

							//DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, 1, QAEFF16, Q_PntSprite[helly].LinkALPHA, 255, 255, 255, 0);

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.r = 255;
							Q_PntSprite[helly].Lvert.g = 255;
							Q_PntSprite[helly].Lvert.b = 255;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].LinkALPHA;

							geWorld_AddPolyOnce(World, &Q_PntSprite[helly].Lvert, 1, SparkCorona[Q_PntSprite[helly].CoronaMatCnt], GE_TEXTURED_POINT, Q_PntSprite[helly].RenderFlags, 0.05);

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].OldPos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].OldPos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].OldPos.Z;
							Q_PntSprite[helly].Lvert.r = 255;
							Q_PntSprite[helly].Lvert.g = 255;
							Q_PntSprite[helly].Lvert.b = 255;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].LinkALPHA;

							geWorld_AddPolyOnce(World, &Q_PntSprite[helly].Lvert, 1, SparkCorona[Q_PntSprite[helly].CoronaMatCnt], GE_TEXTURED_POINT, Q_PntSprite[helly].RenderFlags, 0.05);

							//### Increment Corona Material
							if(Q_PntSprite[helly].CoronaMatCntDIR == 0)
								{
								Q_PntSprite[helly].CoronaMatCnt++;
								if(Q_PntSprite[helly].CoronaMatCnt > 3)
									{
									Q_PntSprite[helly].CoronaMatCnt = 3;
									Q_PntSprite[helly].CoronaMatCntDIR = 1;
									}
								}
							else
								{
								Q_PntSprite[helly].CoronaMatCnt--;
								if(Q_PntSprite[helly].CoronaMatCnt < 0)
									{
									Q_PntSprite[helly].CoronaMatCnt = 0;
									Q_PntSprite[helly].CoronaMatCntDIR = 0;
									}
								}
							}



						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += Q_PntSprite[helly].Speed;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);


						//geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed);

						//Q_PntSprite[helly].TraVec.Y -= 0.02;


						/*TempInt1 = rand() % (NomPntSprite - 1);

						Q_PntSprite[helly].OldPos = Q_PntSprite[TempInt1].Pos;

						//geVec3d_MA(&Q_PntSprite[helly].OldPos, -Q_PntSprite[helly].Speed*3*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].OldPos);

						DrawLaser(World, &Q_PntSprite[helly].Pos, &Q_PntSprite[helly].OldPos, &player.ViewXForm.Translation, 0.35, QAEFF16, Q_PntSprite[helly].Alpha, 255, 255, 255, 0);*/




						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF17, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 34:	//SOLID QA EFFECT DEXTERITY BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale) > 0) Q_PntSprite[helly].Alpha -= ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = (0.6 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500)));

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/6) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/6) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}


						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &Q_PntSprite[helly].VecUp);
						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);
						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);
						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);

						Q_PntSprite[helly].RotAMT += 0.02 + (0.55 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500));

						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF18, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 35:	//SOLID QA EFFECT DEXTERITY
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR == 0)
							{
							if(Q_PntSprite[helly].Alpha - (2*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (2*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].AlphaDIR = 1;
								}
							}
						/*else
							{
							if(Q_PntSprite[helly].Alpha + (5*TimeScale) < 65) Q_PntSprite[helly].Alpha += (5*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 65;
								Q_PntSprite[helly].AlphaDIR = 0;
								}
							}*/

						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR2 == 0)
							{
							if(Q_PntSprite[helly].Alpha2 - (11*TimeScale) > 0) Q_PntSprite[helly].Alpha2 -= (11*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 0;
								Q_PntSprite[helly].AlphaDIR2 = 1;

								Q_PntSprite[helly].CNTR = 0;
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Alpha2 + (15*TimeScale) < 65) Q_PntSprite[helly].Alpha2 += (15*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 65;
								Q_PntSprite[helly].AlphaDIR2 = 0;
								}
							}



						if(Q_PntSprite[helly].Speed + 0.15*TimeScale < 8) Q_PntSprite[helly].Speed += 0.15*TimeScale;
						else Q_PntSprite[helly].Speed = 8;

						Q_PntSprite[helly].TraVec.Y -= 0.02;


						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						
						if(geWorld_Collision(World,
							 NULL,
							 NULL,
							 &Q_PntSprite[helly].OldPos,
							 &Q_PntSprite[helly].Pos,
							 GE_CONTENTS_CANNOT_OCCUPY,
							 GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
							 0xffffffff, NULL, NULL,
							 &Q_PntSprite[helly].Collision))
							{
							if(Q_PntSprite[helly].Collision.Actor == NULL)
								{
								Q_PntSprite[helly].Pos = Q_PntSprite[helly].Collision.Impact;
								Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
								//Q_PntSprite[helly].Speed = Q_PntSprite[helly].Speed / 1.5;
								}
							else
								{
								if(Q_PntSprite[helly].Collision.Actor->IDflag != playact.Actor->IDflag)
									{
									Q_PntSprite[helly].Pos = Q_PntSprite[helly].Collision.Impact;
									Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
									//Q_PntSprite[helly].Speed = Q_PntSprite[helly].Speed / 1.5;
									}
								}
							}


						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF09 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha2;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF19 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 36:	//SOLID QA EFFECT AGG POWER BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR == 0)
							{
							if(Q_PntSprite[helly].Alpha - (1*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (1*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].AlphaDIR = 1;
								}
							}
						/*else
							{
							if(Q_PntSprite[helly].Alpha + (5*TimeScale) < 65) Q_PntSprite[helly].Alpha += (5*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 65;
								Q_PntSprite[helly].AlphaDIR = 0;
								}
							}*/

						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR2 == 0)
							{
							if(Q_PntSprite[helly].Alpha2 - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha2 -= (3*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 0;
								Q_PntSprite[helly].AlphaDIR2 = 1;
								Q_PntSprite[helly].AlphaDIR = 1;
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Alpha2 + (1.35*TimeScale) < 16) Q_PntSprite[helly].Alpha2 += (1.35*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 16;
								Q_PntSprite[helly].AlphaDIR2 = 0;
								}
							}

						Q_PntSprite[helly].SpeedMAX = 2 + ((Q_PntSprite[helly].QA_EFF_INTENSITY/500)* 10);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale) > 0.2) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.2;

							Q_PntSprite[helly].CNTR += 1;
							}


						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF20, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha2;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF21 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 37:	//SOLID QA EFFECT AGG POWER BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR == 0)
							{
							if(Q_PntSprite[helly].Alpha - (1*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (1*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].AlphaDIR = 1;
								}
							}
						/*else
							{
							if(Q_PntSprite[helly].Alpha + (5*TimeScale) < 65) Q_PntSprite[helly].Alpha += (5*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 65;
								Q_PntSprite[helly].AlphaDIR = 0;
								}
							}*/

						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR2 == 0)
							{
							if(Q_PntSprite[helly].Alpha2 - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha2 -= (3*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 0;
								Q_PntSprite[helly].AlphaDIR2 = 1;
								Q_PntSprite[helly].AlphaDIR = 1;
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Alpha2 + (1.35*TimeScale) < 16) Q_PntSprite[helly].Alpha2 += (1.35*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 16;
								Q_PntSprite[helly].AlphaDIR2 = 0;
								}
							}

						Q_PntSprite[helly].SpeedMAX = 2 + ((Q_PntSprite[helly].QA_EFF_INTENSITY/500)* 10);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;

							Q_PntSprite[helly].CNTR += 1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 L FOREARM", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 L FOREARM", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF20, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha2;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF21 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 38:	//SOLID QA EFFECT AGG POWER BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR == 0)
							{
							if(Q_PntSprite[helly].Alpha - (1*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (1*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].AlphaDIR = 1;
								}
							}
						/*else
							{
							if(Q_PntSprite[helly].Alpha + (5*TimeScale) < 65) Q_PntSprite[helly].Alpha += (5*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 65;
								Q_PntSprite[helly].AlphaDIR = 0;
								}
							}*/

						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR2 == 0)
							{
							if(Q_PntSprite[helly].Alpha2 - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha2 -= (3*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 0;
								Q_PntSprite[helly].AlphaDIR2 = 1;
								Q_PntSprite[helly].AlphaDIR = 1;
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Alpha2 + (1.35*TimeScale) < 16) Q_PntSprite[helly].Alpha2 += (1.35*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 16;
								Q_PntSprite[helly].AlphaDIR2 = 0;
								}
							}

						Q_PntSprite[helly].SpeedMAX = 2 + ((Q_PntSprite[helly].QA_EFF_INTENSITY/500)* 10);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;

							Q_PntSprite[helly].CNTR += 1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 R FOREARM", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 R FOREARM", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF20, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha2;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF21 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 39:	//SOLID QA EFFECT DEFENSIVE POWER BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR == 0)
							{
							if(Q_PntSprite[helly].Alpha - (1*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (1*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].AlphaDIR = 1;
								}
							}
						/*else
							{
							if(Q_PntSprite[helly].Alpha + (5*TimeScale) < 65) Q_PntSprite[helly].Alpha += (5*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 65;
								Q_PntSprite[helly].AlphaDIR = 0;
								}
							}*/

						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR2 == 0)
							{
							if(Q_PntSprite[helly].Alpha2 - (3.7*TimeScale) > 0) Q_PntSprite[helly].Alpha2 -= (3.7*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 0;
								Q_PntSprite[helly].AlphaDIR2 = 1;
								Q_PntSprite[helly].AlphaDIR = 1;
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Alpha2 + (0.35*TimeScale) < 16) Q_PntSprite[helly].Alpha2 += (0.35*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 16;
								Q_PntSprite[helly].AlphaDIR2 = 0;
								}
							}

						Q_PntSprite[helly].SpeedMAX = 2 + ((Q_PntSprite[helly].QA_EFF_INTENSITY/500)* 10);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale) > 0.2) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.2;

							Q_PntSprite[helly].CNTR += 1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF23, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha2;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF22 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 40:	//SOLID QA EFFECT WEAPON PACK
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (0.5 * TimeScale) > 0) Q_PntSprite[helly].Alpha -= (0.5 * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/7) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/7) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 NECK", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 NECK", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						Q_PntSprite[helly].InitPos.Y += 2;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].CNTR += 1;
						
						if(Q_PntSprite[helly].CNTR > 15)
							{
							Q_PntSprite[helly].CNTR = 0;

							jet=0;
							while(jet < 3 && (NomPntSprite < 24998))
								{
								Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
								Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
								Q_PntSprite[NomPntSprite].Scale = 0.012f;	//0.02		//0.025f//0.002f
								Q_PntSprite[NomPntSprite].PartType = 41;

								Q_PntSprite[NomPntSprite].IR = 120;
								Q_PntSprite[NomPntSprite].IG = 255;
								Q_PntSprite[NomPntSprite].IB = 255;

								Q_PntSprite[NomPntSprite].Alpha = 20 + (80 * (Q_PntSprite[helly].QA_EFF_INTENSITY/10000));
								Q_PntSprite[NomPntSprite].Speed = 0.1;
								Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

								Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
								Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
								Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

								Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
								Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
								Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

								Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

								Q_PntSprite[NomPntSprite].Live = 1;

								NomPntSprite++;
								jet++;
								}
							}

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF24, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 41:	//SOLID QA EFFECT WEAPON PACK
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (8.5*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (8.5*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.15*TimeScale < 2) Q_PntSprite[helly].Speed += 0.15*TimeScale;
						else Q_PntSprite[helly].Speed = 2;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						
						if(geWorld_Collision(World,
							 NULL,
							 NULL,
							 &Q_PntSprite[helly].OldPos,
							 &Q_PntSprite[helly].Pos,
							 GE_CONTENTS_CANNOT_OCCUPY,
							 GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
							 0xffffffff, NULL, NULL,
							 &Q_PntSprite[helly].Collision))
							{
							if(Q_PntSprite[helly].Collision.Actor == NULL)
								{
								Q_PntSprite[helly].Pos = Q_PntSprite[helly].Collision.Impact;
								Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
								}
							else
								{
								if(Q_PntSprite[helly].Collision.Actor->IDflag != playact.Actor->IDflag)
									{
									Q_PntSprite[helly].Pos = Q_PntSprite[helly].Collision.Impact;
									Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
									}
								}
							}

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].Alpha;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF24 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 42:	//SOLID QA EFFECT WEAPON SOMETHING
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (0.75 * TimeScale) > 0) Q_PntSprite[helly].Alpha -= (0.75 * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 3;

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;

							Q_PntSprite[helly].CNTR += 1;
						
							if(Q_PntSprite[helly].CNTR > 18)
								{
								Q_PntSprite[helly].CNTR = 0;

								jet=0;
								while(jet < 1 && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
									Q_PntSprite[NomPntSprite].Scale = 0.012f;	//0.02		//0.025f//0.002f
									Q_PntSprite[NomPntSprite].PartType = 43;

									Q_PntSprite[NomPntSprite].IR = 255;	//120
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 65;
									Q_PntSprite[NomPntSprite].Speed = 0.3;
									Q_PntSprite[NomPntSprite].Pos = Q_PntSprite[helly].Pos;

									Q_PntSprite[NomPntSprite].TraVec = Q_PntSprite[helly].TraVec;

									Q_PntSprite[NomPntSprite].TraVec.X += (((float)rand() / 32767)-0.5)*0.3;
									Q_PntSprite[NomPntSprite].TraVec.Y += ((((float)rand() / 32767)-0.5)*0.5)+0.75;
									Q_PntSprite[NomPntSprite].TraVec.Z += (((float)rand() / 32767)-0.5)*0.3;

									Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

									Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}


								Q_PntSprite[helly].CoronaON = 1;
								Q_PntSprite[helly].CoronaALPHADIR = 0;
								Q_PntSprite[helly].CoronaALPHA = 0;
								}
							}


						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 SPINE", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);


						
						if(Q_PntSprite[helly].CoronaON == 1)
							{
							if(Q_PntSprite[helly].CoronaALPHADIR == 0)
								{
								if(Q_PntSprite[helly].CoronaALPHA + 4*TimeScale < 30) Q_PntSprite[helly].CoronaALPHA += 4*TimeScale;
								else
									{
									Q_PntSprite[helly].CoronaALPHA = 85;
									Q_PntSprite[helly].CoronaALPHADIR = 1;
									}
								}
							else
								{
								if(Q_PntSprite[helly].CoronaALPHA - 3*TimeScale > 0) Q_PntSprite[helly].CoronaALPHA -= 3*TimeScale;
								else
									{
									Q_PntSprite[helly].CoronaON = 0;
									Q_PntSprite[helly].CoronaALPHA = 0;
									}
								}

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.r = 255;
							Q_PntSprite[helly].Lvert.g = 255;
							Q_PntSprite[helly].Lvert.b = 255;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].CoronaALPHA;

							geWorld_AddPolyOnce(World, &Q_PntSprite[helly].Lvert, 1, EGrabCorona[Q_PntSprite[helly].CoronaMatCnt], GE_TEXTURED_POINT, Q_PntSprite[helly].RenderFlags, 0.05);

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].OldPos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].OldPos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].OldPos.Z;
							Q_PntSprite[helly].Lvert.r = 255;
							Q_PntSprite[helly].Lvert.g = 255;
							Q_PntSprite[helly].Lvert.b = 255;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].CoronaALPHA;

							geWorld_AddPolyOnce(World, &Q_PntSprite[helly].Lvert, 1, EGrabCorona[Q_PntSprite[helly].CoronaMatCnt], GE_TEXTURED_POINT, Q_PntSprite[helly].RenderFlags, 0.05);

							//### Increment Corona Material
							if(Q_PntSprite[helly].CoronaMatCntDIR == 0)
								{
								Q_PntSprite[helly].CoronaMatCnt++;
								if(Q_PntSprite[helly].CoronaMatCnt > 3)
									{
									Q_PntSprite[helly].CoronaMatCnt = 3;
									Q_PntSprite[helly].CoronaMatCntDIR = 1;
									}
								}
							else
								{
								Q_PntSprite[helly].CoronaMatCnt--;
								if(Q_PntSprite[helly].CoronaMatCnt < 0)
									{
									Q_PntSprite[helly].CoronaMatCnt = 0;
									Q_PntSprite[helly].CoronaMatCntDIR = 0;
									}
								}
							}

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF24, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 43:	//SOLID QA EFFECT WEAPON SOMETHING
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (3*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.2*TimeScale < 8) Q_PntSprite[helly].Speed += 0.2*TimeScale;
						else Q_PntSprite[helly].Speed = 8;

						//Q_PntSprite[helly].TraVec.Y -= 0.01;


						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed)*TimeScale;

						
						if(geWorld_Collision(World,
							 NULL,
							 NULL,
							 &Q_PntSprite[helly].OldPos,
							 &Q_PntSprite[helly].Pos,
							 GE_CONTENTS_CANNOT_OCCUPY,
							 GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
							 0xffffffff, NULL, NULL,
							 &Q_PntSprite[helly].Collision))
							{
							if(Q_PntSprite[helly].Collision.Actor == NULL)
								{
								Q_PntSprite[helly].Pos = Q_PntSprite[helly].OldPos;
								Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
								//Q_PntSprite[helly].Speed = Q_PntSprite[helly].Speed / 1.5;
								}
							else
								{
								if(Q_PntSprite[helly].Collision.Actor->IDflag != playact.Actor->IDflag)
									{
									Q_PntSprite[helly].Pos = Q_PntSprite[helly].OldPos;
									Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
									//Q_PntSprite[helly].Speed = Q_PntSprite[helly].Speed / 1.5;
									}
								}
							}


						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF25 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 44:	//SOLID QA EFFECT WEAPON ACCURACY
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (0.45 * TimeScale) > 0) Q_PntSprite[helly].Alpha -= (0.45 * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 2 + (7 * (Q_PntSprite[helly].QA_EFF_INTENSITY/10000));

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/(6 * (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY/10000)))) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/(6 * (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY/10000)))) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}
						
						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(player.Weapon.Actor, "BONE03", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Weapon.Actor, "BONE03", &player.QA_EFF_BONEMATRIX);

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &Q_PntSprite[helly].VecUp);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);
						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);

						Q_PntSprite[helly].RotAMT += 0.025 + (0.85 * (Q_PntSprite[helly].QA_EFF_INTENSITY/10000));

						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT * TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);
						
						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
						Q_PntSprite[helly].RotAMTSTR = Q_PntSprite[helly].RotAMT;

						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF26, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);

							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);
						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);

						Q_PntSprite[helly].RotAMT -= 0.02;

						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT * TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Sprite Trail 1

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 40 >= 0) Q_PntSprite[helly].AlphaSTR -= 10;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF26, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);
						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);

						Q_PntSprite[helly].RotAMT -= 0.02;

						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT * TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Sprite Trail 2
						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 40 >= 0) Q_PntSprite[helly].AlphaSTR -= 10;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF26, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);

							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);
						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);

						Q_PntSprite[helly].RotAMT -= 0.02;

						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT * TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Sprite Trail 3
						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 40 >= 0) Q_PntSprite[helly].AlphaSTR -= 10;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF26, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);
						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);

						Q_PntSprite[helly].RotAMT -= 0.02;

						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT * TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Sprite Trail 4

						geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						if(Q_PntSprite[helly].AlphaSTR - 40 >= 0) Q_PntSprite[helly].AlphaSTR -= 10;

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF26, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						Q_PntSprite[helly].RotAMT = Q_PntSprite[helly].RotAMTSTR;
						} break;



					case 45:		//QA EFFECT 03
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (3) > 0) Q_PntSprite[helly].Alpha -= (3);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}


						if(Q_PntSprite[helly].Speed - 0.1 > 1) Q_PntSprite[helly].Speed -= 0.1;
						else Q_PntSprite[helly].Speed = 1;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);


						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].Alpha+130;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].Alpha+130;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF04 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 46:	//SOLID QA EFFECT STR BOOST LEG
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (5.3 * TimeScale) > 0) Q_PntSprite[helly].Alpha -= (5.3 * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 10 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}


						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 L THIGH", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 L THIGH", &player.QA_EFF_BONEMATRIX);

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &Q_PntSprite[helly].VecUp);


						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

						Q_PntSprite[helly].RotAMT += (0.025 + (0.45 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500))) * TimeScale;

						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
						Q_PntSprite[helly].RotAMTSTR = Q_PntSprite[helly].RotAMT;
						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 50)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 1
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 100)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 2
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 150)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 3
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 250)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 4
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						Q_PntSprite[helly].RotAMT = Q_PntSprite[helly].RotAMTSTR;
						} break;


					case 47:	//SOLID QA EFFECT STR BOOST LEG
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (5.3 * TimeScale) > 0) Q_PntSprite[helly].Alpha -= (5.3 * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 10 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((0.5 + (2 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((1 + (3 * (Q_PntSprite[helly].QA_EFF_INTENSITY / 500))) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}


						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 R THIGH", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 R THIGH", &player.QA_EFF_BONEMATRIX);

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &Q_PntSprite[helly].VecUp);


						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

							//Calculate Direction Vectors
						geXForm3d_SetYRotation(&RotateMatrix, PI/2);
						geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
						Q_PntSprite[helly].VecLeft.Y = 0;
						geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
						geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
						geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

						Q_PntSprite[helly].RotAMT += (0.025 + (0.45 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500))) * TimeScale;

						geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
						geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
						geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
						geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
						Q_PntSprite[helly].RotAMTSTR = Q_PntSprite[helly].RotAMT;
						//## Store Pos
						Q_PntSprite[helly].PosSTR = Q_PntSprite[helly].Pos;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 50)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);

							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 1
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 100)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 2
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 150)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 3
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						if(Q_PntSprite[helly].QA_EFF_INTENSITY > 250)
							{
							Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

							geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].InitPos);
								//Calculate Direction Vectors
							geXForm3d_SetYRotation(&RotateMatrix, PI/2);
							geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].VecLeft);
							Q_PntSprite[helly].VecLeft.Y = 0;
							geVec3d_Normalize(&Q_PntSprite[helly].VecLeft);
							geVec3d_CrossProduct(&Q_PntSprite[helly].VecLeft, &Q_PntSprite[helly].VecUp, &Q_PntSprite[helly].TraVec);
							geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[helly].VecLeft,&Q_PntSprite[helly].VecUp,&Q_PntSprite[helly].TraVec);

							Q_PntSprite[helly].RotAMT -= 0.075;

							geXForm3d_SetYRotation(&RotateMatrix3, Q_PntSprite[helly].RotAMT);
							geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);
							geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[helly].TraVec);
							geVec3d_Normalize(&Q_PntSprite[helly].TraVec);
							//### Move Sprite
							geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							//##### Sprite Trail 4
							geVec3d_MA(&Q_PntSprite[helly].Pos, -Q_PntSprite[helly].Speed/5, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

							if(Q_PntSprite[helly].AlphaSTR - 25 >= 0) Q_PntSprite[helly].AlphaSTR -= 25;

							Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
							Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
							Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
							Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].AlphaSTR;

							geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
							}

						Q_PntSprite[helly].Pos = Q_PntSprite[helly].PosSTR;
						Q_PntSprite[helly].RotAMT = Q_PntSprite[helly].RotAMTSTR;
						} break;


					case 48:	//SOLID QA EFFECT AGG POWER BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR == 0)
							{
							if(Q_PntSprite[helly].Alpha - (1*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (1*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].AlphaDIR = 1;
								}
							}
						/*else
							{
							if(Q_PntSprite[helly].Alpha + (5*TimeScale) < 65) Q_PntSprite[helly].Alpha += (5*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 65;
								Q_PntSprite[helly].AlphaDIR = 0;
								}
							}*/

						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR2 == 0)
							{
							if(Q_PntSprite[helly].Alpha2 - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha2 -= (3*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 0;
								Q_PntSprite[helly].AlphaDIR2 = 1;
								Q_PntSprite[helly].AlphaDIR = 1;
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Alpha2 + (1.35*TimeScale) < 16) Q_PntSprite[helly].Alpha2 += (1.35*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 16;
								Q_PntSprite[helly].AlphaDIR2 = 0;
								}
							}

						Q_PntSprite[helly].SpeedMAX = 2 + ((Q_PntSprite[helly].QA_EFF_INTENSITY/500)* 10);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;

							Q_PntSprite[helly].CNTR += 1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 L THIGH", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 L THIGH", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF20, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha2;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF21 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 49:	//SOLID QA EFFECT AGG POWER BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR == 0)
							{
							if(Q_PntSprite[helly].Alpha - (1*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (1*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].AlphaDIR = 1;
								}
							}
						/*else
							{
							if(Q_PntSprite[helly].Alpha + (5*TimeScale) < 65) Q_PntSprite[helly].Alpha += (5*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha = 65;
								Q_PntSprite[helly].AlphaDIR = 0;
								}
							}*/

						//### Progress Alpha
						if(Q_PntSprite[helly].AlphaDIR2 == 0)
							{
							if(Q_PntSprite[helly].Alpha2 - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha2 -= (3*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 0;
								Q_PntSprite[helly].AlphaDIR2 = 1;
								Q_PntSprite[helly].AlphaDIR = 1;
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Alpha2 + (1.35*TimeScale) < 16) Q_PntSprite[helly].Alpha2 += (1.35*TimeScale);	//5  //25
							else
								{
								Q_PntSprite[helly].Alpha2 = 16;
								Q_PntSprite[helly].AlphaDIR2 = 0;
								}
							}

						Q_PntSprite[helly].SpeedMAX = 2 + ((Q_PntSprite[helly].QA_EFF_INTENSITY/500)* 10);

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/4) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;

							Q_PntSprite[helly].CNTR += 1;
							}


						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 R THIGH", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 R THIGH", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite
						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF20, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha2;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF21 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 50:	//SOLID QA EFFECT LEFT LEG STR BOOST
						{
						if(Q_PntSprite[helly].Speed < 0.25 && Q_PntSprite[helly].SpeedDIR == 0) Q_PntSprite[helly].Alpha = 1;
						else
							{
							if(Q_PntSprite[helly].AlphaLOCK == 0)
								{
								Q_PntSprite[helly].AlphaLOCK = 1;
								Q_PntSprite[helly].Alpha = Q_PntSprite[helly].AlphaSTR;
								Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
								}
							}

						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (0.65) > 0) Q_PntSprite[helly].Alpha -= (0.65);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 1.3;

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + (Q_PntSprite[helly].SpeedMAX/3) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += (Q_PntSprite[helly].SpeedMAX/3);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - (Q_PntSprite[helly].SpeedMAX/2) > 0.1) Q_PntSprite[helly].Speed -= (Q_PntSprite[helly].SpeedMAX/2);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 L THIGH", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 L THIGH", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += Q_PntSprite[helly].Speed;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 51:	//SOLID QA EFFECT RIGHT LEG STR BOOST
						{
						if(Q_PntSprite[helly].Speed < 0.25 && Q_PntSprite[helly].SpeedDIR == 0) Q_PntSprite[helly].Alpha = 1;
						else
							{
							if(Q_PntSprite[helly].AlphaLOCK == 0)
								{
								Q_PntSprite[helly].AlphaLOCK = 1;
								Q_PntSprite[helly].Alpha = Q_PntSprite[helly].AlphaSTR;
								Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;
								}
							}

						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (0.65) > 0) Q_PntSprite[helly].Alpha -= (0.65);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = 1.3;

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + (Q_PntSprite[helly].SpeedMAX/3) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += (Q_PntSprite[helly].SpeedMAX/3);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - (Q_PntSprite[helly].SpeedMAX/2) > 0.1) Q_PntSprite[helly].Speed -= (Q_PntSprite[helly].SpeedMAX/2);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 R THIGH", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 R THIGH", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += Q_PntSprite[helly].Speed;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF08, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 52:	//SOLID QA EFFECT LEFT ARM DEX BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale) > 0) Q_PntSprite[helly].Alpha -= ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = (0.3 + (1 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500)));

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 L FOREARM", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 L FOREARM", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF18, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 53:	//SOLID QA EFFECT RIGHT ARM DEX BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale) > 0) Q_PntSprite[helly].Alpha -= ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = (0.3 + (1 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500)));

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 R FOREARM", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 R FOREARM", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF18, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 54:	//SOLID QA EFFECT LEFT LEG DEX BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale) > 0) Q_PntSprite[helly].Alpha -= ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = (0.3 + (1 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500)));

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 L THIGH", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 L THIGH", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF18, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 55:	//SOLID QA EFFECT RIGHT LEG DEX BOOST
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale) > 0) Q_PntSprite[helly].Alpha -= ((0.2 + (0.8 * (1 - (Q_PntSprite[helly].QA_EFF_INTENSITY/2500)))) * TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						Q_PntSprite[helly].SpeedMAX = (0.3 + (1 * (Q_PntSprite[helly].QA_EFF_INTENSITY/500)));

						if(Q_PntSprite[helly].SpeedDIR == 0)
							{
							if(Q_PntSprite[helly].Speed + ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale) < Q_PntSprite[helly].SpeedMAX) Q_PntSprite[helly].Speed += ((Q_PntSprite[helly].SpeedMAX/3) * TimeScale);
							else
								{
								Q_PntSprite[helly].Speed = Q_PntSprite[helly].SpeedMAX;
								Q_PntSprite[helly].SpeedDIR = 1;
								}
							}
						else
							{
							if(Q_PntSprite[helly].Speed - ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale) > 0.1) Q_PntSprite[helly].Speed -= ((Q_PntSprite[helly].SpeedMAX/2) * TimeScale);
							else Q_PntSprite[helly].Speed = 0.1;
							}

						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 R THIGH", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 R THIGH", &player.QA_EFF_BONEMATRIX);

						Q_PntSprite[helly].InitPos = player.QA_EFF_BONEMATRIX.Translation;

						geXForm3d_GetLeft(&player.QA_EFF_BONEMATRIX, &player.In);
						geVec3d_MA(&Q_PntSprite[helly].InitPos, -Q_PntSprite[helly].HeightPos, &player.In, &Q_PntSprite[helly].InitPos);

						Q_PntSprite[helly].PushOUT += (Q_PntSprite[helly].Speed * TimeScale);

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].InitPos, Q_PntSprite[helly].PushOUT, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF18, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 56:	//SOLID QA EFFECT JINK 3RD LEVEL
						{
						if(Q_PntSprite[helly].ActorID == 250) geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &player.QA_EFF_BONEMATRIX);
						else geActor_GetBoneTransform(Forge[Q_PntSprite[helly].ActorID].Avatar.Actor, "BIP01 HEAD", &player.QA_EFF_BONEMATRIX);

						if(Q_PntSprite[helly].Vert1.Y > (player.QA_EFF_BONEMATRIX.Translation.Y + 120))
							{
							//### Progress Alpha
							if(Q_PntSprite[helly].Alpha - (20 * TimeScale) > 0) Q_PntSprite[helly].Alpha -= (20 * TimeScale);
							else
								{
								Q_PntSprite[helly].Alpha = 0;
								Q_PntSprite[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomPntSprite - 1)
									{
									Q_PntSprite[K] = Q_PntSprite[K+1];
									K++;
									}

								NomPntSprite--;
								}
							}
						
						//if(Q_PntSprite[helly].ActorID == 250)
						//	{
							if(Q_PntSprite[helly].Speed + (0.05 * TimeScale) < 4 * (Q_PntSprite[helly].QA_EFF_INTENSITY/10)) Q_PntSprite[helly].Speed += (0.05 * TimeScale);
							else Q_PntSprite[helly].Speed = 4 * (Q_PntSprite[helly].QA_EFF_INTENSITY/10);
						//	}
						//else
						//	{
						//	if(Q_PntSprite[helly].Speed + (0.05 * TimeScale) < 4 * (Forge[Q_PntSprite[helly].ActorID].JINK3_PowerFactor/1000)) Q_PntSprite[helly].Speed += (0.05 * TimeScale);
						//	else Q_PntSprite[helly].Speed = 4 * (Forge[Q_PntSprite[helly].ActorID].JINK3_PowerFactor/1000);
						//	}

						geVec3d_MA(&Q_PntSprite[helly].Vert1, Q_PntSprite[helly].Speed*6*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert1);
						geVec3d_MA(&Q_PntSprite[helly].Vert2, Q_PntSprite[helly].Speed*6*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert2);
						geVec3d_MA(&Q_PntSprite[helly].Vert3, Q_PntSprite[helly].Speed*6*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert3);

						//### Store Alpha
						Q_PntSprite[helly].AlphaSTR = Q_PntSprite[helly].Alpha;

						//## Store Pos
						Q_PntSprite[helly].Vert1STR = Q_PntSprite[helly].Vert1;
						Q_PntSprite[helly].Vert2STR = Q_PntSprite[helly].Vert2;
						Q_PntSprite[helly].Vert3STR = Q_PntSprite[helly].Vert3;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lverts[0].X = Q_PntSprite[helly].Vert1STR.X;
						Q_PntSprite[helly].Lverts[0].Y = Q_PntSprite[helly].Vert1STR.Y;
						Q_PntSprite[helly].Lverts[0].Z = Q_PntSprite[helly].Vert1STR.Z;
						Q_PntSprite[helly].Lverts[0].u = 0;
						Q_PntSprite[helly].Lverts[0].v = 1;
						Q_PntSprite[helly].Lverts[0].r = 255;
						Q_PntSprite[helly].Lverts[0].g = 255;
						Q_PntSprite[helly].Lverts[0].b = 255;
						Q_PntSprite[helly].Lverts[0].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[1].X = Q_PntSprite[helly].Vert2STR.X;
						Q_PntSprite[helly].Lverts[1].Y = Q_PntSprite[helly].Vert2STR.Y;
						Q_PntSprite[helly].Lverts[1].Z = Q_PntSprite[helly].Vert2STR.Z;
						Q_PntSprite[helly].Lverts[1].u = 1;
						Q_PntSprite[helly].Lverts[1].v = 1;
						Q_PntSprite[helly].Lverts[1].r = 255;
						Q_PntSprite[helly].Lverts[1].g = 255;
						Q_PntSprite[helly].Lverts[1].b = 255;
						Q_PntSprite[helly].Lverts[1].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[2].X = Q_PntSprite[helly].Vert3STR.X;
						Q_PntSprite[helly].Lverts[2].Y = Q_PntSprite[helly].Vert3STR.Y;
						Q_PntSprite[helly].Lverts[2].Z = Q_PntSprite[helly].Vert3STR.Z;
						Q_PntSprite[helly].Lverts[2].u = 1;
						Q_PntSprite[helly].Lverts[2].v = 0;
						Q_PntSprite[helly].Lverts[2].r = 255;
						Q_PntSprite[helly].Lverts[2].g = 255;
						Q_PntSprite[helly].Lverts[2].b = 255;
						Q_PntSprite[helly].Lverts[2].a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lverts[0], 3, QAEFF27, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						//##### Sprite Trail 1
						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Vert1STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert1STR);
						geVec3d_MA(&Q_PntSprite[helly].Vert2STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert2STR);
						geVec3d_MA(&Q_PntSprite[helly].Vert3STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert3STR);

						if(Q_PntSprite[helly].AlphaSTR - 20 >= 0) Q_PntSprite[helly].AlphaSTR -= 20;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lverts[0].X = Q_PntSprite[helly].Vert1STR.X;
						Q_PntSprite[helly].Lverts[0].Y = Q_PntSprite[helly].Vert1STR.Y;
						Q_PntSprite[helly].Lverts[0].Z = Q_PntSprite[helly].Vert1STR.Z;
						Q_PntSprite[helly].Lverts[0].u = 0;
						Q_PntSprite[helly].Lverts[0].v = 1;
						Q_PntSprite[helly].Lverts[0].r = 200;
						Q_PntSprite[helly].Lverts[0].g = 200;
						Q_PntSprite[helly].Lverts[0].b = 200;
						Q_PntSprite[helly].Lverts[0].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[1].X = Q_PntSprite[helly].Vert2STR.X;
						Q_PntSprite[helly].Lverts[1].Y = Q_PntSprite[helly].Vert2STR.Y;
						Q_PntSprite[helly].Lverts[1].Z = Q_PntSprite[helly].Vert2STR.Z;
						Q_PntSprite[helly].Lverts[1].u = 1;
						Q_PntSprite[helly].Lverts[1].v = 1;
						Q_PntSprite[helly].Lverts[1].r = 200;
						Q_PntSprite[helly].Lverts[1].g = 200;
						Q_PntSprite[helly].Lverts[1].b = 200;
						Q_PntSprite[helly].Lverts[1].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[2].X = Q_PntSprite[helly].Vert3STR.X;
						Q_PntSprite[helly].Lverts[2].Y = Q_PntSprite[helly].Vert3STR.Y;
						Q_PntSprite[helly].Lverts[2].Z = Q_PntSprite[helly].Vert3STR.Z;
						Q_PntSprite[helly].Lverts[2].u = 1;
						Q_PntSprite[helly].Lverts[2].v = 0;
						Q_PntSprite[helly].Lverts[2].r = 200;
						Q_PntSprite[helly].Lverts[2].g = 200;
						Q_PntSprite[helly].Lverts[2].b = 200;
						Q_PntSprite[helly].Lverts[2].a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lverts[0], 3, QAEFF27, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						//##### Sprite Trail 2
						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Vert1STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert1STR);
						geVec3d_MA(&Q_PntSprite[helly].Vert2STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert2STR);
						geVec3d_MA(&Q_PntSprite[helly].Vert3STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert3STR);

						if(Q_PntSprite[helly].AlphaSTR - 20 >= 0) Q_PntSprite[helly].AlphaSTR -= 20;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lverts[0].X = Q_PntSprite[helly].Vert1STR.X;
						Q_PntSprite[helly].Lverts[0].Y = Q_PntSprite[helly].Vert1STR.Y;
						Q_PntSprite[helly].Lverts[0].Z = Q_PntSprite[helly].Vert1STR.Z;
						Q_PntSprite[helly].Lverts[0].u = 0;
						Q_PntSprite[helly].Lverts[0].v = 1;
						Q_PntSprite[helly].Lverts[0].r = 150;
						Q_PntSprite[helly].Lverts[0].g = 150;
						Q_PntSprite[helly].Lverts[0].b = 150;
						Q_PntSprite[helly].Lverts[0].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[1].X = Q_PntSprite[helly].Vert2STR.X;
						Q_PntSprite[helly].Lverts[1].Y = Q_PntSprite[helly].Vert2STR.Y;
						Q_PntSprite[helly].Lverts[1].Z = Q_PntSprite[helly].Vert2STR.Z;
						Q_PntSprite[helly].Lverts[1].u = 1;
						Q_PntSprite[helly].Lverts[1].v = 1;
						Q_PntSprite[helly].Lverts[1].r = 150;
						Q_PntSprite[helly].Lverts[1].g = 150;
						Q_PntSprite[helly].Lverts[1].b = 150;
						Q_PntSprite[helly].Lverts[1].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[2].X = Q_PntSprite[helly].Vert3STR.X;
						Q_PntSprite[helly].Lverts[2].Y = Q_PntSprite[helly].Vert3STR.Y;
						Q_PntSprite[helly].Lverts[2].Z = Q_PntSprite[helly].Vert3STR.Z;
						Q_PntSprite[helly].Lverts[2].u = 0;
						Q_PntSprite[helly].Lverts[2].v = 0;
						Q_PntSprite[helly].Lverts[2].r = 150;
						Q_PntSprite[helly].Lverts[2].g = 150;
						Q_PntSprite[helly].Lverts[2].b = 150;
						Q_PntSprite[helly].Lverts[2].a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lverts[0], 3, QAEFF27, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						//##### Sprite Trail 3
						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Vert1STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert1STR);
						geVec3d_MA(&Q_PntSprite[helly].Vert2STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert2STR);
						geVec3d_MA(&Q_PntSprite[helly].Vert3STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert3STR);

						if(Q_PntSprite[helly].AlphaSTR - 20 >= 0) Q_PntSprite[helly].AlphaSTR -= 20;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lverts[0].X = Q_PntSprite[helly].Vert1STR.X;
						Q_PntSprite[helly].Lverts[0].Y = Q_PntSprite[helly].Vert1STR.Y;
						Q_PntSprite[helly].Lverts[0].Z = Q_PntSprite[helly].Vert1STR.Z;
						Q_PntSprite[helly].Lverts[0].u = 0;
						Q_PntSprite[helly].Lverts[0].v = 1;
						Q_PntSprite[helly].Lverts[0].r = 100;
						Q_PntSprite[helly].Lverts[0].g = 100;
						Q_PntSprite[helly].Lverts[0].b = 100;
						Q_PntSprite[helly].Lverts[0].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[1].X = Q_PntSprite[helly].Vert2STR.X;
						Q_PntSprite[helly].Lverts[1].Y = Q_PntSprite[helly].Vert2STR.Y;
						Q_PntSprite[helly].Lverts[1].Z = Q_PntSprite[helly].Vert2STR.Z;
						Q_PntSprite[helly].Lverts[1].u = 1;
						Q_PntSprite[helly].Lverts[1].v = 1;
						Q_PntSprite[helly].Lverts[1].r = 100;
						Q_PntSprite[helly].Lverts[1].g = 100;
						Q_PntSprite[helly].Lverts[1].b = 100;
						Q_PntSprite[helly].Lverts[1].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[2].X = Q_PntSprite[helly].Vert3STR.X;
						Q_PntSprite[helly].Lverts[2].Y = Q_PntSprite[helly].Vert3STR.Y;
						Q_PntSprite[helly].Lverts[2].Z = Q_PntSprite[helly].Vert3STR.Z;
						Q_PntSprite[helly].Lverts[2].u = 1;
						Q_PntSprite[helly].Lverts[2].v = 0;
						Q_PntSprite[helly].Lverts[2].r = 100;
						Q_PntSprite[helly].Lverts[2].g = 100;
						Q_PntSprite[helly].Lverts[2].b = 100;
						Q_PntSprite[helly].Lverts[2].a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lverts[0], 3, QAEFF27, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						//##### Sprite Trail 4
						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Vert1STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert1STR);
						geVec3d_MA(&Q_PntSprite[helly].Vert2STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert2STR);
						geVec3d_MA(&Q_PntSprite[helly].Vert3STR, -Q_PntSprite[helly].Speed*2*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Vert3STR);

						if(Q_PntSprite[helly].AlphaSTR - 20 >= 0) Q_PntSprite[helly].AlphaSTR -= 20;

						//##### Render Main Sprite
						Q_PntSprite[helly].Lverts[0].X = Q_PntSprite[helly].Vert1STR.X;
						Q_PntSprite[helly].Lverts[0].Y = Q_PntSprite[helly].Vert1STR.Y;
						Q_PntSprite[helly].Lverts[0].Z = Q_PntSprite[helly].Vert1STR.Z;
						Q_PntSprite[helly].Lverts[0].u = 0;
						Q_PntSprite[helly].Lverts[0].v = 1;
						Q_PntSprite[helly].Lverts[0].r = 50;
						Q_PntSprite[helly].Lverts[0].g = 50;
						Q_PntSprite[helly].Lverts[0].b = 50;
						Q_PntSprite[helly].Lverts[0].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[1].X = Q_PntSprite[helly].Vert2STR.X;
						Q_PntSprite[helly].Lverts[1].Y = Q_PntSprite[helly].Vert2STR.Y;
						Q_PntSprite[helly].Lverts[1].Z = Q_PntSprite[helly].Vert2STR.Z;
						Q_PntSprite[helly].Lverts[1].u = 1;
						Q_PntSprite[helly].Lverts[1].v = 1;
						Q_PntSprite[helly].Lverts[1].r = 50;
						Q_PntSprite[helly].Lverts[1].g = 50;
						Q_PntSprite[helly].Lverts[1].b = 50;
						Q_PntSprite[helly].Lverts[1].a = Q_PntSprite[helly].AlphaSTR;

						Q_PntSprite[helly].Lverts[2].X = Q_PntSprite[helly].Vert3STR.X;
						Q_PntSprite[helly].Lverts[2].Y = Q_PntSprite[helly].Vert3STR.Y;
						Q_PntSprite[helly].Lverts[2].Z = Q_PntSprite[helly].Vert3STR.Z;
						Q_PntSprite[helly].Lverts[2].u = 1;
						Q_PntSprite[helly].Lverts[2].v = 0;
						Q_PntSprite[helly].Lverts[2].r = 50;
						Q_PntSprite[helly].Lverts[2].g = 50;
						Q_PntSprite[helly].Lverts[2].b = 50;
						Q_PntSprite[helly].Lverts[2].a = Q_PntSprite[helly].AlphaSTR;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lverts[0], 3, QAEFF27, Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);

						} break;

					case 57:	//SOLID QA EFFECT REL ENERGY EFFICIENCY
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (1*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (1*TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + (0.35*TimeScale) < 3) Q_PntSprite[helly].Speed += (0.35*TimeScale);
						else Q_PntSprite[helly].Speed = 6;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, (Q_PntSprite[helly].Speed*TimeScale), &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF04 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 58:	//SOLID QA EFFECT REL ENERGY EFFICIENCY
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (1*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (1*TimeScale);
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + (0.55*TimeScale) < 6) Q_PntSprite[helly].Speed += (0.55*TimeScale);
						else Q_PntSprite[helly].Speed = 6;


						Q_PntSprite[helly].OldPos = Q_PntSprite[helly].Pos;

						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, (Q_PntSprite[helly].Speed*TimeScale), &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].TraVec.Y -= 0.005;

						if(geWorld_Collision(World,
							 NULL,
							 NULL,
							 &Q_PntSprite[helly].OldPos,
							 &Q_PntSprite[helly].Pos,
							 GE_CONTENTS_CANNOT_OCCUPY,
							 GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
							 0xffffffff, NULL, NULL,
							 &Q_PntSprite[helly].Collision))
							{
							if(Q_PntSprite[helly].Collision.Actor == NULL)
								{
								Q_PntSprite[helly].Pos = Q_PntSprite[helly].Collision.Impact;
								Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
								}
							else
								{
								if(Q_PntSprite[helly].Collision.Actor->IDflag != playact.Actor->IDflag)
									{
									Q_PntSprite[helly].Pos = Q_PntSprite[helly].Collision.Impact;
									Q_PntSprite[helly].TraVec = PHY_BounceVector(Q_PntSprite[helly].TraVec, Q_PntSprite[helly].Collision.Plane.Normal);
									}
								}
							}

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, QAEFF04 , Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;


					case 59:		//Trail Sprites
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (35*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.5*TimeScale < 20) Q_PntSprite[helly].Speed += 0.5*TimeScale;
						else Q_PntSprite[helly].Speed = 20;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y -= (Q_PntSprite[helly].Speed/7)*TimeScale;

						Q_PntSprite[helly].TraVec.Y -= 0.09;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = 100;
						Q_PntSprite[helly].Lvert.g = 255;
						Q_PntSprite[helly].Lvert.b = 0;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						Q_PntSprite[helly].MATCNT++;
						if(Q_PntSprite[helly].MATCNT < 0) Q_PntSprite[helly].MATCNT = 0;
						if(Q_PntSprite[helly].MATCNT > 25) Q_PntSprite[helly].MATCNT = 0;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, Star[Q_PntSprite[helly].MATCNT], Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;

					case 60:		//Trail Sprites
						{
						//### Progress Alpha
						if(Q_PntSprite[helly].Alpha - (3*TimeScale) > 0) Q_PntSprite[helly].Alpha -= (35*TimeScale);	//3  //25
						else
							{
							Q_PntSprite[helly].Alpha = 0;
							Q_PntSprite[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomPntSprite - 1)
								{
								Q_PntSprite[K] = Q_PntSprite[K+1];
								K++;
								}

							NomPntSprite--;
							}

						if(Q_PntSprite[helly].Speed + 0.5*TimeScale < 20) Q_PntSprite[helly].Speed += 0.5*TimeScale;
						else Q_PntSprite[helly].Speed = 20;


						//### Move Sprite
						geVec3d_MA(&Q_PntSprite[helly].Pos, Q_PntSprite[helly].Speed*TimeScale, &Q_PntSprite[helly].TraVec, &Q_PntSprite[helly].Pos);

						Q_PntSprite[helly].Pos.Y += (Q_PntSprite[helly].Speed/7)*TimeScale;

						Q_PntSprite[helly].TraVec.Y += 0.09;

						Q_PntSprite[helly].Scale += 0.002;
				

						//##### Render Main Sprite

						Q_PntSprite[helly].Lvert.X = Q_PntSprite[helly].Pos.X;
						Q_PntSprite[helly].Lvert.Y = Q_PntSprite[helly].Pos.Y;
						Q_PntSprite[helly].Lvert.Z = Q_PntSprite[helly].Pos.Z;
						Q_PntSprite[helly].Lvert.r = Q_PntSprite[helly].IR;
						Q_PntSprite[helly].Lvert.g = Q_PntSprite[helly].IG;
						Q_PntSprite[helly].Lvert.b = Q_PntSprite[helly].IB;
						Q_PntSprite[helly].Lvert.a = Q_PntSprite[helly].Alpha;

						Q_PntSprite[helly].MATCNT++;
						if(Q_PntSprite[helly].MATCNT < 0) Q_PntSprite[helly].MATCNT = 0;
						if(Q_PntSprite[helly].MATCNT > 25) Q_PntSprite[helly].MATCNT = 0;

						geWorld_AddPolyOnce (World, &Q_PntSprite[helly].Lvert, 1, Star[Q_PntSprite[helly].MATCNT], Q_PntSprite[helly].Type, Q_PntSprite[helly].RenderFlags, Q_PntSprite[helly].Scale);
						} break;
					}//END: :CASE

				}
			helly++;
			}
		}



	//###### POINT SPRITE MANAGEMENT

	if(KEY_DOWN(VK_F6))
		{
		while(NomPntSprite > TestFloatALPHA3)
			{
			helly = rand() % (NomPntSprite - 1);

			Q_PntSprite[helly].Alpha = 0;
			Q_PntSprite[helly].Live = 0;

			//### Array Reorder
			K = helly;
			while(K < NomPntSprite - 1)
				{
				Q_PntSprite[K] = Q_PntSprite[K+1];
				K++;
				}

			NomPntSprite--;
			}
		}


	//###### CLOUD MANAGEMENT

	if(KEY_DOWN(VK_F6))
		{
		while(NomCloud > TestFloatALPHA4)
			{
			helly = rand() % (NomCloud - 1);

			Q_Cloud[helly].CloudAlpha = 0;
			Q_Cloud[helly].CloudLive = 0;

			//### Array Reorder
			K = helly;
			while(K < NomCloud - 1)
				{
				Q_Cloud[K] = Q_Cloud[K+1];
				K++;
				}

			NomCloud--;
			}
		}


	//########  - MELEE HITS Melee Hits System -  ########//

	//##### Hit Types ######//
	//# 0  - Simple Block  #//
	//# 1  - Block Crush   #//
	//# 2  - Shock Block   #//
	//# 3  - Deflect       #//
	//# 5  - Normal Hit    #//
	//# 10 - Mid Hit       #//
	//# 11 - Mid Hit Spec  #//
	//# 20 - Heavy Hit     #//
	//######################//

	if(NetworkOption != 1)
		{
		if(NomMelHit > 0)	//Number of HITs
			{
			aero = 0;
			while(aero < NomMelHit)
				{
				if(Q_MeleeHit[aero].Live == 1)		//HIT is live
					{
					//### Attack Light
					if(Q_MeleeHit[aero].INIT == 0)
						{
						Q_MeleeHit[aero].INIT = 1;

						//##### HIT RESULTS
						switch(Q_MeleeHit[aero].HitRESULT)
							{
							case 0:		//Block Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitB1, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 20:	//Shock Block Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitB1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_ShkBlock, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 1:		//Avatar Normal Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1AV, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 2:		//Avatar FallHead Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitH1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1AV, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 3:		//Avatar Ultra Blow
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_UltraBlowMALE, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitH1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1AV, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 4:		//Player Normal Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfN1, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 5:		//Player FallHead Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfH1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfN1, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 6:		//Player Ultra Blow
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_UltraBlowFEMALE, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfH1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfN1, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 7:		//Renzou Impact
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_RenzouImpact, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 8:		//Deflect
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_DefBlock, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 9:		//Block break
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_BrkBlock, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 10:	//Avatar DEATH
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
									{ TimeHole = 4; TimeRotate = 1;	}
								} break;

							case 11:	//Player DEATH
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
									{ TimeHole = 4; TimeRotate = 1;	}
								} break;

							case 17:	//Avatar DEATH BY RENZOU
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_RenzouImpact, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
									{ TimeHole = 4; TimeRotate = 1;	}
								} break;

							case 18:	//Player DEATH BY RENZOU
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_RenzouImpact, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
									{ TimeHole = 4; TimeRotate = 1;	}
								} break;

							//##### CLEAN NET EFFICIENCY
							Q_MeleeHit[aero].Expandro3D.MaxRadius *= Q_MeleeHit[aero].AttackSTRENGTH;
							}


						if(Q_MeleeHit[aero].HitTYPE == 0)
							{
							Q_MeleeHit[aero].LightColor.r = 255.0f;
							Q_MeleeHit[aero].LightColor.g = 255.0f;
							Q_MeleeHit[aero].LightColor.b = 255.0f;
							Q_MeleeHit[aero].LightColor.a = 155.0f;
							}
						else
							{
							if(Q_MeleeHit[aero].HitTYPE == 1)
								{
								Q_MeleeHit[aero].LightColor.r = 0.0f;
								Q_MeleeHit[aero].LightColor.g = 0.0f;
								Q_MeleeHit[aero].LightColor.b = 160.0f;
								Q_MeleeHit[aero].LightColor.a = 200.0f;
								}
							else
								{
								Q_MeleeHit[aero].LightColor.r = 255.0f;
								Q_MeleeHit[aero].LightColor.g = 0.0f;
								Q_MeleeHit[aero].LightColor.b = 0.0f;
								Q_MeleeHit[aero].LightColor.a = 255.0f;
								}
							}

						Q_MeleeHit[aero].Light = geWorld_AddLight(World);

						if(Q_MeleeHit[aero].BloodAmt > 25) Q_MeleeHit[aero].BloodAmt = 25;

						//### Blood
						//## Blood Sparks
						if(Q_MeleeHit[aero].BloodAmt > 0)
							{
							helly = 0;								// 4
							while((helly < Q_MeleeHit[aero].BloodAmt / 6) && (NomBlood < 498))
								{
								BBlood[NomBlood].Pos = Q_MeleeHit[aero].Impact;

								BBlood[NomBlood].AlpFade = 210;

								BBlood[NomBlood].TraVec = Q_MeleeHit[aero].ReactionNorm;

								BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
								BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.5; //0.1	//((rand() % 10)/100);
								BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);

								BBlood[NomBlood].Speed = 6;

								BBlood[NomBlood].Gravity = 0.08;

								BBlood[NomBlood].EffectType = 0;

								BBlood[NomBlood].Bounce = 0;
								BBlood[NomBlood].SmokeTrail = 1;
								BBlood[NomBlood].Live = 1;

								NomBlood++;
								helly++;
								}
							}

						//## Blood Clouds
						jet = 0;							///// 2
						while((jet < (Q_MeleeHit[aero].BloodAmt / 5)) && (NomBlood < 4998))
							{
							Q_Cloud[NomCloud].CloudType = 1;

							Q_Cloud[NomCloud].CloudPos = Q_MeleeHit[aero].Impact;
								
							Q_Cloud[NomCloud].CloudPos.X += (((float)rand() / 32767)-0.5)*2;
							Q_Cloud[NomCloud].CloudPos.Y += (((float)rand() / 32767)-0.5)*2;
							Q_Cloud[NomCloud].CloudPos.Z += (((float)rand() / 32767)-0.5)*2;

							Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*55)+200;
							Q_Cloud[NomCloud].CloudScale = 0.1;

							Q_Cloud[NomCloud].CloudTraVec = TempVec1;

							Q_Cloud[NomCloud].CloudTraVec.X += (((float)rand() / 32767)-0.5)*0.2;
							Q_Cloud[NomCloud].CloudTraVec.Y += (((float)rand() / 32767)-0.5)*0.2;
							Q_Cloud[NomCloud].CloudTraVec.Z += (((float)rand() / 32767)-0.5)*0.2;

							Q_Cloud[NomCloud].CloudSpeed = ((((float)rand() / 32767)-0.5)*2)+2.5;

							Q_Cloud[NomCloud].CloudLive = 1;

							NomCloud++;
							jet++;
							}

						//###### -  Heavy Hits  - ######
						if(Q_MeleeHit[aero].HitTYPE == 20)
							{
							Q_MeleeHit[aero].SpikeAMT = Q_MeleeHit[aero].BloodAmt / 10;

							if(Q_MeleeHit[aero].SpikeAMT < 3) Q_MeleeHit[aero].SpikeAMT = 3;
							if(Q_MeleeHit[aero].SpikeAMT > 45) Q_MeleeHit[aero].SpikeAMT = 45;

							jet = 0;
							while(jet < Q_MeleeHit[aero].SpikeAMT && (NomSpikes < 498))
								{
								//# Effect Type
								HHSpike[NomSpikes].EffectType = 0;

								//## Speed
								HHSpike[NomSpikes].Speed = 15;

								//### Width
								HHSpike[NomSpikes].Width = 1;

								//#### Gravity
								HHSpike[NomSpikes].Gravity = 0;

								//##### Alpha Level
								HHSpike[NomSpikes].AlpFade = 0;
								HHSpike[NomSpikes].FadeDir = 0;

								//###### Center Position
								HHSpike[NomSpikes].CenterPos = Q_MeleeHit[aero].Impact;

								//####### Create Trajectory Vector From Random Numbers
								HHSpike[NomSpikes].TraVec.X = (((float)rand() / 32767)-0.5)*2;
								HHSpike[NomSpikes].TraVec.Y = (((float)rand() / 32767)-0.5)*2;
								HHSpike[NomSpikes].TraVec.Z = (((float)rand() / 32767)-0.5)*2;

								geVec3d_MA(&HHSpike[NomSpikes].CenterPos, 5 + (Q_MeleeHit[aero].SpikeAMT / 5), &HHSpike[NomSpikes].TraVec, &HHSpike[NomSpikes].FrontPos);
								geVec3d_MA(&HHSpike[NomSpikes].CenterPos, (5 + (Q_MeleeHit[aero].SpikeAMT / 5)) + (Q_MeleeHit[aero].SpikeAMT / 1.5), &HHSpike[NomSpikes].TraVec, &HHSpike[NomSpikes].TailPos);

								//######## Set Timers
								HHSpike[NomSpikes].Timer = 0;
								HHSpike[NomSpikes].MoveTail = 0;

								//######### Make Live
								HHSpike[NomSpikes].Live = 1;

								NomSpikes++;
								jet++;
								}
							}

						//###### -  Mid Hits  - ######
						if(Q_MeleeHit[aero].HitTYPE == 11)
							{
							jet = 0;
							while(jet < 6 && (NomCloud < 4998))
								{
								Q_Cloud[NomCloud].CloudType = 4;

								Q_Cloud[NomCloud].CloudPos = Q_MeleeHit[aero].Impact;

								Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*120)+135;
								Q_Cloud[NomCloud].CloudScale = (((float)rand() / 32767)*0.2)+0.025;

								Q_Cloud[NomCloud].CloudTraVec.X = (((float)rand() / 32767)-0.5) * 2;
								Q_Cloud[NomCloud].CloudTraVec.Y = (((float)rand() / 32767) * 3) + 0.8;
								Q_Cloud[NomCloud].CloudTraVec.Z = (((float)rand() / 32767)-0.5) * 2;

								Q_Cloud[NomCloud].CloudSpeed = ((((float)rand() / 32767))+0.3)*5;

								Q_Cloud[NomCloud].CloudLive = 1;

								NomCloud++;
								jet++;
								}
							}
						}


					//###### -  EXPANDRO3D  - ######

					Q_MeleeHit[aero].Expandro3D.MaterialCNT = (( Q_MeleeHit[aero].Expandro3D.Radius / Q_MeleeHit[aero].Expandro3D.MaxRadius ) * 31 ) + 11;
					if(Q_MeleeHit[aero].Expandro3D.MaterialCNT > 42) Q_MeleeHit[aero].Expandro3D.MaterialCNT = 42;
					if(Q_MeleeHit[aero].Expandro3D.MaterialCNT < 11) Q_MeleeHit[aero].Expandro3D.MaterialCNT = 11;

					if(Q_MeleeHit[aero].Expandro3D.Radius > 0 && (((Q_MeleeHit[aero].HitTYPE != 0 && Q_MeleeHit[aero].HitTYPE != 1 && Q_MeleeHit[aero].HitTYPE != 2 && Q_MeleeHit[aero].HitTYPE != 3) && Q_MeleeHit[aero].Expandro3D.Radius < Q_MeleeHit[aero].Expandro3D.MaxRadius) || ((Q_MeleeHit[aero].HitTYPE == 0 || Q_MeleeHit[aero].HitTYPE == 2 || Q_MeleeHit[aero].HitTYPE == 3) && Q_MeleeHit[aero].Expandro3D.Radius < (Q_MeleeHit[aero].Expandro3D.MaxRadius/1.4)) || (Q_MeleeHit[aero].HitTYPE == 1 && Q_MeleeHit[aero].Expandro3D.Radius > 0)))
						{
						if(Q_MeleeHit[aero].HitTYPE == 1)
							{
							geXForm3d_SetXRotation(&rotmat, 0.5*TimeScale);
							geXForm3d_Multiply(&Q_MeleeHit[aero].AttboneXF, &rotmat, &Q_MeleeHit[aero].AttboneXF);
							}

						geXForm3d_GetIn(&Q_MeleeHit[aero].AttboneXF,&Q_MeleeHit[aero].Expandro3D.Leftvec);
						geXForm3d_GetLeft(&Q_MeleeHit[aero].AttboneXF,&Q_MeleeHit[aero].Expandro3D.Forvec);
						geXForm3d_GetUp(&Q_MeleeHit[aero].AttboneXF,&Q_MeleeHit[aero].Expandro3D.Upvec);

						Q_MeleeHit[aero].Expandro3D.Vert1 = Q_MeleeHit[aero].Impact;

						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert1, Q_MeleeHit[aero].Expandro3D.Radius, &Q_MeleeHit[aero].Expandro3D.Upvec, &Q_MeleeHit[aero].Expandro3D.Vert1);
										//Distance to the Left of the player
						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert1, Q_MeleeHit[aero].Expandro3D.Radius, &Q_MeleeHit[aero].Expandro3D.Leftvec, &Q_MeleeHit[aero].Expandro3D.Vert1);

										//Distance to the Right of the player from the left
						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert1, -Q_MeleeHit[aero].Expandro3D.Radius * 2, &Q_MeleeHit[aero].Expandro3D.Leftvec, &Q_MeleeHit[aero].Expandro3D.Vert2);

										//Distance to the Top of the player
						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert2, -Q_MeleeHit[aero].Expandro3D.Radius * 2, &Q_MeleeHit[aero].Expandro3D.Upvec, &Q_MeleeHit[aero].Expandro3D.Vert3);

										//Distance to the Top of the player
						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert1, -Q_MeleeHit[aero].Expandro3D.Radius * 2, &Q_MeleeHit[aero].Expandro3D.Upvec, &Q_MeleeHit[aero].Expandro3D.Vert4);

						Q_MeleeHit[aero].Expandro3D.Lvert[0].a = Q_MeleeHit[aero].Expandro3D.StartFade;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].b = Q_MeleeHit[aero].Expandro3D.Blue;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].g = Q_MeleeHit[aero].Expandro3D.Green;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].r = Q_MeleeHit[aero].Expandro3D.Red;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].u = 0;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].v = 0;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].X = Q_MeleeHit[aero].Expandro3D.Vert1.X;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].Y = Q_MeleeHit[aero].Expandro3D.Vert1.Y;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].Z = Q_MeleeHit[aero].Expandro3D.Vert1.Z;

						Q_MeleeHit[aero].Expandro3D.Lvert[1].a = Q_MeleeHit[aero].Expandro3D.StartFade;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].b = Q_MeleeHit[aero].Expandro3D.Blue;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].g = Q_MeleeHit[aero].Expandro3D.Green;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].r = Q_MeleeHit[aero].Expandro3D.Red;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].u = 1;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].v = 0;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].X = Q_MeleeHit[aero].Expandro3D.Vert2.X;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].Y = Q_MeleeHit[aero].Expandro3D.Vert2.Y;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].Z = Q_MeleeHit[aero].Expandro3D.Vert2.Z;

						Q_MeleeHit[aero].Expandro3D.Lvert[2].a = Q_MeleeHit[aero].Expandro3D.StartFade;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].b = Q_MeleeHit[aero].Expandro3D.Blue;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].g = Q_MeleeHit[aero].Expandro3D.Green;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].r = Q_MeleeHit[aero].Expandro3D.Red;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].u = 1;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].v = 1;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].X = Q_MeleeHit[aero].Expandro3D.Vert3.X;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].Y = Q_MeleeHit[aero].Expandro3D.Vert3.Y;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].Z = Q_MeleeHit[aero].Expandro3D.Vert3.Z;

						Q_MeleeHit[aero].Expandro3D.Lvert[3].a = Q_MeleeHit[aero].Expandro3D.StartFade;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].b = Q_MeleeHit[aero].Expandro3D.Blue;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].g = Q_MeleeHit[aero].Expandro3D.Green;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].r = Q_MeleeHit[aero].Expandro3D.Red;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].u = 0;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].v = 1;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].X = Q_MeleeHit[aero].Expandro3D.Vert4.X;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].Y = Q_MeleeHit[aero].Expandro3D.Vert4.Y;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].Z = Q_MeleeHit[aero].Expandro3D.Vert4.Z;

						Q_MeleeHit[aero].Expandro3D.Fade = Q_MeleeHit[aero].Expandro3D.StartFade;

						if(Q_MeleeHit[aero].HitTYPE == 1 && Q_MeleeHit[aero].Expandro3D.StartFade < 160)
							{
							Q_MeleeHit[aero].Expandro3D.Fade += 40;
							Q_MeleeHit[aero].Expandro3D.StartFade += 40;
							}

						if((Q_MeleeHit[aero].HitTYPE != 0 && Q_MeleeHit[aero].HitTYPE != 1 && Q_MeleeHit[aero].HitTYPE != 2 && Q_MeleeHit[aero].HitTYPE != 3))
							{
							if((Q_MeleeHit[aero].HitTYPE == 10 || Q_MeleeHit[aero].HitTYPE == 11))	//#### Normal Hit
								{
								geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, PulsarMid[Q_MeleeHit[aero].Expandro3D.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);
								Q_MeleeHit[aero].Expandro3D.Radius += (Q_MeleeHit[aero].Expandro3D.MaxRadius/10); //EDIT//*TimeScale;
								}
							else								//#### Mid Hit
								{
								geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, Pulsar[Q_MeleeHit[aero].Expandro3D.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);
								Q_MeleeHit[aero].Expandro3D.Radius += (Q_MeleeHit[aero].Expandro3D.MaxRadius/15); //EDIT//*TimeScale;
								}
							}
						else									//#### Block Hit
							{
							if(Q_MeleeHit[aero].HitTYPE == 1)
								{
								geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, EXPexpandro1, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
								Q_MeleeHit[aero].Expandro3D.Radius -= (Q_MeleeHit[aero].Expandro3D.MaxRadius/20); //EDIT//*TimeScale;
								}
							else
								{
								geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, expandro1, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
								Q_MeleeHit[aero].Expandro3D.Radius += (Q_MeleeHit[aero].Expandro3D.MaxRadius/20); //EDIT//*TimeScale;
								}
							}

						if((Q_MeleeHit[aero].HitTYPE != 0 && Q_MeleeHit[aero].HitTYPE != 1 && Q_MeleeHit[aero].HitTYPE != 2 && Q_MeleeHit[aero].HitTYPE != 3)) geWorld_SetLightAttributes(World, Q_MeleeHit[aero].Light, &Q_MeleeHit[aero].Impact, &Q_MeleeHit[aero].LightColor, Q_MeleeHit[aero].Expandro3D.MaxRadius - Q_MeleeHit[aero].Expandro3D.Radius, GE_FALSE);
						else geWorld_SetLightAttributes(World, Q_MeleeHit[aero].Light, &Q_MeleeHit[aero].Impact, &Q_MeleeHit[aero].LightColor, (Q_MeleeHit[aero].Expandro3D.MaxRadius - Q_MeleeHit[aero].Expandro3D.Radius)*5, GE_FALSE);
						}
					else
						{
						if(Q_MeleeHit[aero].Expandro3D.Fade - (10*TimeScale) >= 0)
							{
							if((Q_MeleeHit[aero].HitTYPE != 10 && Q_MeleeHit[aero].HitTYPE != 11))	//#### Normal Hit
								{
								Q_MeleeHit[aero].Expandro3D.Fade -= 10*TimeScale;
								Q_MeleeHit[aero].Expandro3D.StartFade -= 10*TimeScale;
								}
							else								//#### Mid Hit
								{
								Q_MeleeHit[aero].Expandro3D.Fade -= 23*TimeScale;
								Q_MeleeHit[aero].Expandro3D.StartFade -= 23*TimeScale;
								}

							if(Q_MeleeHit[aero].Expandro3D.Fade >= 0)
								{
								Q_MeleeHit[aero].Expandro3D.Lvert[0].a = Q_MeleeHit[aero].Expandro3D.Fade;
								Q_MeleeHit[aero].Expandro3D.Lvert[1].a = Q_MeleeHit[aero].Expandro3D.Fade;
								Q_MeleeHit[aero].Expandro3D.Lvert[2].a = Q_MeleeHit[aero].Expandro3D.Fade;
								Q_MeleeHit[aero].Expandro3D.Lvert[3].a = Q_MeleeHit[aero].Expandro3D.Fade;
								if((Q_MeleeHit[aero].HitTYPE != 0 && Q_MeleeHit[aero].HitTYPE != 1 && Q_MeleeHit[aero].HitTYPE != 2 && Q_MeleeHit[aero].HitTYPE != 3))
									{
									if((Q_MeleeHit[aero].HitTYPE == 10 || Q_MeleeHit[aero].HitTYPE == 11)) geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, PulsarMid[Q_MeleeHit[aero].Expandro3D.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);
									else geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, Pulsar[Q_MeleeHit[aero].Expandro3D.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);
									}
								else geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, expandro1, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
								}
							}
						else
							{
							Q_MeleeHit[aero].Expandro3D.Radius = 301;
							Q_MeleeHit[aero].Live = 0;
							//Q_MeleeHit[aero].HitTYPE = 0;
							geWorld_RemoveLight(World, Q_MeleeHit[aero].Light);

							//### Array Reorder
							K = aero;
							while(K < NomMelHit - 1)
								{
								Q_MeleeHit[K] = Q_MeleeHit[K+1];
								K++;
								}

							NomMelHit--;
							}
						}


					//### Shock Block Flash
					if(Q_MeleeHit[aero].HitTYPE == 2)
						{
						jet = 0;
						while(jet < 8)	//10
							{
							//Set these vec3ds at lightning init
							Q_Lightning[0].Pos = Q_MeleeHit[aero].Impact;

							Q_Lightning[0].TraVec.X = (((float)rand() / 32767) * 2 ) - 1;
							Q_Lightning[0].TraVec.Y = (((float)rand() / 32767) * 2 ) - 1;	// <---Maybe not this
							Q_Lightning[0].TraVec.Z = (((float)rand() / 32767) * 2 ) - 1;

							Q_Lightning[0].LengNum = (rand() % 5) + 1;	//(rand() % 10) + 1;


							Q_Lightning[0].Type = GE_TEXTURED_POLY;
							Q_Lightning[0].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
							Q_Lightning[0].Bitmap = lightning;
							Q_Lightning[0].Scale = 1.0f;

							Q_Lightning[0].Count = 0;
							Q_Lightning[0].Live = 1;


							//Q_Lightning run process
							helly = 0;
							while(helly < (Q_Lightning[0].LengNum + 1))
								{
								Q_Lightning[0].TraVec.X += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;
								Q_Lightning[0].TraVec.Y += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;
								Q_Lightning[0].TraVec.Z += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;

								Q_Lightning[0].Length = (((float)rand() / 32767) * 7) + 0.3;	//(rand() % 60) + 50;
								if(helly == 0) Q_Lightning[0].Width = 0.2;	//0.2
								else Q_Lightning[0].Width = (((float)rand() / 32767) * 0.1) + 0.02;	//0.06	//(rand() % 10) + 1;

								geXForm3d_SetIdentity(&Q_Lightning[0].Roton);
								geXForm3d_RotateY(&Q_Lightning[0].Roton, 1.5708);
								geXForm3d_Rotate(&Q_Lightning[0].Roton, &Q_Lightning[0].TraVec, &Q_Lightning[0].WidthVec);
								geVec3d_Scale(&Q_Lightning[0].WidthVec, Q_Lightning[0].Width, &Q_Lightning[0].WidthVec);

								if(helly == 0) geVec3d_Subtract(&Q_Lightning[0].Pos, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert1);
								else Q_Lightning[0].Vert1 = Q_Lightning[0].Vert4;
								if(helly == 0) geVec3d_Add(&Q_Lightning[0].Pos, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert2);
								else Q_Lightning[0].Vert2 = Q_Lightning[0].Vert3;

								//Rescale Width ???

								geVec3d_MA(&Q_Lightning[0].Pos, Q_Lightning[0].Length, &Q_Lightning[0].TraVec, &Q_Lightning[0].PosEnd);

								geVec3d_Add(&Q_Lightning[0].PosEnd, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert3);
								geVec3d_Subtract(&Q_Lightning[0].PosEnd, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert4);

								Q_Lightning[0].Pos = Q_Lightning[0].PosEnd;


								Q_Lightning[0].Lvert[helly][0].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][0].b = 255;
								Q_Lightning[0].Lvert[helly][0].g = 255;
								Q_Lightning[0].Lvert[helly][0].r = 255;
								Q_Lightning[0].Lvert[helly][0].u = 1;
								Q_Lightning[0].Lvert[helly][0].v = 0;
								Q_Lightning[0].Lvert[helly][0].X = Q_Lightning[0].Vert1.X;
								Q_Lightning[0].Lvert[helly][0].Y = Q_Lightning[0].Vert1.Y;
								Q_Lightning[0].Lvert[helly][0].Z = Q_Lightning[0].Vert1.Z;


								Q_Lightning[0].Lvert[helly][1].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][1].b = 255;
								Q_Lightning[0].Lvert[helly][1].g = 255;
								Q_Lightning[0].Lvert[helly][1].r = 255;
								Q_Lightning[0].Lvert[helly][1].u = 1;
								Q_Lightning[0].Lvert[helly][1].v = 1;
								Q_Lightning[0].Lvert[helly][1].X = Q_Lightning[0].Vert2.X;
								Q_Lightning[0].Lvert[helly][1].Y = Q_Lightning[0].Vert2.Y;
								Q_Lightning[0].Lvert[helly][1].Z = Q_Lightning[0].Vert2.Z;


								Q_Lightning[0].Lvert[helly][2].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][2].b = 255;
								Q_Lightning[0].Lvert[helly][2].g = 255;
								Q_Lightning[0].Lvert[helly][2].r = 255;
								Q_Lightning[0].Lvert[helly][2].u = 0;
								Q_Lightning[0].Lvert[helly][2].v = 1;
								Q_Lightning[0].Lvert[helly][2].X = Q_Lightning[0].Vert3.X;
								Q_Lightning[0].Lvert[helly][2].Y = Q_Lightning[0].Vert3.Y;
								Q_Lightning[0].Lvert[helly][2].Z = Q_Lightning[0].Vert3.Z;


								Q_Lightning[0].Lvert[helly][3].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][3].b = 255;
								Q_Lightning[0].Lvert[helly][3].g = 255;
								Q_Lightning[0].Lvert[helly][3].r = 255;
								Q_Lightning[0].Lvert[helly][3].u = 0;
								Q_Lightning[0].Lvert[helly][3].v = 0;
								Q_Lightning[0].Lvert[helly][3].X = Q_Lightning[0].Vert4.X;
								Q_Lightning[0].Lvert[helly][3].Y = Q_Lightning[0].Vert4.Y;
								Q_Lightning[0].Lvert[helly][3].Z = Q_Lightning[0].Vert4.Z;

								geWorld_AddPolyOnce(World, &Q_Lightning[0].Lvert[helly][0], 4, Q_Lightning[0].Bitmap, Q_Lightning[0].Type, Q_Lightning[0].RenderFlags, Q_Lightning[0].Scale);

								helly += 1;
								}
							jet += 1;
							}
						}

					if(Q_MeleeHit[aero].HitTYPE == 3)
						{
						jet = 0;
						while(jet < 12)
							{
							//Set these vec3ds at lightning init
							Q_Lightning[0].Pos = Q_MeleeHit[aero].Impact;

							Q_Lightning[0].TraVec.X = (((float)rand() / 32767) * 2 ) - 1;
							Q_Lightning[0].TraVec.Y = (((float)rand() / 32767) * 2 ) - 1;	// <---Maybe not this
							Q_Lightning[0].TraVec.Z = (((float)rand() / 32767) * 2 ) - 1;

							Q_Lightning[0].LengNum = (rand() % 7) + 1;	//(rand() % 10) + 1;


							Q_Lightning[0].Type = GE_TEXTURED_POLY;
							Q_Lightning[0].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
							Q_Lightning[0].Bitmap = lightning;
							Q_Lightning[0].Scale = 1.0f;

							Q_Lightning[0].Count = 0;
							Q_Lightning[0].Live = 1;


							//Q_Lightning run process
							helly = 0;
							while(helly < (Q_Lightning[0].LengNum + 1))
								{
								Q_Lightning[0].TraVec.X += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;
								Q_Lightning[0].TraVec.Y += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;
								Q_Lightning[0].TraVec.Z += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;

								Q_Lightning[0].Length = (((float)rand() / 32767) * 7) + 0.3;	//(rand() % 60) + 50;
								if(helly == 0) Q_Lightning[0].Width = 0.2;	//0.2
								else Q_Lightning[0].Width = (((float)rand() / 32767) * 0.1) + 0.02;	//0.06	//(rand() % 10) + 1;

								geXForm3d_SetIdentity(&Q_Lightning[0].Roton);
								geXForm3d_RotateY(&Q_Lightning[0].Roton, 1.5708);
								geXForm3d_Rotate(&Q_Lightning[0].Roton, &Q_Lightning[0].TraVec, &Q_Lightning[0].WidthVec);
								geVec3d_Scale(&Q_Lightning[0].WidthVec, Q_Lightning[0].Width, &Q_Lightning[0].WidthVec);

								if(helly == 0) geVec3d_Subtract(&Q_Lightning[0].Pos, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert1);
								else Q_Lightning[0].Vert1 = Q_Lightning[0].Vert4;
								if(helly == 0) geVec3d_Add(&Q_Lightning[0].Pos, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert2);
								else Q_Lightning[0].Vert2 = Q_Lightning[0].Vert3;

								//Rescale Width ???

								geVec3d_MA(&Q_Lightning[0].Pos, Q_Lightning[0].Length, &Q_Lightning[0].TraVec, &Q_Lightning[0].PosEnd);

								geVec3d_Add(&Q_Lightning[0].PosEnd, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert3);
								geVec3d_Subtract(&Q_Lightning[0].PosEnd, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert4);

								Q_Lightning[0].Pos = Q_Lightning[0].PosEnd;


								Q_Lightning[0].Lvert[helly][0].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][0].b = 95;
								Q_Lightning[0].Lvert[helly][0].g = 95;
								Q_Lightning[0].Lvert[helly][0].r = 255;
								Q_Lightning[0].Lvert[helly][0].u = 1;
								Q_Lightning[0].Lvert[helly][0].v = 0;
								Q_Lightning[0].Lvert[helly][0].X = Q_Lightning[0].Vert1.X;
								Q_Lightning[0].Lvert[helly][0].Y = Q_Lightning[0].Vert1.Y;
								Q_Lightning[0].Lvert[helly][0].Z = Q_Lightning[0].Vert1.Z;


								Q_Lightning[0].Lvert[helly][1].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][1].b = 95;
								Q_Lightning[0].Lvert[helly][1].g = 95;
								Q_Lightning[0].Lvert[helly][1].r = 255;
								Q_Lightning[0].Lvert[helly][1].u = 1;
								Q_Lightning[0].Lvert[helly][1].v = 1;
								Q_Lightning[0].Lvert[helly][1].X = Q_Lightning[0].Vert2.X;
								Q_Lightning[0].Lvert[helly][1].Y = Q_Lightning[0].Vert2.Y;
								Q_Lightning[0].Lvert[helly][1].Z = Q_Lightning[0].Vert2.Z;


								Q_Lightning[0].Lvert[helly][2].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][2].b = 95;
								Q_Lightning[0].Lvert[helly][2].g = 95;
								Q_Lightning[0].Lvert[helly][2].r = 255;
								Q_Lightning[0].Lvert[helly][2].u = 0;
								Q_Lightning[0].Lvert[helly][2].v = 1;
								Q_Lightning[0].Lvert[helly][2].X = Q_Lightning[0].Vert3.X;
								Q_Lightning[0].Lvert[helly][2].Y = Q_Lightning[0].Vert3.Y;
								Q_Lightning[0].Lvert[helly][2].Z = Q_Lightning[0].Vert3.Z;


								Q_Lightning[0].Lvert[helly][3].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][3].b = 95;
								Q_Lightning[0].Lvert[helly][3].g = 95;
								Q_Lightning[0].Lvert[helly][3].r = 255;
								Q_Lightning[0].Lvert[helly][3].u = 0;
								Q_Lightning[0].Lvert[helly][3].v = 0;
								Q_Lightning[0].Lvert[helly][3].X = Q_Lightning[0].Vert4.X;
								Q_Lightning[0].Lvert[helly][3].Y = Q_Lightning[0].Vert4.Y;
								Q_Lightning[0].Lvert[helly][3].Z = Q_Lightning[0].Vert4.Z;

								geWorld_AddPolyOnce(World, &Q_Lightning[0].Lvert[helly][0], 4, Q_Lightning[0].Bitmap, Q_Lightning[0].Type, Q_Lightning[0].RenderFlags, Q_Lightning[0].Scale);

								helly += 1;
								}
							jet += 1;
							}
						}

					}

				aero++;
				}
			}
		}
	else
		{
		if(NomMelHit > 0)	//Number of HITs
			{
			aero = 0;
			while(aero < NomMelHit)
				{
				if(Q_MeleeHit[aero].Live == 1)		//HIT is live
					{
					//### Attack Light
					if(Q_MeleeHit[aero].INIT == 0)
						{
						Q_MeleeHit[aero].INIT = 1;

						//##### HIT RESULTS
						switch(Q_MeleeHit[aero].HitRESULT)
							{
							case 0:		//Block Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitB1, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 20:	//Shock Block Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitB1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_ShkBlock, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 1:		//Avatar Normal Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1AV, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 2:		//Avatar FallHead Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitH1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1AV, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 3:		//Avatar Ultra Blow
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_UltraBlowMALE, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitH1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1AV, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 4:		//Player Normal Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitN1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfN1, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 5:		//Player FallHead Hit
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfH1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfN1, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 6:		//Player Ultra Blow
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_UltraBlowFEMALE, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfH1, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_HitSelfN1, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 7:		//Renzou Impact
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_RenzouImpact, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 8:		//Deflect
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_DefBlock, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 9:		//Block break
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_BrkBlock, Volume, Pan, S_TimeScale, GE_FALSE);
								} break;

							case 10:	//Avatar DEATH
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
									{ TimeHole = 4; TimeRotate = 1;	}
								} break;

							case 11:	//Player DEATH
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
									{ TimeHole = 4; TimeRotate = 1;	}
								} break;

							case 17:	//Avatar DEATH BY RENZOU
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_RenzouImpact, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
									{ TimeHole = 4; TimeRotate = 1;	}
								} break;

							case 18:	//Player DEATH BY RENZOU
								{
								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

								geSound3D_GetConfig(World, &player.ViewXForm, &Q_MeleeHit[aero].Impact, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								geSound_PlaySoundDef(SoundSys, S_RenzouImpact, Volume, Pan, S_TimeScale, GE_FALSE);

								if(TimeHole == 0)
									{ TimeHole = 4; TimeRotate = 1;	}
								} break;

							//##### CLEAN NET EFFICIENCY
							Q_MeleeHit[aero].Expandro3D.MaxRadius *= Q_MeleeHit[aero].AttackSTRENGTH;
							}


						if(Q_MeleeHit[aero].HitTYPE == 0)
							{
							Q_MeleeHit[aero].LightColor.r = 255.0f;
							Q_MeleeHit[aero].LightColor.g = 255.0f;
							Q_MeleeHit[aero].LightColor.b = 255.0f;
							Q_MeleeHit[aero].LightColor.a = 155.0f;
							}
						else
							{
							if(Q_MeleeHit[aero].HitTYPE == 1)
								{
								Q_MeleeHit[aero].LightColor.r = 0.0f;
								Q_MeleeHit[aero].LightColor.g = 0.0f;
								Q_MeleeHit[aero].LightColor.b = 160.0f;
								Q_MeleeHit[aero].LightColor.a = 200.0f;
								}
							else
								{
								Q_MeleeHit[aero].LightColor.r = 255.0f;
								Q_MeleeHit[aero].LightColor.g = 0.0f;
								Q_MeleeHit[aero].LightColor.b = 0.0f;
								Q_MeleeHit[aero].LightColor.a = 255.0f;
								}
							}

						Q_MeleeHit[aero].Light = geWorld_AddLight(World);

						if(Q_MeleeHit[aero].BloodAmt > 25) Q_MeleeHit[aero].BloodAmt = 25;

						//### Blood
						//## Blood Sparks
						if(Q_MeleeHit[aero].BloodAmt > 0)
							{
							helly = 0;
							while((helly < Q_MeleeHit[aero].BloodAmt / 6) && (NomBlood < 498))
								{
								BBlood[NomBlood].Pos = Q_MeleeHit[aero].Impact;

								BBlood[NomBlood].AlpFade = 210;

								BBlood[NomBlood].TraVec = Q_MeleeHit[aero].ReactionNorm;

								BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
								BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.5;
								BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);

								BBlood[NomBlood].Speed = 6;

								BBlood[NomBlood].Gravity = 0.08;

								BBlood[NomBlood].EffectType = 0;

								BBlood[NomBlood].Bounce = 0;
								BBlood[NomBlood].SmokeTrail = 1;
								BBlood[NomBlood].Live = 1;

								NomBlood++;
								helly++;
								}
							}

						//## Blood Clouds
						jet = 0;
						while((jet < (Q_MeleeHit[aero].BloodAmt / 5)) && (NomBlood < 4998))
							{
							Q_Cloud[NomCloud].CloudType = 1;

							Q_Cloud[NomCloud].CloudPos = Q_MeleeHit[aero].Impact;
								
							Q_Cloud[NomCloud].CloudPos.X += (((float)rand() / 32767)-0.5)*2;
							Q_Cloud[NomCloud].CloudPos.Y += (((float)rand() / 32767)-0.5)*2;
							Q_Cloud[NomCloud].CloudPos.Z += (((float)rand() / 32767)-0.5)*2;

							Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*55)+200;
							Q_Cloud[NomCloud].CloudScale = 0.1;

							Q_Cloud[NomCloud].CloudTraVec = TempVec1;

							Q_Cloud[NomCloud].CloudTraVec.X += (((float)rand() / 32767)-0.5)*0.2;
							Q_Cloud[NomCloud].CloudTraVec.Y += (((float)rand() / 32767)-0.5)*0.2;
							Q_Cloud[NomCloud].CloudTraVec.Z += (((float)rand() / 32767)-0.5)*0.2;

							Q_Cloud[NomCloud].CloudSpeed = ((((float)rand() / 32767)-0.5)*2)+2.5;

							Q_Cloud[NomCloud].CloudLive = 1;

							NomCloud++;
							jet++;
							}

						//###### -  Heavy Hits  - ######
						if(Q_MeleeHit[aero].HitTYPE == 20)
							{
							Q_MeleeHit[aero].SpikeAMT = Q_MeleeHit[aero].BloodAmt / 10;

							if(Q_MeleeHit[aero].SpikeAMT < 3) Q_MeleeHit[aero].SpikeAMT = 3;
							if(Q_MeleeHit[aero].SpikeAMT > 45) Q_MeleeHit[aero].SpikeAMT = 45;

							jet = 0;
							while(jet < Q_MeleeHit[aero].SpikeAMT && (NomSpikes < 498))
								{
								//# Effect Type
								HHSpike[NomSpikes].EffectType = 0;

								//## Speed
								HHSpike[NomSpikes].Speed = 15;

								//### Width
								HHSpike[NomSpikes].Width = 1;

								//#### Gravity
								HHSpike[NomSpikes].Gravity = 0;

								//##### Alpha Level
								HHSpike[NomSpikes].AlpFade = 0;
								HHSpike[NomSpikes].FadeDir = 0;

								//###### Center Position
								HHSpike[NomSpikes].CenterPos = Q_MeleeHit[aero].Impact;

								//####### Create Trajectory Vector From Random Numbers
								HHSpike[NomSpikes].TraVec.X = (((float)rand() / 32767)-0.5)*2;
								HHSpike[NomSpikes].TraVec.Y = (((float)rand() / 32767)-0.5)*2;
								HHSpike[NomSpikes].TraVec.Z = (((float)rand() / 32767)-0.5)*2;

								geVec3d_MA(&HHSpike[NomSpikes].CenterPos, 5 + (Q_MeleeHit[aero].SpikeAMT / 5), &HHSpike[NomSpikes].TraVec, &HHSpike[NomSpikes].FrontPos);
								geVec3d_MA(&HHSpike[NomSpikes].CenterPos, (5 + (Q_MeleeHit[aero].SpikeAMT / 5)) + (Q_MeleeHit[aero].SpikeAMT / 1.5), &HHSpike[NomSpikes].TraVec, &HHSpike[NomSpikes].TailPos);

								//######## Set Timers
								HHSpike[NomSpikes].Timer = 0;
								HHSpike[NomSpikes].MoveTail = 0;

								//######### Make Live
								HHSpike[NomSpikes].Live = 1;

								NomSpikes++;
								jet++;
								}
							}

						//###### -  Mid Hits  - ######
						if(Q_MeleeHit[aero].HitTYPE == 11)
							{
							jet = 0;
							while(jet < 6 && (NomCloud < 4998))
								{
								Q_Cloud[NomCloud].CloudType = 4;

								Q_Cloud[NomCloud].CloudPos = Q_MeleeHit[aero].Impact;

								Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*120)+135;
								Q_Cloud[NomCloud].CloudScale = (((float)rand() / 32767)*0.2)+0.025;

								Q_Cloud[NomCloud].CloudTraVec.X = (((float)rand() / 32767)-0.5) * 2;
								Q_Cloud[NomCloud].CloudTraVec.Y = (((float)rand() / 32767) * 3) + 0.8;
								Q_Cloud[NomCloud].CloudTraVec.Z = (((float)rand() / 32767)-0.5) * 2;

								Q_Cloud[NomCloud].CloudSpeed = ((((float)rand() / 32767))+0.3)*5;

								Q_Cloud[NomCloud].CloudLive = 1;

								NomCloud++;
								jet++;
								}
							}
						}


					//###### -  EXPANDRO3D  - ######

					Q_MeleeHit[aero].Expandro3D.MaterialCNT = (( Q_MeleeHit[aero].Expandro3D.Radius / Q_MeleeHit[aero].Expandro3D.MaxRadius ) * 31 ) + 11;
					if(Q_MeleeHit[aero].Expandro3D.MaterialCNT > 42) Q_MeleeHit[aero].Expandro3D.MaterialCNT = 42;
					if(Q_MeleeHit[aero].Expandro3D.MaterialCNT < 11) Q_MeleeHit[aero].Expandro3D.MaterialCNT = 11;

					if(Q_MeleeHit[aero].Expandro3D.Radius > 0 && (((Q_MeleeHit[aero].HitTYPE != 0 && Q_MeleeHit[aero].HitTYPE != 1 && Q_MeleeHit[aero].HitTYPE != 2 && Q_MeleeHit[aero].HitTYPE != 3) && Q_MeleeHit[aero].Expandro3D.Radius < Q_MeleeHit[aero].Expandro3D.MaxRadius) || ((Q_MeleeHit[aero].HitTYPE == 0 || Q_MeleeHit[aero].HitTYPE == 2 || Q_MeleeHit[aero].HitTYPE == 3) && Q_MeleeHit[aero].Expandro3D.Radius < (Q_MeleeHit[aero].Expandro3D.MaxRadius/1.4)) || (Q_MeleeHit[aero].HitTYPE == 1 && Q_MeleeHit[aero].Expandro3D.Radius > 0)))
						{
						if(Q_MeleeHit[aero].HitTYPE == 1)
							{
							geXForm3d_SetXRotation(&rotmat, 0.5*TimeScale);
							geXForm3d_Multiply(&Q_MeleeHit[aero].AttboneXF, &rotmat, &Q_MeleeHit[aero].AttboneXF);
							}

						geXForm3d_GetIn(&Q_MeleeHit[aero].AttboneXF,&Q_MeleeHit[aero].Expandro3D.Leftvec);
						geXForm3d_GetLeft(&Q_MeleeHit[aero].AttboneXF,&Q_MeleeHit[aero].Expandro3D.Forvec);
						geXForm3d_GetUp(&Q_MeleeHit[aero].AttboneXF,&Q_MeleeHit[aero].Expandro3D.Upvec);

						Q_MeleeHit[aero].Expandro3D.Vert1 = Q_MeleeHit[aero].Impact;

						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert1, Q_MeleeHit[aero].Expandro3D.Radius, &Q_MeleeHit[aero].Expandro3D.Upvec, &Q_MeleeHit[aero].Expandro3D.Vert1);
										//Distance to the Left of the player
						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert1, Q_MeleeHit[aero].Expandro3D.Radius, &Q_MeleeHit[aero].Expandro3D.Leftvec, &Q_MeleeHit[aero].Expandro3D.Vert1);

										//Distance to the Right of the player from the left
						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert1, -Q_MeleeHit[aero].Expandro3D.Radius * 2, &Q_MeleeHit[aero].Expandro3D.Leftvec, &Q_MeleeHit[aero].Expandro3D.Vert2);

										//Distance to the Top of the player
						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert2, -Q_MeleeHit[aero].Expandro3D.Radius * 2, &Q_MeleeHit[aero].Expandro3D.Upvec, &Q_MeleeHit[aero].Expandro3D.Vert3);

										//Distance to the Top of the player
						geVec3d_MA(&Q_MeleeHit[aero].Expandro3D.Vert1, -Q_MeleeHit[aero].Expandro3D.Radius * 2, &Q_MeleeHit[aero].Expandro3D.Upvec, &Q_MeleeHit[aero].Expandro3D.Vert4);

						Q_MeleeHit[aero].Expandro3D.Lvert[0].a = Q_MeleeHit[aero].Expandro3D.StartFade;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].b = Q_MeleeHit[aero].Expandro3D.Blue;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].g = Q_MeleeHit[aero].Expandro3D.Green;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].r = Q_MeleeHit[aero].Expandro3D.Red;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].u = 0;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].v = 0;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].X = Q_MeleeHit[aero].Expandro3D.Vert1.X;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].Y = Q_MeleeHit[aero].Expandro3D.Vert1.Y;
						Q_MeleeHit[aero].Expandro3D.Lvert[0].Z = Q_MeleeHit[aero].Expandro3D.Vert1.Z;

						Q_MeleeHit[aero].Expandro3D.Lvert[1].a = Q_MeleeHit[aero].Expandro3D.StartFade;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].b = Q_MeleeHit[aero].Expandro3D.Blue;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].g = Q_MeleeHit[aero].Expandro3D.Green;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].r = Q_MeleeHit[aero].Expandro3D.Red;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].u = 1;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].v = 0;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].X = Q_MeleeHit[aero].Expandro3D.Vert2.X;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].Y = Q_MeleeHit[aero].Expandro3D.Vert2.Y;
						Q_MeleeHit[aero].Expandro3D.Lvert[1].Z = Q_MeleeHit[aero].Expandro3D.Vert2.Z;

						Q_MeleeHit[aero].Expandro3D.Lvert[2].a = Q_MeleeHit[aero].Expandro3D.StartFade;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].b = Q_MeleeHit[aero].Expandro3D.Blue;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].g = Q_MeleeHit[aero].Expandro3D.Green;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].r = Q_MeleeHit[aero].Expandro3D.Red;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].u = 1;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].v = 1;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].X = Q_MeleeHit[aero].Expandro3D.Vert3.X;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].Y = Q_MeleeHit[aero].Expandro3D.Vert3.Y;
						Q_MeleeHit[aero].Expandro3D.Lvert[2].Z = Q_MeleeHit[aero].Expandro3D.Vert3.Z;

						Q_MeleeHit[aero].Expandro3D.Lvert[3].a = Q_MeleeHit[aero].Expandro3D.StartFade;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].b = Q_MeleeHit[aero].Expandro3D.Blue;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].g = Q_MeleeHit[aero].Expandro3D.Green;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].r = Q_MeleeHit[aero].Expandro3D.Red;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].u = 0;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].v = 1;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].X = Q_MeleeHit[aero].Expandro3D.Vert4.X;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].Y = Q_MeleeHit[aero].Expandro3D.Vert4.Y;
						Q_MeleeHit[aero].Expandro3D.Lvert[3].Z = Q_MeleeHit[aero].Expandro3D.Vert4.Z;

						Q_MeleeHit[aero].Expandro3D.Fade = Q_MeleeHit[aero].Expandro3D.StartFade;

						if(Q_MeleeHit[aero].HitTYPE == 1 && Q_MeleeHit[aero].Expandro3D.StartFade < 160)
							{
							Q_MeleeHit[aero].Expandro3D.Fade += 40;
							Q_MeleeHit[aero].Expandro3D.StartFade += 40;
							}

						if((Q_MeleeHit[aero].HitTYPE != 0 && Q_MeleeHit[aero].HitTYPE != 1 && Q_MeleeHit[aero].HitTYPE != 2 && Q_MeleeHit[aero].HitTYPE != 3))
							{
							if((Q_MeleeHit[aero].HitTYPE == 10 || Q_MeleeHit[aero].HitTYPE == 11))	//#### Normal Hit
								{
								geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, PulsarMid[Q_MeleeHit[aero].Expandro3D.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);
								Q_MeleeHit[aero].Expandro3D.Radius += (Q_MeleeHit[aero].Expandro3D.MaxRadius/10); //EDIT//*TimeScale;
								}
							else								//#### Mid Hit
								{
								geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, Pulsar[Q_MeleeHit[aero].Expandro3D.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);
								Q_MeleeHit[aero].Expandro3D.Radius += (Q_MeleeHit[aero].Expandro3D.MaxRadius/15); //EDIT//*TimeScale;
								}
							}
						else									//#### Block Hit
							{
							if(Q_MeleeHit[aero].HitTYPE == 1)
								{
								geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, EXPexpandro1, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
								Q_MeleeHit[aero].Expandro3D.Radius -= (Q_MeleeHit[aero].Expandro3D.MaxRadius/20); //EDIT//*TimeScale;
								}
							else
								{
								geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, expandro1, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
								Q_MeleeHit[aero].Expandro3D.Radius += (Q_MeleeHit[aero].Expandro3D.MaxRadius/20); //EDIT//*TimeScale;
								}
							}

						if((Q_MeleeHit[aero].HitTYPE != 0 && Q_MeleeHit[aero].HitTYPE != 1 && Q_MeleeHit[aero].HitTYPE != 2 && Q_MeleeHit[aero].HitTYPE != 3)) geWorld_SetLightAttributes(World, Q_MeleeHit[aero].Light, &Q_MeleeHit[aero].Impact, &Q_MeleeHit[aero].LightColor, Q_MeleeHit[aero].Expandro3D.MaxRadius - Q_MeleeHit[aero].Expandro3D.Radius, GE_FALSE);
						else geWorld_SetLightAttributes(World, Q_MeleeHit[aero].Light, &Q_MeleeHit[aero].Impact, &Q_MeleeHit[aero].LightColor, (Q_MeleeHit[aero].Expandro3D.MaxRadius - Q_MeleeHit[aero].Expandro3D.Radius)*5, GE_FALSE);
						}
					else
						{
						if(Q_MeleeHit[aero].Expandro3D.Fade - (10*TimeScale) >= 0)
							{
							if((Q_MeleeHit[aero].HitTYPE != 10 && Q_MeleeHit[aero].HitTYPE != 11))	//#### Normal Hit
								{
								Q_MeleeHit[aero].Expandro3D.Fade -= 10*TimeScale;
								Q_MeleeHit[aero].Expandro3D.StartFade -= 10*TimeScale;
								}
							else								//#### Mid Hit
								{
								Q_MeleeHit[aero].Expandro3D.Fade -= 23*TimeScale;
								Q_MeleeHit[aero].Expandro3D.StartFade -= 23*TimeScale;
								}

							if(Q_MeleeHit[aero].Expandro3D.Fade >= 0)
								{
								Q_MeleeHit[aero].Expandro3D.Lvert[0].a = Q_MeleeHit[aero].Expandro3D.Fade;
								Q_MeleeHit[aero].Expandro3D.Lvert[1].a = Q_MeleeHit[aero].Expandro3D.Fade;
								Q_MeleeHit[aero].Expandro3D.Lvert[2].a = Q_MeleeHit[aero].Expandro3D.Fade;
								Q_MeleeHit[aero].Expandro3D.Lvert[3].a = Q_MeleeHit[aero].Expandro3D.Fade;
								if((Q_MeleeHit[aero].HitTYPE != 0 && Q_MeleeHit[aero].HitTYPE != 1 && Q_MeleeHit[aero].HitTYPE != 2 && Q_MeleeHit[aero].HitTYPE != 3))
									{
									if((Q_MeleeHit[aero].HitTYPE == 10 || Q_MeleeHit[aero].HitTYPE == 11)) geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, PulsarMid[Q_MeleeHit[aero].Expandro3D.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);
									else geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, Pulsar[Q_MeleeHit[aero].Expandro3D.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);
									}
								else geWorld_AddPolyOnce(World, &Q_MeleeHit[aero].Expandro3D.Lvert[0], 4, expandro1, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
								}
							}
						}


					//### Shock Block Flash
					if(Q_MeleeHit[aero].HitTYPE == 2)
						{
						jet = 0;
						while(jet < 8)	//10
							{
							//Set these vec3ds at lightning init
							Q_Lightning[0].Pos = Q_MeleeHit[aero].Impact;

							Q_Lightning[0].TraVec.X = (((float)rand() / 32767) * 2 ) - 1;
							Q_Lightning[0].TraVec.Y = (((float)rand() / 32767) * 2 ) - 1;	// <---Maybe not this
							Q_Lightning[0].TraVec.Z = (((float)rand() / 32767) * 2 ) - 1;

							Q_Lightning[0].LengNum = (rand() % 5) + 1;	//(rand() % 10) + 1;


							Q_Lightning[0].Type = GE_TEXTURED_POLY;
							Q_Lightning[0].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
							Q_Lightning[0].Bitmap = lightning;
							Q_Lightning[0].Scale = 1.0f;

							Q_Lightning[0].Count = 0;
							Q_Lightning[0].Live = 1;


							//Q_Lightning run process
							helly = 0;
							while(helly < (Q_Lightning[0].LengNum + 1))
								{
								Q_Lightning[0].TraVec.X += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;
								Q_Lightning[0].TraVec.Y += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;
								Q_Lightning[0].TraVec.Z += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;

								Q_Lightning[0].Length = (((float)rand() / 32767) * 7) + 0.3;	//(rand() % 60) + 50;
								if(helly == 0) Q_Lightning[0].Width = 0.2;	//0.2
								else Q_Lightning[0].Width = (((float)rand() / 32767) * 0.1) + 0.02;	//0.06	//(rand() % 10) + 1;

								geXForm3d_SetIdentity(&Q_Lightning[0].Roton);
								geXForm3d_RotateY(&Q_Lightning[0].Roton, 1.5708);
								geXForm3d_Rotate(&Q_Lightning[0].Roton, &Q_Lightning[0].TraVec, &Q_Lightning[0].WidthVec);
								geVec3d_Scale(&Q_Lightning[0].WidthVec, Q_Lightning[0].Width, &Q_Lightning[0].WidthVec);

								if(helly == 0) geVec3d_Subtract(&Q_Lightning[0].Pos, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert1);
								else Q_Lightning[0].Vert1 = Q_Lightning[0].Vert4;
								if(helly == 0) geVec3d_Add(&Q_Lightning[0].Pos, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert2);
								else Q_Lightning[0].Vert2 = Q_Lightning[0].Vert3;

								//Rescale Width ???

								geVec3d_MA(&Q_Lightning[0].Pos, Q_Lightning[0].Length, &Q_Lightning[0].TraVec, &Q_Lightning[0].PosEnd);

								geVec3d_Add(&Q_Lightning[0].PosEnd, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert3);
								geVec3d_Subtract(&Q_Lightning[0].PosEnd, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert4);

								Q_Lightning[0].Pos = Q_Lightning[0].PosEnd;


								Q_Lightning[0].Lvert[helly][0].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][0].b = 255;
								Q_Lightning[0].Lvert[helly][0].g = 255;
								Q_Lightning[0].Lvert[helly][0].r = 255;
								Q_Lightning[0].Lvert[helly][0].u = 1;
								Q_Lightning[0].Lvert[helly][0].v = 0;
								Q_Lightning[0].Lvert[helly][0].X = Q_Lightning[0].Vert1.X;
								Q_Lightning[0].Lvert[helly][0].Y = Q_Lightning[0].Vert1.Y;
								Q_Lightning[0].Lvert[helly][0].Z = Q_Lightning[0].Vert1.Z;


								Q_Lightning[0].Lvert[helly][1].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][1].b = 255;
								Q_Lightning[0].Lvert[helly][1].g = 255;
								Q_Lightning[0].Lvert[helly][1].r = 255;
								Q_Lightning[0].Lvert[helly][1].u = 1;
								Q_Lightning[0].Lvert[helly][1].v = 1;
								Q_Lightning[0].Lvert[helly][1].X = Q_Lightning[0].Vert2.X;
								Q_Lightning[0].Lvert[helly][1].Y = Q_Lightning[0].Vert2.Y;
								Q_Lightning[0].Lvert[helly][1].Z = Q_Lightning[0].Vert2.Z;


								Q_Lightning[0].Lvert[helly][2].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][2].b = 255;
								Q_Lightning[0].Lvert[helly][2].g = 255;
								Q_Lightning[0].Lvert[helly][2].r = 255;
								Q_Lightning[0].Lvert[helly][2].u = 0;
								Q_Lightning[0].Lvert[helly][2].v = 1;
								Q_Lightning[0].Lvert[helly][2].X = Q_Lightning[0].Vert3.X;
								Q_Lightning[0].Lvert[helly][2].Y = Q_Lightning[0].Vert3.Y;
								Q_Lightning[0].Lvert[helly][2].Z = Q_Lightning[0].Vert3.Z;


								Q_Lightning[0].Lvert[helly][3].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][3].b = 255;
								Q_Lightning[0].Lvert[helly][3].g = 255;
								Q_Lightning[0].Lvert[helly][3].r = 255;
								Q_Lightning[0].Lvert[helly][3].u = 0;
								Q_Lightning[0].Lvert[helly][3].v = 0;
								Q_Lightning[0].Lvert[helly][3].X = Q_Lightning[0].Vert4.X;
								Q_Lightning[0].Lvert[helly][3].Y = Q_Lightning[0].Vert4.Y;
								Q_Lightning[0].Lvert[helly][3].Z = Q_Lightning[0].Vert4.Z;

								geWorld_AddPolyOnce(World, &Q_Lightning[0].Lvert[helly][0], 4, Q_Lightning[0].Bitmap, Q_Lightning[0].Type, Q_Lightning[0].RenderFlags, Q_Lightning[0].Scale);

								helly += 1;
								}
							jet += 1;
							}
						}

					if(Q_MeleeHit[aero].HitTYPE == 3)
						{
						jet = 0;
						while(jet < 12)
							{
							//Set these vec3ds at lightning init
							Q_Lightning[0].Pos = Q_MeleeHit[aero].Impact;

							Q_Lightning[0].TraVec.X = (((float)rand() / 32767) * 2 ) - 1;
							Q_Lightning[0].TraVec.Y = (((float)rand() / 32767) * 2 ) - 1;	// <---Maybe not this
							Q_Lightning[0].TraVec.Z = (((float)rand() / 32767) * 2 ) - 1;

							Q_Lightning[0].LengNum = (rand() % 7) + 1;	//(rand() % 10) + 1;


							Q_Lightning[0].Type = GE_TEXTURED_POLY;
							Q_Lightning[0].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
							Q_Lightning[0].Bitmap = lightning;
							Q_Lightning[0].Scale = 1.0f;

							Q_Lightning[0].Count = 0;
							Q_Lightning[0].Live = 1;


							//Q_Lightning run process
							helly = 0;
							while(helly < (Q_Lightning[0].LengNum + 1))
								{
								Q_Lightning[0].TraVec.X += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;
								Q_Lightning[0].TraVec.Y += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;
								Q_Lightning[0].TraVec.Z += (((float)rand() / 32767) * 2 ) - 1;	//(((float)rand() / 32767)) - 0.5;

								Q_Lightning[0].Length = (((float)rand() / 32767) * 7) + 0.3;	//(rand() % 60) + 50;
								if(helly == 0) Q_Lightning[0].Width = 0.2;	//0.2
								else Q_Lightning[0].Width = (((float)rand() / 32767) * 0.1) + 0.02;	//0.06	//(rand() % 10) + 1;

								geXForm3d_SetIdentity(&Q_Lightning[0].Roton);
								geXForm3d_RotateY(&Q_Lightning[0].Roton, 1.5708);
								geXForm3d_Rotate(&Q_Lightning[0].Roton, &Q_Lightning[0].TraVec, &Q_Lightning[0].WidthVec);
								geVec3d_Scale(&Q_Lightning[0].WidthVec, Q_Lightning[0].Width, &Q_Lightning[0].WidthVec);

								if(helly == 0) geVec3d_Subtract(&Q_Lightning[0].Pos, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert1);
								else Q_Lightning[0].Vert1 = Q_Lightning[0].Vert4;
								if(helly == 0) geVec3d_Add(&Q_Lightning[0].Pos, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert2);
								else Q_Lightning[0].Vert2 = Q_Lightning[0].Vert3;

								//Rescale Width ???

								geVec3d_MA(&Q_Lightning[0].Pos, Q_Lightning[0].Length, &Q_Lightning[0].TraVec, &Q_Lightning[0].PosEnd);

								geVec3d_Add(&Q_Lightning[0].PosEnd, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert3);
								geVec3d_Subtract(&Q_Lightning[0].PosEnd, &Q_Lightning[0].WidthVec, &Q_Lightning[0].Vert4);

								Q_Lightning[0].Pos = Q_Lightning[0].PosEnd;


								Q_Lightning[0].Lvert[helly][0].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][0].b = 95;
								Q_Lightning[0].Lvert[helly][0].g = 95;
								Q_Lightning[0].Lvert[helly][0].r = 255;
								Q_Lightning[0].Lvert[helly][0].u = 1;
								Q_Lightning[0].Lvert[helly][0].v = 0;
								Q_Lightning[0].Lvert[helly][0].X = Q_Lightning[0].Vert1.X;
								Q_Lightning[0].Lvert[helly][0].Y = Q_Lightning[0].Vert1.Y;
								Q_Lightning[0].Lvert[helly][0].Z = Q_Lightning[0].Vert1.Z;


								Q_Lightning[0].Lvert[helly][1].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][1].b = 95;
								Q_Lightning[0].Lvert[helly][1].g = 95;
								Q_Lightning[0].Lvert[helly][1].r = 255;
								Q_Lightning[0].Lvert[helly][1].u = 1;
								Q_Lightning[0].Lvert[helly][1].v = 1;
								Q_Lightning[0].Lvert[helly][1].X = Q_Lightning[0].Vert2.X;
								Q_Lightning[0].Lvert[helly][1].Y = Q_Lightning[0].Vert2.Y;
								Q_Lightning[0].Lvert[helly][1].Z = Q_Lightning[0].Vert2.Z;


								Q_Lightning[0].Lvert[helly][2].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][2].b = 95;
								Q_Lightning[0].Lvert[helly][2].g = 95;
								Q_Lightning[0].Lvert[helly][2].r = 255;
								Q_Lightning[0].Lvert[helly][2].u = 0;
								Q_Lightning[0].Lvert[helly][2].v = 1;
								Q_Lightning[0].Lvert[helly][2].X = Q_Lightning[0].Vert3.X;
								Q_Lightning[0].Lvert[helly][2].Y = Q_Lightning[0].Vert3.Y;
								Q_Lightning[0].Lvert[helly][2].Z = Q_Lightning[0].Vert3.Z;


								Q_Lightning[0].Lvert[helly][3].a = Q_MeleeHit[aero].Expandro3D.StartFade;
								Q_Lightning[0].Lvert[helly][3].b = 95;
								Q_Lightning[0].Lvert[helly][3].g = 95;
								Q_Lightning[0].Lvert[helly][3].r = 255;
								Q_Lightning[0].Lvert[helly][3].u = 0;
								Q_Lightning[0].Lvert[helly][3].v = 0;
								Q_Lightning[0].Lvert[helly][3].X = Q_Lightning[0].Vert4.X;
								Q_Lightning[0].Lvert[helly][3].Y = Q_Lightning[0].Vert4.Y;
								Q_Lightning[0].Lvert[helly][3].Z = Q_Lightning[0].Vert4.Z;

								geWorld_AddPolyOnce(World, &Q_Lightning[0].Lvert[helly][0], 4, Q_Lightning[0].Bitmap, Q_Lightning[0].Type, Q_Lightning[0].RenderFlags, Q_Lightning[0].Scale);

								helly += 1;
								}
							jet += 1;
							}
						}

					}

				aero++;
				}
			}
		}


	//########  - BULLET HITS -  ########//

	if(NetworkOption != 1)
		{
		if(NomBulHit > 0)	//Number of HITs
			{
			aero = 0;
			while(aero < NomBulHit)
				{
				if(Q_BulletHit[aero].Live == 1)		//HIT is live
					{
					if(Q_BulletHit[aero].Init == 0)
						{
						Q_BulletHit[aero].Init = 1;

						//###### Bullet effects
						if(Q_BulletHit[aero].BulletPWR > 45.5)
							{
							jet = 0;
							while(jet < sqrt(Q_BulletHit[aero].BulletPWR / 85))
								{
								BSparks[NomSparks].Pos = Q_BulletHit[aero].Pos;

								BSparks[NomSparks].TraVec = Q_BulletHit[aero].CollNormal;

								BSparks[NomSparks].TraVec.X += ((((float)rand() / 32767)-0.5))*0.3;
								BSparks[NomSparks].TraVec.Y += ((((float)rand() / 32767)-0.5))*0.3;
								BSparks[NomSparks].TraVec.Z += ((((float)rand() / 32767)-0.5))*0.3;

								BSparks[NomSparks].AlpFade = 255;
								BSparks[NomSparks].Timer = 0;
								BSparks[NomSparks].TimerGoal = ((((float)rand() / 32767)*2000)+500);

								geVec3d_MA(&BSparks[NomSparks].Pos, 1, &BSparks[NomSparks].TraVec, &BSparks[NomSparks].Pos);

								BSparks[NomSparks].Speed = 100;
								BSparks[NomSparks].Gravity = 0.1;

								BSparks[NomSparks].Bounce = 1;

								BSparks[NomSparks].SmokeTrail = 1;
								BSparks[NomSparks].Live = 1;

								NomSparks++;
								if(NomSparks > 499) NomSparks = 0;
								jet++;
								}


							jet=0;
							while(jet < sqrt(Q_BulletHit[aero].BulletPWR*17))
								{
								Q_Cloud[NomCloud].CloudType = 0;

								Q_Cloud[NomCloud].CloudPos = Q_BulletHit[aero].Pos;

								Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*200)+55;
								Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*(Q_BulletHit[aero].BulletPWR/100);

								geVec3d_Clear(&Q_Cloud[NomCloud].CloudTraVec);

								Q_Cloud[NomCloud].CloudTraVec.X += (((float)rand() / 32767)-0.5)*(10*Q_BulletHit[aero].BulletPWR/10);
								Q_Cloud[NomCloud].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*(10*Q_BulletHit[aero].BulletPWR/10)) + 2;
								Q_Cloud[NomCloud].CloudTraVec.Z += (((float)rand() / 32767)-0.5)*(10*Q_BulletHit[aero].BulletPWR/10);

								//Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)-0.5)*6;
								Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)-0.5)*3;

								Q_Cloud[NomCloud].CloudMatCNT = 0;

								Q_Cloud[NomCloud].CloudLive = 1;

								NomCloud++;
								if(NomCloud > 4999) NomCloud = 0;
								jet++;
								}

							if(Q_BulletHit[aero].ActorID == 250)
								{ RadialDamage(player.Team, Q_BulletHit[aero].ActorID, Q_BulletHit[aero].BulletPWR/145, Q_BulletHit[aero].BulletDMG/25, Q_BulletHit[aero].Pos, 0, TempVec1); }
							else { RadialDamage(Forge[Q_BulletHit[aero].ActorID].Team, Q_BulletHit[aero].ActorID, Q_BulletHit[aero].BulletPWR/145, Q_BulletHit[aero].BulletDMG/25, Q_BulletHit[aero].Pos, 0, TempVec1); }

							geVec3d_MA(&Q_BulletHit[aero].Pos, 15, &Q_BulletHit[aero].CollNormal, &TempVec1);

							geSound3D_GetConfig(World, &player.ViewXForm, &TempVec1, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
							geSound_PlaySoundDef(SoundSys, S_Explosion3000, Volume, Pan, S_TimeScale, GE_FALSE);
							}

						Q_BulletHit[aero].ScaleDir = 0;
						Q_BulletHit[aero].AlpFade = 255;

						if(Q_BulletHit[aero].EffectType == 0 || (Q_BulletHit[aero].ActorID == 250 && Q_BulletHit[aero].ActorHITID == 250))
							{
							Q_BulletHit[aero].Scale = 18;
							Q_BulletHit[aero].BloodAmt = 0;
							Q_BulletHit[aero].EffectType = 0;

							a=0;
							while( a <= 2 )
								{
								b=0;
								while( b <= 3 )
									{
									Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
									Q_BulletHit[aero].Lvert[a][b].b = 255;
									Q_BulletHit[aero].Lvert[a][b].g = 255;
									Q_BulletHit[aero].Lvert[a][b].r = 255;
									b++;
									}
								a++;
								}

								//SPARKS
							helly = 0;
							while(helly < 3 && (NomSparks < 498))
								{
								BSparks[NomSparks].Pos = Q_BulletHit[aero].Pos;

								BSparks[NomSparks].TraVec = Q_BulletHit[aero].CollNormal;

								BSparks[NomSparks].TraVec.X += ((((float)rand() / 32767)-0.5));
								BSparks[NomSparks].TraVec.Y += ((((float)rand() / 32767)-0.5))+0.1;
								BSparks[NomSparks].TraVec.Z += ((((float)rand() / 32767)-0.5));

								BSparks[NomSparks].AlpFade = 255;
								BSparks[NomSparks].Timer = 0;
								BSparks[NomSparks].TimerGoal = ((((float)rand() / 32767)*30)+10);

								geVec3d_MA(&BSparks[NomSparks].Pos, 1, &BSparks[NomSparks].TraVec, &BSparks[NomSparks].Pos);
								
								BSparks[NomSparks].Speed = 8;

								BSparks[NomSparks].Gravity = 0.12;

								BSparks[NomSparks].Bounce = 0;

								BSparks[NomSparks].SmokeTrail = 0;
								BSparks[NomSparks].Live = 1;

								NomSparks++;
								helly++;
								}

							TempVec1 = Q_BulletHit[aero].Pos;

							//Move Sound away from the wall
							geVec3d_MA(&TempVec1, 7, &Q_BulletHit[aero].CollNormal, &TempVec1);

								//'Bullet Hit Sound'
							geSound3D_GetConfig(World, &player.ViewXForm, &TempVec1, 600.0f, 2.0f, &Volume, &Pan, &Frequency);

							SoundFinger = ((float)rand() / 32767)*4;
							if(SoundFinger <= 1) geSound_PlaySoundDef(SoundSys, S_Hitwall1, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 1 && SoundFinger <= 2) geSound_PlaySoundDef(SoundSys, S_Hitwall2, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 2 && SoundFinger <= 3) geSound_PlaySoundDef(SoundSys, S_Hitwall3, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 3 && SoundFinger <= 4) geSound_PlaySoundDef(SoundSys, S_Hitwall4, Volume, Pan, S_TimeScale, GE_FALSE);

							//#### Add a world decal
							if(Q_BulletHit[aero].BulletPWR < 15) GD = Q_AddDecal(Q_BulletHit[aero].Pos, Q_BulletHit[aero].CollNormal, 8, 0);
							if(Q_BulletHit[aero].BulletPWR > 15 && Q_BulletHit[aero].BulletPWR < 5) GD = Q_AddDecal(Q_BulletHit[aero].Pos, Q_BulletHit[aero].CollNormal, 8, 3);
							if(Q_BulletHit[aero].BulletPWR > 45.5 && Q_BulletHit[aero].BulletPWR < 7) GD = Q_AddDecal(Q_BulletHit[aero].Pos, Q_BulletHit[aero].CollNormal, 8, 2);
							if(Q_BulletHit[aero].BulletPWR > 57) GD = Q_AddDecal(Q_BulletHit[aero].Pos, Q_BulletHit[aero].CollNormal, 8, 1);
							}


						if(Q_BulletHit[aero].EffectType == 100)
							{
							Q_BulletHit[aero].Scale = 13;
							Q_BulletHit[aero].BloodAmt = 0;
							Q_BulletHit[aero].EffectType = 100;

							a=0;
							while( a <= 2 )
								{
								b=0;
								while( b <= 3 )
									{
									Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
									Q_BulletHit[aero].Lvert[a][b].b = 255;
									Q_BulletHit[aero].Lvert[a][b].g = 255;
									Q_BulletHit[aero].Lvert[a][b].r = 255;
									b++;
									}
								a++;
								}

								//SPARKS
							jet=0;
							while((jet < 8) && (NomPntSprite < 24998))
								{
								Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
								Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
								Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
								Q_PntSprite[NomPntSprite].PartType = 8;

								Q_PntSprite[NomPntSprite].IR = 255;
								Q_PntSprite[NomPntSprite].IG = 255;
								Q_PntSprite[NomPntSprite].IB = 255;

								Q_PntSprite[NomPntSprite].Alpha = 100;
								Q_PntSprite[NomPntSprite].Speed = 0.4;
								Q_PntSprite[NomPntSprite].Pos = Q_BulletHit[aero].Pos;

								Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
								Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
								Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

								Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
								Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
								Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

								Q_PntSprite[NomPntSprite].ActorID = Q_BulletHit[aero].ActorID;

								Q_PntSprite[NomPntSprite].Live = 1;

								NomPntSprite++;
								jet++;
								}

							TempVec1 = Q_BulletHit[aero].Pos;

							//Move Sound away from the wall
							geVec3d_MA(&TempVec1, 7, &Q_BulletHit[aero].CollNormal, &TempVec1);

								//'Bullet Hit Sound'
							geSound3D_GetConfig(World, &player.ViewXForm, &TempVec1, 600.0f, 2.0f, &Volume, &Pan, &Frequency);

							SoundFinger = ((float)rand() / 32767)*4;
							if(SoundFinger <= 1) geSound_PlaySoundDef(SoundSys, S_Hitwall1, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 1 && SoundFinger <= 2) geSound_PlaySoundDef(SoundSys, S_Hitwall2, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 2 && SoundFinger <= 3) geSound_PlaySoundDef(SoundSys, S_Hitwall3, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 3 && SoundFinger <= 4) geSound_PlaySoundDef(SoundSys, S_Hitwall4, Volume, Pan, S_TimeScale, GE_FALSE);
							}


						if(Q_BulletHit[aero].EffectType == 1 || Q_BulletHit[aero].EffectType == 4 || Q_BulletHit[aero].EffectType == 7)
							{
							Q_BulletHit[aero].Scale = 18;

							if(Q_BulletHit[aero].ActorHITID == 250)
								{
								if(((player.HB_Armour - (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									player.BulletHitCnt += 4;
									Q_BulletHit[aero].EffectType = 4;
									}

								player.BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 3 * (Q_BulletHit[aero].BulletDMG / 5);
								player.HB_Armour -= (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((player.HB_Armour <= 0) && (player.HB_Armour + (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 7)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 7;
									}

								Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = 250;

								if(player.BulletHitCnt >= 35 || (player.HB_Health <= 0))
									{
									player.MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(player.HB_Armour <= 0 || (player.HB_Health <= 0))
										{
										player.BulletHitCnt = 0;
										player.Aposestate = 30;
										}
									}
								else player.MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								player.MoveReactVec = TempVec1;
								if(player.MoveReactVec.Y < 0) player.MoveReactVec.Y = 0;
								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) player.HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
										//## Hit Reaction Motions
										if(player.Aposestate != 30)
											{
											if(player.Aposestate != 26 && player.Aposestate != 28)		//Standard Hit Upper Reactions
												{
												player.Aposestate = 26;
												player.attackon = 1;
												player.attposecnt = 0;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											else
												{
												player.attposecnt = 0.16;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											player.Aposestate = 30;
											player.attackon = 1;
											player.attposecnt = 0;
											player.astackcnt = 0;
											player.astackrun = 0;
											}

										//## Reduce Health
										player.HB_ReduceOld = player.HB_Health;
										player.HB_Health += player.HB_Armour;
										Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] -= player.HB_Armour;

										player.HB_ReduceRectColor.r = 255;
										player.HB_ReduceRectColor.g = 0;
										player.HB_ReduceRectColor.b = 0;
										player.HB_ReduceRectColor.a = 255;

										player.HB_ReduceHInc = 10;
										player.HB_ReduceHeight = 573;

										player.HB_HReduceON = 1;

										if(player.HB_Health <= 0)
											{
											player.HB_Health = 0;

											geSound3D_GetConfig(World, &player.ViewXForm,
														&player.ViewXForm.Translation,
														600.0f,
														2.0f,
														&Volume,
														&Pan,
														&Frequency);

											//'AVATAR DEATH' SOUND
											geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

											player.HB_Dead = 1;

											//### Add Experience to attacking AVATAR
											if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
												{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000); }

											//##### Find KO Owner
											UniversalDMGSTR = 0;

											jet = 0;
											while(jet < NomAI)
												{
												if(Forge[jet].LIVE == 1)
													{
													if(Forge[jet].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
													}
												jet++;
												}

											//##### Check All Active Avatars for XP and KO's
											SCRAM = 0;
											while(SCRAM < NomAI)
												{
												if(Forge[SCRAM].LIVE == 1)
													{
													if((Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
														{
														//### Add Experience to attacking AVATAR
														player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000);

														//### Force Net player to update (Net Play Only)
														if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
														}

													if(DeliverKOID == SCRAM)
														{
														//### Create Item for attacking Avatar
														Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

														if(Forge[SCRAM].DecFinger <= 100 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level/1000))
															{
															//### CREATE NEW ITEM
															if(Forge[SCRAM].NETPLAYERFLAG == 1)
																{
																Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);

																Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																}
															else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);
															}
														}
													}

												SCRAM++;
												}

											//####### DEACTIVATE ITEM ATTRIBUTES
											Q_DeactivateItems();

											//### Write out CHARDATA
											WriteNEWCharacterData(player.CDATA);

											//####### REACTIVATE ITEM ATTRIBUTES
											Q_ActivateItems();
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0 && (NomBlood < 498))
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt)
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(player.HB_Armour < 0) player.HB_Armour = 0;
								}
							else
								{
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour - (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt += 4;
									Q_BulletHit[aero].EffectType = 4;
									}

								Forge[Q_BulletHit[aero].ActorHITID].BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 3 * (Q_BulletHit[aero].BulletDMG / 5);
								Forge[Q_BulletHit[aero].ActorHITID].HB_Armour -= (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && (Forge[Q_BulletHit[aero].ActorHITID].HB_Armour + (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 7)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 7;
									}

								if(Q_BulletHit[aero].ActorID == 250) player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;
									else Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

								if(Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt >= 35 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
									{
									Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
										{
										Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt = 0;
										Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
										}
									}
								else Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec = TempVec1;
								if(Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y < 0) Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y = 0;
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) Forge[Q_BulletHit[aero].ActorHITID].HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
												//## Hit Reaction Motions
										if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 30)
											{
											if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 26 && Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 28)	//Standard Hit Reactions
												{
												Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 26;
												Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											else
												{
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0.16;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
											Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
											Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
											}


										//## Reduce Health
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceOld = Forge[Q_BulletHit[aero].ActorHITID].HB_Health;
										Forge[Q_BulletHit[aero].ActorHITID].HB_Health += Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										if(Q_BulletHit[aero].ActorID == 250) player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;
										else Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.r = 255;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.g = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.b = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.a = 255;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHInc = 10;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHeight = 574;

										Forge[Q_BulletHit[aero].ActorHITID].HB_HReduceON = 1;

										if(Q_BulletHit[aero].ActorID == 250)
											{
											player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;
												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Q_MeleeHit[NomMelHit].HitRESULT = 10;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												if((player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{
													//### Add Experience to attacking AVATAR
													player.CDATA->CharDATA[player.CDATA->CurrCHAR].UnusedXP += player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

													player.MSG_XPON = 1;
													player.MSG_XPInit = 0;
													player.MSG_XPScreenDIST = 0;
													player.MSG_XPScreenDistINC = 50;
													player.MSG_XPScreenDIR = 0;
													player.MSG_XpInc = player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);
													}

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													player.DecFinger = ((float)rand() / 32767) * 6;

													if(player.DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										else
											{
											Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												//### Add XP to avatar
												if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000); }

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													Forge[Q_BulletHit[aero].ActorID].DecFinger = ((float)rand() / 32767) * 6;

													if(Forge[Q_BulletHit[aero].ActorID].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}


														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))	//1		//8		//25
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour < 0) Forge[Q_BulletHit[aero].ActorHITID].HB_Armour = 0;
								}
							}

						if(Q_BulletHit[aero].EffectType == 2 || Q_BulletHit[aero].EffectType == 5 || Q_BulletHit[aero].EffectType == 8)
							{
							Q_BulletHit[aero].Scale = 22;

							if(Q_BulletHit[aero].ActorHITID == 250)
								{
								if(((player.HB_Armour - (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									player.BulletHitCnt += 6;
									Q_BulletHit[aero].EffectType = 5;
									}

								player.BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 6 * (Q_BulletHit[aero].BulletDMG / 5);
								player.HB_Armour -= (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((player.HB_Armour <= 0) && (player.HB_Armour + (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 6)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 8;
									}

								Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = 250;

								if(player.BulletHitCnt >= 35 || (player.HB_Health <= 0))
									{
									player.MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(player.HB_Armour <= 0 || (player.HB_Health <= 0))
										{
										player.BulletHitCnt = 0;
										player.Aposestate = 30;
										}
									}
								else player.MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								player.MoveReactVec = TempVec1;
								if(player.MoveReactVec.Y < 0) player.MoveReactVec.Y = 0;
								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) player.HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
													//## Hit Reaction Motions
										if(player.Aposestate != 30)
											{
											if(player.Aposestate != 26 && player.Aposestate != 28)	//Standard Hit Reactions
												{
												player.Aposestate = 28;
												player.attackon = 1;
												player.attposecnt = 0;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											else
												{
												player.attposecnt = 0.16;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											player.Aposestate = 30;
											player.attackon = 1;
											player.attposecnt = 0;
											player.astackcnt = 0;
											player.astackrun = 0;
											}


										//## Reduce Health
										player.HB_ReduceOld = player.HB_Health;
										player.HB_Health += player.HB_Armour;
										Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] -= player.HB_Armour;

										player.HB_ReduceRectColor.r = 255;
										player.HB_ReduceRectColor.g = 0;
										player.HB_ReduceRectColor.b = 0;
										player.HB_ReduceRectColor.a = 255;

										player.HB_ReduceHInc = 10;
										player.HB_ReduceHeight = 573;

										player.HB_HReduceON = 1;

										if(player.HB_Health <= 0)
											{
											player.HB_Health = 0;

											geSound3D_GetConfig(World, &player.ViewXForm,
														&player.ViewXForm.Translation,
														600.0f,
														2.0f,
														&Volume,
														&Pan,
														&Frequency);

											//'AVATAR DEATH' SOUND
											geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

											player.HB_Dead = 1;

											//### Add Experience to attacking AVATAR
											if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
												{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000); }

											//##### Find KO Owner
											UniversalDMGSTR = 0;

											jet = 0;
											while(jet < NomAI)
												{
												if(Forge[jet].LIVE == 1)
													{
													if(Forge[jet].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
													}
												jet++;
												}

											//##### Check All Active Avatars for XP and KO's
											SCRAM = 0;
											while(SCRAM < NomAI)
												{
												if(Forge[jet].LIVE == 1)
													{
													if((Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
														{
														//### Add Experience to attacking AVATAR
														player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000);

														//### Force Net player to update (Net Play Only)
														if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
														}

													if(DeliverKOID == SCRAM)
														{
														//### Create Item for attacking Avatar
														Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

														if(Forge[SCRAM].DecFinger <= 100 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level/1000))
															{
															//### CREATE NEW ITEM
															if(Forge[SCRAM].NETPLAYERFLAG == 1)
																{
																Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);

																Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																}
															else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);
															}
														}
													}
												SCRAM++;
												}

											//####### DEACTIVATE ITEM ATTRIBUTES
											Q_DeactivateItems();

											//### Write out CHARDATA
											WriteNEWCharacterData(player.CDATA);

											//####### REACTIVATE ITEM ATTRIBUTES
											Q_ActivateItems();
											}
										}


									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(player.HB_Armour < 0) player.HB_Armour = 0;
								}
							else
								{
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour - (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt += 4;
									Q_BulletHit[aero].EffectType = 5;
									}

								Forge[Q_BulletHit[aero].ActorHITID].BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 6 * (Q_BulletHit[aero].BulletDMG / 5);
								Forge[Q_BulletHit[aero].ActorHITID].HB_Armour -= (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && (Forge[Q_BulletHit[aero].ActorHITID].HB_Armour + (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 6)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 8;
									}

								if(Q_BulletHit[aero].ActorID == 250) player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;
									else Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

								if(Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt >= 35 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
									{
									Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
										{
										Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt = 0;
										Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
										}
									}
								else Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec = TempVec1;
								if(Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y < 0) Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y = 0;
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) Forge[Q_BulletHit[aero].ActorHITID].HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
											//## Hit Reaction Motions
										if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 30)
											{
											if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 26 && Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 28)	//Standard Hit Reactions
												{
												Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 28;
												Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											else
												{
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0.16;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
											Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
											Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
											}


										//## Reduce Health
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceOld = Forge[Q_BulletHit[aero].ActorHITID].HB_Health;
										Forge[Q_BulletHit[aero].ActorHITID].HB_Health += Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										if(Q_BulletHit[aero].ActorID == 250) player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;
										else Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.r = 255;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.g = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.b = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.a = 255;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHInc = 10;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHeight = 574;

										Forge[Q_BulletHit[aero].ActorHITID].HB_HReduceON = 1;

										if(Q_BulletHit[aero].ActorID == 250)
											{
											player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;
												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Q_MeleeHit[NomMelHit].HitRESULT = 10;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												if((player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{
													//### Add Experience to attacking AVATAR
													player.CDATA->CharDATA[player.CDATA->CurrCHAR].UnusedXP += player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

													player.MSG_XPON = 1;
													player.MSG_XPInit = 0;
													player.MSG_XPScreenDIST = 0;
													player.MSG_XPScreenDistINC = 50;
													player.MSG_XPScreenDIR = 0;
													player.MSG_XpInc = player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);
													}

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													player.DecFinger = ((float)rand() / 32767) * 6;

													if(player.DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										else
											{
											Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												//### Add XP to avatar
												if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000); }

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													Forge[Q_BulletHit[aero].ActorID].DecFinger = ((float)rand() / 32767) * 6;

													if(Forge[Q_BulletHit[aero].ActorID].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))	//1		//8		//25
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour < 0) Forge[Q_BulletHit[aero].ActorHITID].HB_Armour = 0;
								}
							}

						if(Q_BulletHit[aero].EffectType == 3 || Q_BulletHit[aero].EffectType == 6 || Q_BulletHit[aero].EffectType == 9)
							{
							Q_BulletHit[aero].Scale = 27;

							if(Q_BulletHit[aero].ActorHITID == 250)
								{
								if(((player.HB_Armour - (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									player.BulletHitCnt += 8;
									Q_BulletHit[aero].EffectType = 6;
									}

								player.BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 12 * (Q_BulletHit[aero].BulletDMG / 5);
								player.HB_Armour -= (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((player.HB_Armour <= 0) && (player.HB_Armour + (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 6)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 9;
									}

								Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

								if(player.BulletHitCnt >= 35 || (player.HB_Health <= 0))
									{
									player.MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(player.HB_Armour <= 0 || (player.HB_Health <= 0))
										{
										player.BulletHitCnt = 0;
										player.Aposestate = 30;
										}
									}
								else player.MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								player.MoveReactVec = TempVec1;
								if(player.MoveReactVec.Y < 0) player.MoveReactVec.Y = 0;
								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) player.HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
											//## Hit Reaction Motions
										if(player.Aposestate != 30)
											{
											if(player.Aposestate != 26 && player.Aposestate != 28)	//Standard Hit Reactions
												{
												player.Aposestate = 28;
												player.attackon = 1;
												player.attposecnt = 0;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											else
												{
												player.attposecnt = 0.16;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											player.Aposestate = 30;
											player.attackon = 1;
											player.attposecnt = 0;
											player.astackcnt = 0;
											player.astackrun = 0;
											}


										//## Reduce Health
										player.HB_ReduceOld = player.HB_Health;
										player.HB_Health += player.HB_Armour;

										Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] -= player.HB_Armour;

										player.HB_ReduceRectColor.r = 255;
										player.HB_ReduceRectColor.g = 0;
										player.HB_ReduceRectColor.b = 0;
										player.HB_ReduceRectColor.a = 255;

										player.HB_ReduceHInc = 10;
										player.HB_ReduceHeight = 573;

										player.HB_HReduceON = 1;

										if(player.HB_Health <= 0)
											{
											player.HB_Health = 0;

											geSound3D_GetConfig(World, &player.ViewXForm,
														&player.ViewXForm.Translation,
														600.0f,
														2.0f,
														&Volume,
														&Pan,
														&Frequency);

											//'AVATAR DEATH' SOUND
											geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

											player.HB_Dead = 1;

											//### Add Experience to attacking AVATAR
											if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
												{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000); }

											//##### Find KO Owner
											UniversalDMGSTR = 0;

											jet = 0;
											while(jet < NomAI)
												{
												if(Forge[jet].LIVE == 1)
													{
													if(Forge[jet].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
													}
												jet++;
												}

											//##### Check All Active Avatars for XP and KO's
											SCRAM = 0;
											while(SCRAM < NomAI)
												{
												if(Forge[SCRAM].LIVE == 1)
													{
													if((Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
														{
														//### Add Experience to attacking AVATAR
														player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000);

														//### Force Net player to update (Net Play Only)
														if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
														}

													if(DeliverKOID == SCRAM)
														{
														//### Create Item for attacking Avatar
														Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

														if(Forge[SCRAM].DecFinger <= 100 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level/1000))
															{
															//### CREATE NEW ITEM
															if(Forge[SCRAM].NETPLAYERFLAG == 1)
																{
																Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);

																Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																}
															else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);
															}
														}
													}
												SCRAM++;
												}

											//####### DEACTIVATE ITEM ATTRIBUTES
											Q_DeactivateItems();

											//### Write out CHARDATA
											WriteNEWCharacterData(player.CDATA);

											//####### REACTIVATE ITEM ATTRIBUTES
											Q_ActivateItems();
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(player.HB_Armour < 0) player.HB_Armour = 0;
								}
							else
								{
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour - (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt += 8;
									Q_BulletHit[aero].EffectType = 6;
									}

								Forge[Q_BulletHit[aero].ActorHITID].BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 12 * (Q_BulletHit[aero].BulletDMG / 5);
								Forge[Q_BulletHit[aero].ActorHITID].HB_Armour -= (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && (Forge[Q_BulletHit[aero].ActorHITID].HB_Armour + (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 6)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 9;
									}

								if(Q_BulletHit[aero].ActorID == 250) player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;
								else Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

								if(Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt >= 35 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
									{
									Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
										{
										Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt = 0;
										Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
										}
									}
								else Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec = TempVec1;
								if(Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y < 0) Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y = 0;
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) Forge[Q_BulletHit[aero].ActorHITID].HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
											//## Hit Reaction Motions
										if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 30)
											{
											if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 26 && Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 28)	//Standard Hit Reactions
												{
												Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 28;
												Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											else
												{
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0.16;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
											Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
											Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
											}


										//## Reduce Health
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceOld = Forge[Q_BulletHit[aero].ActorHITID].HB_Health;
										Forge[Q_BulletHit[aero].ActorHITID].HB_Health += Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										if(Q_BulletHit[aero].ActorID == 250) player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;
										else Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.r = 255;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.g = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.b = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.a = 255;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHInc = 10;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHeight = 574;

										Forge[Q_BulletHit[aero].ActorHITID].HB_HReduceON = 1;

										if(Q_BulletHit[aero].ActorID == 250)
											{
											player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;
												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Q_MeleeHit[NomMelHit].HitRESULT = 10;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												if((player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{
													//### Add Experience to attacking AVATAR
													player.CDATA->CharDATA[player.CDATA->CurrCHAR].UnusedXP += player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

													player.MSG_XPON = 1;
													player.MSG_XPInit = 0;
													player.MSG_XPScreenDIST = 0;
													player.MSG_XPScreenDistINC = 50;
													player.MSG_XPScreenDIR = 0;
													player.MSG_XpInc = player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);
													}

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													player.DecFinger = ((float)rand() / 32767) * 6;

													if(player.DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										else
											{
											Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												//### Add XP to avatar
												if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000); }

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													Forge[Q_BulletHit[aero].ActorID].DecFinger = ((float)rand() / 32767) * 6;

													if(Forge[Q_BulletHit[aero].ActorID].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))	//1		//8		//25
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour < 0) Forge[Q_BulletHit[aero].ActorHITID].HB_Armour = 0;
								}

							}

						}//END INIT


					geXForm3d_SetIdentity(&Q_BulletHit[aero].AlignMatrix);
					geXForm3d_GetIn(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].AligIn);
					
					Q_BulletHit[aero].VecIn = Q_BulletHit[aero].CollNormal;

					if(Q_BulletHit[aero].VecIn.X == 0 && Q_BulletHit[aero].VecIn.Z == 0)
						{
						Q_BulletHit[aero].VecLeft.X = -1;
						Q_BulletHit[aero].VecLeft.Y = 0;
						Q_BulletHit[aero].VecLeft.Z = 0;
						}
					else
						{
						geXForm3d_SetYRotation(&rotmat, PI/2);
						geXForm3d_Rotate(&rotmat, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VecLeft);
						Q_BulletHit[aero].VecLeft.Y = 0;
						}

					geVec3d_CrossProduct(&Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VecUp);

					geXForm3d_SetFromLeftUpIn(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VecIn);
					Q_BulletHit[aero].AlignMatrix.Translation = Q_BulletHit[aero].Pos;

					geXForm3d_SetZRotation(&rotmat, ((float)rand() / 32767)*6);
					geXForm3d_Multiply(&Q_BulletHit[aero].AlignMatrix, &rotmat, &Q_BulletHit[aero].AlignMatrix);

					geXForm3d_GetUp(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].VecUp);
					geXForm3d_GetLeft(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].VecLeft);
					geXForm3d_GetIn(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].VecIn);

					Q_BulletHit[aero].Type = GE_TEXTURED_POLY;
					Q_BulletHit[aero].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
					Q_BulletHit[aero].ScaleBIT = 1.0f;
					//END INIT

					if(Q_BulletHit[aero].Scale - 2 > 2) Q_BulletHit[aero].Scale -= 2;
					else
						{
						Q_BulletHit[aero].Scale = 1;
						Q_BulletHit[aero].Live = 0;
						Q_BulletHit[aero].Init = 0;

						//### Array Reorder
						K = aero;
						while(K < NomBulHit - 1)
							{
							Q_BulletHit[K] = Q_BulletHit[K+1];
							K++;
							}

						NomBulHit--;
						aero--;
						}

					geVec3d_MA(&Q_BulletHit[aero].Pos, 0.3, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].Pos);//3


						//##Flash Vertical##
							//TOP VERT1
					geVec3d_MA(&Q_BulletHit[aero].Pos, Q_BulletHit[aero].Scale/2, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VertFU1);

					geVec3d_MA(&Q_BulletHit[aero].VertFU1, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFU1);

							//TOP VERT2
					geVec3d_MA(&Q_BulletHit[aero].VertFU1, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFU2);


							//BOTTOM VERT3
					geVec3d_MA(&Q_BulletHit[aero].VertFU2, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VertFU3);

							//BOTTOM VERT4
					geVec3d_MA(&Q_BulletHit[aero].VertFU3, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFU4);


						//##Flash Horizontal##
							//LEFT VERT1
					geVec3d_MA(&Q_BulletHit[aero].Pos, -Q_BulletHit[aero].Scale/2, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertFD1);

					geVec3d_MA(&Q_BulletHit[aero].VertFD1, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFD1);


							//LEFT VERT2
					geVec3d_MA(&Q_BulletHit[aero].VertFD1, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFD2);


							//RIGHT VERT3
					geVec3d_MA(&Q_BulletHit[aero].VertFD2, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertFD3);

							//RIGHT VERT4
					geVec3d_MA(&Q_BulletHit[aero].VertFD3, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFD4);
				

						//##Flash Spinner##
							//TOP VERT1
					geVec3d_MA(&Q_BulletHit[aero].Pos, Q_BulletHit[aero].Scale/2, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VertS1);

					geVec3d_MA(&Q_BulletHit[aero].VertS1, Q_BulletHit[aero].Scale/2, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertS1);

							//TOP VERT2
					geVec3d_MA(&Q_BulletHit[aero].VertS1, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertS2);


							//BOTTOM VERT3
					geVec3d_MA(&Q_BulletHit[aero].VertS2, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VertS3);

							//BOTTOM VERT4
					geVec3d_MA(&Q_BulletHit[aero].VertS3, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertS4);


					//##Flash Vertical##

					Q_BulletHit[aero].Lvert[0][0].u = 0;
					Q_BulletHit[aero].Lvert[0][0].v = 1;
					Q_BulletHit[aero].Lvert[0][0].X = Q_BulletHit[aero].VertFU1.X;
					Q_BulletHit[aero].Lvert[0][0].Y = Q_BulletHit[aero].VertFU1.Y;
					Q_BulletHit[aero].Lvert[0][0].Z = Q_BulletHit[aero].VertFU1.Z;

						
					Q_BulletHit[aero].Lvert[0][1].u = 1;
					Q_BulletHit[aero].Lvert[0][1].v = 1;
					Q_BulletHit[aero].Lvert[0][1].X = Q_BulletHit[aero].VertFU2.X;
					Q_BulletHit[aero].Lvert[0][1].Y = Q_BulletHit[aero].VertFU2.Y;
					Q_BulletHit[aero].Lvert[0][1].Z = Q_BulletHit[aero].VertFU2.Z;

						
					Q_BulletHit[aero].Lvert[0][2].u = 1;
					Q_BulletHit[aero].Lvert[0][2].v = 0;
					Q_BulletHit[aero].Lvert[0][2].X = Q_BulletHit[aero].VertFU3.X;
					Q_BulletHit[aero].Lvert[0][2].Y = Q_BulletHit[aero].VertFU3.Y;
					Q_BulletHit[aero].Lvert[0][2].Z = Q_BulletHit[aero].VertFU3.Z;


					Q_BulletHit[aero].Lvert[0][3].u = 0;
					Q_BulletHit[aero].Lvert[0][3].v = 0;
					Q_BulletHit[aero].Lvert[0][3].X = Q_BulletHit[aero].VertFU4.X;
					Q_BulletHit[aero].Lvert[0][3].Y = Q_BulletHit[aero].VertFU4.Y;
					Q_BulletHit[aero].Lvert[0][3].Z = Q_BulletHit[aero].VertFU4.Z;



					//##Flash Horizontal##

					Q_BulletHit[aero].Lvert[1][0].u = 0;
					Q_BulletHit[aero].Lvert[1][0].v = 1;
					Q_BulletHit[aero].Lvert[1][0].X = Q_BulletHit[aero].VertFD1.X;
					Q_BulletHit[aero].Lvert[1][0].Y = Q_BulletHit[aero].VertFD1.Y;
					Q_BulletHit[aero].Lvert[1][0].Z = Q_BulletHit[aero].VertFD1.Z;

						
					Q_BulletHit[aero].Lvert[1][1].u = 1;
					Q_BulletHit[aero].Lvert[1][1].v = 1;
					Q_BulletHit[aero].Lvert[1][1].X = Q_BulletHit[aero].VertFD2.X;
					Q_BulletHit[aero].Lvert[1][1].Y = Q_BulletHit[aero].VertFD2.Y;
					Q_BulletHit[aero].Lvert[1][1].Z = Q_BulletHit[aero].VertFD2.Z;

						
					Q_BulletHit[aero].Lvert[1][2].u = 1;
					Q_BulletHit[aero].Lvert[1][2].v = 0;
					Q_BulletHit[aero].Lvert[1][2].X = Q_BulletHit[aero].VertFD3.X;
					Q_BulletHit[aero].Lvert[1][2].Y = Q_BulletHit[aero].VertFD3.Y;
					Q_BulletHit[aero].Lvert[1][2].Z = Q_BulletHit[aero].VertFD3.Z;


					Q_BulletHit[aero].Lvert[1][3].u = 0;
					Q_BulletHit[aero].Lvert[1][3].v = 0;
					Q_BulletHit[aero].Lvert[1][3].X = Q_BulletHit[aero].VertFD4.X;
					Q_BulletHit[aero].Lvert[1][3].Y = Q_BulletHit[aero].VertFD4.Y;
					Q_BulletHit[aero].Lvert[1][3].Z = Q_BulletHit[aero].VertFD4.Z;


					//##Flash Spinner##

					Q_BulletHit[aero].Lvert[2][0].u = 0;
					Q_BulletHit[aero].Lvert[2][0].v = 1;
					Q_BulletHit[aero].Lvert[2][0].X = Q_BulletHit[aero].VertS1.X;
					Q_BulletHit[aero].Lvert[2][0].Y = Q_BulletHit[aero].VertS1.Y;
					Q_BulletHit[aero].Lvert[2][0].Z = Q_BulletHit[aero].VertS1.Z;

						
					Q_BulletHit[aero].Lvert[2][1].u = 1;
					Q_BulletHit[aero].Lvert[2][1].v = 1;
					Q_BulletHit[aero].Lvert[2][1].X = Q_BulletHit[aero].VertS2.X;
					Q_BulletHit[aero].Lvert[2][1].Y = Q_BulletHit[aero].VertS2.Y;
					Q_BulletHit[aero].Lvert[2][1].Z = Q_BulletHit[aero].VertS2.Z;

						
					Q_BulletHit[aero].Lvert[2][2].u = 1;
					Q_BulletHit[aero].Lvert[2][2].v = 0;
					Q_BulletHit[aero].Lvert[2][2].X = Q_BulletHit[aero].VertS3.X;
					Q_BulletHit[aero].Lvert[2][2].Y = Q_BulletHit[aero].VertS3.Y;
					Q_BulletHit[aero].Lvert[2][2].Z = Q_BulletHit[aero].VertS3.Z;


					Q_BulletHit[aero].Lvert[2][3].u = 0;
					Q_BulletHit[aero].Lvert[2][3].v = 0;
					Q_BulletHit[aero].Lvert[2][3].X = Q_BulletHit[aero].VertS4.X;
					Q_BulletHit[aero].Lvert[2][3].Y = Q_BulletHit[aero].VertS4.Y;
					Q_BulletHit[aero].Lvert[2][3].Z = Q_BulletHit[aero].VertS4.Z;


					geWorld_AddPolyOnce(World, &Q_BulletHit[aero].Lvert[0][0], 4, BulHitFlash, Q_BulletHit[aero].Type, Q_BulletHit[aero].RenderFlags, Q_BulletHit[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_BulletHit[aero].Lvert[1][0], 4, BulHitFlash, Q_BulletHit[aero].Type, Q_BulletHit[aero].RenderFlags, Q_BulletHit[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_BulletHit[aero].Lvert[2][0], 4, BulHitFlashSpin, Q_BulletHit[aero].Type, Q_BulletHit[aero].RenderFlags, Q_BulletHit[aero].ScaleBIT);
					}

				aero++;
				}
			}
		}
	else
		{
		if(NomBulHit > 0)	//Number of HITs
			{
			aero = 0;
			while(aero < NomBulHit)
				{
				if(Q_BulletHit[aero].Live == 1)		//HIT is live
					{
					if(Q_BulletHit[aero].Init == 0)
						{
						Q_BulletHit[aero].Init = 1;

						Q_BulletHit[aero].ScaleDir = 0;
						Q_BulletHit[aero].AlpFade = 255;

						if(Q_BulletHit[aero].EffectType == 0 || (Q_BulletHit[aero].ActorID == 250 && Q_BulletHit[aero].ActorHITID == 250))
							{
							Q_BulletHit[aero].Scale = 18;
							Q_BulletHit[aero].BloodAmt = 0;
							Q_BulletHit[aero].EffectType = 0;

							a=0;
							while( a <= 2 )
								{
								b=0;
								while( b <= 3 )
									{
									Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
									Q_BulletHit[aero].Lvert[a][b].b = 255;
									Q_BulletHit[aero].Lvert[a][b].g = 255;
									Q_BulletHit[aero].Lvert[a][b].r = 255;
									b++;
									}
								a++;
								}

								//SPARKS
							helly = 0;
							while(helly < 3 && (NomSparks < 498))
								{
								BSparks[NomSparks].Pos = Q_BulletHit[aero].Pos;

								BSparks[NomSparks].TraVec = Q_BulletHit[aero].CollNormal;

								BSparks[NomSparks].TraVec.X += ((((float)rand() / 32767)-0.5));
								BSparks[NomSparks].TraVec.Y += ((((float)rand() / 32767)-0.5))+0.1;
								BSparks[NomSparks].TraVec.Z += ((((float)rand() / 32767)-0.5));

								BSparks[NomSparks].AlpFade = 255;
								BSparks[NomSparks].Timer = 0;
								BSparks[NomSparks].TimerGoal = ((((float)rand() / 32767)*30)+10);

								geVec3d_MA(&BSparks[NomSparks].Pos, 1, &BSparks[NomSparks].TraVec, &BSparks[NomSparks].Pos);
								
								BSparks[NomSparks].Speed = 8;

								BSparks[NomSparks].Gravity = 0.12;

								BSparks[NomSparks].Bounce = 0;

								BSparks[NomSparks].SmokeTrail = 0;
								BSparks[NomSparks].Live = 1;

								NomSparks++;
								helly++;
								}

							TempVec1 = Q_BulletHit[aero].Pos;

							//Move Sound away from the wall
							geVec3d_MA(&TempVec1, 7, &Q_BulletHit[aero].CollNormal, &TempVec1);

								//'Bullet Hit Sound'
							geSound3D_GetConfig(World, &player.ViewXForm, &TempVec1, 600.0f, 2.0f, &Volume, &Pan, &Frequency);

							SoundFinger = ((float)rand() / 32767)*4;
							if(SoundFinger <= 1) geSound_PlaySoundDef(SoundSys, S_Hitwall1, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 1 && SoundFinger <= 2) geSound_PlaySoundDef(SoundSys, S_Hitwall2, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 2 && SoundFinger <= 3) geSound_PlaySoundDef(SoundSys, S_Hitwall3, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 3 && SoundFinger <= 4) geSound_PlaySoundDef(SoundSys, S_Hitwall4, Volume, Pan, S_TimeScale, GE_FALSE);
							}


						if(Q_BulletHit[aero].EffectType == 100)
							{
							Q_BulletHit[aero].Scale = 13;
							Q_BulletHit[aero].BloodAmt = 0;
							Q_BulletHit[aero].EffectType = 100;

							a=0;
							while( a <= 2 )
								{
								b=0;
								while( b <= 3 )
									{
									Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
									Q_BulletHit[aero].Lvert[a][b].b = 255;
									Q_BulletHit[aero].Lvert[a][b].g = 255;
									Q_BulletHit[aero].Lvert[a][b].r = 255;
									b++;
									}
								a++;
								}

								//SPARKS
							jet=0;
							while((jet < 8) && (NomPntSprite < 24998))
								{
								Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
								Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
								Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
								Q_PntSprite[NomPntSprite].PartType = 8;

								Q_PntSprite[NomPntSprite].IR = 255;
								Q_PntSprite[NomPntSprite].IG = 255;
								Q_PntSprite[NomPntSprite].IB = 255;

								Q_PntSprite[NomPntSprite].Alpha = 100;
								Q_PntSprite[NomPntSprite].Speed = 0.4;
								Q_PntSprite[NomPntSprite].Pos = Q_BulletHit[aero].Pos;

								Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
								Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
								Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

								Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
								Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
								Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

								Q_PntSprite[NomPntSprite].ActorID = Q_BulletHit[aero].ActorID;

								Q_PntSprite[NomPntSprite].Live = 1;

								NomPntSprite++;
								jet++;
								}

							TempVec1 = Q_BulletHit[aero].Pos;

							//Move Sound away from the wall
							geVec3d_MA(&TempVec1, 7, &Q_BulletHit[aero].CollNormal, &TempVec1);

								//'Bullet Hit Sound'
							geSound3D_GetConfig(World, &player.ViewXForm, &TempVec1, 600.0f, 2.0f, &Volume, &Pan, &Frequency);

							SoundFinger = ((float)rand() / 32767)*4;
							if(SoundFinger <= 1) geSound_PlaySoundDef(SoundSys, S_Hitwall1, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 1 && SoundFinger <= 2) geSound_PlaySoundDef(SoundSys, S_Hitwall2, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 2 && SoundFinger <= 3) geSound_PlaySoundDef(SoundSys, S_Hitwall3, Volume, Pan, S_TimeScale, GE_FALSE);
							if(SoundFinger > 3 && SoundFinger <= 4) geSound_PlaySoundDef(SoundSys, S_Hitwall4, Volume, Pan, S_TimeScale, GE_FALSE);
							}


						if(Q_BulletHit[aero].EffectType == 1 || Q_BulletHit[aero].EffectType == 4 || Q_BulletHit[aero].EffectType == 7)
							{
							Q_BulletHit[aero].Scale = 18;

							if(Q_BulletHit[aero].ActorHITID == 250)
								{
								if(((player.HB_Armour - (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									player.BulletHitCnt += 4;
									Q_BulletHit[aero].EffectType = 4;
									}

								player.BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 3 * (Q_BulletHit[aero].BulletDMG / 5);
								player.HB_Armour -= (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((player.HB_Armour <= 0) && (player.HB_Armour + (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 7)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 7;
									}

								Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = 250;

								if(player.BulletHitCnt >= 35 || (player.HB_Health <= 0))
									{
									player.MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(player.HB_Armour <= 0 || (player.HB_Health <= 0))
										{
										player.BulletHitCnt = 0;
										player.Aposestate = 30;
										}
									}
								else player.MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								player.MoveReactVec = TempVec1;
								if(player.MoveReactVec.Y < 0) player.MoveReactVec.Y = 0;
								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) player.HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
										//## Hit Reaction Motions
										if(player.Aposestate != 30)
											{
											if(player.Aposestate != 26 && player.Aposestate != 28)		//Standard Hit Upper Reactions
												{
												player.Aposestate = 26;
												player.attackon = 1;
												player.attposecnt = 0;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											else
												{
												player.attposecnt = 0.16;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											player.Aposestate = 30;
											player.attackon = 1;
											player.attposecnt = 0;
											player.astackcnt = 0;
											player.astackrun = 0;
											}

										//## Reduce Health
										player.HB_ReduceOld = player.HB_Health;
										player.HB_Health += player.HB_Armour;
										Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] -= player.HB_Armour;

										player.HB_ReduceRectColor.r = 255;
										player.HB_ReduceRectColor.g = 0;
										player.HB_ReduceRectColor.b = 0;
										player.HB_ReduceRectColor.a = 255;

										player.HB_ReduceHInc = 10;
										player.HB_ReduceHeight = 573;

										player.HB_HReduceON = 1;

										if(player.HB_Health <= 0)
											{
											player.HB_Health = 0;

											geSound3D_GetConfig(World, &player.ViewXForm,
														&player.ViewXForm.Translation,
														600.0f,
														2.0f,
														&Volume,
														&Pan,
														&Frequency);

											//'AVATAR DEATH' SOUND
											geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

											player.HB_Dead = 1;

											//### Add Experience to attacking AVATAR
											if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
												{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000); }

											//##### Find KO Owner
											UniversalDMGSTR = 0;

											jet = 0;
											while(jet < NomAI)
												{
												if(Forge[jet].LIVE == 1)
													{
													if(Forge[jet].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
													}
												jet++;
												}

											//##### Check All Active Avatars for XP and KO's
											SCRAM = 0;
											while(SCRAM < NomAI)
												{
												if(Forge[SCRAM].LIVE == 1)
													{
													if((Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
														{
														//### Add Experience to attacking AVATAR
														player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000);

														//### Force Net player to update (Net Play Only)
														if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
														}

													if(DeliverKOID == SCRAM)
														{
														//### Create Item for attacking Avatar
														Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

														if(Forge[SCRAM].DecFinger <= 100 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level/1000))
															{
															//### CREATE NEW ITEM
															if(Forge[SCRAM].NETPLAYERFLAG == 1)
																{
																Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);

																Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																}
															else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);
															}
														}
													}

												SCRAM++;
												}

											//####### DEACTIVATE ITEM ATTRIBUTES
											Q_DeactivateItems();

											//### Write out CHARDATA
											WriteNEWCharacterData(player.CDATA);

											//####### REACTIVATE ITEM ATTRIBUTES
											Q_ActivateItems();
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0 && (NomBlood < 498))
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt)
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(player.HB_Armour < 0) player.HB_Armour = 0;
								}
							else
								{
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour - (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt += 4;
									Q_BulletHit[aero].EffectType = 4;
									}

								Forge[Q_BulletHit[aero].ActorHITID].BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 3 * (Q_BulletHit[aero].BulletDMG / 5);
								Forge[Q_BulletHit[aero].ActorHITID].HB_Armour -= (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && (Forge[Q_BulletHit[aero].ActorHITID].HB_Armour + (((25 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrLOWERARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 7)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 7;
									}

								if(Q_BulletHit[aero].ActorID == 250) player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;
									else Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

								if(Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt >= 35 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
									{
									Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
										{
										Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt = 0;
										Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
										}
									}
								else Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec = TempVec1;
								if(Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y < 0) Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y = 0;
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) Forge[Q_BulletHit[aero].ActorHITID].HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
												//## Hit Reaction Motions
										if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 30)
											{
											if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 26 && Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 28)	//Standard Hit Reactions
												{
												Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 26;
												Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											else
												{
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0.16;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
											Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
											Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
											}


										//## Reduce Health
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceOld = Forge[Q_BulletHit[aero].ActorHITID].HB_Health;
										Forge[Q_BulletHit[aero].ActorHITID].HB_Health += Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										if(Q_BulletHit[aero].ActorID == 250) player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;
										else Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.r = 255;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.g = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.b = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.a = 255;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHInc = 10;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHeight = 574;

										Forge[Q_BulletHit[aero].ActorHITID].HB_HReduceON = 1;

										if(Q_BulletHit[aero].ActorID == 250)
											{
											player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;
												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Q_MeleeHit[NomMelHit].HitRESULT = 10;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												if((player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{
													//### Add Experience to attacking AVATAR
													player.CDATA->CharDATA[player.CDATA->CurrCHAR].UnusedXP += player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

													player.MSG_XPON = 1;
													player.MSG_XPInit = 0;
													player.MSG_XPScreenDIST = 0;
													player.MSG_XPScreenDistINC = 50;
													player.MSG_XPScreenDIR = 0;
													player.MSG_XpInc = player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);
													}

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													player.DecFinger = ((float)rand() / 32767) * 6;

													if(player.DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										else
											{
											Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												//### Add XP to avatar
												if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000); }

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													Forge[Q_BulletHit[aero].ActorID].DecFinger = ((float)rand() / 32767) * 6;

													if(Forge[Q_BulletHit[aero].ActorID].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}


														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))	//1		//8		//25
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour < 0) Forge[Q_BulletHit[aero].ActorHITID].HB_Armour = 0;
								}
							}

						if(Q_BulletHit[aero].EffectType == 2 || Q_BulletHit[aero].EffectType == 5 || Q_BulletHit[aero].EffectType == 8)
							{
							Q_BulletHit[aero].Scale = 22;

							if(Q_BulletHit[aero].ActorHITID == 250)
								{
								if(((player.HB_Armour - (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									player.BulletHitCnt += 6;
									Q_BulletHit[aero].EffectType = 5;
									}

								player.BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 6 * (Q_BulletHit[aero].BulletDMG / 5);
								player.HB_Armour -= (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((player.HB_Armour <= 0) && (player.HB_Armour + (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 6)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 8;
									}

								Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = 250;

								if(player.BulletHitCnt >= 35 || (player.HB_Health <= 0))
									{
									player.MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(player.HB_Armour <= 0 || (player.HB_Health <= 0))
										{
										player.BulletHitCnt = 0;
										player.Aposestate = 30;
										}
									}
								else player.MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								player.MoveReactVec = TempVec1;
								if(player.MoveReactVec.Y < 0) player.MoveReactVec.Y = 0;
								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) player.HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
													//## Hit Reaction Motions
										if(player.Aposestate != 30)
											{
											if(player.Aposestate != 26 && player.Aposestate != 28)	//Standard Hit Reactions
												{
												player.Aposestate = 28;
												player.attackon = 1;
												player.attposecnt = 0;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											else
												{
												player.attposecnt = 0.16;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											player.Aposestate = 30;
											player.attackon = 1;
											player.attposecnt = 0;
											player.astackcnt = 0;
											player.astackrun = 0;
											}


										//## Reduce Health
										player.HB_ReduceOld = player.HB_Health;
										player.HB_Health += player.HB_Armour;
										Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] -= player.HB_Armour;

										player.HB_ReduceRectColor.r = 255;
										player.HB_ReduceRectColor.g = 0;
										player.HB_ReduceRectColor.b = 0;
										player.HB_ReduceRectColor.a = 255;

										player.HB_ReduceHInc = 10;
										player.HB_ReduceHeight = 573;

										player.HB_HReduceON = 1;

										if(player.HB_Health <= 0)
											{
											player.HB_Health = 0;

											geSound3D_GetConfig(World, &player.ViewXForm,
														&player.ViewXForm.Translation,
														600.0f,
														2.0f,
														&Volume,
														&Pan,
														&Frequency);

											//'AVATAR DEATH' SOUND
											geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

											player.HB_Dead = 1;

											//### Add Experience to attacking AVATAR
											if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
												{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000); }

											//##### Find KO Owner
											UniversalDMGSTR = 0;

											jet = 0;
											while(jet < NomAI)
												{
												if(Forge[jet].LIVE == 1)
													{
													if(Forge[jet].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
													}
												jet++;
												}

											//##### Check All Active Avatars for XP and KO's
											SCRAM = 0;
											while(SCRAM < NomAI)
												{
												if(Forge[jet].LIVE == 1)
													{
													if((Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
														{
														//### Add Experience to attacking AVATAR
														player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000);

														//### Force Net player to update (Net Play Only)
														if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
														}

													if(DeliverKOID == SCRAM)
														{
														//### Create Item for attacking Avatar
														Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

														if(Forge[SCRAM].DecFinger <= 100 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level/1000))
															{
															//### CREATE NEW ITEM
															if(Forge[SCRAM].NETPLAYERFLAG == 1)
																{
																Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);

																Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																}
															else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);
															}
														}
													}
												SCRAM++;
												}

											//####### DEACTIVATE ITEM ATTRIBUTES
											Q_DeactivateItems();

											//### Write out CHARDATA
											WriteNEWCharacterData(player.CDATA);

											//####### REACTIVATE ITEM ATTRIBUTES
											Q_ActivateItems();
											}
										}


									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(player.HB_Armour < 0) player.HB_Armour = 0;
								}
							else
								{
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour - (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt += 4;
									Q_BulletHit[aero].EffectType = 5;
									}

								Forge[Q_BulletHit[aero].ActorHITID].BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 6 * (Q_BulletHit[aero].BulletDMG / 5);
								Forge[Q_BulletHit[aero].ActorHITID].HB_Armour -= (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && (Forge[Q_BulletHit[aero].ActorHITID].HB_Armour + (((37 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrUPPERARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 6)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 8;
									}

								if(Q_BulletHit[aero].ActorID == 250) player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;
									else Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

								if(Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt >= 35 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
									{
									Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
										{
										Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt = 0;
										Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
										}
									}
								else Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec = TempVec1;
								if(Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y < 0) Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y = 0;
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) Forge[Q_BulletHit[aero].ActorHITID].HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
											//## Hit Reaction Motions
										if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 30)
											{
											if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 26 && Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 28)	//Standard Hit Reactions
												{
												Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 28;
												Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											else
												{
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0.16;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
											Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
											Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
											}


										//## Reduce Health
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceOld = Forge[Q_BulletHit[aero].ActorHITID].HB_Health;
										Forge[Q_BulletHit[aero].ActorHITID].HB_Health += Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										if(Q_BulletHit[aero].ActorID == 250) player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;
										else Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.r = 255;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.g = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.b = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.a = 255;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHInc = 10;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHeight = 574;

										Forge[Q_BulletHit[aero].ActorHITID].HB_HReduceON = 1;

										if(Q_BulletHit[aero].ActorID == 250)
											{
											player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;
												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Q_MeleeHit[NomMelHit].HitRESULT = 10;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												if((player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{
													//### Add Experience to attacking AVATAR
													player.CDATA->CharDATA[player.CDATA->CurrCHAR].UnusedXP += player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

													player.MSG_XPON = 1;
													player.MSG_XPInit = 0;
													player.MSG_XPScreenDIST = 0;
													player.MSG_XPScreenDistINC = 50;
													player.MSG_XPScreenDIR = 0;
													player.MSG_XpInc = player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);
													}

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													player.DecFinger = ((float)rand() / 32767) * 6;

													if(player.DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										else
											{
											Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												//### Add XP to avatar
												if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000); }

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													Forge[Q_BulletHit[aero].ActorID].DecFinger = ((float)rand() / 32767) * 6;

													if(Forge[Q_BulletHit[aero].ActorID].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))	//1		//8		//25
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour < 0) Forge[Q_BulletHit[aero].ActorHITID].HB_Armour = 0;
								}
							}

						if(Q_BulletHit[aero].EffectType == 3 || Q_BulletHit[aero].EffectType == 6 || Q_BulletHit[aero].EffectType == 9)
							{
							Q_BulletHit[aero].Scale = 27;

							if(Q_BulletHit[aero].ActorHITID == 250)
								{
								if(((player.HB_Armour - (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									player.BulletHitCnt += 8;
									Q_BulletHit[aero].EffectType = 6;
									}

								player.BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 12 * (Q_BulletHit[aero].BulletDMG / 5);
								player.HB_Armour -= (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((player.HB_Armour <= 0) && (player.HB_Armour + (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75)) / (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 6)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 9;
									}

								Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

								if(player.BulletHitCnt >= 35 || (player.HB_Health <= 0))
									{
									player.MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(player.HB_Armour <= 0 || (player.HB_Health <= 0))
										{
										player.BulletHitCnt = 0;
										player.Aposestate = 30;
										}
									}
								else player.MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								player.MoveReactVec = TempVec1;
								if(player.MoveReactVec.Y < 0) player.MoveReactVec.Y = 0;
								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) player.HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((player.HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
											//## Hit Reaction Motions
										if(player.Aposestate != 30)
											{
											if(player.Aposestate != 26 && player.Aposestate != 28)	//Standard Hit Reactions
												{
												player.Aposestate = 28;
												player.attackon = 1;
												player.attposecnt = 0;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											else
												{
												player.attposecnt = 0.16;
												player.astackcnt = 0;
												player.astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											player.Aposestate = 30;
											player.attackon = 1;
											player.attposecnt = 0;
											player.astackcnt = 0;
											player.astackrun = 0;
											}


										//## Reduce Health
										player.HB_ReduceOld = player.HB_Health;
										player.HB_Health += player.HB_Armour;

										Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] -= player.HB_Armour;

										player.HB_ReduceRectColor.r = 255;
										player.HB_ReduceRectColor.g = 0;
										player.HB_ReduceRectColor.b = 0;
										player.HB_ReduceRectColor.a = 255;

										player.HB_ReduceHInc = 10;
										player.HB_ReduceHeight = 573;

										player.HB_HReduceON = 1;

										if(player.HB_Health <= 0)
											{
											player.HB_Health = 0;

											geSound3D_GetConfig(World, &player.ViewXForm,
														&player.ViewXForm.Translation,
														600.0f,
														2.0f,
														&Volume,
														&Pan,
														&Frequency);

											//'AVATAR DEATH' SOUND
											geSound_PlaySoundDef(SoundSys, S_PlayerKO, Volume, Pan, S_TimeScale, GE_FALSE);

											player.HB_Dead = 1;

											//### Add Experience to attacking AVATAR
											if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
												{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000); }

											//##### Find KO Owner
											UniversalDMGSTR = 0;

											jet = 0;
											while(jet < NomAI)
												{
												if(Forge[jet].LIVE == 1)
													{
													if(Forge[jet].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
													}
												jet++;
												}

											//##### Check All Active Avatars for XP and KO's
											SCRAM = 0;
											while(SCRAM < NomAI)
												{
												if(Forge[SCRAM].LIVE == 1)
													{
													if((Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
														{
														//### Add Experience to attacking AVATAR
														player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000);

														//### Force Net player to update (Net Play Only)
														if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
														}

													if(DeliverKOID == SCRAM)
														{
														//### Create Item for attacking Avatar
														Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

														if(Forge[SCRAM].DecFinger <= 100 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level/1000))
															{
															//### CREATE NEW ITEM
															if(Forge[SCRAM].NETPLAYERFLAG == 1)
																{
																Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);

																Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																}
															else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);
															}
														}
													}
												SCRAM++;
												}

											//####### DEACTIVATE ITEM ATTRIBUTES
											Q_DeactivateItems();

											//### Write out CHARDATA
											WriteNEWCharacterData(player.CDATA);

											//####### REACTIVATE ITEM ATTRIBUTES
											Q_ActivateItems();
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(player.HB_Armour < 0) player.HB_Armour = 0;
								}
							else
								{
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour - (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / ( (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5) )) <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt += 8;
									Q_BulletHit[aero].EffectType = 6;
									}

								Forge[Q_BulletHit[aero].ActorHITID].BulletHitCntTimer = TIME;
								Q_BulletHit[aero].BloodAmt = 12 * (Q_BulletHit[aero].BulletDMG / 5);
								Forge[Q_BulletHit[aero].ActorHITID].HB_Armour -= (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5));

								if((((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && (Forge[Q_BulletHit[aero].ActorHITID].HB_Armour + (((60 * Q_BulletHit[aero].BulletDMG) * ((1 - (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.BodySKILL.Constitution / 400)) + 0.75)) / (((float)Forge[Q_BulletHit[aero].ActorHITID].CharDATA.ItemDATA[Forge[Q_BulletHit[aero].ActorHITID].CharDATA.CurrHEADARMOUR].ArmourFACTOR / 5000) * 2.5)) > 0)) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 6)))
									{
									//ARMOUR BLOOD
									helly = 0;
									while(helly < 22 && (NomBlood < 498))
										{
										BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

										BBlood[NomBlood].EffectType = 1;

										BBlood[NomBlood].AlpFade = 210;

										BBlood[NomBlood].TraVec.X = (((float)rand() / 32767)-0.5)*0.5;
										BBlood[NomBlood].TraVec.Y = (((float)rand() / 32767)-0.5)+1;
										BBlood[NomBlood].TraVec.Z = (((float)rand() / 32767)-0.5)*0.5;
										
										BBlood[NomBlood].Speed = 15 * ((Q_BulletHit[aero].BulletPWR / 2.5) + 0.2);

										BBlood[NomBlood].Gravity = 0.035;

										BBlood[NomBlood].Bounce = 0;
										BBlood[NomBlood].SmokeTrail = 0;
										BBlood[NomBlood].Live = 1;

										NomBlood++;
										helly++;
										}

									Q_BulletHit[aero].EffectType = 9;
									}

								if(Q_BulletHit[aero].ActorID == 250) player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;
								else Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

								if(Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt >= 35 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
									{
									Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 6 * Q_BulletHit[aero].BulletPWR;
									if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0 || (Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0))
										{
										Forge[Q_BulletHit[aero].ActorHITID].BulletHitCnt = 0;
										Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
										}
									}
								else Forge[Q_BulletHit[aero].ActorHITID].MoveReactSpeed = 3 * Q_BulletHit[aero].BulletPWR;

								TempVec1 = Q_BulletHit[aero].BulletTraj;
								geVec3d_Normalize(&TempVec1);
								Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec = TempVec1;
								if(Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y < 0) Forge[Q_BulletHit[aero].ActorHITID].MoveReactVec.Y = 0;
								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4))) Forge[Q_BulletHit[aero].ActorHITID].HitReactScale = 0.04 * (((1 - (Q_BulletHit[aero].BulletPWR / 10)) + 0.5) * 1.5);

								if(((Forge[Q_BulletHit[aero].ActorHITID].HB_Armour <= 0) && !((NetworkOption == 1) && (Q_BulletHit[aero].EffectType < 4))) || ((NetworkOption == 1) && (Q_BulletHit[aero].EffectType >= 4)))
									{
									if(NetworkOption != 1)
										{
											//## Hit Reaction Motions
										if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 30)
											{
											if(Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 26 && Forge[Q_BulletHit[aero].ActorHITID].Aposestate != 28)	//Standard Hit Reactions
												{
												Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 28;
												Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											else
												{
												Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0.16;
												Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
												Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
												}
											}
										else								//Fall Hit Reactions
											{
											Forge[Q_BulletHit[aero].ActorHITID].Aposestate = 30;
											Forge[Q_BulletHit[aero].ActorHITID].attackon = 1;
											Forge[Q_BulletHit[aero].ActorHITID].attposecnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackcnt = 0;
											Forge[Q_BulletHit[aero].ActorHITID].astackrun = 0;
											}


										//## Reduce Health
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceOld = Forge[Q_BulletHit[aero].ActorHITID].HB_Health;
										Forge[Q_BulletHit[aero].ActorHITID].HB_Health += Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										if(Q_BulletHit[aero].ActorID == 250) player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;
										else Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] -= Forge[Q_BulletHit[aero].ActorHITID].HB_Armour;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.r = 255;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.g = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.b = 0;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceRectColor.a = 255;

										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHInc = 10;
										Forge[Q_BulletHit[aero].ActorHITID].HB_ReduceHeight = 574;

										Forge[Q_BulletHit[aero].ActorHITID].HB_HReduceON = 1;

										if(Q_BulletHit[aero].ActorID == 250)
											{
											player.HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;
												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Q_MeleeHit[NomMelHit].HitRESULT = 10;

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												if((player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{
													//### Add Experience to attacking AVATAR
													player.CDATA->CharDATA[player.CDATA->CurrCHAR].UnusedXP += player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

													player.MSG_XPON = 1;
													player.MSG_XPInit = 0;
													player.MSG_XPScreenDIST = 0;
													player.MSG_XPScreenDistINC = 50;
													player.MSG_XPScreenDIR = 0;
													player.MSG_XpInc = player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);
													}

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(player.AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													player.DecFinger = ((float)rand() / 32767) * 6;

													if(player.DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										else
											{
											Forge[Q_BulletHit[aero].ActorID].HB_LastAvatarHitID = Q_BulletHit[aero].ActorHITID;

											if(Forge[Q_BulletHit[aero].ActorHITID].HB_Health <= 0)
												{
												Forge[Q_BulletHit[aero].ActorHITID].HB_Health = 0;

												geSound3D_GetConfig(World, &player.ViewXForm,
															&player.ViewXForm.Translation,
															600.0f,
															2.0f,
															&Volume,
															&Pan,
															&Frequency);

												//'AVATAR DEATH' SOUND
												geSound_PlaySoundDef(SoundSys, S_EnemyKO, Volume, Pan, S_TimeScale, GE_FALSE);

												Forge[Q_BulletHit[aero].ActorHITID].HB_Dead = 1;

												//### Add XP to avatar
												if((Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
													{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_BulletHit[aero].ActorID].CDATID].UnusedXP += Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000); }

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(Forge[Q_BulletHit[aero].ActorID].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													Forge[Q_BulletHit[aero].ActorID].DecFinger = ((float)rand() / 32767) * 6;

													if(Forge[Q_BulletHit[aero].ActorID].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}

												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_BulletHit[aero].ActorHITID] * (10 * Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_BulletHit[aero].ActorHITID].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}

												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}
											}
										}

									//BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 0;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 1;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Red Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade;
											Q_BulletHit[aero].Lvert[a][b].b = 0;
											Q_BulletHit[aero].Lvert[a][b].g = 0;
											Q_BulletHit[aero].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHit, Volume, Pan, S_TimeScale, GE_FALSE);
									}
								else
									{
									//ARMOUR BLOOD
									if(Q_BulletHit[aero].BloodAmt > 0)
										{
										helly = 0;
										while(helly < Q_BulletHit[aero].BloodAmt && (NomBlood < 498))	//1		//8		//25
											{
											BBlood[NomBlood].Pos = Q_BulletHit[aero].Pos;

											BBlood[NomBlood].EffectType = 1;

											BBlood[NomBlood].AlpFade = 210;

											BBlood[NomBlood].TraVec = Q_BulletHit[aero].CollNormal;

											BBlood[NomBlood].TraVec.X += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Y += ((((float)rand() / 32767)/2)-0.25)+0.1;	//((rand() % 10)/100);
											BBlood[NomBlood].TraVec.Z += ((((float)rand() / 32767)/2)-0.25);	//((rand() % 10)/100);
											
											BBlood[NomBlood].Speed = 6 * (((Q_BulletHit[aero].BulletDMG / 3) + 0.2) + ((Q_BulletHit[aero].BulletPWR / 3) + 0.2));

											BBlood[NomBlood].Gravity = 0.08;

											BBlood[NomBlood].Bounce = 0;
											BBlood[NomBlood].SmokeTrail = 0;
											BBlood[NomBlood].Live = 1;

											NomBlood++;
											helly++;
											}
										}

									a=0;	//# Black Flash
									while( a <= 2 )
										{
										b=0;
										while( b <= 3 )
											{
											Q_BulletHit[aero].Lvert[a][b].a = Q_BulletHit[aero].AlpFade/1.25;
											Q_BulletHit[aero].Lvert[a][b].b = 65;
											Q_BulletHit[aero].Lvert[a][b].g = 65;
											Q_BulletHit[aero].Lvert[a][b].r = 65;
											b++;
											}
										a++;
										}

										//'Bullet Hit Sound'
									geSound3D_GetConfig(World, &player.ViewXForm, &Q_BulletHit[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
									geSound_PlaySoundDef(SoundSys, S_BulletHitArmour, Volume, Pan, S_TimeScale, GE_FALSE);
									}

								if(Forge[Q_BulletHit[aero].ActorHITID].HB_Armour < 0) Forge[Q_BulletHit[aero].ActorHITID].HB_Armour = 0;
								}

							}

						}//END INIT


					geXForm3d_SetIdentity(&Q_BulletHit[aero].AlignMatrix);
					geXForm3d_GetIn(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].AligIn);
					
					Q_BulletHit[aero].VecIn = Q_BulletHit[aero].CollNormal;

					if(Q_BulletHit[aero].VecIn.X == 0 && Q_BulletHit[aero].VecIn.Z == 0)
						{
						Q_BulletHit[aero].VecLeft.X = -1;
						Q_BulletHit[aero].VecLeft.Y = 0;
						Q_BulletHit[aero].VecLeft.Z = 0;
						}
					else
						{
						geXForm3d_SetYRotation(&rotmat, PI/2);
						geXForm3d_Rotate(&rotmat, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VecLeft);
						Q_BulletHit[aero].VecLeft.Y = 0;
						}

					geVec3d_CrossProduct(&Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VecUp);

					geXForm3d_SetFromLeftUpIn(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VecIn);
					Q_BulletHit[aero].AlignMatrix.Translation = Q_BulletHit[aero].Pos;

					geXForm3d_SetZRotation(&rotmat, ((float)rand() / 32767)*6);
					geXForm3d_Multiply(&Q_BulletHit[aero].AlignMatrix, &rotmat, &Q_BulletHit[aero].AlignMatrix);

					geXForm3d_GetUp(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].VecUp);
					geXForm3d_GetLeft(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].VecLeft);
					geXForm3d_GetIn(&Q_BulletHit[aero].AlignMatrix, &Q_BulletHit[aero].VecIn);

					Q_BulletHit[aero].Type = GE_TEXTURED_POLY;
					Q_BulletHit[aero].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
					Q_BulletHit[aero].ScaleBIT = 1.0f;
					//END INIT

					if(Q_BulletHit[aero].Scale - 2 > 2) Q_BulletHit[aero].Scale -= 2;
					else
						{
						Q_BulletHit[aero].Scale = 1;
						}

					geVec3d_MA(&Q_BulletHit[aero].Pos, 0.3, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].Pos);//3


						//##Flash Vertical##
							//TOP VERT1
					geVec3d_MA(&Q_BulletHit[aero].Pos, Q_BulletHit[aero].Scale/2, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VertFU1);

					geVec3d_MA(&Q_BulletHit[aero].VertFU1, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFU1);

							//TOP VERT2
					geVec3d_MA(&Q_BulletHit[aero].VertFU1, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFU2);


							//BOTTOM VERT3
					geVec3d_MA(&Q_BulletHit[aero].VertFU2, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VertFU3);

							//BOTTOM VERT4
					geVec3d_MA(&Q_BulletHit[aero].VertFU3, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFU4);


						//##Flash Horizontal##
							//LEFT VERT1
					geVec3d_MA(&Q_BulletHit[aero].Pos, -Q_BulletHit[aero].Scale/2, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertFD1);

					geVec3d_MA(&Q_BulletHit[aero].VertFD1, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFD1);


							//LEFT VERT2
					geVec3d_MA(&Q_BulletHit[aero].VertFD1, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFD2);


							//RIGHT VERT3
					geVec3d_MA(&Q_BulletHit[aero].VertFD2, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertFD3);

							//RIGHT VERT4
					geVec3d_MA(&Q_BulletHit[aero].VertFD3, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecIn, &Q_BulletHit[aero].VertFD4);
				

						//##Flash Spinner##
							//TOP VERT1
					geVec3d_MA(&Q_BulletHit[aero].Pos, Q_BulletHit[aero].Scale/2, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VertS1);

					geVec3d_MA(&Q_BulletHit[aero].VertS1, Q_BulletHit[aero].Scale/2, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertS1);

							//TOP VERT2
					geVec3d_MA(&Q_BulletHit[aero].VertS1, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertS2);


							//BOTTOM VERT3
					geVec3d_MA(&Q_BulletHit[aero].VertS2, -Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecUp, &Q_BulletHit[aero].VertS3);

							//BOTTOM VERT4
					geVec3d_MA(&Q_BulletHit[aero].VertS3, Q_BulletHit[aero].Scale, &Q_BulletHit[aero].VecLeft, &Q_BulletHit[aero].VertS4);


					//##Flash Vertical##

					Q_BulletHit[aero].Lvert[0][0].u = 0;
					Q_BulletHit[aero].Lvert[0][0].v = 1;
					Q_BulletHit[aero].Lvert[0][0].X = Q_BulletHit[aero].VertFU1.X;
					Q_BulletHit[aero].Lvert[0][0].Y = Q_BulletHit[aero].VertFU1.Y;
					Q_BulletHit[aero].Lvert[0][0].Z = Q_BulletHit[aero].VertFU1.Z;

						
					Q_BulletHit[aero].Lvert[0][1].u = 1;
					Q_BulletHit[aero].Lvert[0][1].v = 1;
					Q_BulletHit[aero].Lvert[0][1].X = Q_BulletHit[aero].VertFU2.X;
					Q_BulletHit[aero].Lvert[0][1].Y = Q_BulletHit[aero].VertFU2.Y;
					Q_BulletHit[aero].Lvert[0][1].Z = Q_BulletHit[aero].VertFU2.Z;

						
					Q_BulletHit[aero].Lvert[0][2].u = 1;
					Q_BulletHit[aero].Lvert[0][2].v = 0;
					Q_BulletHit[aero].Lvert[0][2].X = Q_BulletHit[aero].VertFU3.X;
					Q_BulletHit[aero].Lvert[0][2].Y = Q_BulletHit[aero].VertFU3.Y;
					Q_BulletHit[aero].Lvert[0][2].Z = Q_BulletHit[aero].VertFU3.Z;


					Q_BulletHit[aero].Lvert[0][3].u = 0;
					Q_BulletHit[aero].Lvert[0][3].v = 0;
					Q_BulletHit[aero].Lvert[0][3].X = Q_BulletHit[aero].VertFU4.X;
					Q_BulletHit[aero].Lvert[0][3].Y = Q_BulletHit[aero].VertFU4.Y;
					Q_BulletHit[aero].Lvert[0][3].Z = Q_BulletHit[aero].VertFU4.Z;



					//##Flash Horizontal##

					Q_BulletHit[aero].Lvert[1][0].u = 0;
					Q_BulletHit[aero].Lvert[1][0].v = 1;
					Q_BulletHit[aero].Lvert[1][0].X = Q_BulletHit[aero].VertFD1.X;
					Q_BulletHit[aero].Lvert[1][0].Y = Q_BulletHit[aero].VertFD1.Y;
					Q_BulletHit[aero].Lvert[1][0].Z = Q_BulletHit[aero].VertFD1.Z;

						
					Q_BulletHit[aero].Lvert[1][1].u = 1;
					Q_BulletHit[aero].Lvert[1][1].v = 1;
					Q_BulletHit[aero].Lvert[1][1].X = Q_BulletHit[aero].VertFD2.X;
					Q_BulletHit[aero].Lvert[1][1].Y = Q_BulletHit[aero].VertFD2.Y;
					Q_BulletHit[aero].Lvert[1][1].Z = Q_BulletHit[aero].VertFD2.Z;

						
					Q_BulletHit[aero].Lvert[1][2].u = 1;
					Q_BulletHit[aero].Lvert[1][2].v = 0;
					Q_BulletHit[aero].Lvert[1][2].X = Q_BulletHit[aero].VertFD3.X;
					Q_BulletHit[aero].Lvert[1][2].Y = Q_BulletHit[aero].VertFD3.Y;
					Q_BulletHit[aero].Lvert[1][2].Z = Q_BulletHit[aero].VertFD3.Z;


					Q_BulletHit[aero].Lvert[1][3].u = 0;
					Q_BulletHit[aero].Lvert[1][3].v = 0;
					Q_BulletHit[aero].Lvert[1][3].X = Q_BulletHit[aero].VertFD4.X;
					Q_BulletHit[aero].Lvert[1][3].Y = Q_BulletHit[aero].VertFD4.Y;
					Q_BulletHit[aero].Lvert[1][3].Z = Q_BulletHit[aero].VertFD4.Z;


					//##Flash Spinner##

					Q_BulletHit[aero].Lvert[2][0].u = 0;
					Q_BulletHit[aero].Lvert[2][0].v = 1;
					Q_BulletHit[aero].Lvert[2][0].X = Q_BulletHit[aero].VertS1.X;
					Q_BulletHit[aero].Lvert[2][0].Y = Q_BulletHit[aero].VertS1.Y;
					Q_BulletHit[aero].Lvert[2][0].Z = Q_BulletHit[aero].VertS1.Z;

						
					Q_BulletHit[aero].Lvert[2][1].u = 1;
					Q_BulletHit[aero].Lvert[2][1].v = 1;
					Q_BulletHit[aero].Lvert[2][1].X = Q_BulletHit[aero].VertS2.X;
					Q_BulletHit[aero].Lvert[2][1].Y = Q_BulletHit[aero].VertS2.Y;
					Q_BulletHit[aero].Lvert[2][1].Z = Q_BulletHit[aero].VertS2.Z;

						
					Q_BulletHit[aero].Lvert[2][2].u = 1;
					Q_BulletHit[aero].Lvert[2][2].v = 0;
					Q_BulletHit[aero].Lvert[2][2].X = Q_BulletHit[aero].VertS3.X;
					Q_BulletHit[aero].Lvert[2][2].Y = Q_BulletHit[aero].VertS3.Y;
					Q_BulletHit[aero].Lvert[2][2].Z = Q_BulletHit[aero].VertS3.Z;


					Q_BulletHit[aero].Lvert[2][3].u = 0;
					Q_BulletHit[aero].Lvert[2][3].v = 0;
					Q_BulletHit[aero].Lvert[2][3].X = Q_BulletHit[aero].VertS4.X;
					Q_BulletHit[aero].Lvert[2][3].Y = Q_BulletHit[aero].VertS4.Y;
					Q_BulletHit[aero].Lvert[2][3].Z = Q_BulletHit[aero].VertS4.Z;


					geWorld_AddPolyOnce(World, &Q_BulletHit[aero].Lvert[0][0], 4, BulHitFlash, Q_BulletHit[aero].Type, Q_BulletHit[aero].RenderFlags, Q_BulletHit[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_BulletHit[aero].Lvert[1][0], 4, BulHitFlash, Q_BulletHit[aero].Type, Q_BulletHit[aero].RenderFlags, Q_BulletHit[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_BulletHit[aero].Lvert[2][0], 4, BulHitFlashSpin, Q_BulletHit[aero].Type, Q_BulletHit[aero].RenderFlags, Q_BulletHit[aero].ScaleBIT);
					}

				aero++;
				}
			}
		}



	//########  - Jink Blast Cloud Control -  ########

	if(player.JinkBLAST > 0)
		{
		player.JinkBLAST -= 2;

		helly=0;
		while(helly < (player.JB_Power / 14))
			{
			//Set Radius
			player.JB_Radius = 50;

			player.JB_Origin = playact.ActorXform.Translation;
			player.JB_Pos = playact.ActorXform.Translation;
			player.JB_Pos.Y += 5;

			//#### Locate The Cloud
			player.JB_PlaceVec.X = (((float)rand() / 32767)-0.5)*2;
			player.JB_PlaceVec.Z = (((float)rand() / 32767)-0.5)*2;
			player.JB_PlaceVec.Y = 0;

			geVec3d_Normalize(&player.JB_PlaceVec);

			geVec3d_MA(&player.JB_Pos, player.JB_Radius, &player.JB_PlaceVec, &player.JB_Pos);

			//##### Find Trajectory
			geVec3d_Subtract(&player.JB_Pos, &player.JB_Origin, &player.JB_TraVec);

			//##### Register the Cloud
			Q_Cloud[NomCloud].CloudType = 7;

			Q_Cloud[NomCloud].CloudPos = player.JB_Pos;

			Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*80)+170;
			Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.23;

			Q_Cloud[NomCloud].CloudTraVec = player.JB_TraVec;

			//Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)*0.15) + 0.05;
			Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)*0.03) + player.JB_Speed;

			Q_Cloud[NomCloud].CloudMatCNT = 0;

			Q_Cloud[NomCloud].CloudLive = 1;

			NomCloud++;
			if(NomCloud > 4999) NomCloud = 0;

			helly++;
			}
		}

	//##### AI Jink Blast Control

	jet=0;
	while(jet < NomAI)
		{
		if(Forge[jet].LIVE == 1)
			{
			if(Forge[jet].JinkBLAST > 0)
				{
				Forge[jet].JinkBLAST -= 2;

				helly=0;
				while(helly < (Forge[jet].JB_Power / 14))
					{
					//Set Radius
					Forge[jet].JB_Radius = 50;

					Forge[jet].JB_Origin = Forge[jet].Avatar.ActorXform.Translation;
					Forge[jet].JB_Pos = Forge[jet].Avatar.ActorXform.Translation;
					Forge[jet].JB_Pos.Y += 5;

					//#### Locate The Cloud
					Forge[jet].JB_PlaceVec.X = (((float)rand() / 32767)-0.5)*2;
					Forge[jet].JB_PlaceVec.Z = (((float)rand() / 32767)-0.5)*2;
					Forge[jet].JB_PlaceVec.Y = 0;

					geVec3d_Normalize(&Forge[jet].JB_PlaceVec);

					geVec3d_MA(&Forge[jet].JB_Pos, Forge[jet].JB_Radius, &Forge[jet].JB_PlaceVec, &Forge[jet].JB_Pos);

					//##### Find Trajectory
					geVec3d_Subtract(&Forge[jet].JB_Pos, &Forge[jet].JB_Origin, &Forge[jet].JB_TraVec);

					//##### Register the Cloud
					Q_Cloud[NomCloud].CloudType = 7;

					Q_Cloud[NomCloud].CloudPos = Forge[jet].JB_Pos;

					Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*80)+170;
					Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.23;

					Q_Cloud[NomCloud].CloudTraVec = Forge[jet].JB_TraVec;

					//Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)*0.15) + 0.05;
					Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)*0.03) + Forge[jet].JB_Speed;

					Q_Cloud[NomCloud].CloudMatCNT = 0;

					Q_Cloud[NomCloud].CloudLive = 1;

					NomCloud++;
					if(NomCloud > 4999) NomCloud = 0;

					helly++;
					}
				}
			}
		jet++;
		}


	//########  - Jink Rush Cloud Control -  ########

	if(player.JinkRUSHCLOUD == 1 && 0)
		{
		//#### TEMP
		if(player.attackon == 0) player.JinkRUSHCLOUD = 0;

		geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE2", &BoneMat);
		geXForm3d_GetUp(&playact.ActorXform,&player.JRC_InVecBack);
		player.JRC_InVec = player.JRC_InVecBack;
		geVec3d_Inverse(&player.JRC_InVec);

		helly=0;
		while(helly < (player.JRC_Power * 20))
			{
			//Set Radius
			player.JRC_Radius = 30;

			player.JRC_Origin = BoneMat.Translation;
			player.JRC_Pos = BoneMat.Translation;
			geVec3d_MA(&player.JRC_Pos, 10, &player.JRC_InVec, &player.JRC_Pos);

			//#### Locate The Cloud
			player.JRC_PlaceVec.X = (((float)rand() / 32767)-0.5)*2;
			player.JRC_PlaceVec.Z = (((float)rand() / 32767)-0.5)*2;
			player.JRC_PlaceVec.Y = (((float)rand() / 32767)-0.5)*2;

			geVec3d_Normalize(&player.JRC_PlaceVec);

			player.JRC_SKIP = 0;

			if(geVec3d_DistanceBetween(&player.JRC_PlaceVec, &player.JRC_InVec) < 1.24	//0.9
				|| geVec3d_DistanceBetween(&player.JRC_PlaceVec, &player.JRC_InVecBack) < 1.25)
				{ player.JRC_SKIP = 1; }

			if(player.JRC_SKIP == 0)
				{
				geVec3d_MA(&player.JRC_Pos, player.JRC_Radius, &player.JRC_PlaceVec, &player.JRC_Pos);

				//##### Find Trajectory
				geVec3d_Subtract(&player.JRC_Pos, &player.JRC_Origin, &player.JRC_TraVec);

				//##### Register the Cloud
				Q_Cloud[NomCloud].CloudType = 7;

				Q_Cloud[NomCloud].CloudPos = player.JRC_Pos;

				Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*25)+230;
				Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.17;

				Q_Cloud[NomCloud].CloudTraVec = player.JRC_TraVec;

				Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)*0.025) + (player.JRC_Speed);

				Q_Cloud[NomCloud].CloudMatCNT = 0;

				Q_Cloud[NomCloud].CloudLive = 1;

				NomCloud++;
				if(NomCloud > 4999) NomCloud = 0;
				
				helly++;
				}
			}
		}

	//##### AI Jink Blast Control




	//########  - SMALL ENERGY ATTACKS -  ########//

if(NetworkOption != 1)
	{
	if(NomSEnergy > 0)
		{
		aero = 0;
		while(aero < NomSEnergy)
			{
			if(Q_SEnergy[aero].Live == 1 && aero < MaxNomSEnergy)	//Attack is live
				{
				if(Q_SEnergy[aero].Init == 1)
					{
					helly = 0;
					while(helly < Q_SEnergy[aero].NomActors)
						{
						geXForm3d_SetIdentity(&Q_SEnergy[aero].Matrix2);

						geXForm3d_RotateZ(&Q_SEnergy[aero].Matrix2, Q_SEnergy[aero].AngleZ);
						geXForm3d_RotateX(&Q_SEnergy[aero].Matrix2, Q_SEnergy[aero].AngleX);
						geXForm3d_RotateY(&Q_SEnergy[aero].Matrix2, Q_SEnergy[aero].AngleY);

						Q_SEnergy[aero].ActorFlag[helly].ActorXform = Q_SEnergy[aero].Matrix2;

						helly++;
						}

					geXForm3d_GetIn(&Q_SEnergy[aero].ActorFlag[0].ActorXform, &Q_SEnergy[aero].TraVec);
					}

				if(Q_SEnergy[aero].Init == 0)
					{
					Q_SEnergy[aero].Init = 1;

					Q_SEnergy[aero].NomActors = 5;
					Q_SEnergy[aero].Scale = 0.01;
					Q_SEnergy[aero].ScaleMode = 0;
					Q_SEnergy[aero].Alpha = 0;
					Q_SEnergy[aero].AlphaInc = 50;
					Q_SEnergy[aero].AlphaScale[0] = 1;
					Q_SEnergy[aero].AlphaScale[1] = 0.9;
					Q_SEnergy[aero].AlphaScale[2] = 0.8;
					Q_SEnergy[aero].AlphaScale[3] = 0.6;
					Q_SEnergy[aero].AlphaScale[4] = 0.3;
					Q_SEnergy[aero].Speed = 0;
					Q_SEnergy[aero].SpeedScale[0] = 0;
					Q_SEnergy[aero].SpeedScale[1] = 0.3;
					Q_SEnergy[aero].SpeedScale[2] = 0.6;
					Q_SEnergy[aero].SpeedScale[3] = 0.9;
					Q_SEnergy[aero].SpeedScale[4] = 1.2;
					Q_SEnergy[aero].LightColor.r = 255.0f;
					Q_SEnergy[aero].LightColor.g = 255.0f;
					Q_SEnergy[aero].LightColor.b = 200.0f;
					Q_SEnergy[aero].LightColor.a = 255.0f;
					Q_SEnergy[aero].Light = geWorld_AddLight(World);

					jet=0;
					while(jet < Q_SEnergy[aero].NomActors)
						{
						geActor_SetScale(Q_SEnergy[aero].ActorFlag[jet].Actor, 0.01f,0.01f,0.01f);
						geActor_SetLightingOptions(Q_SEnergy[aero].ActorFlag[jet].Actor, GE_FALSE, &goup, 0, 0, 0, 255, 255, 255, GE_FALSE, 0, NULL, GE_FALSE);
						geVec3d_Copy(&Q_SEnergy[aero].LightPos, &Q_SEnergy[aero].ActorFlag[jet].ActorXform.Translation);
						jet++;
						}

					//RESET MULTIPLE HIT COUNTER
					Q_SEnergy[aero].AntiMultHits[250] = 0;
					jet=0;
					while(jet < NomAI)
						{
						Q_SEnergy[jet].AntiMultHits[jet] = 0;
						jet++;
						}

					geSound3D_GetConfig(World,
						&player.ViewXForm,
						&Q_SEnergy[aero].LightPos,
						600.0f,
						2.0f,
						&Volume,
						&Pan,
						&Frequency);
					
					Q_SEnergy[aero].Sound = geSound_PlaySoundDef(SoundSys, S_Renzou, Volume, Pan, S_TimeScale, GE_TRUE);

					helly = 0;
					while(helly < Q_SEnergy[aero].NomActors)
						{
						geXForm3d_GetLeft(&Q_SEnergy[aero].Matrix, &Q_SEnergy[aero].Left);
						geXForm3d_GetUp(&Q_SEnergy[aero].Matrix, &Q_SEnergy[aero].Up);
						geXForm3d_GetIn(&Q_SEnergy[aero].Matrix, &Q_SEnergy[aero].In);

						geXForm3d_SetIdentity(&Q_SEnergy[aero].Matrix2);

						geXForm3d_GetUp(&Q_SEnergy[aero].Matrix2, &Q_SEnergy[aero].Up2);

						Q_SEnergy[aero].HeadLeft = Q_SEnergy[aero].Left;

						Q_SEnergy[aero].HeadLeft.Y = Q_SEnergy[aero].Up2.Y;

						Q_SEnergy[aero].Dist = geVec3d_DistanceBetween(&Q_SEnergy[aero].HeadLeft, &Q_SEnergy[aero].Up2);


						//IMP MIGHT NEED TO MOVE THIS LINE DOWN TO BELOW ROTATEZ

						//### Get Matrix Direction Vectors
						geXForm3d_GetIn(&Q_SEnergy[aero].Matrix2, &Q_SEnergy[aero].CURRTraVec);
						geXForm3d_GetLeft(&Q_SEnergy[aero].Matrix2, &Q_SEnergy[aero].LeftVec);

						//### Stabilise Trajectories
						
						geVec3d_Normalize(&Q_SEnergy[aero].TraVec);
						Q_SEnergy[aero].TraVec.Y = 0;
						
						geVec3d_Normalize(&Q_SEnergy[aero].CURRTraVec);
						Q_SEnergy[aero].CURRTraVec.Y = 0;

						//### Find Opposite Length
						Q_SEnergy[aero].TrajDIST = geVec3d_DistanceBetween(&Q_SEnergy[aero].TraVec, &Q_SEnergy[aero].CURRTraVec);
						Q_SEnergy[aero].TrajDIST /= 2;

						Q_SEnergy[aero].AngleY = asin( Q_SEnergy[aero].TrajDIST ) * 2;	//(PI/2);	//2

						//if(Q_SEnergy[aero].AngleY > 0.25) Q_SEnergy[aero].AngleY = 0.25;
						//if(Q_SEnergy[aero].AngleY < -0.25) Q_SEnergy[aero].AngleY = -0.25;

						//### Find distance between pure left and right to find turn direction
						geVec3d_Copy(&Q_SEnergy[aero].LeftVec, &Q_SEnergy[aero].Right);
						geVec3d_Inverse(&Q_SEnergy[aero].Right);

						Q_SEnergy[aero].ScanDistLeft = geVec3d_DistanceBetween(&Q_SEnergy[aero].TraVec, &Q_SEnergy[aero].LeftVec);
						Q_SEnergy[aero].ScanDistRight = geVec3d_DistanceBetween(&Q_SEnergy[aero].TraVec, &Q_SEnergy[aero].Right);

						if(Q_SEnergy[aero].ScanDistLeft > Q_SEnergy[aero].ScanDistRight) Q_SEnergy[aero].AngleY *= -1;

						Q_SEnergy[aero].AngleX = 0;

						if(Q_SEnergy[aero].Dist < 0.4)
							{
							Q_SEnergy[aero].ShotSpin = 0;
							Q_SEnergy[aero].AngleZ = 0;
							}
						else
							{
							Q_SEnergy[aero].ShotSpin = 1;
							Q_SEnergy[aero].AngleZ = Q_SEnergy[aero].Dist;
							}

						if(Q_SEnergy[aero].AngleZ > PI * 2) Q_SEnergy[aero].AngleZ = Q_SEnergy[aero].AngleZ - (PI*2);
						if(Q_SEnergy[aero].AngleZ < 0) Q_SEnergy[aero].AngleZ = (PI*2) - Q_SEnergy[aero].AngleZ;

						geXForm3d_RotateZ(&Q_SEnergy[aero].Matrix2, Q_SEnergy[aero].AngleZ);
						geXForm3d_RotateY(&Q_SEnergy[aero].Matrix2, Q_SEnergy[aero].AngleY);

						geXForm3d_SetIdentity(&Q_SEnergy[aero].ActorFlag[helly].ActorXform);
						Q_SEnergy[aero].ActorFlag[helly].ActorXform = Q_SEnergy[aero].Matrix2;

						helly++;
						}

					geXForm3d_GetIn(&Q_SEnergy[aero].ActorFlag[0].ActorXform, &Q_SEnergy[aero].TraVec);
					}

					//Set Alpha
				if(Q_SEnergy[aero].Alpha + (Q_SEnergy[aero].AlphaInc*TimeScale) <= 255) Q_SEnergy[aero].Alpha += Q_SEnergy[aero].AlphaInc*TimeScale;
				else Q_SEnergy[aero].Alpha = 255;

					//Set Speed
				if(Q_SEnergy[aero].Speed + (Q_SEnergy[aero].SpeedInc*TimeScale) <= Q_SEnergy[aero].SpeedMax) Q_SEnergy[aero].Speed += Q_SEnergy[aero].SpeedInc*TimeScale;
				else Q_SEnergy[aero].Speed = Q_SEnergy[aero].SpeedMax;

				//##### Scale Control #####
				if(Q_SEnergy[aero].ScaleMode == 0)
					{
					if(Q_SEnergy[aero].Scale + (Q_SEnergy[aero].ScaleInc*TimeScale) <= Q_SEnergy[aero].ScaleMax) Q_SEnergy[aero].Scale += Q_SEnergy[aero].ScaleInc*TimeScale;
					else
						{
						Q_SEnergy[aero].Scale = Q_SEnergy[aero].ScaleMax;
						Q_SEnergy[aero].ScaleMode = 1;
						}
					}
				else
					{
					Q_SEnergy[aero].RandomInput = ((((float)rand() / 32767) - 0.5) / 10) * TimeScale;
					Q_SEnergy[aero].Scale = Q_SEnergy[aero].ScaleMax + Q_SEnergy[aero].RandomInput;
					}

				if(Q_SEnergy[aero].TargetLock == 1)
					{
					//#### Show Target Locks
					if(Q_SEnergy[aero].DisplayAlpha - 15 > 120) Q_SEnergy[aero].DisplayAlpha -= 15;
					else Q_SEnergy[aero].DisplayAlpha = 120;

					if(Q_SEnergy[aero].DisplayColor - 25 > 0) Q_SEnergy[aero].DisplayColor -= 25;
					else Q_SEnergy[aero].DisplayColor = 0;

					if(Q_SEnergy[aero].DisplayScale + 0.05 < 0.75) Q_SEnergy[aero].DisplayScale += 0.06;
					else Q_SEnergy[aero].DisplayScale = 0.75;
					
					if(Q_SEnergy[aero].ActorID == 250)
						{
						player.LaserLV.a = Q_SEnergy[aero].DisplayAlpha;
						player.LaserLV.r = 255;
						player.LaserLV.g = Q_SEnergy[aero].DisplayColor;
						player.LaserLV.b = 0;
						player.LaserLV.X = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.X;
						player.LaserLV.Y = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Y + 65;
						player.LaserLV.Z = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Z;

						geWorld_AddPolyOnce(World, &player.LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_SEnergy[aero].DisplayScale);
						}
					else
						{
						if(Q_SEnergy[aero].TargetID == 250)
							{
							Forge[Q_SEnergy[aero].ActorID].LaserLV.a = Q_SEnergy[aero].DisplayAlpha;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.r = 255;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.g = Q_SEnergy[aero].DisplayColor;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.b = 0;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.X = playact.ActorXform.Translation.X;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Y = playact.ActorXform.Translation.Y + 65;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Z = playact.ActorXform.Translation.Z;

							geWorld_AddPolyOnce(World, &Forge[Q_SEnergy[aero].ActorID].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_SEnergy[aero].DisplayScale);
							}
						else
							{
							Forge[Q_SEnergy[aero].ActorID].LaserLV.a = Q_SEnergy[aero].DisplayAlpha;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.r = 255;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.g = Q_SEnergy[aero].DisplayColor;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.b = 0;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.X = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.X;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Y = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Y + 65;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Z = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Z;

							geWorld_AddPolyOnce(World, &Forge[Q_SEnergy[aero].ActorID].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_SEnergy[aero].DisplayScale);
							}
						}

					if(Q_SEnergy[aero].TargetID == 250)
						{
						Q_SEnergy[aero].TargetVec = playact.ActorXform.Translation;
						Q_SEnergy[aero].TargetVec.Y += 65;
						}
					else
						{
						Q_SEnergy[aero].TargetVec = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation;
						Q_SEnergy[aero].TargetVec.Y += 65;
						}

					//### Build Ghost Matrix
					geXForm3d_SetIdentity(&Q_SEnergy[aero].Matrix3);

					geXForm3d_RotateX(&Q_SEnergy[aero].Matrix3, Q_SEnergy[aero].AngleX);
					geXForm3d_RotateY(&Q_SEnergy[aero].Matrix3, Q_SEnergy[aero].AngleY);

					geVec3d_Subtract(&Q_SEnergy[aero].TargetVec, &Q_SEnergy[aero].LightPos, &Q_SEnergy[aero].TargetVec);
					geVec3d_Normalize(&Q_SEnergy[aero].TargetVec);
					geVec3d_Scale(&Q_SEnergy[aero].TargetVec, 150, &Q_SEnergy[aero].TargetVec);

					geXForm3d_GetLeft(&Q_SEnergy[aero].Matrix3, &Q_SEnergy[aero].Left);
					geXForm3d_GetUp(&Q_SEnergy[aero].Matrix3, &Q_SEnergy[aero].Up);
					geXForm3d_GetIn(&Q_SEnergy[aero].ActorFlag[0].ActorXform, &Q_SEnergy[aero].ForVec);

					Q_SEnergy[aero].LeftVec = Q_SEnergy[aero].Left;
					Q_SEnergy[aero].UpVec = Q_SEnergy[aero].Up;
					geVec3d_Inverse(&Q_SEnergy[aero].UpVec);

					geVec3d_Scale(&Q_SEnergy[aero].ForVec, 150, &Q_SEnergy[aero].ForVec);
					geVec3d_Scale(&Q_SEnergy[aero].LeftVec, 150, &Q_SEnergy[aero].LeftVec);
					geVec3d_Scale(&Q_SEnergy[aero].UpVec, 150, &Q_SEnergy[aero].UpVec);

					if(Q_SEnergy[aero].ShotSpin == 0)
						{
						Q_SEnergy[aero].AngleZ += 0.035 * TimeScale;
						}

					if(Q_SEnergy[aero].ShotSpin == 1)
						{
						Q_SEnergy[aero].AngleZ += 0.17 * TimeScale;
						}

					if(Q_SEnergy[aero].AngleZ > PI * 2) Q_SEnergy[aero].AngleZ = Q_SEnergy[aero].AngleZ - (PI*2);
					if(Q_SEnergy[aero].AngleZ < 0) Q_SEnergy[aero].AngleZ = (PI*2) - Q_SEnergy[aero].AngleZ;

					//### Renzou Actors are upright
					if( ((Q_SEnergy[aero].AngleZ > (PI + (PI/2))) && (Q_SEnergy[aero].AngleZ < (PI*2))) || ((Q_SEnergy[aero].AngleZ < (PI/2)) && (Q_SEnergy[aero].AngleZ > 0)) )
						{
						if( (Q_SEnergy[aero].AngleZ > (PI + (PI/2))) && (Q_SEnergy[aero].AngleZ < (PI*2)) )
							{
							Q_SEnergy[aero].AngYIncFactor = ((Q_SEnergy[aero].AngleZ - (PI + (PI/2))) / (PI/2)) * Q_SEnergy[aero].Const_AngleInc;
							Q_SEnergy[aero].AngXIncFactor = (1 - ((Q_SEnergy[aero].AngleZ - (PI + (PI/2))) / (PI/2))) * Q_SEnergy[aero].Const_AngleInc;
							}

						if( (Q_SEnergy[aero].AngleZ < (PI/2)) && (Q_SEnergy[aero].AngleZ > 0) )
							{
							Q_SEnergy[aero].AngYIncFactor = (1 - (Q_SEnergy[aero].AngleZ / (PI/2))) * Q_SEnergy[aero].Const_AngleInc;
							Q_SEnergy[aero].AngXIncFactor = (Q_SEnergy[aero].AngleZ / (PI/2)) * Q_SEnergy[aero].Const_AngleInc;
							}
						}
					else  //### Renzou Actors are up-side-down
						{
						if( (Q_SEnergy[aero].AngleZ > (PI/2)) && (Q_SEnergy[aero].AngleZ < PI) )
							{
							Q_SEnergy[aero].AngYIncFactor = ((Q_SEnergy[aero].AngleZ - (PI/2)) / (PI/2)) * Q_SEnergy[aero].Const_AngleInc;
							Q_SEnergy[aero].AngXIncFactor = (1- ((Q_SEnergy[aero].AngleZ - (PI/2)) / (PI/2))) * Q_SEnergy[aero].Const_AngleInc;
							}

						if( (Q_SEnergy[aero].AngleZ > PI) && (Q_SEnergy[aero].AngleZ < (PI + (PI/2))) )
							{
							Q_SEnergy[aero].AngYIncFactor = (1 - ((Q_SEnergy[aero].AngleZ) / (PI/2))) * Q_SEnergy[aero].Const_AngleInc;
							Q_SEnergy[aero].AngXIncFactor = ((Q_SEnergy[aero].AngleZ) / (PI/2)) * Q_SEnergy[aero].Const_AngleInc;
							}
						}

					//Work Out Turn Angles
					Q_SEnergy[aero].TargetVecSTR = Q_SEnergy[aero].TargetVec;

					Q_SEnergy[aero].TargetVec.Y = Q_SEnergy[aero].ForVec.Y;
					geVec3d_Subtract(&Q_SEnergy[aero].ForVec, &Q_SEnergy[aero].TargetVec, &Q_SEnergy[aero].ScanTurnVec);
					Q_SEnergy[aero].ScanTurnAngLR = geVec3d_Length(&Q_SEnergy[aero].ScanTurnVec);
					Q_SEnergy[aero].ScanTurnAngLR /= ((Q_SEnergy[aero].Accuracy * 10000) * (Q_SEnergy[aero].Const_AngleInc - Q_SEnergy[aero].AngYIncFactor));	//500
					//Q_SEnergy[aero].ScanTurnAngLR = (Q_SEnergy[aero].ScanTurnAngLR / Q_SEnergy[aero].ScanTurnAngLR) * (Q_SEnergy[aero].Const_AngleInc - Q_SEnergy[aero].AngYIncFactor);

					//Work Out Up Down Angles
					Q_SEnergy[aero].TargetVec = Q_SEnergy[aero].TargetVecSTR;

					Q_SEnergy[aero].TargetVec.X = Q_SEnergy[aero].ForVec.X;
					Q_SEnergy[aero].TargetVec.Z = Q_SEnergy[aero].ForVec.Z;
					geVec3d_Subtract(&Q_SEnergy[aero].ForVec, &Q_SEnergy[aero].TargetVec, &Q_SEnergy[aero].ScanTurnVec);
					Q_SEnergy[aero].ScanTurnAngUD = geVec3d_Length(&Q_SEnergy[aero].ScanTurnVec);
					Q_SEnergy[aero].ScanTurnAngUD /= ((Q_SEnergy[aero].Accuracy * 10000) * (Q_SEnergy[aero].Const_AngleInc - Q_SEnergy[aero].AngXIncFactor));	//500
					//Q_SEnergy[aero].ScanTurnAngUD = (Q_SEnergy[aero].ScanTurnAngUD / Q_SEnergy[aero].ScanTurnAngUD) * (Q_SEnergy[aero].Const_AngleInc - Q_SEnergy[aero].AngXIncFactor);

					Q_SEnergy[aero].TargetVec = Q_SEnergy[aero].TargetVecSTR;
					
					//### Check Distance between Pure Left and Right to work out direction of Turn
					geVec3d_Copy(&Q_SEnergy[aero].LeftVec, &Q_SEnergy[aero].Right);
					geVec3d_Copy(&Q_SEnergy[aero].UpVec, &Q_SEnergy[aero].RDown);
					geVec3d_Inverse(&Q_SEnergy[aero].Right);
					geVec3d_Inverse(&Q_SEnergy[aero].RDown);

					Q_SEnergy[aero].ScanDistLeft = geVec3d_DistanceBetween(&Q_SEnergy[aero].TargetVec, &Q_SEnergy[aero].LeftVec);
					Q_SEnergy[aero].ScanDistRight = geVec3d_DistanceBetween(&Q_SEnergy[aero].TargetVec, &Q_SEnergy[aero].Right);
					Q_SEnergy[aero].ScanDistUp = geVec3d_DistanceBetween(&Q_SEnergy[aero].TargetVec, &Q_SEnergy[aero].UpVec);
					Q_SEnergy[aero].ScanDistDown = geVec3d_DistanceBetween(&Q_SEnergy[aero].TargetVec, &Q_SEnergy[aero].RDown);

					if(Q_SEnergy[aero].ScanDistLeft > Q_SEnergy[aero].ScanDistRight) Q_SEnergy[aero].ScanTurnAngLR *= -1;
					if(Q_SEnergy[aero].ScanDistUp < Q_SEnergy[aero].ScanDistDown) Q_SEnergy[aero].ScanTurnAngUD *= -1;

					if(Q_SEnergy[aero].ScanTurnAngLR > Q_SEnergy[aero].Accuracy) Q_SEnergy[aero].ScanTurnAngLR = Q_SEnergy[aero].Accuracy;
					if(Q_SEnergy[aero].ScanTurnAngLR < -Q_SEnergy[aero].Accuracy) Q_SEnergy[aero].ScanTurnAngLR = -Q_SEnergy[aero].Accuracy;
					if(Q_SEnergy[aero].ScanTurnAngUD > Q_SEnergy[aero].Accuracy) Q_SEnergy[aero].ScanTurnAngUD = Q_SEnergy[aero].Accuracy;
					if(Q_SEnergy[aero].ScanTurnAngUD < -Q_SEnergy[aero].Accuracy) Q_SEnergy[aero].ScanTurnAngUD = -Q_SEnergy[aero].Accuracy;

					Q_SEnergy[aero].AngleX += (Q_SEnergy[aero].ScanTurnAngUD * TimeScale);

					if(Q_SEnergy[aero].AngleX > PI*2) Q_SEnergy[aero].AngleX = Q_SEnergy[aero].AngleX - (PI*2);
					if(Q_SEnergy[aero].AngleX < 0) Q_SEnergy[aero].AngleX = (PI*2) - Q_SEnergy[aero].AngleX;

					Q_SEnergy[aero].AngleY += (Q_SEnergy[aero].ScanTurnAngLR * TimeScale);

					if(Q_SEnergy[aero].AngleY > PI*2) Q_SEnergy[aero].AngleY = Q_SEnergy[aero].AngleY - (PI*2);
					if(Q_SEnergy[aero].AngleY < 0) Q_SEnergy[aero].AngleY = (PI*2) - Q_SEnergy[aero].AngleY;
					}

				if(Q_SEnergy[aero].TargetLock == 2 && Q_SEnergy[aero].DisplayAlpha > 0)
					{
					//#### Show Target Locks
					if(Q_SEnergy[aero].DisplayAlpha - 20 > 0) Q_SEnergy[aero].DisplayAlpha -= 20;
					else Q_SEnergy[aero].DisplayAlpha = 0;

					if(Q_SEnergy[aero].DisplayColor - 25 > 0) Q_SEnergy[aero].DisplayColor -= 25;
					else Q_SEnergy[aero].DisplayColor = 0;

					if(Q_SEnergy[aero].DisplayScale + 0.05 < 0.01) Q_SEnergy[aero].DisplayScale += 0.01;
					else Q_SEnergy[aero].DisplayScale = 0.01;

					if(Q_SEnergy[aero].ActorID == 250)
						{
						player.LaserLV.a = Q_SEnergy[aero].DisplayAlpha;
						player.LaserLV.r = 255;
						player.LaserLV.g = Q_SEnergy[aero].DisplayColor;
						player.LaserLV.b = 0;
						player.LaserLV.X = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.X;
						player.LaserLV.Y = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Y + 65;
						player.LaserLV.Z = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Z;

						geWorld_AddPolyOnce(World, &player.LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_SEnergy[aero].DisplayScale);
						}
					else
						{
						if(Q_SEnergy[aero].TargetID == 250)
							{
							Forge[Q_SEnergy[aero].ActorID].LaserLV.a = Q_SEnergy[aero].DisplayAlpha;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.r = 255;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.g = Q_SEnergy[aero].DisplayColor;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.b = 0;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.X = playact.ActorXform.Translation.X;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Y = playact.ActorXform.Translation.Y + 65;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Z = playact.ActorXform.Translation.Z;

							geWorld_AddPolyOnce(World, &Forge[Q_SEnergy[aero].ActorID].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_SEnergy[aero].DisplayScale);
							}
						else
							{
							Forge[Q_SEnergy[aero].ActorID].LaserLV.a = Q_SEnergy[aero].DisplayAlpha;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.r = 255;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.g = Q_SEnergy[aero].DisplayColor;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.b = 0;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.X = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.X;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Y = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Y + 65;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Z = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Z;

							geWorld_AddPolyOnce(World, &Forge[Q_SEnergy[aero].ActorID].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_SEnergy[aero].DisplayScale);
							}
						}
					}

				if(Q_SEnergy[aero].TargetLock == 2)
					{
					//Set Scale
					if(Q_SEnergy[aero].Scale - (0.05 * TimeScale) > 0) Q_SEnergy[aero].Scale -= (0.05 * TimeScale);
					else
						{
						Q_SEnergy[aero].Scale = 0;
						Q_SEnergy[aero].Live = 0;
						if(Q_SEnergy[aero].Light != NULL) geWorld_RemoveLight(World, Q_SEnergy[aero].Light);
						if(Q_SEnergy[aero].Sound != NULL) geSound_StopSound(SoundSys, Q_SEnergy[aero].Sound);

						helly = 0;
						while(helly < Q_SEnergy[aero].NomActors)
							{
							geVec3d_Copy(&Origon, &Q_SEnergy[aero].ActorFlag[helly].ActorXform.Translation);
							geActor_ClearPose(Q_SEnergy[aero].ActorFlag[helly].Actor, &Q_SEnergy[aero].ActorFlag[helly].ActorXform);
							helly++;
							}

						//### Energy Array Reorder
						K = aero;
						while(K < NomSEnergy - 1)
							{
							Q_SEnergy[K] = Q_SEnergy[K+1];
							K++;
							}

						NomSEnergy--;
						}
					}

					//Set Light Power and Move the Light
				Q_SEnergy[aero].LOldPos = Q_SEnergy[aero].LightPos;
				geVec3d_MA(&Q_SEnergy[aero].LightPos, Q_SEnergy[aero].Speed*TimeScale, &Q_SEnergy[aero].TraVec, &Q_SEnergy[aero].LightPos);

				geWorld_SetLightAttributes(World, Q_SEnergy[aero].Light, &Q_SEnergy[aero].LightPos, &Q_SEnergy[aero].LightColor, Q_SEnergy[aero].Scale * 150, GE_FALSE);

				helly = 0;
				while(helly < Q_SEnergy[aero].NomActors)
					{
					geActor_SetScale(Q_SEnergy[aero].ActorFlag[helly].Actor, Q_SEnergy[aero].Scale, Q_SEnergy[aero].Scale, Q_SEnergy[aero].Scale);

					geActor_SetAlpha(Q_SEnergy[aero].ActorFlag[helly].Actor, Q_SEnergy[aero].Alpha * Q_SEnergy[aero].AlphaScale[helly]);

					geVec3d_Copy(&Q_SEnergy[aero].LightPos, &Q_SEnergy[aero].ActorFlag[helly].ActorXform.Translation);
					geVec3d_MA(&Q_SEnergy[aero].LightPos, -(Q_SEnergy[aero].Speed * Q_SEnergy[aero].SpeedScale[helly]), &Q_SEnergy[aero].TraVec, &Q_SEnergy[aero].ActorFlag[helly].ActorXform.Translation);

					geActor_ClearPose(Q_SEnergy[aero].ActorFlag[helly].Actor, &Q_SEnergy[aero].ActorFlag[helly].ActorXform);
					helly++;
					}


				geSound3D_GetConfig(World,
							&player.ViewXForm,
							&Q_SEnergy[aero].LightPos,
							600.0f,
							2.0f,
							&Volume,
							&Pan,
							&Frequency);
				
				geSound_ModifySound(SoundSys, Q_SEnergy[aero].Sound, Volume, Pan, S_TimeScale);

				Q_SEnergy[aero].LOldPos = Q_SEnergy[aero].LightPos;
				geVec3d_MA(&Q_SEnergy[aero].LightPos, Q_SEnergy[aero].Speed*TimeScale, &Q_SEnergy[aero].TraVec, &Q_SEnergy[aero].LightPos);


				//######===-- Q_OBJECT COLLISION DETECTION --===#######
				SCRAM=0;
				while(SCRAM < NomQObject)
					{
					if(QObject[SCRAM].LIVE == 1)
						{
						//### COLLISION CHECK
						if(QObject[SCRAM].StrengthBANK > 0)
							{
							switch(QObject[SCRAM].CollisionTYPE)
								{
								case 0:
									{
									TESTDist = 100;
									TESTPosS = Q_SEnergy[aero].LOldPos;
									TESTPosE = Q_SEnergy[aero].LightPos;
									while(TESTDist > 1)
										{
										geVec3d_MA(&TESTPosS, 1, &Q_SEnergy[aero].TraVec, &TESTPosS);

										TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &QObject[SCRAM].Pos);

										TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

										if(TESTShieldDIST < QObject[SCRAM].Scale)
											{
											//Set Player Enemy Display to correct enemy
											if(Q_SEnergy[aero].ActorID == 250)
												{
												player.HB_LastAvatarHitID = (SCRAM + 1) * -1;
												}
											else
												{
												Forge[Q_SEnergy[aero].ActorID].HB_LastAvatarHitID = (SCRAM + 1) * -1;
												}

											//### Block Hit Flash
											Q_MeleeHit[NomMelHit].Live = 1;
											Q_MeleeHit[NomMelHit].INIT = 0;
											Q_MeleeHit[NomMelHit].HitTYPE = 1;
											Q_MeleeHit[NomMelHit].HitRESULT = 9;
																				//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
											Q_MeleeHit[NomMelHit].Impact = TESTPosS;	//Point of impact in world space
											Q_MeleeHit[NomMelHit].Bonenum = detcnt;						//Number index of the bone hit
											Q_MeleeHit[NomMelHit].AttboneXF = Q_SEnergy[aero].ActorFlag[0].ActorXform;
											Q_MeleeHit[NomMelHit].HitPowerPercent = 1;
											Q_MeleeHit[NomMelHit].BloodAmt = 0;
											
											//Expandro3D Struct
											Q_MeleeHit[NomMelHit].Expandro3D.Radius = 60;					//Switch 0 = Off !0 = On

											if(Q_SEnergy[aero].ActorID == 250)
												{
												Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 200 * ((player.CDATA->CharDATA[player.CDATA->CurrCHAR].AttackSKILL[28].Damage/3500)+0.3);				//Max Radius
												}
											else
												{
												Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 200 * ((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3);				//Max Radius
												}

											Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 5;
											Q_MeleeHit[NomMelHit].Expandro3D.Red = 200;
											Q_MeleeHit[NomMelHit].Expandro3D.Blue = 60;
											Q_MeleeHit[NomMelHit].Expandro3D.Green = 200;

												//Increment number of MeleeHits
											NomMelHit += 1;

											if(Q_SEnergy[aero].ActorID == 250)
												{
												if(Q_SEnergy[aero].TargetLock == 1)
													{
													if(Q_SEnergy[aero].TargetLock == 1) Q_SEnergy[aero].TargetLock = 2;
													QObject[SCRAM].StrengthBANK -= (80*((player.CDATA->CharDATA[player.CDATA->CurrCHAR].AttackSKILL[28].Damage/3500)+0.3));
													}
												}
											else
												{
												if(Q_SEnergy[aero].TargetLock == 1)
													{
													if(Q_SEnergy[aero].TargetLock == 1) Q_SEnergy[aero].TargetLock = 2;
													QObject[SCRAM].StrengthBANK -= (80*((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3));
													}
												}

											TESTPosS = TESTPosE;
											TESTDist = 0;
											}
										}

									}break;
								}
							}
						}

					SCRAM++;
					}


				if(Q_SEnergy[aero].ActorID == 250)	//Player Fired Projectile
					{
					//##### AVATAR SHIELD COLLIDE TEST
					SCRAM=0;
					while(SCRAM < NomAI)
						{
						if(Forge[SCRAM].LIVE == 1)
							{
							if((Forge[SCRAM].Cleric.ShieldAlpha > 0) && (player.Team != Forge[SCRAM].Team) && (Forge[SCRAM].HB_Energy > 0))
								{
								TESTDist = 100;
								TESTPosS = Q_SEnergy[aero].LOldPos;
								TESTPosE = Q_SEnergy[aero].LightPos;
								while(TESTDist > 1)
									{
									geVec3d_MA(&TESTPosS, 1, &Q_SEnergy[aero].TraVec, &TESTPosS);

									TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

									TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

									if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
										{
										TESTPosS = TESTPosE;
										TESTDist = 0;

										jet=0;
										while((jet < 1) && (NomPntSprite < 24998))
											{
											Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
											Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
											Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
											Q_PntSprite[NomPntSprite].PartType = 8;

											Q_PntSprite[NomPntSprite].IR = 255;
											Q_PntSprite[NomPntSprite].IG = 255;
											Q_PntSprite[NomPntSprite].IB = 255;

											Q_PntSprite[NomPntSprite].Alpha = 100;
											Q_PntSprite[NomPntSprite].Speed = 0.4;
											Q_PntSprite[NomPntSprite].Pos = TESTPosS;

											Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
											Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
											Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

											Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
											Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
											Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

											Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

											Q_PntSprite[NomPntSprite].Live = 1;

											NomPntSprite++;
											jet++;
											}

										if(Q_SEnergy[aero].TargetLock == 1)
											{
											if(Q_SEnergy[aero].TargetLock == 1) Q_SEnergy[aero].TargetLock = 2;
											Forge[SCRAM].HB_Energy -= (80*((player.CDATA->CharDATA[player.CDATA->CurrCHAR].AttackSKILL[28].Damage/3500)+0.3)) / (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Duration/5000));
											}
										}
									}
								}
							}
						SCRAM++;
						}


					if(geWorld_Collision(World,
						&Q_SEnergy[aero].ActorFlag[0].Mins,
						&Q_SEnergy[aero].ActorFlag[0].Maxs,
						&Q_SEnergy[aero].LOldPos,
						&Q_SEnergy[aero].LightPos,
						GE_CONTENTS_CANNOT_OCCUPY,
						GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
						0xffffffff, NULL, NULL,
						&Q_SEnergy[aero].ActorFlag[0].Collision))
						{
						if(Q_SEnergy[aero].ActorFlag[0].Collision.Actor != NULL)
							{
							if(Q_SEnergy[aero].ActorFlag[0].Collision.Actor != playact.Actor
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[0].Actor		//**********
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[1].Actor		//Here Set collide flags on actor creation and shorten the 'if'
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[2].Actor		//******
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[3].Actor
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[4].Actor
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag != 251)
								{	//#####- Hit Avatar -#####
								if(Q_SEnergy[aero].AntiMultHits[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] < 1)
									{
									Q_SEnergy[aero].AntiMultHits[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag]++;
							
										//##### Check Target Lock
									if(Q_SEnergy[aero].TargetLock == 1)
										{ if(Q_SEnergy[aero].TargetID == Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag) Q_SEnergy[aero].TargetLock = 2; }

									//#### Energy Attack Power
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.ATTACKPOWER = ((player.CDATA->CharDATA[player.CDATA->CurrCHAR].AttackSKILL[28].Power / 5000) * 10) + 1;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.ATTACKPOWER *= ((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.AggPower / 100);

									//######## Aggressive to defensive power check
									if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Block == 1 && Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHeight == 3)
										{
										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK -= ((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.AggPower * (float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.ATTACKPOWER);

										if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK < 0) Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK = 0;

										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.PBTIMER = TIME;
										}

									//### Check to Determine if Avatar is Blocking
									if((!(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Block == 1 && Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHeight == 3) || (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK <= 0)) && (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Dead == 0))
										{
										//### Check if Avatar Is Deflecting
										if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].DeflectLethal == 1)
											{
											Q_MeleeHit[NomMelHit].Live = 1;
											Q_MeleeHit[NomMelHit].INIT = 0;
											Q_MeleeHit[NomMelHit].HitTYPE = 3;
											Q_MeleeHit[NomMelHit].HitRESULT = 8;
																				//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
											Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
											Q_MeleeHit[NomMelHit].Bonenum = 0;						//Number index of the bone hit

											Q_MeleeHit[NomMelHit].HitPowerPercent = 1;

											Q_MeleeHit[NomMelHit].BloodAmt = 0;

											//Expandro3D Struct
											Q_MeleeHit[NomMelHit].Expandro3D.Radius = 0.01;					//Switch 0 = Off !0 = On
											Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 100;				//Max Radius
											Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 200;

											Q_MeleeHit[NomMelHit].Expandro3D.Red = 255;
											Q_MeleeHit[NomMelHit].Expandro3D.Blue = 150;
											Q_MeleeHit[NomMelHit].Expandro3D.Green = 150;

											NomMelHit++;

											Q_SEnergy[aero].TraVec.X = ((((float)rand() / 32767)-0.5)*2);
											Q_SEnergy[aero].TraVec.Z = ((((float)rand() / 32767)-0.5)*2);

											Q_SEnergy[aero].TargetLock = 2;
											Q_SEnergy[aero].Init = 3;
											}//END Deflect
										else
											{
											Q_MeleeHit[NomMelHit].Live = 1;
											Q_MeleeHit[NomMelHit].INIT = 0;
											Q_MeleeHit[NomMelHit].HitTYPE = 11;
											Q_MeleeHit[NomMelHit].HitRESULT = 7;
											Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
											Q_MeleeHit[NomMelHit].AttboneXF = Q_SEnergy[aero].ActorFlag[0].ActorXform;
											Q_MeleeHit[NomMelHit].Bonenum = 0;
											Q_MeleeHit[NomMelHit].HitPowerPercent = 1;

												//# Deduct Health
											player.HB_LastAvatarHitID = Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag;
											/*if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_HReduceON == 0)*/ Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceOld = Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health;

													//Rework Needed here very messy , plus add a random factor
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health -= 70*((player.CDATA->CharDATA[player.CDATA->CurrCHAR].AttackSKILL[28].Damage/3500)+0.3) * ((1 - (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Constitution / 400)) + 0.75);
											if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health < 0) Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health = 0;

											//### Experience Storage
											player.AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] += 70*((player.CDATA->CharDATA[player.CDATA->CurrCHAR].AttackSKILL[28].Damage/3500)+0.3) * ((1 - (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Constitution / 400)) + 0.75);


											if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health <= 0)
												{
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health = 0;

												Q_MeleeHit[NomMelHit].HitRESULT = 17;

												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Dead = 1;

												if((player.AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000)) > 0)
													{
													//### Add Experience to attacking AVATAR
													player.CDATA->CharDATA[player.CDATA->CurrCHAR].UnusedXP += player.AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000);

													player.MSG_XPON = 1;
													player.MSG_XPInit = 0;
													player.MSG_XPScreenDIST = 0;
													player.MSG_XPScreenDistINC = 50;
													player.MSG_XPScreenDIR = 0;
													player.MSG_XpInc = player.AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000);
													}

												//##### Find KO Owner
												UniversalDMGSTR = 0;
												
												if(player.AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

												jet = 0;
												while(jet < NomAI)
													{
													if(Forge[jet].LIVE == 1)
														{
														if(Forge[jet].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
														}
													jet++;
													}

												if(DeliverKOID == 250)
													{
													//### Create Item for attacking Avatar
													player.DecFinger = ((float)rand() / 32767) * 6;

													if(player.DecFinger <= 100 * (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level/1000))
														{
														player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level);
														player.MSG_ITEMON = 1;
														player.MSG_ITEMInit = 0;
														player.MSG_ITEMScreenDIST = 800;
														player.MSG_ITEMScreenDistINC = 17;
														player.MSG_ITEMScreenDIR = 0;
														}

													//SET Knockout
													KnockOutFLAG = 1;
													KnockOutTIMER = 0;
													KnockOutCNT = 0;
													KnockOutINIT = 0;
													KnockOutHEIGHT = 0;
													}


												//##### Check All Active Avatars for XP and KO's
												SCRAM = 0;
												while(SCRAM < NomAI)
													{
													if(Forge[SCRAM].LIVE == 1)
														{
														if((Forge[SCRAM].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000)) > 0)
															{
															//### Add Experience to attacking AVATAR
															player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000);

															//### Force Net player to update (Net Play Only)
															if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
															}

														if(DeliverKOID == SCRAM)
															{
															//### Create Item for attacking Avatar
															Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

															if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level/1000))
																{
																//### CREATE NEW ITEM
																if(Forge[SCRAM].NETPLAYERFLAG == 1)
																	{
																	Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level);

																	Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																	}
																else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level);
																}
															}
														}
													SCRAM++;
													}


												//####### DEACTIVATE ITEM ATTRIBUTES
												Q_DeactivateItems();

												//### Write out CHARDATA
												WriteNEWCharacterData(player.CDATA);

												//####### REACTIVATE ITEM ATTRIBUTES
												Q_ActivateItems();
												}



											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_HReduceON = 1;
											
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceHInc = 10;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceHeight = 573;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceRectColor.r = 255;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceRectColor.g = 0;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceRectColor.b = 0;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceRectColor.a = 255;

											if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[1].Actor != NULL)
												{
												geVec3d_Copy(&Origon, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[1].ActorXform.Translation);
												geVec3d_Copy(&Origon, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[2].ActorXform.Translation);
												geVec3d_Copy(&Origon, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[3].ActorXform.Translation);
												geActor_ClearPose(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[1].Actor, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[1].ActorXform);
												geActor_ClearPose(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[2].Actor, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[2].ActorXform);
												geActor_ClearPose(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[3].Actor, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[3].ActorXform);
												}

											Q_MeleeHit[NomMelHit].BloodAmt = ((player.CDATA->CharDATA[player.CDATA->CurrCHAR].AttackSKILL[28].Damage/3500)+0.3) * 20;

											//Expandro3D Struct
											Q_MeleeHit[NomMelHit].Expandro3D.Radius = 0.01;					//Switch 0 = Off !0 = On
											Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 350 * ((player.CDATA->CharDATA[player.CDATA->CurrCHAR].AttackSKILL[28].Damage/3500)+0.3);	//150				//Max Radius
											Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 120;	//90

											Q_MeleeHit[NomMelHit].Expandro3D.Red = (100*Q_MeleeHit[NomMelHit].HitPowerPercent)+155;
											Q_MeleeHit[NomMelHit].Expandro3D.Blue = (100*Q_MeleeHit[NomMelHit].HitPowerPercent)+155;
											Q_MeleeHit[NomMelHit].Expandro3D.Green = (100*Q_MeleeHit[NomMelHit].HitPowerPercent)+155;

											//###Hit Reactions
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HitReactScale = 0.025;	//0.05
											
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactVec = Q_SEnergy[aero].TraVec;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactSpeed = 6;

											player.HB_Energy += 10;
											if(player.HB_Energy > player.HB_MaxEnergy) player.HB_Energy = 200;
									
											//## Reset Hit Wall
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HitWall = 0;

											//## Hit Reaction Motions
											
											if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Aposestate != 30)	//Standard Hit Reactions
												{
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Aposestate = 30;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attackon = 1;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attposecnt = 0;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].astackcnt = 0;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].astackrun = 0;
												}
											else
												{
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attposecnt = 2.08;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attackon = 1;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].astackcnt = 0;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].astackrun = 0;
												}

											//Increment number of MeleeHits
											NomMelHit += 1;

											if((Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK <= 0) && (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Block == 1 && Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHeight == 3))
												{
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HitReactScale = 0.0035 * ((1 * (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower / 100)) + 1);

												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactVec = Q_MeleeHit[NomMelHit].ReactionNorm;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactSpeed = 4;

												//### Block Hit Flash

												Q_MeleeHit[NomMelHit].Live = 1;
												Q_MeleeHit[NomMelHit].INIT = 0;
												Q_MeleeHit[NomMelHit].HitTYPE = 1;
												Q_MeleeHit[NomMelHit].HitRESULT = 9;

																					//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
												Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
												geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &Q_MeleeHit[NomMelHit].AttboneXF);
												Q_MeleeHit[NomMelHit].Bonenum = 0;
												Q_MeleeHit[NomMelHit].HitPowerPercent = 1;
												Q_MeleeHit[NomMelHit].BloodAmt = 0;

												//Expandro3D Struct
												Q_MeleeHit[NomMelHit].Expandro3D.Radius = 60;					//Switch 0 = Off !0 = On
												Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 60;				//Max Radius
												Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 5;
												Q_MeleeHit[NomMelHit].Expandro3D.Red = 0;
												Q_MeleeHit[NomMelHit].Expandro3D.Blue = 160;
												Q_MeleeHit[NomMelHit].Expandro3D.Green = 0;

													//Increment number of MeleeHits
												NomMelHit += 1;
												}//END Powerbank zeroed

											}//END Not Deflecting

										}//END Block Test
									else
										{
										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HitReactScale = 0.0035 * ((1 * (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower / 100)) + 1);

										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactVec = Q_MeleeHit[NomMelHit].ReactionNorm;
										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactSpeed = 6;

										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Blocking = 1;
										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHit = 1;
										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHitFLAG = 1;
										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attposecnt = 0;
										Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHitID = NomMelHit;

										//### Block Hit Flash

										Q_MeleeHit[NomMelHit].Live = 1;
										Q_MeleeHit[NomMelHit].INIT = 0;
										Q_MeleeHit[NomMelHit].HitTYPE = 2;
										Q_MeleeHit[NomMelHit].HitRESULT = 20;
																			//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
										Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
										geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &Q_MeleeHit[NomMelHit].AttboneXF);
										Q_MeleeHit[NomMelHit].Bonenum = 0;
										Q_MeleeHit[NomMelHit].HitPowerPercent = 1;
										Q_MeleeHit[NomMelHit].BloodAmt = 0;

										//Expandro3D Struct
										Q_MeleeHit[NomMelHit].Expandro3D.Radius = 0.01;					//Switch 0 = Off !0 = On
										Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 80;				//Max Radius
										Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 100;
										Q_MeleeHit[NomMelHit].Expandro3D.Red = (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK / ((((float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower + (float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Dexterity) * 2) + 100)) * 255;
										Q_MeleeHit[NomMelHit].Expandro3D.Blue = (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK / ((((float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower + (float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Dexterity) * 2) + 100)) * 255;
										Q_MeleeHit[NomMelHit].Expandro3D.Green = (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK / ((((float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower + (float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Dexterity) * 2) + 100)) * 255;

											//Increment number of MeleeHits
										NomMelHit += 1;
										}//END Block Test

									}//END Anti Multiple Hits

								}//END quick Actor check

							}//END Actor Not Null
							
						if(Q_SEnergy[aero].ActorFlag[0].Collision.Actor == NULL)	//##### Hit Geometry
							{
							Q_SEnergy[aero].Live = 0;
							if(Q_SEnergy[aero].Light != NULL) geWorld_RemoveLight(World, Q_SEnergy[aero].Light);
							if(Q_SEnergy[aero].Sound != NULL) geSound_StopSound(SoundSys, Q_SEnergy[aero].Sound);

							helly = 0;
							while(helly < Q_SEnergy[aero].NomActors)
								{
								geVec3d_Copy(&Origon, &Q_SEnergy[aero].ActorFlag[helly].ActorXform.Translation);
								geActor_ClearPose(Q_SEnergy[aero].ActorFlag[helly].Actor, &Q_SEnergy[aero].ActorFlag[helly].ActorXform);
								helly++;
								}

							//### Energy Array Reorder
							K = aero;
							while(K < NomSEnergy - 1)
								{
								Q_SEnergy[K] = Q_SEnergy[K+1];
								K++;
								}

							NomSEnergy--;
							}

						}//END Collision

					}//END ActorID
				else	//AI FIRED PROJECTILE
					{
					//PLAYER SHIELD CHECK
					if((player.Cleric.ShieldAlpha > 0) && (Forge[Q_SEnergy[aero].ActorID].Team != player.Team) && (player.HB_Energy > 0))
						{
						TESTDist = 100;
						TESTPosS = Q_SEnergy[aero].LOldPos;
						TESTPosE = Q_SEnergy[aero].LightPos;
						while(TESTDist > 1)
							{
							geVec3d_MA(&TESTPosS, 1, &Q_SEnergy[aero].TraVec, &TESTPosS);

							TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &player.Shield.ActorXform.Translation);

							TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

							if(TESTShieldDIST < (65 * player.Cleric.ShieldScale))
								{
								jet=0;
								while((jet < 1) && (NomPntSprite < 24998))
									{
									TESTPosS = TESTPosE;
									TESTDist = 0;

									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
									Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
									Q_PntSprite[NomPntSprite].PartType = 8;

									Q_PntSprite[NomPntSprite].IR = 255;
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 100;
									Q_PntSprite[NomPntSprite].Speed = 0.4;
									Q_PntSprite[NomPntSprite].Pos = TESTPosS;

									Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

									Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

									Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}

								if(Q_SEnergy[aero].TargetLock == 1)
									{
									if(Q_SEnergy[aero].TargetLock == 1) Q_SEnergy[aero].TargetLock = 2;
									player.HB_Energy -= (80*((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3)) / (10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Duration/5000));
									}
								}
							}
						}

					//### AVATAR SHIELD CHECK
					SCRAM=0;
					while(SCRAM < NomAI)
						{
						if(Forge[SCRAM].LIVE == 1)
							{
							if((Forge[SCRAM].Cleric.ShieldAlpha > 0) && (Forge[Q_SEnergy[aero].ActorID].Team != Forge[SCRAM].Team) && (Forge[SCRAM].HB_Energy > 0))
								{
								TESTDist = 100;
								TESTPosS = Q_SEnergy[aero].LOldPos;
								TESTPosE = Q_SEnergy[aero].LightPos;
								while(TESTDist > 1)
									{
									geVec3d_MA(&TESTPosS, 1, &Q_SEnergy[aero].TraVec, &TESTPosS);

									TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

									TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

									if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
										{
										jet=0;
										while((jet < 1) && (NomPntSprite < 24998))
											{
											TESTPosS = TESTPosE;
											TESTDist = 0;

											Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
											Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
											Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
											Q_PntSprite[NomPntSprite].PartType = 8;

											Q_PntSprite[NomPntSprite].IR = 255;
											Q_PntSprite[NomPntSprite].IG = 255;
											Q_PntSprite[NomPntSprite].IB = 255;

											Q_PntSprite[NomPntSprite].Alpha = 100;
											Q_PntSprite[NomPntSprite].Speed = 0.4;
											Q_PntSprite[NomPntSprite].Pos = TESTPosS;

											Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
											Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
											Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

											Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
											Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
											Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

											Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

											Q_PntSprite[NomPntSprite].Live = 1;

											NomPntSprite++;
											jet++;
											}

										if(Q_SEnergy[aero].TargetLock == 1)
											{
											if(Q_SEnergy[aero].TargetLock == 1) Q_SEnergy[aero].TargetLock = 2;
											Forge[SCRAM].HB_Energy -= (80*((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3)) / (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Duration/5000));
											}
										}
									}
								}
							}
						SCRAM++;
						}


					if(geWorld_Collision(World,
						&Q_SEnergy[aero].ActorFlag[0].Mins,
						&Q_SEnergy[aero].ActorFlag[0].Maxs,
						&Q_SEnergy[aero].LOldPos,
						&Q_SEnergy[aero].LightPos,
						GE_CONTENTS_CANNOT_OCCUPY,
						GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
						0xffffffff, NULL, NULL,
						&Q_SEnergy[aero].ActorFlag[0].Collision))
						{
						if(Q_SEnergy[aero].ActorFlag[0].Collision.Actor != NULL)
							{
							if(Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Forge[Q_SEnergy[aero].ActorID].Avatar.Actor
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[0].Actor		//**********
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[1].Actor		//Here Set collide flags on actor creation and shorten the 'if'
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[2].Actor		//******
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[3].Actor
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor != Q_SEnergy[aero].ActorFlag[4].Actor
							&& Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag != 251)
								{	//#####- Hit Avatar -#####
								if(Q_SEnergy[aero].ActorFlag[0].Collision.Actor == playact.Actor)
									{
									if(Q_SEnergy[aero].AntiMultHits[250] < 1)
										{
										Q_SEnergy[aero].AntiMultHits[250]++;
							
										//##### Check Target Lock
										if(Q_SEnergy[aero].TargetLock == 1)
											{ if(Q_SEnergy[aero].TargetID == 250) Q_SEnergy[aero].TargetLock = 2; }

										//#### Energy Attack Power
										Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.ATTACKPOWER = ((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Power / 5000) * 10) + 1;
										Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.ATTACKPOWER *= ((float)Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.AggPower / 100);

										//######## Aggressive to defensive power check
										if(player.Block == 1 && player.BlockHeight == 3)
											{
											player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK -= ((float)Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.AggPower * (float)Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.ATTACKPOWER);

											if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK < 0) player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK = 0;

											player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.PBTIMER = TIME;
											}

										//### Check to Determine if Avatar is Blocking
										if((!(player.Block == 1 && player.BlockHeight == 3) || (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK <= 0)) && (player.HB_Dead == 0))
											{
											//### Check if Avatar Is Deflecting
											if(player.DeflectLethal == 1)
												{
												Q_MeleeHit[NomMelHit].Live = 1;
												Q_MeleeHit[NomMelHit].INIT = 0;
												Q_MeleeHit[NomMelHit].HitTYPE = 3;
												Q_MeleeHit[NomMelHit].HitRESULT = 8;
																					//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
												Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
												Q_MeleeHit[NomMelHit].AttboneXF = Q_SEnergy[aero].ActorFlag[0].ActorXform;
												Q_MeleeHit[NomMelHit].Bonenum = 0;

												Q_MeleeHit[NomMelHit].HitPowerPercent = 1;

												Q_MeleeHit[NomMelHit].BloodAmt = 0;

												//Expandro3D Struct
												Q_MeleeHit[NomMelHit].Expandro3D.Radius = 0.01;					//Switch 0 = Off !0 = On
												Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 100;				//Max Radius
												Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 200;

												Q_MeleeHit[NomMelHit].Expandro3D.Red = 255;
												Q_MeleeHit[NomMelHit].Expandro3D.Blue = 150;
												Q_MeleeHit[NomMelHit].Expandro3D.Green = 150;

												NomMelHit++;

												Q_SEnergy[aero].TraVec.X = ((((float)rand() / 32767)-0.5)*2);
												Q_SEnergy[aero].TraVec.Z = ((((float)rand() / 32767)-0.5)*2);

												Q_SEnergy[aero].TargetLock = 2;
												Q_SEnergy[aero].Init = 3;
												}//END DEFLECT
											else
												{
												Q_MeleeHit[NomMelHit].Live = 1;
												Q_MeleeHit[NomMelHit].INIT = 0;
												Q_MeleeHit[NomMelHit].HitTYPE = 11;
												Q_MeleeHit[NomMelHit].HitRESULT = 7;
												Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;
												Q_MeleeHit[NomMelHit].AttboneXF = Q_SEnergy[aero].ActorFlag[0].ActorXform;
												Q_MeleeHit[NomMelHit].Bonenum = 0;
												Q_MeleeHit[NomMelHit].HitPowerPercent = 1;

													//# Deduct Health
												Forge[Q_SEnergy[aero].ActorID].HB_LastAvatarHitID = Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag;
												/*if(player.HB_HReduceON == 0)*/ player.HB_ReduceOld = player.HB_Health;

														//Rework Needed here very messy , plus add a random factor
												player.HB_Health -= 70*((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75);
												if(player.HB_Health < 0) player.HB_Health = 0;

												//#### Experience Storage
												Forge[Q_SEnergy[aero].ActorID].AvatarDMGSTORE[250] += 70*((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3) * ((1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution / 400)) + 0.75);


												if(player.HB_Health <= 0)
													{
													player.HB_Health = 0;

													Q_MeleeHit[NomMelHit].HitRESULT = 18;

													player.HB_Dead = 1;

													//### Add Experience to attacking AVATAR
													if((Forge[Q_SEnergy[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
														{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_SEnergy[aero].ActorID].CDATID].UnusedXP += Forge[Q_SEnergy[aero].ActorID].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000); }

													//##### Find KO Owner
													UniversalDMGSTR = 0;

													jet = 0;
													while(jet < NomAI)
														{
														if(Forge[jet].LIVE == 1)
															{
															if(Forge[jet].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
															}
														jet++;
														}

													//##### Check All Active Avatars for XP and KO's
													SCRAM = 0;
													while(SCRAM < NomAI)
														{
														if(Forge[SCRAM].LIVE == 1)
															{
															if((Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000)) > 0)
																{
																//### Add Experience to attacking AVATAR
																player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[250] * (10 * player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level / 1000);

																//### Force Net player to update (Net Play Only)
																if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
																}

															if(DeliverKOID == SCRAM)
																{
																//### Create Item for attacking Avatar
																Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

																if(Forge[SCRAM].DecFinger <= 100 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level/1000))
																	{
																	//### CREATE NEW ITEM
																	if(Forge[SCRAM].NETPLAYERFLAG == 1)
																		{
																		Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);

																		Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																		}
																	else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level);
																	}
																}
															}
														SCRAM++;
														}

													//####### DEACTIVATE ITEM ATTRIBUTES
													Q_DeactivateItems();

													//### Write out CHARDATA
													WriteNEWCharacterData(player.CDATA);

													//####### REACTIVATE ITEM ATTRIBUTES
													Q_ActivateItems();
													}


												player.HB_HReduceON = 1;
												
												player.HB_ReduceHInc = 10;
												player.HB_ReduceHeight = 573;
												player.HB_ReduceRectColor.r = 255;
												player.HB_ReduceRectColor.g = 0;
												player.HB_ReduceRectColor.b = 0;
												player.HB_ReduceRectColor.a = 255;

												if(player.Shadows[1].Actor != NULL)
													{
													geVec3d_Copy(&Origon, &player.Shadows[1].ActorXform.Translation);
													geVec3d_Copy(&Origon, &player.Shadows[2].ActorXform.Translation);
													geVec3d_Copy(&Origon, &player.Shadows[3].ActorXform.Translation);
													geActor_ClearPose(player.Shadows[1].Actor, &player.Shadows[1].ActorXform);
													geActor_ClearPose(player.Shadows[2].Actor, &player.Shadows[2].ActorXform);
													geActor_ClearPose(player.Shadows[3].Actor, &player.Shadows[3].ActorXform);
													}

												Q_MeleeHit[NomMelHit].BloodAmt = ((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3) * 20;

												//Expandro3D Struct
												Q_MeleeHit[NomMelHit].Expandro3D.Radius = 0.01;					//Switch 0 = Off !0 = On
												Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 350 * ((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3);	//150				//Max Radius
												Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 120;	//90
												Q_MeleeHit[NomMelHit].Expandro3D.Red = (100*Q_MeleeHit[NomMelHit].HitPowerPercent)+155;
												Q_MeleeHit[NomMelHit].Expandro3D.Blue = (100*Q_MeleeHit[NomMelHit].HitPowerPercent)+155;
												Q_MeleeHit[NomMelHit].Expandro3D.Green = (100*Q_MeleeHit[NomMelHit].HitPowerPercent)+155;

												//###Hit Reactions
												player.HitReactScale = 0.025;	//0.05
												
												player.MoveReactVec = Q_SEnergy[aero].TraVec;
												player.MoveReactSpeed = 6;

												Forge[Q_SEnergy[aero].ActorID].HB_Energy += 10;
												if(Forge[Q_SEnergy[aero].ActorID].HB_Energy > Forge[Q_SEnergy[aero].ActorID].HB_MaxEnergy) Forge[Q_SEnergy[aero].ActorID].HB_Energy = Forge[Q_SEnergy[aero].ActorID].HB_MaxEnergy;
										
												//## Reset Hit Wall
												player.HitWall = 0;

												//## Hit Reaction Motions
												
												if(player.Aposestate != 30)	//Standard Hit Reactions
													{
													player.Aposestate = 30;
													player.attackon = 1;
													player.attposecnt = 0;
													player.astackcnt = 0;
													player.astackrun = 0;
													}
												else
													{
													player.attposecnt = 2.08;
													player.astackcnt = 0;
													player.astackrun = 0;
													}

												//Increment number of MeleeHits
												NomMelHit += 1;

												if((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK <= 0) && (player.Block == 1 && player.BlockHeight == 3))
													{
													player.HitReactScale = 0.0035 * ((1 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower / 100)) + 1);

													player.MoveReactVec = Q_MeleeHit[NomMelHit].ReactionNorm;
													player.MoveReactSpeed = 4;

													//### Block Hit Flash

													Q_MeleeHit[NomMelHit].Live = 1;
													Q_MeleeHit[NomMelHit].INIT = 0;
													Q_MeleeHit[NomMelHit].HitTYPE = 1;
													Q_MeleeHit[NomMelHit].HitRESULT = 9;
																						//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
													Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
													geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &Q_MeleeHit[NomMelHit].AttboneXF);
													Q_MeleeHit[NomMelHit].Bonenum = 0;
													Q_MeleeHit[NomMelHit].HitPowerPercent = 1;
													Q_MeleeHit[NomMelHit].BloodAmt = 0;

													//Expandro3D Struct
													Q_MeleeHit[NomMelHit].Expandro3D.Radius = 60;					//Switch 0 = Off !0 = On
													Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 60;				//Max Radius
													Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 5;
													Q_MeleeHit[NomMelHit].Expandro3D.Red = 0;
													Q_MeleeHit[NomMelHit].Expandro3D.Blue = 160;
													Q_MeleeHit[NomMelHit].Expandro3D.Green = 0;

														//Increment number of MeleeHits
													NomMelHit += 1;
													}//END Powerbank zeroed

												}//END Else Deflect

											}//END Block
										else
											{
											player.HitReactScale = 0.0035 * ((1 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower / 100)) + 1);

											player.MoveReactVec = Q_MeleeHit[NomMelHit].ReactionNorm;
											player.MoveReactSpeed = 6;

											player.Blocking = 1;
											player.BlockHit = 1;
											player.BlockHitFLAG = 1;
											player.attposecnt = 0;
											player.BlockHitID = NomMelHit;

											//### Block Hit Flash
											Q_MeleeHit[NomMelHit].Live = 1;
											Q_MeleeHit[NomMelHit].INIT = 0;										
											Q_MeleeHit[NomMelHit].HitTYPE = 2;
											Q_MeleeHit[NomMelHit].HitRESULT = 20;
																				//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
											Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
											geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &Q_MeleeHit[NomMelHit].AttboneXF);
											Q_MeleeHit[NomMelHit].Bonenum = 0;
											Q_MeleeHit[NomMelHit].HitPowerPercent = 1;
											Q_MeleeHit[NomMelHit].BloodAmt = 0;

											//Expandro3D Struct
											Q_MeleeHit[NomMelHit].Expandro3D.Radius = 0.01;					//Switch 0 = Off !0 = On
											Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 80;				//Max Radius
											Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 100;
											Q_MeleeHit[NomMelHit].Expandro3D.Red = (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK / ((((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower + (float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Dexterity) * 2) + 100)) * 255;
											Q_MeleeHit[NomMelHit].Expandro3D.Blue = (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK / ((((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower + (float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Dexterity) * 2) + 100)) * 255;
											Q_MeleeHit[NomMelHit].Expandro3D.Green = (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK / ((((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower + (float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Dexterity) * 2) + 100)) * 255;

												//Increment number of MeleeHits
											NomMelHit += 1;
											}//END Block Test

										}//END Anti Multiple hits

									}//END Playact Hit

									//#####- NON PLAYER AVATAR -#####
								if(Q_SEnergy[aero].ActorFlag[0].Collision.Actor != playact.Actor)
									{

									//### Hit New Avatar
									if(Q_SEnergy[aero].AntiMultHits[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] < 1)
										{
										Q_SEnergy[aero].AntiMultHits[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag]++;

										if(Q_SEnergy[aero].TargetLock == 1)
											{ if(Q_SEnergy[aero].TargetID == Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag) Q_SEnergy[aero].TargetLock = 2; }

										//#### Energy Attack Power
										Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.ATTACKPOWER = ((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Power / 5000) * 10) + 1;
										Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.ATTACKPOWER *= ((float)Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.AggPower / 100);

										//######## Aggressive to defensive power check
										if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Block == 1 && Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHeight == 3)
											{
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK -= ((float)Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.AggPower * (float)Forge[Q_SEnergy[aero].ActorID].CharDATA.BodySKILL.ATTACKPOWER);

											if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK < 0) Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK = 0;

											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.PBTIMER = TIME;
											}


										//### Check to Determine if Avatar is Blocking
										if((!(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Block == 1 && Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHeight == 3) || (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK <= 0)) && (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Dead == 0))
											{
											//### Check if Avatar Is Deflecting
											if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].DeflectLethal == 1)
												{
												Q_MeleeHit[NomMelHit].Live = 1;
												Q_MeleeHit[NomMelHit].INIT = 0;
												Q_MeleeHit[NomMelHit].HitTYPE = 3;
												Q_MeleeHit[NomMelHit].HitRESULT = 8;
																					//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
												Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
												Q_MeleeHit[NomMelHit].AttboneXF = Q_SEnergy[aero].ActorFlag[0].ActorXform;
												Q_MeleeHit[NomMelHit].Bonenum = 0;
			
												Q_MeleeHit[NomMelHit].HitPowerPercent = 1;

												Q_MeleeHit[NomMelHit].BloodAmt = 0;

												//Expandro3D Struct
												Q_MeleeHit[NomMelHit].Expandro3D.Radius = 0.01;					//Switch 0 = Off !0 = On
												Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 100;				//Max Radius
												Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 200;
												Q_MeleeHit[NomMelHit].Expandro3D.Red = 255;
												Q_MeleeHit[NomMelHit].Expandro3D.Blue = 150;
												Q_MeleeHit[NomMelHit].Expandro3D.Green = 150;

												NomMelHit++;

												Q_SEnergy[aero].TraVec.X = ((((float)rand() / 32767)-0.5)*2);
												Q_SEnergy[aero].TraVec.Z = ((((float)rand() / 32767)-0.5)*2);

												Q_SEnergy[aero].TargetLock = 2;
												Q_SEnergy[aero].Init = 3;
												}//END Deflect
											else
												{
												Q_MeleeHit[NomMelHit].Live = 1;
												Q_MeleeHit[NomMelHit].INIT = 0;
												Q_MeleeHit[NomMelHit].HitTYPE = 11;
												Q_MeleeHit[NomMelHit].HitRESULT = 7;
												Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;
												Q_MeleeHit[NomMelHit].AttboneXF = Q_SEnergy[aero].ActorFlag[0].ActorXform;
												Q_MeleeHit[NomMelHit].Bonenum = 0;
												Q_MeleeHit[NomMelHit].HitPowerPercent = 1;

													//# Deduct Health
												Forge[Q_SEnergy[aero].ActorID].HB_LastAvatarHitID = Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag;
												/*if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_HReduceON == 0)*/ Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceOld = Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health;

														//Rework Needed here very messy , plus add a random factor
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health -= 70*((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3) * ((1 - (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Constitution / 400)) + 0.75);
												if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health < 0) Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health = 0;

												//### Experience Storage
												Forge[Q_SEnergy[aero].ActorID].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] += 70*((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3) * ((1 - (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Constitution / 400)) + 0.75);


												if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health <= 0)
													{
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Health = 0;

													Q_MeleeHit[NomMelHit].HitRESULT = 17;

													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_Dead = 1;

													//### Add XP to avatar
													if((Forge[Q_SEnergy[aero].ActorID].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000)) > 0)
														{ player.CDATA->CharDATA[player.CDATA->AVATARDATA[Q_SEnergy[aero].ActorID].CDATID].UnusedXP += Forge[Q_SEnergy[aero].ActorID].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000); }

													//##### Find KO Owner
													UniversalDMGSTR = 0;
													
													if(Forge[Q_SEnergy[aero].ActorID].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = 250;

													jet = 0;
													while(jet < NomAI)
														{
														if(Forge[jet].LIVE == 1)
															{
															if(Forge[jet].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000) > UniversalDMGSTR) DeliverKOID = jet;
															}
														jet++;
														}

													if(DeliverKOID == 250)
														{
														//### Create Item for attacking Avatar
														Forge[Q_SEnergy[aero].ActorID].DecFinger = ((float)rand() / 32767) * 6;

														if(Forge[Q_SEnergy[aero].ActorID].DecFinger <= 100 * (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level/1000))
															{
															player.MSG_ItemREF = Q_CreatePlayerItem(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level);
															player.MSG_ITEMON = 1;
															player.MSG_ITEMInit = 0;
															player.MSG_ITEMScreenDIST = 800;
															player.MSG_ITEMScreenDistINC = 17;
															player.MSG_ITEMScreenDIR = 0;
															}

														//SET Knockout
														KnockOutFLAG = 1;
														KnockOutTIMER = 0;
														KnockOutCNT = 0;
														KnockOutINIT = 0;
														KnockOutHEIGHT = 0;
														}

													//##### Check All Active Avatars for XP and KO's
													SCRAM = 0;
													while(SCRAM < NomAI)
														{
														if(Forge[SCRAM].LIVE == 1)
															{
															if((Forge[SCRAM].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000)) > 0)
																{
																//### Add Experience to attacking AVATAR
																player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID].UnusedXP += Forge[SCRAM].AvatarDMGSTORE[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag] * (10 * Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level / 1000);

																//### Force Net player to update (Net Play Only)
																if(Forge[SCRAM].NETPLAYERFLAG == 1) Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 1;
																}

															if(DeliverKOID == SCRAM)
																{
																//### Create Item for attacking Avatar
																Forge[SCRAM].DecFinger = ((float)rand() / 32767) * 6;

																if(Forge[SCRAM].DecFinger <= 100 * (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level/1000))
																	{
																	//### CREATE NEW ITEM
																	if(Forge[SCRAM].NETPLAYERFLAG == 1)
																		{
																		Netplayer[Forge[SCRAM].NetPID].NewITEMREF = Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level);

																		Netplayer[Forge[SCRAM].NetPID].UpdateCHAR = 2;
																		}
																	else Q_CreateAvatarItem(player.CDATA->AVATARDATA[Forge[SCRAM].AVDATID].CDATID,Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.Level);
																	}
																}
															}
														SCRAM++;
														}

													//####### DEACTIVATE ITEM ATTRIBUTES
													Q_DeactivateItems();

													//### Write out CHARDATA
													WriteNEWCharacterData(player.CDATA);

													//####### REACTIVATE ITEM ATTRIBUTES
													Q_ActivateItems();
													}

												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_HReduceON = 1;
												
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceHInc = 10;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceHeight = 573;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceRectColor.r = 255;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceRectColor.g = 0;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceRectColor.b = 0;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HB_ReduceRectColor.a = 255;

												if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[1].Actor != NULL)
													{
													geVec3d_Copy(&Origon, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[1].ActorXform.Translation);
													geVec3d_Copy(&Origon, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[2].ActorXform.Translation);
													geVec3d_Copy(&Origon, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[3].ActorXform.Translation);
													geActor_ClearPose(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[1].Actor, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[1].ActorXform);
													geActor_ClearPose(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[2].Actor, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[2].ActorXform);
													geActor_ClearPose(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[3].Actor, &Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Shadows[3].ActorXform);
													}

												Q_MeleeHit[NomMelHit].BloodAmt = ((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3) * 20;

												//Expandro3D Struct
												Q_MeleeHit[NomMelHit].Expandro3D.Radius = 0.01;					//Switch 0 = Off !0 = On
												Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 350 * ((Forge[Q_SEnergy[aero].ActorID].CharDATA.AttackSKILL[28].Damage/3500)+0.3);	//150				//Max Radius
												Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 120;	//90
												Q_MeleeHit[NomMelHit].Expandro3D.Red = (100*Q_MeleeHit[NomMelHit].HitPowerPercent)+155;
												Q_MeleeHit[NomMelHit].Expandro3D.Blue = (100*Q_MeleeHit[NomMelHit].HitPowerPercent)+155;
												Q_MeleeHit[NomMelHit].Expandro3D.Green = (100*Q_MeleeHit[NomMelHit].HitPowerPercent)+155;

												//###Hit Reactions
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HitReactScale = 0.025;	//0.05
												
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactVec = Q_SEnergy[aero].TraVec;
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactSpeed = 6;

												Forge[Q_SEnergy[aero].ActorID].HB_Energy += 10;
												if(Forge[Q_SEnergy[aero].ActorID].HB_Energy > Forge[Q_SEnergy[aero].ActorID].HB_MaxEnergy) Forge[Q_SEnergy[aero].ActorID].HB_Energy = Forge[Q_SEnergy[aero].ActorID].HB_MaxEnergy;
										
												//## Reset Hit Wall
												Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HitWall = 0;

												//## Hit Reaction Motions
												
												if(Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Aposestate != 30)	//Standard Hit Reactions
													{
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Aposestate = 30;
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attackon = 1;
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attposecnt = 0;
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].astackcnt = 0;
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].astackrun = 0;
													}
												else
													{
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attposecnt = 2.08;
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attackon = 1;
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].astackcnt = 0;
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].astackrun = 0;
													}

												//Increment number of MeleeHits
												NomMelHit += 1;

												if((Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK <= 0) && (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Block == 1 && Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHeight == 3))
													{
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HitReactScale = 0.0035 * ((1 * (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower / 100)) + 1);

													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactVec = Q_MeleeHit[NomMelHit].ReactionNorm;
													Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactSpeed = 4;

													//### Block Hit Flash

													Q_MeleeHit[NomMelHit].Live = 1;
													Q_MeleeHit[NomMelHit].INIT = 0;
													Q_MeleeHit[NomMelHit].HitTYPE = 1;
													Q_MeleeHit[NomMelHit].HitRESULT = 9;
																						//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
													Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
													geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &Q_MeleeHit[NomMelHit].AttboneXF);
													Q_MeleeHit[NomMelHit].Bonenum = 0;
													Q_MeleeHit[NomMelHit].HitPowerPercent = 1;
													Q_MeleeHit[NomMelHit].BloodAmt = 0;

													//Expandro3D Struct
													Q_MeleeHit[NomMelHit].Expandro3D.Radius = 60;					//Switch 0 = Off !0 = On
													Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 60;				//Max Radius
													Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 5;
													Q_MeleeHit[NomMelHit].Expandro3D.Red = 0;
													Q_MeleeHit[NomMelHit].Expandro3D.Blue = 160;
													Q_MeleeHit[NomMelHit].Expandro3D.Green = 0;

														//Increment number of MeleeHits
													NomMelHit += 1;
													}//END Powerbank zeroed

												}//END Else Deflect

											}//END Block Test
										else
											{
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].HitReactScale = 0.0035 * ((1 * (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower / 100)) + 1);

											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactVec = Q_MeleeHit[NomMelHit].ReactionNorm;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].MoveReactSpeed = 6;

											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].Blocking = 1;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHit = 1;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHitFLAG = 1;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].attposecnt = 0;
											Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].BlockHitID = NomMelHit;

											//### Block Hit Flash

											Q_MeleeHit[NomMelHit].Live = 1;
											Q_MeleeHit[NomMelHit].INIT = 0;
											Q_MeleeHit[NomMelHit].HitTYPE = 0;
											Q_MeleeHit[NomMelHit].HitRESULT = 20;
																				//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
											Q_MeleeHit[NomMelHit].Impact = Q_SEnergy[aero].ActorFlag[0].Collision.Impact;	//Point of impact in world space
											geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &Q_MeleeHit[NomMelHit].AttboneXF);
											Q_MeleeHit[NomMelHit].Bonenum = 0;
											Q_MeleeHit[NomMelHit].HitPowerPercent = 1;
											Q_MeleeHit[NomMelHit].BloodAmt = 0;

											//Expandro3D Struct
											Q_MeleeHit[NomMelHit].Expandro3D.Radius = 0.01;					//Switch 0 = Off !0 = On
											Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 80;				//Max Radius
											Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 100;
											Q_MeleeHit[NomMelHit].Expandro3D.Red = (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK / ((((float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower + (float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Dexterity) * 2) + 100)) * 255;
											Q_MeleeHit[NomMelHit].Expandro3D.Blue = (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK / ((((float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower + (float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Dexterity) * 2) + 100)) * 255;
											Q_MeleeHit[NomMelHit].Expandro3D.Green = (Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.POWERBANK / ((((float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.DefPower + (float)Forge[Q_SEnergy[aero].ActorFlag[0].Collision.Actor->IDflag].CharDATA.BodySKILL.Dexterity) * 2) + 100)) * 255;

												//Increment number of MeleeHits
											NomMelHit += 1;
											}//END Block Test

										}//END Anti Mult Hits

									}//END AI hits

								}//END quick actor check

							}//END Collision NULL

						if(Q_SEnergy[aero].ActorFlag[0].Collision.Actor == NULL)	//##### Hit Geometry
							{
							Q_SEnergy[aero].Live = 0;
							if(Q_SEnergy[aero].Light != NULL) geWorld_RemoveLight(World, Q_SEnergy[aero].Light);
							if(Q_SEnergy[aero].Sound != NULL) geSound_StopSound(SoundSys, Q_SEnergy[aero].Sound);

							helly = 0;
							while(helly < Q_SEnergy[aero].NomActors)
								{
								geVec3d_Copy(&Origon, &Q_SEnergy[aero].ActorFlag[helly].ActorXform.Translation);
								geActor_ClearPose(Q_SEnergy[aero].ActorFlag[helly].Actor, &Q_SEnergy[aero].ActorFlag[helly].ActorXform);
								helly++;
								}

							//### Energy Array Reorder
							K = aero;
							while(K < NomSEnergy - 1)
								{
								Q_SEnergy[K] = Q_SEnergy[K+1];
								K++;
								}

							NomSEnergy--;
							}

						}//END Collision

					}//END Else Origin
					
				Q_SEnergy[aero].LightPos = Q_SEnergy[aero].LOldPos;
				}
			aero++;
			}
		}
	}
else		//########  - CLIENT PHANTOM SMALL ENERGY ATTACKS -  ########//
	{
	if(NomSEnergy > 0)
		{
		aero = 0;
		while(aero < NomSEnergy)
			{
			if(Q_SEnergy[aero].Live == 1 && aero < MaxNomSEnergy)	//Attack is live
				{
				if(Q_SEnergy[aero].Init == 0)
					{
					Q_SEnergy[aero].Init = 1;

					Q_SEnergy[aero].NomActors = 5;
					Q_SEnergy[aero].Scale = 0.01;
					Q_SEnergy[aero].ScaleMode = 0;
					Q_SEnergy[aero].Alpha = 0;
					Q_SEnergy[aero].AlphaInc = 50;
					Q_SEnergy[aero].AlphaScale[0] = 1;
					Q_SEnergy[aero].AlphaScale[1] = 0.9;
					Q_SEnergy[aero].AlphaScale[2] = 0.8;
					Q_SEnergy[aero].AlphaScale[3] = 0.6;
					Q_SEnergy[aero].AlphaScale[4] = 0.3;
					Q_SEnergy[aero].Speed = 0;
					Q_SEnergy[aero].SpeedScale[0] = 0;
					Q_SEnergy[aero].SpeedScale[1] = 0.3;
					Q_SEnergy[aero].SpeedScale[2] = 0.6;
					Q_SEnergy[aero].SpeedScale[3] = 0.9;
					Q_SEnergy[aero].SpeedScale[4] = 1.2;
					Q_SEnergy[aero].LightColor.r = 255.0f;
					Q_SEnergy[aero].LightColor.g = 255.0f;
					Q_SEnergy[aero].LightColor.b = 200.0f;
					Q_SEnergy[aero].LightColor.a = 255.0f;
					Q_SEnergy[aero].Light = geWorld_AddLight(World);

					jet=0;
					while(jet < Q_SEnergy[aero].NomActors)
						{
						geActor_SetScale(Q_SEnergy[aero].ActorFlag[jet].Actor, 0.01f,0.01f,0.01f);
						geActor_SetLightingOptions(Q_SEnergy[aero].ActorFlag[jet].Actor, GE_FALSE, &goup, 0, 0, 0, 255, 255, 255, GE_FALSE, 0, NULL, GE_FALSE);
						geVec3d_Copy(&Q_SEnergy[aero].LightPos, &Q_SEnergy[aero].ActorFlag[jet].ActorXform.Translation);
						jet++;
						}

					//RESET MULTIPLE HIT COUNTER
					Q_SEnergy[aero].AntiMultHits[250] = 0;
					jet=0;
					while(jet < NomAI)
						{
						Q_SEnergy[jet].AntiMultHits[jet] = 0;
						jet++;
						}

					geSound3D_GetConfig(World,
						&player.ViewXForm,
						&Q_SEnergy[aero].LightPos,
						600.0f,
						2.0f,
						&Volume,
						&Pan,
						&Frequency);
					
					Q_SEnergy[aero].Sound = geSound_PlaySoundDef(SoundSys, S_Renzou, Volume, Pan, S_TimeScale, GE_TRUE);
					}

				helly = 0;
				while(helly < Q_SEnergy[aero].NomActors)
					{
					geXForm3d_SetIdentity(&Q_SEnergy[aero].Matrix2);

					geXForm3d_RotateZ(&Q_SEnergy[aero].Matrix2, Q_SEnergy[aero].AngleZ);
					geXForm3d_RotateX(&Q_SEnergy[aero].Matrix2, Q_SEnergy[aero].AngleX);
					geXForm3d_RotateY(&Q_SEnergy[aero].Matrix2, Q_SEnergy[aero].AngleY);

					Q_SEnergy[aero].ActorFlag[helly].ActorXform = Q_SEnergy[aero].Matrix2;

					helly++;
					}

				geXForm3d_GetIn(&Q_SEnergy[aero].ActorFlag[0].ActorXform, &Q_SEnergy[aero].TraVec);


				if(Q_SEnergy[aero].TargetLock == 1)
					{
					//#### Show Target Locks
					if(Q_SEnergy[aero].DisplayAlpha - 15 > 120) Q_SEnergy[aero].DisplayAlpha -= 15;
					else Q_SEnergy[aero].DisplayAlpha = 120;

					if(Q_SEnergy[aero].DisplayColor - 25 > 0) Q_SEnergy[aero].DisplayColor -= 25;
					else Q_SEnergy[aero].DisplayColor = 0;

					if(Q_SEnergy[aero].DisplayScale + 0.05 < 0.75) Q_SEnergy[aero].DisplayScale += 0.06;
					else Q_SEnergy[aero].DisplayScale = 0.75;
					
					if(Q_SEnergy[aero].ActorID == 250)
						{
						player.LaserLV.a = Q_SEnergy[aero].DisplayAlpha;
						player.LaserLV.r = 255;
						player.LaserLV.g = Q_SEnergy[aero].DisplayColor;
						player.LaserLV.b = 0;
						player.LaserLV.X = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.X;
						player.LaserLV.Y = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Y + 65;
						player.LaserLV.Z = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Z;

						geWorld_AddPolyOnce(World, &player.LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_SEnergy[aero].DisplayScale);
						}
					else
						{
						if(Q_SEnergy[aero].TargetID == 250)
							{
							Forge[Q_SEnergy[aero].ActorID].LaserLV.a = Q_SEnergy[aero].DisplayAlpha;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.r = 255;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.g = Q_SEnergy[aero].DisplayColor;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.b = 0;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.X = playact.ActorXform.Translation.X;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Y = playact.ActorXform.Translation.Y + 65;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Z = playact.ActorXform.Translation.Z;

							geWorld_AddPolyOnce(World, &Forge[Q_SEnergy[aero].ActorID].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_SEnergy[aero].DisplayScale);
							}
						else
							{
							Forge[Q_SEnergy[aero].ActorID].LaserLV.a = Q_SEnergy[aero].DisplayAlpha;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.r = 255;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.g = Q_SEnergy[aero].DisplayColor;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.b = 0;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.X = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.X;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Y = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Y + 65;
							Forge[Q_SEnergy[aero].ActorID].LaserLV.Z = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation.Z;

							geWorld_AddPolyOnce(World, &Forge[Q_SEnergy[aero].ActorID].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_SEnergy[aero].DisplayScale);
							}
						}

					if(Q_SEnergy[aero].TargetID == 250)
						{
						Q_SEnergy[aero].TargetVec = playact.ActorXform.Translation;
						Q_SEnergy[aero].TargetVec.Y += 65;
						}
					else
						{
						Q_SEnergy[aero].TargetVec = Forge[Q_SEnergy[aero].TargetID].Avatar.ActorXform.Translation;
						Q_SEnergy[aero].TargetVec.Y += 65;
						}
					}

					//Set Light Power and Move the Light
				Q_SEnergy[aero].LOldPos = Q_SEnergy[aero].LightPos;
				geVec3d_MA(&Q_SEnergy[aero].LightPos, Q_SEnergy[aero].Speed*TimeScale, &Q_SEnergy[aero].TraVec, &Q_SEnergy[aero].LightPos);

				geWorld_SetLightAttributes(World, Q_SEnergy[aero].Light, &Q_SEnergy[aero].LightPos, &Q_SEnergy[aero].LightColor, Q_SEnergy[aero].Scale * 150, GE_FALSE);

				helly = 0;
				while(helly < Q_SEnergy[aero].NomActors)
					{
					geActor_SetScale(Q_SEnergy[aero].ActorFlag[helly].Actor, Q_SEnergy[aero].Scale, Q_SEnergy[aero].Scale, Q_SEnergy[aero].Scale);

					geActor_SetAlpha(Q_SEnergy[aero].ActorFlag[helly].Actor, Q_SEnergy[aero].Alpha * Q_SEnergy[aero].AlphaScale[helly]);

					geVec3d_Copy(&Q_SEnergy[aero].LightPos, &Q_SEnergy[aero].ActorFlag[helly].ActorXform.Translation);
					geVec3d_MA(&Q_SEnergy[aero].LightPos, -(Q_SEnergy[aero].Speed * Q_SEnergy[aero].SpeedScale[helly]), &Q_SEnergy[aero].TraVec, &Q_SEnergy[aero].ActorFlag[helly].ActorXform.Translation);

					geActor_ClearPose(Q_SEnergy[aero].ActorFlag[helly].Actor, &Q_SEnergy[aero].ActorFlag[helly].ActorXform);
					helly++;
					}


				geSound3D_GetConfig(World,
							&player.ViewXForm,
							&Q_SEnergy[aero].LightPos,
							600.0f,
							2.0f,
							&Volume,
							&Pan,
							&Frequency);
				
				geSound_ModifySound(SoundSys, Q_SEnergy[aero].Sound, Volume, Pan, Frequency);

				Q_SEnergy[aero].LOldPos = Q_SEnergy[aero].LightPos;
				geVec3d_MA(&Q_SEnergy[aero].LightPos, Q_SEnergy[aero].Speed*TimeScale, &Q_SEnergy[aero].TraVec, &Q_SEnergy[aero].LightPos);


				if(Q_SEnergy[aero].ActorID == 250)	//Player Fired Projectile
					{
					//##### AVATAR SHIELD COLLIDE TEST
					SCRAM=0;
					while(SCRAM < NomAI)
						{
						if(Forge[SCRAM].LIVE == 1)
							{
							if(Forge[SCRAM].Cleric.ShieldAlpha > 0)
								{
								if(player.Team != Forge[SCRAM].Team)
									{
									TESTDist = 100;
									TESTPosS = Q_SEnergy[aero].LOldPos;
									TESTPosE = Q_SEnergy[aero].LightPos;
									while(TESTDist > 1)
										{
										geVec3d_MA(&TESTPosS, 1, &Q_SEnergy[aero].TraVec, &TESTPosS);

										TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

										TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

										if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
											{
											if(Forge[SCRAM].HB_Energy > 0)
												{
												TESTPosS = TESTPosE;
												TESTDist = 0;

												jet=0;
												while((jet < 1) && (NomPntSprite < 24998))
													{
													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
													Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
													Q_PntSprite[NomPntSprite].PartType = 8;

													Q_PntSprite[NomPntSprite].IR = 255;
													Q_PntSprite[NomPntSprite].IG = 255;
													Q_PntSprite[NomPntSprite].IB = 255;

													Q_PntSprite[NomPntSprite].Alpha = 100;
													Q_PntSprite[NomPntSprite].Speed = 0.4;
													Q_PntSprite[NomPntSprite].Pos = TESTPosS;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

													Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}
												}
											}
										}
									}
								}
							}
						SCRAM++;
						}
					}
				else
					{
					//PLAYER SHIELD CHECK
					if(player.Cleric.ShieldAlpha > 0)
						{
						if(Forge[Q_SEnergy[aero].ActorID].Team != player.Team)
							{
							TESTDist = 100;
							TESTPosS = Q_SEnergy[aero].LOldPos;
							TESTPosE = Q_SEnergy[aero].LightPos;
							while(TESTDist > 1)
								{
								geVec3d_MA(&TESTPosS, 1, &Q_SEnergy[aero].TraVec, &TESTPosS);

								TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &player.Shield.ActorXform.Translation);

								TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

								if(TESTShieldDIST < (65 * player.Cleric.ShieldScale))
									{
									if(player.HB_Energy > 0)
										{
										jet=0;
										while((jet < 1) && (NomPntSprite < 24998))
											{
											TESTPosS = TESTPosE;
											TESTDist = 0;

											Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
											Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
											Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
											Q_PntSprite[NomPntSprite].PartType = 8;

											Q_PntSprite[NomPntSprite].IR = 255;
											Q_PntSprite[NomPntSprite].IG = 255;
											Q_PntSprite[NomPntSprite].IB = 255;

											Q_PntSprite[NomPntSprite].Alpha = 100;
											Q_PntSprite[NomPntSprite].Speed = 0.4;
											Q_PntSprite[NomPntSprite].Pos = TESTPosS;

											Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
											Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
											Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

											Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
											Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
											Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

											Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

											Q_PntSprite[NomPntSprite].Live = 1;

											NomPntSprite++;
											jet++;
											}
										}
									}
								}
							}
						}

					//### AVATAR SHIELD CHECK
					SCRAM=0;
					while(SCRAM < NomAI)
						{
						if(Forge[SCRAM].LIVE == 1)
							{
							if(Forge[SCRAM].Cleric.ShieldAlpha > 0)
								{
								if(Forge[Q_SEnergy[aero].ActorID].Team != Forge[SCRAM].Team)
									{
									TESTDist = 100;
									TESTPosS = Q_SEnergy[aero].LOldPos;
									TESTPosE = Q_SEnergy[aero].LightPos;
									while(TESTDist > 1)
										{
										geVec3d_MA(&TESTPosS, 1, &Q_SEnergy[aero].TraVec, &TESTPosS);

										TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

										TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

										if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
											{
											if(Forge[SCRAM].HB_Energy > 0)
												{
												jet=0;
												while((jet < 1) && (NomPntSprite < 24998))
													{
													TESTPosS = TESTPosE;
													TESTDist = 0;

													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
													Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
													Q_PntSprite[NomPntSprite].PartType = 8;

													Q_PntSprite[NomPntSprite].IR = 255;
													Q_PntSprite[NomPntSprite].IG = 255;
													Q_PntSprite[NomPntSprite].IB = 255;

													Q_PntSprite[NomPntSprite].Alpha = 100;
													Q_PntSprite[NomPntSprite].Speed = 0.4;
													Q_PntSprite[NomPntSprite].Pos = TESTPosS;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

													Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}
												}
											}
										}
									}
								}
							}
						SCRAM++;
						}
					}

				Q_SEnergy[aero].LightPos = Q_SEnergy[aero].LOldPos;
				}
			aero++;
			}
		}
	}


	//########  - LARGE ENERGY ATTACKS -  ########//

if(NetworkOption != 1)
	{
	if(NomLEnergy > 0)
		{
		aero = 0;
		while(aero < NomLEnergy)
			{
			if(Q_LEnergy[aero].Live == 1)	//Attack is live
				{
				if(Q_LEnergy[aero].Init == 0 && Q_LEnergy[aero].EnergyLive == 1)
					{
					Q_LEnergy[aero].Init = 1;
					Q_LEnergy[aero].Power = 1;
					Q_LEnergy[aero].EnergyFire = 0;
					Q_LEnergy[aero].Scale = 0.01;
					Q_LEnergy[aero].ScaleInc = 0.005;
					Q_LEnergy[aero].ScaleGrow = 0;
					Q_LEnergy[aero].Speed = 3;
					Q_LEnergy[aero].Alpha = 170;
					geActor_SetAlpha(Q_LEnergy[aero].EnergyBall.Actor, Q_LEnergy[aero].Alpha);
					Q_LEnergy[aero].Light = geWorld_AddLight(World);
					Q_LEnergy[aero].Lightcolor.r = 255;
					Q_LEnergy[aero].Lightcolor.g = 255;
					Q_LEnergy[aero].Lightcolor.b = 190;
					Q_LEnergy[aero].Lightcolor.a = 255;

					//Init Flame Wake

					/*jet = 0;
					while(jet < 20)
						{
						//# Effect Type ## Hadouken Spike ##
						HHSpike[NomSpikes].EffectType = 1;

						//## Speed
						HHSpike[NomSpikes].Speed = ((((float)rand() / 32767)*50)+50);

						//### Width
						HHSpike[NomSpikes].Width = (((float)rand() / 32767)*15);

						//##### Alpha Level
						HHSpike[NomSpikes].AlpFade = (((float)rand() / 32767)*255);
						HHSpike[NomSpikes].FadeDir = 0;

						//###### Center Position
						HHSpike[NomSpikes].CenterPos = Q_LEnergy[aero].LightPos;
						HHSpike[NomSpikes].FrontPos = HHSpike[NomSpikes].CenterPos;

						HHSpike[NomSpikes].EnergyID = aero;

						//####### Create Trajectory Vector From Random Numbers
						HHSpike[NomSpikes].IncX = (((float)rand() / 32767)-0.5)*20;
						HHSpike[NomSpikes].IncY = (((float)rand() / 32767)-0.5)*20;
						HHSpike[NomSpikes].IncZ = (((float)rand() / 32767)-0.5)*20;

						//####### Create Trajectory Vector From Random Numbers
						HHSpike[NomSpikes].OutVec.X = (((float)rand() / 32767)-0.5)*2;
						HHSpike[NomSpikes].OutVec.Y = (((float)rand() / 32767)-0.5)*2;
						HHSpike[NomSpikes].OutVec.Z = (((float)rand() / 32767)-0.5)*2;

						//######## Set Timers
						HHSpike[NomSpikes].Timer = 0;

						//######### Make Live
						HHSpike[NomSpikes].Live = 1;

						NomSpikes++;
						if(NomSpikes > 499) NomSpikes = 0;
						jet++;
						}*/

					/*jet = 0;
					while(jet < 65)
						{
						//# Effect Type ## Hadouken Spike ##
						HHSpike[NomSpikes].SelFinger = (float)rand() / 32767;

						if(HHSpike[NomSpikes].SelFinger < 0.7) HHSpike[NomSpikes].EffectType = 5;
						if(HHSpike[NomSpikes].SelFinger > 0.7) HHSpike[NomSpikes].EffectType = 3;
						if(HHSpike[NomSpikes].SelFinger > 0.9) HHSpike[NomSpikes].EffectType = 6;

						//## Speed
						HHSpike[NomSpikes].Speed = ((((float)rand() / 32767)*50)+50);

						//### Width
						HHSpike[NomSpikes].Width = (((float)rand() / 32767)*15);

						//##### Alpha Level
						HHSpike[NomSpikes].AlpFade = (((float)rand() / 32767)*255);
						HHSpike[NomSpikes].FadeDir = 0;

						//###### Center Position
						HHSpike[NomSpikes].CenterPos = Q_LEnergy[aero].LightPos;
						HHSpike[NomSpikes].FrontPos = HHSpike[NomSpikes].CenterPos;

						HHSpike[NomSpikes].EnergyID = aero;

						//####### Create Trajectory Vector From Random Numbers
						HHSpike[NomSpikes].IncX = (((float)rand() / 32767)-0.5)*20;
						HHSpike[NomSpikes].IncY = (((float)rand() / 32767)-0.5)*20;
						HHSpike[NomSpikes].IncZ = (((float)rand() / 32767)-0.5)*20;

						//####### Create Trajectory Vector From Random Numbers
						HHSpike[NomSpikes].OutVec.X = (((float)rand() / 32767)-0.5)*2;
						HHSpike[NomSpikes].OutVec.Y = (((float)rand() / 32767)-0.5)*2;
						HHSpike[NomSpikes].OutVec.Z = (((float)rand() / 32767)-0.5)*2;

						//######## Set Timers
						HHSpike[NomSpikes].Timer = 0;

						//######### Make Live
						HHSpike[NomSpikes].Live = 1;

						NomSpikes++;
						if(NomSpikes > 499) NomSpikes = 0;
						jet++;
						}*/
					}


				if(Q_LEnergy[aero].EnergyLive == 1)
					{
					if(Q_LEnergy[aero].Power <= 30) player.LaserAlpha = (Q_LEnergy[aero].Power * 2) + 15;
					else player.LaserAlpha = 75;


					Q_LEnergy[aero].CoronaLENGTH = geVec3d_DistanceBetween(&Q_LEnergy[aero].LightPos, &player.ViewXForm.Translation);

					geXForm3d_GetIn(&player.ViewXForm, &Q_LEnergy[aero].CoronaVECIN);
					geXForm3d_GetUp(&player.ViewXForm, &Q_LEnergy[aero].CoronaVECUP);
					geVec3d_CrossProduct(&Q_LEnergy[aero].CoronaVECIN, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVECLEFT);

					geXForm3d_SetIdentity(&Q_LEnergy[aero].CoronaMATRIX);

					Q_LEnergy[aero].CoronaMATV1.X = 0;
					Q_LEnergy[aero].CoronaMATV1.Y = 0;
					Q_LEnergy[aero].CoronaMATV1.Z = 0;
					Q_LEnergy[aero].CoronaMATV2.X = 0;
					Q_LEnergy[aero].CoronaMATV2.Y = 0;
					Q_LEnergy[aero].CoronaMATV2.Z = 0;
					Q_LEnergy[aero].CoronaMATV3.X = 0;
					Q_LEnergy[aero].CoronaMATV3.Y = 0;
					Q_LEnergy[aero].CoronaMATV3.Z = 0;
					Q_LEnergy[aero].CoronaMATV4.X = 0;
					Q_LEnergy[aero].CoronaMATV4.Y = 0;
					Q_LEnergy[aero].CoronaMATV4.Z = 0;

					//### Matrix Vert 1
					geXForm3d_RotateY(&Q_LEnergy[aero].CoronaMATRIX, Q_LEnergy[aero].CoronaLENGTH/30);

					geXForm3d_GetIn(&Q_LEnergy[aero].CoronaMATRIX, &Q_LEnergy[aero].CoronaMATVECIN);

					geVec3d_MA(&Q_LEnergy[aero].CoronaMATV1, 240, &Q_LEnergy[aero].CoronaMATVECIN, &Q_LEnergy[aero].CoronaMATV1);

					//### Matrix Vert 2
					geXForm3d_RotateY(&Q_LEnergy[aero].CoronaMATRIX, PI/2);

					geXForm3d_GetIn(&Q_LEnergy[aero].CoronaMATRIX, &Q_LEnergy[aero].CoronaMATVECIN);

					geVec3d_MA(&Q_LEnergy[aero].CoronaMATV2, 240, &Q_LEnergy[aero].CoronaMATVECIN, &Q_LEnergy[aero].CoronaMATV2);

					//### Matrix Vert 1
					geXForm3d_RotateY(&Q_LEnergy[aero].CoronaMATRIX, PI/2);

					geXForm3d_GetIn(&Q_LEnergy[aero].CoronaMATRIX, &Q_LEnergy[aero].CoronaMATVECIN);

					geVec3d_MA(&Q_LEnergy[aero].CoronaMATV3, 240, &Q_LEnergy[aero].CoronaMATVECIN, &Q_LEnergy[aero].CoronaMATV3);

					//### Matrix Vert 1
					geXForm3d_RotateY(&Q_LEnergy[aero].CoronaMATRIX, PI/2);

					geXForm3d_GetIn(&Q_LEnergy[aero].CoronaMATRIX, &Q_LEnergy[aero].CoronaMATVECIN);

					geVec3d_MA(&Q_LEnergy[aero].CoronaMATV4, 240, &Q_LEnergy[aero].CoronaMATVECIN, &Q_LEnergy[aero].CoronaMATV4);


					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].CoronaMATV1.X, &Q_LEnergy[aero].CoronaVECLEFT, &Q_LEnergy[aero].CoronaVERT1);
					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].CoronaMATV2.X, &Q_LEnergy[aero].CoronaVECLEFT, &Q_LEnergy[aero].CoronaVERT2);
					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].CoronaMATV4.X, &Q_LEnergy[aero].CoronaVECLEFT, &Q_LEnergy[aero].CoronaVERT4);
					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].CoronaMATV3.X, &Q_LEnergy[aero].CoronaVECLEFT, &Q_LEnergy[aero].CoronaVERT3);

					geVec3d_MA(&Q_LEnergy[aero].CoronaVERT1, Q_LEnergy[aero].CoronaMATV1.Z, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVERT1);
					geVec3d_MA(&Q_LEnergy[aero].CoronaVERT2, Q_LEnergy[aero].CoronaMATV2.Z, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVERT2);
					geVec3d_MA(&Q_LEnergy[aero].CoronaVERT4, Q_LEnergy[aero].CoronaMATV4.Z, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVERT4);
					geVec3d_MA(&Q_LEnergy[aero].CoronaVERT3, Q_LEnergy[aero].CoronaMATV3.Z, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVERT3);


					Q_LEnergy[aero].CoronaLV[0].a = 150;//(player.LaserAlpha*3) - 30;
					Q_LEnergy[aero].CoronaLV[0].u = 1;
					Q_LEnergy[aero].CoronaLV[0].v = 1;
					Q_LEnergy[aero].CoronaLV[0].r = 255;
					Q_LEnergy[aero].CoronaLV[0].g = 255;
					Q_LEnergy[aero].CoronaLV[0].b = 255;
					Q_LEnergy[aero].CoronaLV[0].X = Q_LEnergy[aero].CoronaVERT1.X;
					Q_LEnergy[aero].CoronaLV[0].Y = Q_LEnergy[aero].CoronaVERT1.Y;
					Q_LEnergy[aero].CoronaLV[0].Z = Q_LEnergy[aero].CoronaVERT1.Z;

					Q_LEnergy[aero].CoronaLV[1].a = 150;//(player.LaserAlpha*3) - 30;
					Q_LEnergy[aero].CoronaLV[1].u = 0;
					Q_LEnergy[aero].CoronaLV[1].v = 1;
					Q_LEnergy[aero].CoronaLV[1].r = 255;
					Q_LEnergy[aero].CoronaLV[1].g = 255;
					Q_LEnergy[aero].CoronaLV[1].b = 255;
					Q_LEnergy[aero].CoronaLV[1].X = Q_LEnergy[aero].CoronaVERT2.X;
					Q_LEnergy[aero].CoronaLV[1].Y = Q_LEnergy[aero].CoronaVERT2.Y;
					Q_LEnergy[aero].CoronaLV[1].Z = Q_LEnergy[aero].CoronaVERT2.Z;

					Q_LEnergy[aero].CoronaLV[2].a = 150;//(player.LaserAlpha*3) - 30;
					Q_LEnergy[aero].CoronaLV[2].u = 0;
					Q_LEnergy[aero].CoronaLV[2].v = 0;
					Q_LEnergy[aero].CoronaLV[2].r = 255;
					Q_LEnergy[aero].CoronaLV[2].g = 255;
					Q_LEnergy[aero].CoronaLV[2].b = 255;
					Q_LEnergy[aero].CoronaLV[2].X = Q_LEnergy[aero].CoronaVERT3.X;
					Q_LEnergy[aero].CoronaLV[2].Y = Q_LEnergy[aero].CoronaVERT3.Y;
					Q_LEnergy[aero].CoronaLV[2].Z = Q_LEnergy[aero].CoronaVERT3.Z;

					Q_LEnergy[aero].CoronaLV[3].a = 150;//(player.LaserAlpha*3) - 30;
					Q_LEnergy[aero].CoronaLV[3].u = 1;
					Q_LEnergy[aero].CoronaLV[3].v = 0;
					Q_LEnergy[aero].CoronaLV[3].r = 255;
					Q_LEnergy[aero].CoronaLV[3].g = 255;
					Q_LEnergy[aero].CoronaLV[3].b = 255;
					Q_LEnergy[aero].CoronaLV[3].X = Q_LEnergy[aero].CoronaVERT4.X;
					Q_LEnergy[aero].CoronaLV[3].Y = Q_LEnergy[aero].CoronaVERT4.Y;
					Q_LEnergy[aero].CoronaLV[3].Z = Q_LEnergy[aero].CoronaVERT4.Z;

					Q_LEnergy[aero].CoronaMATCNT++;
					if(Q_LEnergy[aero].CoronaMATCNT < 0) Q_LEnergy[aero].CoronaMATCNT = 0;
					if(Q_LEnergy[aero].CoronaMATCNT > 25) Q_LEnergy[aero].CoronaMATCNT = 0;

					geWorld_AddPolyOnce(World, &Q_LEnergy[aero].CoronaLV[0], 4, Star[Q_LEnergy[aero].CoronaMATCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);

					//geWorld_AddPolyOnce(World, &Q_LEnergy[aero].CoronaLV[0], 4, shineE, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);

					//geWorld_SetLightAttributes(World, Q_LEnergy[aero].Light, &Q_LEnergy[aero].LightPos, &Q_LEnergy[aero].Lightcolor, Q_LEnergy[aero].Power + (((rand() % Q_LEnergy[aero].Power) / 5) - (Q_LEnergy[aero].Power / 10)), GE_FALSE);
					geWorld_SetLightAttributes(World, Q_LEnergy[aero].Light, &Q_LEnergy[aero].LightPos, &Q_LEnergy[aero].Lightcolor, 500, GE_FALSE);
				
					geActor_GetMaterial(Q_LEnergy[aero].EnergyBall.Actor, Q_LEnergy[aero].BmpCount, &Q_LEnergy[aero].Bitmap, &Q_LEnergy[aero].BitmapRed, &Q_LEnergy[aero].BitmapGreen, &Q_LEnergy[aero].BitmapBlue);
					geActor_SetMaterial(Q_LEnergy[aero].EnergyBall.Actor, 0, Q_LEnergy[aero].Bitmap, Q_LEnergy[aero].BitmapRed, Q_LEnergy[aero].BitmapGreen, Q_LEnergy[aero].BitmapBlue);

					if(Q_LEnergy[aero].BmpCount + 1 < 12) Q_LEnergy[aero].BmpCount++;	//18
					else Q_LEnergy[aero].BmpCount = 1;

					geVec3d_Copy(&Q_LEnergy[aero].LightPos, &Q_LEnergy[aero].EnergyBall.ActorXform.Translation);
					//geActor_SetScale(Q_LEnergy[aero].EnergyBall.Actor, Q_LEnergy[aero].EnergyScale*Q_LEnergy[aero].EnergyScaleXSquash,Q_LEnergy[aero].EnergyScale*Q_LEnergy[aero].EnergyScaleYSquash,Q_LEnergy[aero].EnergyScale*Q_LEnergy[aero].EnergyScaleZSquash);
					geActor_SetScale(Q_LEnergy[aero].EnergyBall.Actor, Q_LEnergy[aero].Scale,Q_LEnergy[aero].Scale,Q_LEnergy[aero].Scale);
					//EDIT************ Scale Altered

					geXForm3d_SetZRotation(&AIfriendly, 0);
					geXForm3d_SetYRotation(&AIfriendly, 0.2);

					geActor_ClearPose(Q_LEnergy[aero].EnergyBall.Actor, &Q_LEnergy[aero].EnergyBall.ActorXform);
					}


				if(Q_LEnergy[aero].EnergyFire == 0 && Q_LEnergy[aero].EnergyLive == 1)
					{
					if(Q_LEnergy[aero].Scale < 0.13 && Q_LEnergy[aero].ScaleGrow == 0)
						{
						Q_LEnergy[aero].Scale += Q_LEnergy[aero].ScaleInc;	//0.0008;	//0.008//0.05	************HERE*************
						Q_LEnergy[aero].ScaleInc -= 0.0005;
						Q_LEnergy[aero].SaveScale = Q_LEnergy[aero].Scale;	//Not Nessesary **********
						}
					else
						{
						Q_LEnergy[aero].Scale = Q_LEnergy[aero].SaveScale + ((((float)rand() / 32767) - 0.5) / 50);
						Q_LEnergy[aero].ScaleGrow = 1;
						}

					if(Q_LEnergy[aero].AvatarID == 250)
						{
						if(player.Aposestate != 50 && player.Aposestate != 78)
							{
							geWorld_RemoveLight(World, Q_LEnergy[aero].Light);
							Q_LEnergy[aero].Init = 0;
							Q_LEnergy[aero].Live = 0;
							Q_LEnergy[aero].EnergyLive = 0;
							Q_LEnergy[aero].EnergyFire = 0;
							geVec3d_Copy(&Origon, &Q_LEnergy[aero].EnergyBall.ActorXform.Translation);
							geActor_SetScale(Q_LEnergy[aero].EnergyBall.Actor, 0,0,0);
							geActor_ClearPose(Q_LEnergy[aero].EnergyBall.Actor, &Q_LEnergy[aero].EnergyBall.ActorXform);

							//### Energy Array Reorder
							K = aero;
							while(K < NomLEnergy - 1)
								{
								Q_LEnergy[K] = Q_LEnergy[K+1];
								K++;
								}

							NomLEnergy--;
							}
						}
					else
						{
						if(Forge[Q_LEnergy[aero].AvatarID].Aposestate != 50 && Forge[Q_LEnergy[aero].AvatarID].Aposestate != 78)
							{
							geWorld_RemoveLight(World, Q_LEnergy[aero].Light);
							Q_LEnergy[aero].Init = 0;
							Q_LEnergy[aero].Live = 0;
							Q_LEnergy[aero].EnergyLive = 0;
							Q_LEnergy[aero].EnergyFire = 0;
							geVec3d_Copy(&Origon, &Q_LEnergy[aero].EnergyBall.ActorXform.Translation);
							geActor_SetScale(Q_LEnergy[aero].EnergyBall.Actor, 0,0,0);
							geActor_ClearPose(Q_LEnergy[aero].EnergyBall.Actor, &Q_LEnergy[aero].EnergyBall.ActorXform);

							//### Energy Array Reorder
							K = aero;
							while(K < NomLEnergy - 1)
								{
								Q_LEnergy[K] = Q_LEnergy[K+1];
								K++;
								}

							NomLEnergy--;
							}
						}
					}
				else
					{
					if(Q_LEnergy[aero].EnergyLive == 1)
						{
						Q_LEnergy[aero].Alpha = 255;
						geActor_SetAlpha(Q_LEnergy[aero].EnergyBall.Actor, Q_LEnergy[aero].Alpha);
						if(Q_LEnergy[aero].Scale < 0.19 && Q_LEnergy[aero].ScaleGrow == 0)
							{
							Q_LEnergy[aero].Scale += Q_LEnergy[aero].ScaleInc;	//0.0008;	//0.008//0.05	************HERE*************
							Q_LEnergy[aero].ScaleInc -= 0.00002;
							Q_LEnergy[aero].SaveScale = Q_LEnergy[aero].Scale;
							}
						else
							{
							Q_LEnergy[aero].Scale = Q_LEnergy[aero].SaveScale + ((((float)rand() / 32767) - 0.5) / 50);
							Q_LEnergy[aero].ScaleGrow = 1;
							}
						}

					if(Q_LEnergy[aero].ScaleXDir == 0)
						{
						Q_LEnergy[aero].ScaleXSquash += ((float)rand() / 32767)*0.1;	//0.05
						if(Q_LEnergy[aero].ScaleXSquash >= 1)
							{
							Q_LEnergy[aero].ScaleXSquash = 1;
							Q_LEnergy[aero].ScaleXDir = 1;
							}
						}

					if(Q_LEnergy[aero].ScaleXDir == 1)
						{
						Q_LEnergy[aero].ScaleXSquash -= ((float)rand() / 32767)*0.1;
						if(Q_LEnergy[aero].ScaleXSquash <= 0.3)
							{
							Q_LEnergy[aero].ScaleXSquash = 0.3;
							Q_LEnergy[aero].ScaleXDir = 0;
							}
						}


					Q_LEnergy[aero].ScaleYSquash = 1 - Q_LEnergy[aero].ScaleXSquash + 0.3;


					if(Q_LEnergy[aero].ScaleZDir == 0)
						{
						Q_LEnergy[aero].ScaleZSquash += ((float)rand() / 32767)*0.1;
						if(Q_LEnergy[aero].ScaleZSquash >= 1)
							{
							Q_LEnergy[aero].ScaleZSquash = 1;
							Q_LEnergy[aero].ScaleZDir = 1;
							}
						}

					if(Q_LEnergy[aero].ScaleZDir == 1)
						{
						Q_LEnergy[aero].ScaleZSquash -= ((float)rand() / 32767)*0.1;
						if(Q_LEnergy[aero].ScaleZSquash <= 0.2)
							{
							Q_LEnergy[aero].ScaleZSquash = 0.12;
							Q_LEnergy[aero].ScaleZDir = 0;
							}
						}
					}


				if(Q_LEnergy[aero].EnergyFire == 1 && Q_LEnergy[aero].EnergyLive == 1)
					{
					TESTShieldFLAG = 0;

					Q_LEnergy[aero].OldLightPos = Q_LEnergy[aero].LightPos;
					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].Speed*TimeScale, &Q_LEnergy[aero].TraVec, &Q_LEnergy[aero].LightPos);

					if(Q_LEnergy[aero].Speed < 50) Q_LEnergy[aero].Speed *= 2;
					else Q_LEnergy[aero].Speed = 50;

					//##### PLAYER SHIELD COLLIDE TEST
					if((player.Cleric.ShieldAlpha > 0) && (Q_LEnergy[aero].AvatarID != 250) && (Q_LEnergy[aero].Live == 1) && (player.HB_Energy > 0))
						{
						if(Forge[Q_LEnergy[aero].AvatarID].Team != player.Team)
							{
							TESTDist = 100;
							TESTPosS = Q_LEnergy[aero].OldLightPos;
							TESTPosE = Q_LEnergy[aero].LightPos;
							while(TESTDist > 1)
								{
								geVec3d_MA(&TESTPosS, 1, &Q_LEnergy[aero].TraVec, &TESTPosS);

								TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &player.Shield.ActorXform.Translation);

								TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

								if(TESTShieldDIST < (65 * player.Cleric.ShieldScale))
									{
									TESTShieldFLAG = 1;

									jet=0;
									while((jet < (((Q_LEnergy[aero].EnergyDMG/5000) * 145) + 20)) && (NomPntSprite < 24998))
										{
										Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
										Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
										Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
										Q_PntSprite[NomPntSprite].PartType = 8;

										Q_PntSprite[NomPntSprite].IR = 255;
										Q_PntSprite[NomPntSprite].IG = 225;
										Q_PntSprite[NomPntSprite].IB = 225;

										Q_PntSprite[NomPntSprite].Alpha = 100;
										Q_PntSprite[NomPntSprite].Speed = (0.2 + (6 * (Q_LEnergy[aero].EnergyDMG/5000)));
										Q_PntSprite[NomPntSprite].Pos = TESTPosS;

										Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
										Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
										Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

										Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*15;
										Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*15;
										Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*15;

										Q_PntSprite[NomPntSprite].ActorID = 250;

										Q_PntSprite[NomPntSprite].Live = 1;

										NomPntSprite++;
										jet++;
										}

									player.HB_Energy -= (((Q_LEnergy[aero].EnergyDMG/5000) * 250) + 35) / (10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Duration/5000));

									Q_NetEffectControl[NomNetEffectControl].Live = 10;
									Q_NetEffectControl[NomNetEffectControl].Pos = TESTPosS;
									Q_NetEffectControl[NomNetEffectControl].EffIntensity = Q_LEnergy[aero].EnergyDMG;
									Q_NetEffectControl[NomNetEffectControl].Type = 0;
									NomNetEffectControl++;

									geWorld_RemoveLight(World, Q_LEnergy[aero].Light);
									Q_LEnergy[aero].Init = 0;
									Q_LEnergy[aero].Live = 0;
									Q_LEnergy[aero].EnergyLive = 0;
									Q_LEnergy[aero].EnergyFire = 0;
									geVec3d_Copy(&Origon, &Q_LEnergy[aero].EnergyBall.ActorXform.Translation);
									geActor_SetScale(Q_LEnergy[aero].EnergyBall.Actor, 0,0,0);
									geActor_ClearPose(Q_LEnergy[aero].EnergyBall.Actor, &Q_LEnergy[aero].EnergyBall.ActorXform);

									//### Energy Array Reorder
									K = aero;
									while(K < NomLEnergy - 1)
										{
										Q_LEnergy[K] = Q_LEnergy[K+1];
										K++;
										}

									NomLEnergy--;

									TESTPosS = TESTPosE;
									TESTDist = 0;
									}
								}
							}
						}

					//##### AVATAR SHIELD COLLIDE TEST

					SCRAM=0;
					while(SCRAM < NomAI)
						{
						if(Forge[SCRAM].LIVE == 1)
							{
							if(Forge[SCRAM].Cleric.ShieldAlpha > 0 && (Q_LEnergy[aero].Live == 1) && (Forge[SCRAM].HB_Energy > 0))
								{
								if(Q_LEnergy[aero].AvatarID == 250)
									{
									if(player.Team != Forge[SCRAM].Team)
										{
										TESTDist = 100;
										TESTPosS = Q_LEnergy[aero].OldLightPos;
										TESTPosE = Q_LEnergy[aero].LightPos;
										while(TESTDist > 1)
											{
											geVec3d_MA(&TESTPosS, 1, &Q_LEnergy[aero].TraVec, &TESTPosS);

											TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

											TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

											if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
												{
												TESTShieldFLAG = 1;

												jet=0;
												while((jet < (((Q_LEnergy[aero].EnergyDMG/5000) * 145) + 20)) && (NomPntSprite < 24998))
													{
													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
													Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
													Q_PntSprite[NomPntSprite].PartType = 8;

													Q_PntSprite[NomPntSprite].IR = 255;
													Q_PntSprite[NomPntSprite].IG = 225;
													Q_PntSprite[NomPntSprite].IB = 225;

													Q_PntSprite[NomPntSprite].Alpha = 100;
													Q_PntSprite[NomPntSprite].Speed = (0.2 + (6 * (Q_LEnergy[aero].EnergyDMG/5000)));
													Q_PntSprite[NomPntSprite].Pos = TESTPosS;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*15;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*15;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*15;

													Q_PntSprite[NomPntSprite].ActorID = SCRAM;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}

												Forge[SCRAM].HB_Energy -= (((Q_LEnergy[aero].EnergyDMG/5000) * 250) + 35) / (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Duration/5000));

												Q_NetEffectControl[NomNetEffectControl].Live = 10;
												Q_NetEffectControl[NomNetEffectControl].Pos = TESTPosS;
												Q_NetEffectControl[NomNetEffectControl].EffIntensity = Q_LEnergy[aero].EnergyDMG;
												Q_NetEffectControl[NomNetEffectControl].Type = 0;
												NomNetEffectControl++;

												geWorld_RemoveLight(World, Q_LEnergy[aero].Light);
												Q_LEnergy[aero].Init = 0;
												Q_LEnergy[aero].Live = 0;
												Q_LEnergy[aero].EnergyLive = 0;
												Q_LEnergy[aero].EnergyFire = 0;
												geVec3d_Copy(&Origon, &Q_LEnergy[aero].EnergyBall.ActorXform.Translation);
												geActor_SetScale(Q_LEnergy[aero].EnergyBall.Actor, 0,0,0);
												geActor_ClearPose(Q_LEnergy[aero].EnergyBall.Actor, &Q_LEnergy[aero].EnergyBall.ActorXform);

												//### Energy Array Reorder
												K = aero;
												while(K < NomLEnergy - 1)
													{
													Q_LEnergy[K] = Q_LEnergy[K+1];
													K++;
													}

												NomLEnergy--;

												TESTPosS = TESTPosE;
												TESTDist = 0;
												}
											}
										}
									}
								else
									{
									if(Forge[Q_LEnergy[aero].AvatarID].Team != Forge[SCRAM].Team)
										{
										TESTDist = 100;
										TESTPosS = Q_LEnergy[aero].OldLightPos;
										TESTPosE = Q_LEnergy[aero].LightPos;
										while(TESTDist > 1)
											{
											geVec3d_MA(&TESTPosS, 1, &Q_LEnergy[aero].TraVec, &TESTPosS);

											TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

											TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

											if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
												{
												TESTShieldFLAG = 1;

												jet=0;
												while((jet < (((Q_LEnergy[aero].EnergyDMG/5000) * 145) + 20)) && (NomPntSprite < 24998))
													{
													Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
													Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
													Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
													Q_PntSprite[NomPntSprite].PartType = 8;

													Q_PntSprite[NomPntSprite].IR = 255;
													Q_PntSprite[NomPntSprite].IG = 225;
													Q_PntSprite[NomPntSprite].IB = 225;

													Q_PntSprite[NomPntSprite].Alpha = 100;
													Q_PntSprite[NomPntSprite].Speed = (0.2 + (6 * (Q_LEnergy[aero].EnergyDMG/5000)));
													Q_PntSprite[NomPntSprite].Pos = TESTPosS;

													Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
													Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

													Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*15;
													Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*15;
													Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*15;

													Q_PntSprite[NomPntSprite].ActorID = SCRAM;

													Q_PntSprite[NomPntSprite].Live = 1;

													NomPntSprite++;
													jet++;
													}

												Forge[SCRAM].HB_Energy -= ((Q_LEnergy[aero].EnergyDMG/5000) * 250) + 35;

												Q_NetEffectControl[NomNetEffectControl].Live = 10;
												Q_NetEffectControl[NomNetEffectControl].Pos = TESTPosS;
												Q_NetEffectControl[NomNetEffectControl].EffIntensity = Q_LEnergy[aero].EnergyDMG;
												Q_NetEffectControl[NomNetEffectControl].Type = 0;
												NomNetEffectControl++;

												geWorld_RemoveLight(World, Q_LEnergy[aero].Light);
												Q_LEnergy[aero].Init = 0;
												Q_LEnergy[aero].Live = 0;
												Q_LEnergy[aero].EnergyLive = 0;
												Q_LEnergy[aero].EnergyFire = 0;
												geVec3d_Copy(&Origon, &Q_LEnergy[aero].EnergyBall.ActorXform.Translation);
												geActor_SetScale(Q_LEnergy[aero].EnergyBall.Actor, 0,0,0);
												geActor_ClearPose(Q_LEnergy[aero].EnergyBall.Actor, &Q_LEnergy[aero].EnergyBall.ActorXform);

												//### Energy Array Reorder
												K = aero;
												while(K < NomLEnergy - 1)
													{
													Q_LEnergy[K] = Q_LEnergy[K+1];
													K++;
													}

												NomLEnergy--;

												TESTPosS = TESTPosE;
												TESTDist = 0;
												}
											}
										}
									}
								}
							}
						SCRAM++;
						}


					//######===-- Q_OBJECT COLLISION DETECTION --===#######
					SCRAM=0;
					while(SCRAM < NomQObject)
						{
						if(QObject[SCRAM].LIVE == 1)
							{
							//### COLLISION CHECK
							if(QObject[SCRAM].StrengthBANK > 0)
								{
								switch(QObject[SCRAM].CollisionTYPE)
									{
									case 0:
										{
										TESTDist = 100;
										TESTPosS = Q_LEnergy[aero].OldLightPos;
										TESTPosE = Q_LEnergy[aero].LightPos;
										while(TESTDist > 1)
											{
											geVec3d_MA(&TESTPosS, 1, &Q_LEnergy[aero].TraVec, &TESTPosS);

											TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &QObject[SCRAM].Pos);

											TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

											if(TESTShieldDIST < QObject[SCRAM].Scale)
												{
												//Set Player Enemy Display to correct enemy
												if(Q_LEnergy[aero].AvatarID == 250)
													{
													player.HB_LastAvatarHitID = (SCRAM + 1) * -1;
													}
												else
													{
													Forge[Q_LEnergy[aero].AvatarID].HB_LastAvatarHitID = (SCRAM + 1) * -1;
													}

												//### Block Hit Flash
												Q_MeleeHit[NomMelHit].Live = 1;
												Q_MeleeHit[NomMelHit].INIT = 0;
												Q_MeleeHit[NomMelHit].HitTYPE = 1;
												Q_MeleeHit[NomMelHit].HitRESULT = 9;
																					//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
												Q_MeleeHit[NomMelHit].Impact = TESTPosS;	//Point of impact in world space
												Q_MeleeHit[NomMelHit].Bonenum = detcnt;						//Number index of the bone hit
												Q_MeleeHit[NomMelHit].AttboneXF = Q_LEnergy[aero].EnergyBall.ActorXform;
												Q_MeleeHit[NomMelHit].HitPowerPercent = 1;
												Q_MeleeHit[NomMelHit].BloodAmt = 0;
												
												//Expandro3D Struct
												Q_MeleeHit[NomMelHit].Expandro3D.Radius = 60;					//Switch 0 = Off !0 = On
												Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 1000 * (Q_LEnergy[aero].EnergyDMG/5000);				//Max Radius
												Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 5;
												Q_MeleeHit[NomMelHit].Expandro3D.Red = 200;
												Q_MeleeHit[NomMelHit].Expandro3D.Blue = 60;
												Q_MeleeHit[NomMelHit].Expandro3D.Green = 200;

													//Increment number of MeleeHits
												NomMelHit += 1;

												QObject[SCRAM].StrengthBANK -= (((Q_LEnergy[aero].EnergyDMG/5000) * 750) + 100);

												TESTPosS = TESTPosE;
												TESTDist = 0;
												}
											}

										}break;
									}
								}
							}

						SCRAM++;
						}


					//#### REAL WORLD ACTORS AND MODELS COLLISION ####
					if(geWorld_Collision(World,
						&Q_LEnergy[aero].EnergyBall.Mins,
						&Q_LEnergy[aero].EnergyBall.Maxs,
						&Q_LEnergy[aero].OldLightPos,
						&Q_LEnergy[aero].LightPos,
						GE_CONTENTS_SOLID_CLIP,						//GE_CONTENTS_CANNOT_OCCUPY
						GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
						0xffffffff, NULL, NULL,
						&Q_LEnergy[aero].Collision) && (Q_LEnergy[aero].Live == 1) && (TESTShieldFLAG == 0))
						{
						//### Reset Collide
						Q_LEnergy[aero].CollideFG = 0;

						//### Check for Team Collisions
						if(Q_LEnergy[aero].Collision.Actor != NULL)
							{
							if(Q_LEnergy[aero].Collision.Actor->IDflag != 251)
								{
								if(Q_LEnergy[aero].Collision.Actor->IDflag == 250)
									{
									if(Q_LEnergy[aero].Team != player.Team)
										{ Q_LEnergy[aero].CollideFG = 2; }
									}
								else
									{
									if(Q_LEnergy[aero].Team != Forge[Q_LEnergy[aero].Collision.Actor->IDflag].Team)
										{ Q_LEnergy[aero].CollideFG = 2; }
									}
								}
							}
						else
							{
							Q_LEnergy[aero].CollideFG = 1;
							}

						if(Q_LEnergy[aero].CollideFG > 0)
							{
							geWorld_RemoveLight(World, Q_LEnergy[aero].Light);
							Q_LEnergy[aero].Init = 0;
							Q_LEnergy[aero].Live = 0;
							Q_LEnergy[aero].EnergyLive = 0;
							Q_LEnergy[aero].EnergyFire = 0;
							geVec3d_Copy(&Origon, &Q_LEnergy[aero].EnergyBall.ActorXform.Translation);
							geActor_SetScale(Q_LEnergy[aero].EnergyBall.Actor, 0,0,0);
							geActor_ClearPose(Q_LEnergy[aero].EnergyBall.Actor, &Q_LEnergy[aero].EnergyBall.ActorXform);

							//### Energy Array Reorder
							K = aero;
							while(K < NomLEnergy - 1)
								{
								Q_LEnergy[K] = Q_LEnergy[K+1];
								K++;
								}

							NomLEnergy--;

							Q_Explosion[NomExplosions].LargeEnergyActorID = aero;
							Q_Explosion[NomExplosions].AvatarID = Q_LEnergy[aero].AvatarID;
							Q_Explosion[NomExplosions].CollPlaneNormal = Q_LEnergy[aero].Collision.Plane.Normal;			//Point of impact in world space
							Q_Explosion[NomExplosions].Pos = Q_LEnergy[aero].Collision.Impact;
							Q_Explosion[NomExplosions].Live = 1;
							Q_Explosion[NomExplosions].Init = 0;
							Q_Explosion[NomExplosions].ExpSize = ((((float)rand() / 32767) * 0.4 ) + 2 ) * (((Q_LEnergy[aero].EnergyRAD/5000)*1.8) + 0.2);	//0.5 -0.65
							Q_Explosion[NomExplosions].ExpDMG = ((Q_LEnergy[aero].EnergyDMG/5000) * 13) + 3;	//0.5 -0.65
							Q_Explosion[NomExplosions].Team = Q_LEnergy[aero].Team;
							NomExplosions++;

							if(Q_LEnergy[aero].CollideFG == 1)
								{
								//#### Add a world decal
								geVec3d_MA(&Q_LEnergy[aero].OldLightPos, 300, &Q_LEnergy[aero].TraVec, &Q_LEnergy[aero].LightPos);

								if(geWorld_Collision(World,
									NULL,
									NULL,
									&Q_LEnergy[aero].OldLightPos,
									&Q_LEnergy[aero].LightPos,
									GE_CONTENTS_SOLID_CLIP,						//GE_CONTENTS_CANNOT_OCCUPY
									GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
									0xffffffff, NULL, NULL,
									&Q_LEnergy[aero].Collision))
									{
									Q_AddDecal(Q_LEnergy[aero].Collision.Impact, Q_LEnergy[aero].Collision.Plane.Normal, (18 * Q_Explosion[NomExplosions-1].ExpSize), 1);
									}
								}
							}
						}
					}

				}//END Live

			aero++;
			}//END Aero

		}//END NomLEnergy
	}
else	//########  - CLIENT PHANTOM LARGE ENERGY ATTACKS-  ########//
	{
	if(NomLEnergy > 0)
		{
		aero = 0;
		while(aero < NomLEnergy)
			{
			if(Q_LEnergy[aero].Live == 1)	//Attack is live
				{
				if(Q_LEnergy[aero].Init == 0 && Q_LEnergy[aero].EnergyLive == 1)
					{
					Q_LEnergy[aero].Init = 1;
					Q_LEnergy[aero].Power = 1;
					Q_LEnergy[aero].EnergyFire = 0;
					Q_LEnergy[aero].Scale = 0.01;
					Q_LEnergy[aero].ScaleInc = 0.005;
					Q_LEnergy[aero].ScaleGrow = 0;
					Q_LEnergy[aero].Speed = 3;
					Q_LEnergy[aero].Alpha = 170;
					geActor_SetAlpha(Q_LEnergy[aero].EnergyBall.Actor, Q_LEnergy[aero].Alpha);
					Q_LEnergy[aero].Light = geWorld_AddLight(World);
					Q_LEnergy[aero].Lightcolor.r = 255;
					Q_LEnergy[aero].Lightcolor.g = 255;
					Q_LEnergy[aero].Lightcolor.b = 190;
					Q_LEnergy[aero].Lightcolor.a = 255;


					/*jet = 0;
					while(jet < 20)
						{
						//# Effect Type ## Hadouken Spike ##
						HHSpike[NomSpikes].EffectType = 1;

						//## Speed
						HHSpike[NomSpikes].Speed = ((((float)rand() / 32767)*50)+50);

						//### Width
						HHSpike[NomSpikes].Width = (((float)rand() / 32767)*15);

						//##### Alpha Level
						HHSpike[NomSpikes].AlpFade = (((float)rand() / 32767)*255);
						HHSpike[NomSpikes].FadeDir = 0;

						//###### Center Position
						HHSpike[NomSpikes].CenterPos = Q_LEnergy[aero].LightPos;
						HHSpike[NomSpikes].FrontPos = HHSpike[NomSpikes].CenterPos;

						HHSpike[NomSpikes].EnergyID = aero;

						//####### Create Trajectory Vector From Random Numbers
						HHSpike[NomSpikes].IncX = (((float)rand() / 32767)-0.5)*20;
						HHSpike[NomSpikes].IncY = (((float)rand() / 32767)-0.5)*20;
						HHSpike[NomSpikes].IncZ = (((float)rand() / 32767)-0.5)*20;

						//####### Create Trajectory Vector From Random Numbers
						HHSpike[NomSpikes].OutVec.X = (((float)rand() / 32767)-0.5)*2;
						HHSpike[NomSpikes].OutVec.Y = (((float)rand() / 32767)-0.5)*2;
						HHSpike[NomSpikes].OutVec.Z = (((float)rand() / 32767)-0.5)*2;

						//######## Set Timers
						HHSpike[NomSpikes].Timer = 0;

						//######### Make Live
						HHSpike[NomSpikes].Live = 1;

						NomSpikes++;
						if(NomSpikes > 499) NomSpikes = 0;
						jet++;
						}*/

					/*jet = 0;
					while(jet < 65)
						{
						//# Effect Type ## Hadouken Spike ##
						HHSpike[NomSpikes].SelFinger = (float)rand() / 32767;

						if(HHSpike[NomSpikes].SelFinger < 0.7) HHSpike[NomSpikes].EffectType = 5;
						if(HHSpike[NomSpikes].SelFinger > 0.7) HHSpike[NomSpikes].EffectType = 3;
						if(HHSpike[NomSpikes].SelFinger > 0.9) HHSpike[NomSpikes].EffectType = 6;

						//## Speed
						HHSpike[NomSpikes].Speed = ((((float)rand() / 32767)*50)+50);

						//### Width
						HHSpike[NomSpikes].Width = (((float)rand() / 32767)*15);

						//##### Alpha Level
						HHSpike[NomSpikes].AlpFade = (((float)rand() / 32767)*255);
						HHSpike[NomSpikes].FadeDir = 0;

						//###### Center Position
						HHSpike[NomSpikes].CenterPos = Q_LEnergy[aero].LightPos;
						HHSpike[NomSpikes].FrontPos = HHSpike[NomSpikes].CenterPos;

						HHSpike[NomSpikes].EnergyID = aero;

						//####### Create Trajectory Vector From Random Numbers
						HHSpike[NomSpikes].IncX = (((float)rand() / 32767)-0.5)*20;
						HHSpike[NomSpikes].IncY = (((float)rand() / 32767)-0.5)*20;
						HHSpike[NomSpikes].IncZ = (((float)rand() / 32767)-0.5)*20;

						//####### Create Trajectory Vector From Random Numbers
						HHSpike[NomSpikes].OutVec.X = (((float)rand() / 32767)-0.5)*2;
						HHSpike[NomSpikes].OutVec.Y = (((float)rand() / 32767)-0.5)*2;
						HHSpike[NomSpikes].OutVec.Z = (((float)rand() / 32767)-0.5)*2;

						//######## Set Timers
						HHSpike[NomSpikes].Timer = 0;

						//######### Make Live
						HHSpike[NomSpikes].Live = 1;

						NomSpikes++;
						if(NomSpikes > 499) NomSpikes = 0;
						jet++;
						}*/
					}


				if(Q_LEnergy[aero].EnergyLive == 1)
					{
					if(Q_LEnergy[aero].Power <= 30) Forge[AIcount].LaserAlpha = (Q_LEnergy[aero].Power * 2) + 15;
					else Forge[AIcount].LaserAlpha = 75;

					Q_LEnergy[aero].CoronaLENGTH = geVec3d_DistanceBetween(&Q_LEnergy[aero].LightPos, &player.ViewXForm.Translation);

					geXForm3d_GetIn(&player.ViewXForm, &Q_LEnergy[aero].CoronaVECIN);
					geXForm3d_GetUp(&player.ViewXForm, &Q_LEnergy[aero].CoronaVECUP);
					geVec3d_CrossProduct(&Q_LEnergy[aero].CoronaVECIN, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVECLEFT);

					geXForm3d_SetIdentity(&Q_LEnergy[aero].CoronaMATRIX);

					Q_LEnergy[aero].CoronaMATV1.X = 0;
					Q_LEnergy[aero].CoronaMATV1.Y = 0;
					Q_LEnergy[aero].CoronaMATV1.Z = 0;
					Q_LEnergy[aero].CoronaMATV2.X = 0;
					Q_LEnergy[aero].CoronaMATV2.Y = 0;
					Q_LEnergy[aero].CoronaMATV2.Z = 0;
					Q_LEnergy[aero].CoronaMATV3.X = 0;
					Q_LEnergy[aero].CoronaMATV3.Y = 0;
					Q_LEnergy[aero].CoronaMATV3.Z = 0;
					Q_LEnergy[aero].CoronaMATV4.X = 0;
					Q_LEnergy[aero].CoronaMATV4.Y = 0;
					Q_LEnergy[aero].CoronaMATV4.Z = 0;

					//### Matrix Vert 1
					geXForm3d_RotateY(&Q_LEnergy[aero].CoronaMATRIX, Q_LEnergy[aero].CoronaLENGTH/30);

					geXForm3d_GetIn(&Q_LEnergy[aero].CoronaMATRIX, &Q_LEnergy[aero].CoronaMATVECIN);

					geVec3d_MA(&Q_LEnergy[aero].CoronaMATV1, 240, &Q_LEnergy[aero].CoronaMATVECIN, &Q_LEnergy[aero].CoronaMATV1);

					//### Matrix Vert 2
					geXForm3d_RotateY(&Q_LEnergy[aero].CoronaMATRIX, PI/2);

					geXForm3d_GetIn(&Q_LEnergy[aero].CoronaMATRIX, &Q_LEnergy[aero].CoronaMATVECIN);

					geVec3d_MA(&Q_LEnergy[aero].CoronaMATV2, 240, &Q_LEnergy[aero].CoronaMATVECIN, &Q_LEnergy[aero].CoronaMATV2);

					//### Matrix Vert 1
					geXForm3d_RotateY(&Q_LEnergy[aero].CoronaMATRIX, PI/2);

					geXForm3d_GetIn(&Q_LEnergy[aero].CoronaMATRIX, &Q_LEnergy[aero].CoronaMATVECIN);

					geVec3d_MA(&Q_LEnergy[aero].CoronaMATV3, 240, &Q_LEnergy[aero].CoronaMATVECIN, &Q_LEnergy[aero].CoronaMATV3);

					//### Matrix Vert 1
					geXForm3d_RotateY(&Q_LEnergy[aero].CoronaMATRIX, PI/2);

					geXForm3d_GetIn(&Q_LEnergy[aero].CoronaMATRIX, &Q_LEnergy[aero].CoronaMATVECIN);

					geVec3d_MA(&Q_LEnergy[aero].CoronaMATV4, 240, &Q_LEnergy[aero].CoronaMATVECIN, &Q_LEnergy[aero].CoronaMATV4);


					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].CoronaMATV1.X, &Q_LEnergy[aero].CoronaVECLEFT, &Q_LEnergy[aero].CoronaVERT1);
					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].CoronaMATV2.X, &Q_LEnergy[aero].CoronaVECLEFT, &Q_LEnergy[aero].CoronaVERT2);
					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].CoronaMATV4.X, &Q_LEnergy[aero].CoronaVECLEFT, &Q_LEnergy[aero].CoronaVERT4);
					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].CoronaMATV3.X, &Q_LEnergy[aero].CoronaVECLEFT, &Q_LEnergy[aero].CoronaVERT3);

					geVec3d_MA(&Q_LEnergy[aero].CoronaVERT1, Q_LEnergy[aero].CoronaMATV1.Z, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVERT1);
					geVec3d_MA(&Q_LEnergy[aero].CoronaVERT2, Q_LEnergy[aero].CoronaMATV2.Z, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVERT2);
					geVec3d_MA(&Q_LEnergy[aero].CoronaVERT4, Q_LEnergy[aero].CoronaMATV4.Z, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVERT4);
					geVec3d_MA(&Q_LEnergy[aero].CoronaVERT3, Q_LEnergy[aero].CoronaMATV3.Z, &Q_LEnergy[aero].CoronaVECUP, &Q_LEnergy[aero].CoronaVERT3);


					Q_LEnergy[aero].CoronaLV[0].a = 150;//(player.LaserAlpha*3) - 30;
					Q_LEnergy[aero].CoronaLV[0].u = 1;
					Q_LEnergy[aero].CoronaLV[0].v = 1;
					Q_LEnergy[aero].CoronaLV[0].r = 255;
					Q_LEnergy[aero].CoronaLV[0].g = 255;
					Q_LEnergy[aero].CoronaLV[0].b = 255;
					Q_LEnergy[aero].CoronaLV[0].X = Q_LEnergy[aero].CoronaVERT1.X;
					Q_LEnergy[aero].CoronaLV[0].Y = Q_LEnergy[aero].CoronaVERT1.Y;
					Q_LEnergy[aero].CoronaLV[0].Z = Q_LEnergy[aero].CoronaVERT1.Z;

					Q_LEnergy[aero].CoronaLV[1].a = 150;//(player.LaserAlpha*3) - 30;
					Q_LEnergy[aero].CoronaLV[1].u = 0;
					Q_LEnergy[aero].CoronaLV[1].v = 1;
					Q_LEnergy[aero].CoronaLV[1].r = 255;
					Q_LEnergy[aero].CoronaLV[1].g = 255;
					Q_LEnergy[aero].CoronaLV[1].b = 255;
					Q_LEnergy[aero].CoronaLV[1].X = Q_LEnergy[aero].CoronaVERT2.X;
					Q_LEnergy[aero].CoronaLV[1].Y = Q_LEnergy[aero].CoronaVERT2.Y;
					Q_LEnergy[aero].CoronaLV[1].Z = Q_LEnergy[aero].CoronaVERT2.Z;

					Q_LEnergy[aero].CoronaLV[2].a = 150;//(player.LaserAlpha*3) - 30;
					Q_LEnergy[aero].CoronaLV[2].u = 0;
					Q_LEnergy[aero].CoronaLV[2].v = 0;
					Q_LEnergy[aero].CoronaLV[2].r = 255;
					Q_LEnergy[aero].CoronaLV[2].g = 255;
					Q_LEnergy[aero].CoronaLV[2].b = 255;
					Q_LEnergy[aero].CoronaLV[2].X = Q_LEnergy[aero].CoronaVERT3.X;
					Q_LEnergy[aero].CoronaLV[2].Y = Q_LEnergy[aero].CoronaVERT3.Y;
					Q_LEnergy[aero].CoronaLV[2].Z = Q_LEnergy[aero].CoronaVERT3.Z;

					Q_LEnergy[aero].CoronaLV[3].a = 150;//(player.LaserAlpha*3) - 30;
					Q_LEnergy[aero].CoronaLV[3].u = 1;
					Q_LEnergy[aero].CoronaLV[3].v = 0;
					Q_LEnergy[aero].CoronaLV[3].r = 255;
					Q_LEnergy[aero].CoronaLV[3].g = 255;
					Q_LEnergy[aero].CoronaLV[3].b = 255;
					Q_LEnergy[aero].CoronaLV[3].X = Q_LEnergy[aero].CoronaVERT4.X;
					Q_LEnergy[aero].CoronaLV[3].Y = Q_LEnergy[aero].CoronaVERT4.Y;
					Q_LEnergy[aero].CoronaLV[3].Z = Q_LEnergy[aero].CoronaVERT4.Z;

					geWorld_AddPolyOnce(World, &Q_LEnergy[aero].CoronaLV[0], 4, shineE, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, 1.0f);

					//geWorld_SetLightAttributes(World, Q_LEnergy[aero].Light, &Q_LEnergy[aero].LightPos, &Q_LEnergy[aero].Lightcolor, Q_LEnergy[aero].Power + (((rand() % Q_LEnergy[aero].Power) / 5) - (Q_LEnergy[aero].Power / 10)), GE_FALSE);
					geWorld_SetLightAttributes(World, Q_LEnergy[aero].Light, &Q_LEnergy[aero].LightPos, &Q_LEnergy[aero].Lightcolor, 600, GE_FALSE);
				
					geActor_GetMaterial(Q_LEnergy[aero].EnergyBall.Actor, Q_LEnergy[aero].BmpCount, &Q_LEnergy[aero].Bitmap, &Q_LEnergy[aero].BitmapRed, &Q_LEnergy[aero].BitmapGreen, &Q_LEnergy[aero].BitmapBlue);
					geActor_SetMaterial(Q_LEnergy[aero].EnergyBall.Actor, 0, Q_LEnergy[aero].Bitmap, Q_LEnergy[aero].BitmapRed, Q_LEnergy[aero].BitmapGreen, Q_LEnergy[aero].BitmapBlue);

					if(Q_LEnergy[aero].BmpCount + 1 < 12) Q_LEnergy[aero].BmpCount++;
					else Q_LEnergy[aero].BmpCount = 1;

					geVec3d_Copy(&Q_LEnergy[aero].LightPos, &Q_LEnergy[aero].EnergyBall.ActorXform.Translation);
					geActor_SetScale(Q_LEnergy[aero].EnergyBall.Actor, Q_LEnergy[aero].Scale,Q_LEnergy[aero].Scale,Q_LEnergy[aero].Scale);

					geXForm3d_SetZRotation(&AIfriendly, 0);
					geXForm3d_SetYRotation(&AIfriendly, 0.2);

					geActor_ClearPose(Q_LEnergy[aero].EnergyBall.Actor, &Q_LEnergy[aero].EnergyBall.ActorXform);
					}


				if(Q_LEnergy[aero].EnergyFire == 1 && Q_LEnergy[aero].EnergyLive == 1)
					{
					Q_LEnergy[aero].OldLightPos = Q_LEnergy[aero].LightPos;
					geVec3d_MA(&Q_LEnergy[aero].LightPos, Q_LEnergy[aero].Speed*TimeScale, &Q_LEnergy[aero].TraVec, &Q_LEnergy[aero].LightPos);
					}
				}//END Live

			aero++;
			}//END Aero

		}//END NomLEnergy

	}


	//########  - EXPLOSIONS -  ########//

if(NetworkOption != 1)
	{
	if(NomExplosions > 0)
		{
		helly = 0;
		while(helly < NomExplosions)
			{
			if(Q_Explosion[helly].Live == 1)
				{
				if(Q_Explosion[helly].Init == 0)
					{
					Q_Explosion[helly].Init = 1;
					Q_Explosion[helly].AirShkLive = 1;
					Q_Explosion[helly].GrndShkLive = 1;

					Q_Explosion[helly].AirShkScale = 0;
					Q_Explosion[helly].AirShkAlpha = 255;
					Q_Explosion[helly].GrndShkScale = 0;
					Q_Explosion[helly].GrndShkAlpha = 255;
					Q_Explosion[helly].BlastAlpha = 255;
					Q_Explosion[helly].BlastMat = 0;

					Q_Explosion[helly].Light = geWorld_AddLight(World);
					Q_Explosion[helly].LightColor.r = 255.0f;
					Q_Explosion[helly].LightColor.g = 255.0f;
					Q_Explosion[helly].LightColor.b = 200.0f;
					Q_Explosion[helly].LightColor.a = 255.0f;

					jet = 0;
					while(jet < Q_Explosion[helly].ExpSize * 4.2)
						{
						BSparks[NomSparks].Pos = Q_Explosion[helly].Pos;

						BSparks[NomSparks].TraVec = Q_Explosion[helly].CollPlaneNormal;

						BSparks[NomSparks].TraVec.X += ((((float)rand() / 32767)-0.5))*4;
						BSparks[NomSparks].TraVec.Y += (((((float)rand() / 32767)-0.5))+1.5);
						BSparks[NomSparks].TraVec.Z += ((((float)rand() / 32767)-0.5))*4;

						BSparks[NomSparks].AlpFade = 255;
						BSparks[NomSparks].Timer = 0;
						BSparks[NomSparks].TimerGoal = ((((float)rand() / 32767)*2000)+500);

						geVec3d_MA(&BSparks[NomSparks].Pos, 1, &BSparks[NomSparks].TraVec, &BSparks[NomSparks].Pos);

						BSparks[NomSparks].Speed = 8;
						BSparks[NomSparks].Gravity = 0.1;

						BSparks[NomSparks].Bounce = 0;

						BSparks[NomSparks].SmokeTrail = 1;
						BSparks[NomSparks].Live = 1;

						NomSparks++;
						if(NomSparks > 499) NomSparks = 0;
						jet++;
						}

					player.CameraShake = 2;
					player.CamShkTIME = 6;

					aero = 0;
					while(aero < 14)
						{
						Q_Cloud[NomCloud].CloudType = 0;

						Q_Cloud[NomCloud].CloudPos = Q_Explosion[helly].Pos;
						
						Q_Cloud[NomCloud].CloudPos.X += (((float)rand() / 32767)-0.5)*200;
						Q_Cloud[NomCloud].CloudPos.Y += (((float)rand() / 32767)-0.5)*200;
						Q_Cloud[NomCloud].CloudPos.Z += (((float)rand() / 32767)-0.5)*200;

						Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*85)+170;
						Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.6;

						geVec3d_Clear(&Q_Cloud[NomCloud].CloudTraVec);

						Q_Cloud[NomCloud].CloudTraVec.X += (((float)rand() / 32767)-0.5)*2;
						Q_Cloud[NomCloud].CloudTraVec.Y += (((float)rand() / 32767)-0.5)*2;
						Q_Cloud[NomCloud].CloudTraVec.Z += (((float)rand() / 32767)-0.5)*2;

						Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)-0.5)*5;

						Q_Cloud[NomCloud].CloudMatCNT = 0;

						Q_Cloud[NomCloud].CloudLive = 1;

						NomCloud++;
						if(NomCloud > 4999) NomCloud = 0;
						aero++;
						}

					RadialDamage(Q_Explosion[helly].Team, Q_Explosion[helly].AvatarID, Q_Explosion[helly].ExpSize/2.5, Q_Explosion[helly].ExpDMG, Q_Explosion[helly].Pos, 0, TempVec1);

					geSound3D_GetConfig(World, &player.ViewXForm, &Q_Explosion[helly].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
					geSound_PlaySoundDef(SoundSys, S_Explosion, Volume, Pan, S_TimeScale, GE_FALSE);
					}


				//###Air Shockwave
				if(Q_Explosion[helly].AirShkLive == 1)
					{
					geVec3d_Copy(&Q_Explosion[helly].Pos, &Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.ActorXform.Translation);
					geActor_SetScale(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, Q_Explosion[helly].AirShkScale,Q_Explosion[helly].AirShkScale,Q_Explosion[helly].AirShkScale);
					geActor_SetAlpha(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, Q_Explosion[helly].AirShkAlpha);

					/*if(Q_Explosion[helly].AirShkScale + (0.3*TimeScale) < Q_Explosion[helly].ExpSize) Q_Explosion[helly].AirShkScale += 0.3*TimeScale;	//Perfectly parrallel with expandro is +0.1 here and +15 expandro
					else
						{
						Q_Explosion[helly].AirShkScale = Q_Explosion[helly].ExpSize;
						Q_Explosion[helly].AirShkScale += ((((float)rand() / 32767)-0.5)*0.2)*TimeScale;
						}*/

					if(Q_Explosion[helly].AirShkScale + (0.7*TimeScale) < Q_Explosion[helly].ExpSize) Q_Explosion[helly].AirShkScale += 0.7*TimeScale;	//Perfectly parrallel with expandro is +0.1 here and +15 expandro
					else
						{
						Q_Explosion[helly].AirShkScale = Q_Explosion[helly].ExpSize;
						Q_Explosion[helly].AirShkScale += ((((float)rand() / 32767)-0.5)*0.2)*TimeScale;
						}

					if(Q_Explosion[helly].AirShkScale > Q_Explosion[helly].ExpSize/1.4)
						{
						/*if(Q_Explosion[helly].AirShkAlpha - (10*TimeScale) > 0) Q_Explosion[helly].AirShkAlpha -= 10*TimeScale;	//-50
						else
							{
							Q_Explosion[helly].AirShkAlpha = 0;
							geVec3d_Copy(&Origon, &Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.ActorXform.Translation);
							geActor_SetScale(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, 0,0,0);
							Q_Explosion[helly].AirShkLive = 0;
							geWorld_RemoveLight(World, Q_Explosion[helly].Light);
							}*/

						if(Q_Explosion[helly].AirShkAlpha - (50*TimeScale) > 0) Q_Explosion[helly].AirShkAlpha -= 50*TimeScale;	//-50
						else
							{
							Q_Explosion[helly].AirShkAlpha = 0;
							geVec3d_Copy(&Origon, &Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.ActorXform.Translation);
							geActor_SetScale(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, 0,0,0);
							geActor_ClearPose(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, &Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.ActorXform);
							Q_Explosion[helly].AirShkLive = 0;
							geWorld_RemoveLight(World, Q_Explosion[helly].Light);
							Q_Explosion[helly].Init = 0;
							Q_Explosion[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomExplosions - 1)
								{
								Q_Explosion[K] = Q_Explosion[K+1];
								K++;
								}

							NomExplosions--;
							}
						}

					geActor_GetMaterial(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, Q_Explosion[helly].AirShkMat, &shibitmap, &shir, &shig, &shib);
					geActor_SetMaterial(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, 0, shibitmap, shir, shig, shib);
					if(Q_Explosion[helly].AirShkMat + 1 < 12) Q_Explosion[helly].AirShkMat++;
					else Q_Explosion[helly].AirShkMat = 1;

					geActor_ClearPose(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, &Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.ActorXform);
					}


				//###Ground Shockwave
				if(Q_Explosion[helly].GrndShkLive == 1)
					{
					geXForm3d_SetIdentity(&Q_Explosion[helly].AlignMatrix);	//OPTIMISE Calculate once only
					geXForm3d_GetIn(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].AligIn);
					//Q_Explosion[helly].VecIn = Q_Explosion[helly].Collision->Plane.Normal;
					//EDIT
					Q_Explosion[helly].VecIn.X = 0;
					Q_Explosion[helly].VecIn.Y = 1;
					Q_Explosion[helly].VecIn.Z = 0;

					if(Q_Explosion[helly].VecIn.X == 0 && Q_Explosion[helly].VecIn.Z == 0)
						{
						Q_Explosion[helly].VecLeft.X = -1;
						Q_Explosion[helly].VecLeft.Y = 0;
						Q_Explosion[helly].VecLeft.Z = 0;
						}
					else
						{
						geXForm3d_SetYRotation(&rotmat, PI/2);
						geXForm3d_Rotate(&rotmat, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VecLeft);
						Q_Explosion[helly].VecLeft.Y = 0;
						}
					geVec3d_CrossProduct(&Q_Explosion[helly].VecIn, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VecUp);
					geXForm3d_SetFromLeftUpIn(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VecIn);
					Q_Explosion[helly].AlignMatrix.Translation = Q_Explosion[helly].Pos;
					geXForm3d_SetZRotation(&rotmat, (((float)rand() / 32767)*6)*TimeScale);
					geXForm3d_Multiply(&Q_Explosion[helly].AlignMatrix, &rotmat, &Q_Explosion[helly].AlignMatrix);
					geXForm3d_GetUp(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].VecUp);
					geXForm3d_GetLeft(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].VecLeft);
					geXForm3d_GetIn(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].VecIn);

					Q_Explosion[helly].Type = GE_TEXTURED_POLY;
					Q_Explosion[helly].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
					Q_Explosion[helly].ScaleBIT = 1.0f;


					//if(Q_Explosion[helly].GrndShkScale + (75*TimeScale) < Q_Explosion[helly].ExpSize*285) Q_Explosion[helly].GrndShkScale += (75*TimeScale);	//+45 500
					//else Q_Explosion[helly].GrndShkScale = Q_Explosion[helly].ExpSize*285;

					if(Q_Explosion[helly].GrndShkScale + (150*TimeScale) < Q_Explosion[helly].ExpSize*285) Q_Explosion[helly].GrndShkScale += (150*TimeScale);	//+45 500
					else Q_Explosion[helly].GrndShkScale = Q_Explosion[helly].ExpSize*285;

					if(Q_Explosion[helly].GrndShkScale > Q_Explosion[helly].ExpSize*200)
						{
						/*if(Q_Explosion[helly].GrndShkAlpha - (10*TimeScale) >= 0) Q_Explosion[helly].GrndShkAlpha -= (10*TimeScale);	//-30
						else
							{
							Q_Explosion[helly].GrndShkAlpha = 0;
							Q_Explosion[helly].GrndShkLive = 0;
							}*/


						if(Q_Explosion[helly].GrndShkAlpha - (50*TimeScale) >= 0) Q_Explosion[helly].GrndShkAlpha -= (50*TimeScale);	//-30
						else
							{
							Q_Explosion[helly].GrndShkAlpha = 0;
							Q_Explosion[helly].GrndShkLive = 0;
							}
						}


					geVec3d_MA(&Q_Explosion[helly].Pos, 0.15, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].Pos);//3

					geWorld_SetLightAttributes(World, Q_Explosion[helly].Light, &Q_Explosion[helly].Pos, &Q_Explosion[helly].LightColor, Q_Explosion[helly].AirShkAlpha*20, GE_TRUE);

						//##Flash Vertical##
							//TOP VERT1
					geVec3d_MA(&Q_Explosion[helly].Pos, Q_Explosion[helly].GrndShkScale/2, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VertFU1);

					geVec3d_MA(&Q_Explosion[helly].VertFU1, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFU1);

							//TOP VERT2
					geVec3d_MA(&Q_Explosion[helly].VertFU1, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFU2);


							//BOTTOM VERT3
					geVec3d_MA(&Q_Explosion[helly].VertFU2, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VertFU3);

							//BOTTOM VERT4
					geVec3d_MA(&Q_Explosion[helly].VertFU3, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFU4);


						//##Flash Horizontal##
							//LEFT VERT1
					geVec3d_MA(&Q_Explosion[helly].Pos, -Q_Explosion[helly].GrndShkScale/2, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertFD1);

					geVec3d_MA(&Q_Explosion[helly].VertFD1, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFD1);


							//LEFT VERT2
					geVec3d_MA(&Q_Explosion[helly].VertFD1, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFD2);


							//RIGHT VERT3
					geVec3d_MA(&Q_Explosion[helly].VertFD2, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertFD3);

							//RIGHT VERT4
					geVec3d_MA(&Q_Explosion[helly].VertFD3, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFD4);
				

						//##Flash Spinner##
							//TOP VERT1
					geVec3d_MA(&Q_Explosion[helly].Pos, Q_Explosion[helly].GrndShkScale/2, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VertS1);

					geVec3d_MA(&Q_Explosion[helly].VertS1, Q_Explosion[helly].GrndShkScale/2, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertS1);

							//TOP VERT2
					geVec3d_MA(&Q_Explosion[helly].VertS1, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertS2);


							//BOTTOM VERT3
					geVec3d_MA(&Q_Explosion[helly].VertS2, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VertS3);

							//BOTTOM VERT4
					geVec3d_MA(&Q_Explosion[helly].VertS3, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertS4);

					a=0;
					while( a <= 2 )
						{
						b=0;
						while( b <= 3 )
							{
							Q_Explosion[helly].Lvert[a][b].a = Q_Explosion[helly].GrndShkAlpha;//((rand() % 200) + 15);	//200
							Q_Explosion[helly].Lvert[a][b].b = 255;//sunrise;	//100
							Q_Explosion[helly].Lvert[a][b].g = 255;//Q_Explosion[helly].Lvert[a][b].a;
							Q_Explosion[helly].Lvert[a][b].r = 255;//((rand() % 200) + 5);	//100 //180
							b++;
							}
						a++;
						}

					//##Flash Vertical##

					Q_Explosion[helly].Lvert[0][0].u = 0;
					Q_Explosion[helly].Lvert[0][0].v = 1;
					Q_Explosion[helly].Lvert[0][0].X = Q_Explosion[helly].VertFU1.X;
					Q_Explosion[helly].Lvert[0][0].Y = Q_Explosion[helly].VertFU1.Y;
					Q_Explosion[helly].Lvert[0][0].Z = Q_Explosion[helly].VertFU1.Z;

					Q_Explosion[helly].Lvert[0][1].u = 1;
					Q_Explosion[helly].Lvert[0][1].v = 1;
					Q_Explosion[helly].Lvert[0][1].X = Q_Explosion[helly].VertFU2.X;
					Q_Explosion[helly].Lvert[0][1].Y = Q_Explosion[helly].VertFU2.Y;
					Q_Explosion[helly].Lvert[0][1].Z = Q_Explosion[helly].VertFU2.Z;

					Q_Explosion[helly].Lvert[0][2].u = 1;
					Q_Explosion[helly].Lvert[0][2].v = 0;
					Q_Explosion[helly].Lvert[0][2].X = Q_Explosion[helly].VertFU3.X;
					Q_Explosion[helly].Lvert[0][2].Y = Q_Explosion[helly].VertFU3.Y;
					Q_Explosion[helly].Lvert[0][2].Z = Q_Explosion[helly].VertFU3.Z;

					Q_Explosion[helly].Lvert[0][3].u = 0;
					Q_Explosion[helly].Lvert[0][3].v = 0;
					Q_Explosion[helly].Lvert[0][3].X = Q_Explosion[helly].VertFU4.X;
					Q_Explosion[helly].Lvert[0][3].Y = Q_Explosion[helly].VertFU4.Y;
					Q_Explosion[helly].Lvert[0][3].Z = Q_Explosion[helly].VertFU4.Z;



					//##Flash Horizontal##

					Q_Explosion[helly].Lvert[1][0].u = 0;
					Q_Explosion[helly].Lvert[1][0].v = 1;
					Q_Explosion[helly].Lvert[1][0].X = Q_Explosion[helly].VertFD1.X;
					Q_Explosion[helly].Lvert[1][0].Y = Q_Explosion[helly].VertFD1.Y;
					Q_Explosion[helly].Lvert[1][0].Z = Q_Explosion[helly].VertFD1.Z;

					Q_Explosion[helly].Lvert[1][1].u = 1;
					Q_Explosion[helly].Lvert[1][1].v = 1;
					Q_Explosion[helly].Lvert[1][1].X = Q_Explosion[helly].VertFD2.X;
					Q_Explosion[helly].Lvert[1][1].Y = Q_Explosion[helly].VertFD2.Y;
					Q_Explosion[helly].Lvert[1][1].Z = Q_Explosion[helly].VertFD2.Z;

					Q_Explosion[helly].Lvert[1][2].u = 1;
					Q_Explosion[helly].Lvert[1][2].v = 0;
					Q_Explosion[helly].Lvert[1][2].X = Q_Explosion[helly].VertFD3.X;
					Q_Explosion[helly].Lvert[1][2].Y = Q_Explosion[helly].VertFD3.Y;
					Q_Explosion[helly].Lvert[1][2].Z = Q_Explosion[helly].VertFD3.Z;

					Q_Explosion[helly].Lvert[1][3].u = 0;
					Q_Explosion[helly].Lvert[1][3].v = 0;
					Q_Explosion[helly].Lvert[1][3].X = Q_Explosion[helly].VertFD4.X;
					Q_Explosion[helly].Lvert[1][3].Y = Q_Explosion[helly].VertFD4.Y;
					Q_Explosion[helly].Lvert[1][3].Z = Q_Explosion[helly].VertFD4.Z;


					//##Flash Spinner##

					Q_Explosion[helly].Lvert[2][0].u = 0;
					Q_Explosion[helly].Lvert[2][0].v = 1;
					Q_Explosion[helly].Lvert[2][0].X = Q_Explosion[helly].VertS1.X;
					Q_Explosion[helly].Lvert[2][0].Y = Q_Explosion[helly].VertS1.Y;
					Q_Explosion[helly].Lvert[2][0].Z = Q_Explosion[helly].VertS1.Z;
						
					Q_Explosion[helly].Lvert[2][1].u = 1;
					Q_Explosion[helly].Lvert[2][1].v = 1;
					Q_Explosion[helly].Lvert[2][1].X = Q_Explosion[helly].VertS2.X;
					Q_Explosion[helly].Lvert[2][1].Y = Q_Explosion[helly].VertS2.Y;
					Q_Explosion[helly].Lvert[2][1].Z = Q_Explosion[helly].VertS2.Z;
						
					Q_Explosion[helly].Lvert[2][2].u = 1;
					Q_Explosion[helly].Lvert[2][2].v = 0;
					Q_Explosion[helly].Lvert[2][2].X = Q_Explosion[helly].VertS3.X;
					Q_Explosion[helly].Lvert[2][2].Y = Q_Explosion[helly].VertS3.Y;
					Q_Explosion[helly].Lvert[2][2].Z = Q_Explosion[helly].VertS3.Z;

					Q_Explosion[helly].Lvert[2][3].u = 0;
					Q_Explosion[helly].Lvert[2][3].v = 0;
					Q_Explosion[helly].Lvert[2][3].X = Q_Explosion[helly].VertS4.X;
					Q_Explosion[helly].Lvert[2][3].Y = Q_Explosion[helly].VertS4.Y;
					Q_Explosion[helly].Lvert[2][3].Z = Q_Explosion[helly].VertS4.Z;

					//geWorld_AddPolyOnce(World, &Q_Explosion[helly].Lvert[0][0], 4, BulHitFlash, Q_Explosion[helly].Type, Q_Explosion[helly].RenderFlags, Q_Explosion[helly].ScaleBIT);
					//geWorld_AddPolyOnce(World, &Q_Explosion[helly].Lvert[1][0], 4, BulHitFlash, Q_Explosion[helly].Type, Q_Explosion[helly].RenderFlags, Q_Explosion[helly].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Explosion[helly].Lvert[2][0], 4, EXPexpandro1, Q_Explosion[helly].Type, Q_Explosion[helly].RenderFlags, Q_Explosion[helly].ScaleBIT);
					}

				} //~LIVE

			helly++;
			}
		}
	}
else		//###### NET PLAY EXPLOSIONS
	{
	if(NomExplosions > 0)
		{
		helly = 0;
		while(helly < NomExplosions)
			{
			if(Q_Explosion[helly].Live == 1)
				{
				if(Q_Explosion[helly].Init == 0)
					{
					Q_Explosion[helly].Init = 1;
					Q_Explosion[helly].AirShkLive = 1;
					Q_Explosion[helly].GrndShkLive = 1;

					Q_Explosion[helly].AirShkScale = 0;
					Q_Explosion[helly].AirShkAlpha = 255;
					Q_Explosion[helly].GrndShkScale = 0;
					Q_Explosion[helly].GrndShkAlpha = 255;
					Q_Explosion[helly].BlastAlpha = 255;
					Q_Explosion[helly].BlastMat = 0;

					Q_Explosion[helly].Light = geWorld_AddLight(World);
					Q_Explosion[helly].LightColor.r = 255.0f;
					Q_Explosion[helly].LightColor.g = 255.0f;
					Q_Explosion[helly].LightColor.b = 200.0f;
					Q_Explosion[helly].LightColor.a = 255.0f;

					jet = 0;
					while(jet < Q_Explosion[helly].ExpSize * 4.2)
						{
						BSparks[NomSparks].Pos = Q_Explosion[helly].Pos;

						BSparks[NomSparks].TraVec = Q_Explosion[helly].CollPlaneNormal;

						BSparks[NomSparks].TraVec.X += ((((float)rand() / 32767)-0.5))*4;
						BSparks[NomSparks].TraVec.Y += (((((float)rand() / 32767)-0.5))+1.5);
						BSparks[NomSparks].TraVec.Z += ((((float)rand() / 32767)-0.5))*4;

						BSparks[NomSparks].AlpFade = 255;
						BSparks[NomSparks].Timer = 0;
						BSparks[NomSparks].TimerGoal = ((((float)rand() / 32767)*2000)+500);

						geVec3d_MA(&BSparks[NomSparks].Pos, 1, &BSparks[NomSparks].TraVec, &BSparks[NomSparks].Pos);

						BSparks[NomSparks].Speed = 8;
						BSparks[NomSparks].Gravity = 0.1;

						BSparks[NomSparks].Bounce = 0;

						BSparks[NomSparks].SmokeTrail = 1;
						BSparks[NomSparks].Live = 1;

						NomSparks++;
						if(NomSparks > 499) NomSparks = 0;
						jet++;
						}

					//player.CameraShake = 2;
					//player.CamShkTIME = 6;

					aero = 0;
					while(aero < 14)
						{
						Q_Cloud[NomCloud].CloudType = 0;

						Q_Cloud[NomCloud].CloudPos = Q_Explosion[helly].Pos;
						
						Q_Cloud[NomCloud].CloudPos.X += (((float)rand() / 32767)-0.5)*200;
						Q_Cloud[NomCloud].CloudPos.Y += (((float)rand() / 32767)-0.5)*200;
						Q_Cloud[NomCloud].CloudPos.Z += (((float)rand() / 32767)-0.5)*200;

						Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*85)+170;
						Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.6;

						geVec3d_Clear(&Q_Cloud[NomCloud].CloudTraVec);

						Q_Cloud[NomCloud].CloudTraVec.X += (((float)rand() / 32767)-0.5)*2;
						Q_Cloud[NomCloud].CloudTraVec.Y += (((float)rand() / 32767)-0.5)*2;
						Q_Cloud[NomCloud].CloudTraVec.Z += (((float)rand() / 32767)-0.5)*2;

						Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)-0.5)*5;

						Q_Cloud[NomCloud].CloudMatCNT = 0;

						Q_Cloud[NomCloud].CloudLive = 1;

						NomCloud++;
						if(NomCloud > 4999) NomCloud = 0;
						aero++;
						}

					geSound3D_GetConfig(World, &player.ViewXForm, &Q_Explosion[helly].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
					geSound_PlaySoundDef(SoundSys, S_Explosion, Volume, Pan, S_TimeScale, GE_FALSE);
					}


				//###Air Shockwave
				if(Q_Explosion[helly].AirShkLive == 1)
					{
					geVec3d_Copy(&Q_Explosion[helly].Pos, &Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.ActorXform.Translation);
					geActor_SetScale(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, Q_Explosion[helly].AirShkScale,Q_Explosion[helly].AirShkScale,Q_Explosion[helly].AirShkScale);
					geActor_SetAlpha(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, Q_Explosion[helly].AirShkAlpha);

					if(Q_Explosion[helly].AirShkScale + (0.7*TimeScale) < Q_Explosion[helly].ExpSize) Q_Explosion[helly].AirShkScale += 0.7*TimeScale;	//Perfectly parrallel with expandro is +0.1 here and +15 expandro
					else
						{
						Q_Explosion[helly].AirShkScale = Q_Explosion[helly].ExpSize;
						Q_Explosion[helly].AirShkScale += ((((float)rand() / 32767)-0.5)*0.2)*TimeScale;
						}

					if(Q_Explosion[helly].AirShkScale > Q_Explosion[helly].ExpSize/1.4)
						{
						if(Q_Explosion[helly].AirShkAlpha - (50*TimeScale) > 0) Q_Explosion[helly].AirShkAlpha -= 50*TimeScale;	//-50
						else
							{
							Q_Explosion[helly].AirShkAlpha = 0;
							geVec3d_Copy(&Origon, &Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.ActorXform.Translation);
							geActor_SetScale(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, 0,0,0);
							geActor_ClearPose(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, &Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.ActorXform);
							Q_Explosion[helly].AirShkLive = 0;
							geWorld_RemoveLight(World, Q_Explosion[helly].Light);
							Q_Explosion[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomExplosions - 1)
								{
								Q_Explosion[K] = Q_Explosion[K+1];
								K++;
								}

							NomExplosions--;
							}
						}

					geActor_GetMaterial(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, Q_Explosion[helly].AirShkMat, &shibitmap, &shir, &shig, &shib);
					geActor_SetMaterial(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, 0, shibitmap, shir, shig, shib);
					if(Q_Explosion[helly].AirShkMat + 1 < 12) Q_Explosion[helly].AirShkMat++;
					else Q_Explosion[helly].AirShkMat = 1;

					geActor_ClearPose(Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.Actor, &Q_LEnergy[Q_Explosion[helly].LargeEnergyActorID].EnergyBall.ActorXform);
					}


				//###Ground Shockwave
				if(Q_Explosion[helly].GrndShkLive == 1)
					{
					geXForm3d_SetIdentity(&Q_Explosion[helly].AlignMatrix);	//OPTIMISE Calculate once only
					geXForm3d_GetIn(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].AligIn);
					//Q_Explosion[helly].VecIn = Q_Explosion[helly].Collision->Plane.Normal;
					//EDIT
					Q_Explosion[helly].VecIn.X = 0;
					Q_Explosion[helly].VecIn.Y = 1;
					Q_Explosion[helly].VecIn.Z = 0;

					if(Q_Explosion[helly].VecIn.X == 0 && Q_Explosion[helly].VecIn.Z == 0)
						{
						Q_Explosion[helly].VecLeft.X = -1;
						Q_Explosion[helly].VecLeft.Y = 0;
						Q_Explosion[helly].VecLeft.Z = 0;
						}
					else
						{
						geXForm3d_SetYRotation(&rotmat, PI/2);
						geXForm3d_Rotate(&rotmat, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VecLeft);
						Q_Explosion[helly].VecLeft.Y = 0;
						}
					geVec3d_CrossProduct(&Q_Explosion[helly].VecIn, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VecUp);
					geXForm3d_SetFromLeftUpIn(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VecIn);
					Q_Explosion[helly].AlignMatrix.Translation = Q_Explosion[helly].Pos;
					geXForm3d_SetZRotation(&rotmat, (((float)rand() / 32767)*6)*TimeScale);
					geXForm3d_Multiply(&Q_Explosion[helly].AlignMatrix, &rotmat, &Q_Explosion[helly].AlignMatrix);
					geXForm3d_GetUp(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].VecUp);
					geXForm3d_GetLeft(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].VecLeft);
					geXForm3d_GetIn(&Q_Explosion[helly].AlignMatrix, &Q_Explosion[helly].VecIn);

					Q_Explosion[helly].Type = GE_TEXTURED_POLY;
					Q_Explosion[helly].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
					Q_Explosion[helly].ScaleBIT = 1.0f;

					if(Q_Explosion[helly].GrndShkScale + (150*TimeScale) < Q_Explosion[helly].ExpSize*285) Q_Explosion[helly].GrndShkScale += (150*TimeScale);	//+45 500
					else Q_Explosion[helly].GrndShkScale = Q_Explosion[helly].ExpSize*285;

					if(Q_Explosion[helly].GrndShkScale > Q_Explosion[helly].ExpSize*200)
						{
						if(Q_Explosion[helly].GrndShkAlpha - (50*TimeScale) >= 0) Q_Explosion[helly].GrndShkAlpha -= (50*TimeScale);	//-30
						else
							{
							Q_Explosion[helly].GrndShkAlpha = 0;
							Q_Explosion[helly].GrndShkLive = 0;
							}
						}

					geVec3d_MA(&Q_Explosion[helly].Pos, 0.15, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].Pos);//3

					geWorld_SetLightAttributes(World, Q_Explosion[helly].Light, &Q_Explosion[helly].Pos, &Q_Explosion[helly].LightColor, Q_Explosion[helly].AirShkAlpha*20, GE_TRUE);

						//##Flash Vertical##
							//TOP VERT1
					geVec3d_MA(&Q_Explosion[helly].Pos, Q_Explosion[helly].GrndShkScale/2, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VertFU1);

					geVec3d_MA(&Q_Explosion[helly].VertFU1, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFU1);

							//TOP VERT2
					geVec3d_MA(&Q_Explosion[helly].VertFU1, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFU2);


							//BOTTOM VERT3
					geVec3d_MA(&Q_Explosion[helly].VertFU2, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VertFU3);

							//BOTTOM VERT4
					geVec3d_MA(&Q_Explosion[helly].VertFU3, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFU4);


						//##Flash Horizontal##
							//LEFT VERT1
					geVec3d_MA(&Q_Explosion[helly].Pos, -Q_Explosion[helly].GrndShkScale/2, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertFD1);

					geVec3d_MA(&Q_Explosion[helly].VertFD1, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFD1);


							//LEFT VERT2
					geVec3d_MA(&Q_Explosion[helly].VertFD1, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFD2);


							//RIGHT VERT3
					geVec3d_MA(&Q_Explosion[helly].VertFD2, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertFD3);

							//RIGHT VERT4
					geVec3d_MA(&Q_Explosion[helly].VertFD3, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecIn, &Q_Explosion[helly].VertFD4);
				

						//##Flash Spinner##
							//TOP VERT1
					geVec3d_MA(&Q_Explosion[helly].Pos, Q_Explosion[helly].GrndShkScale/2, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VertS1);

					geVec3d_MA(&Q_Explosion[helly].VertS1, Q_Explosion[helly].GrndShkScale/2, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertS1);

							//TOP VERT2
					geVec3d_MA(&Q_Explosion[helly].VertS1, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertS2);


							//BOTTOM VERT3
					geVec3d_MA(&Q_Explosion[helly].VertS2, -Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecUp, &Q_Explosion[helly].VertS3);

							//BOTTOM VERT4
					geVec3d_MA(&Q_Explosion[helly].VertS3, Q_Explosion[helly].GrndShkScale, &Q_Explosion[helly].VecLeft, &Q_Explosion[helly].VertS4);

					a=0;
					while( a <= 2 )
						{
						b=0;
						while( b <= 3 )
							{
							Q_Explosion[helly].Lvert[a][b].a = Q_Explosion[helly].GrndShkAlpha;//((rand() % 200) + 15);	//200
							Q_Explosion[helly].Lvert[a][b].b = 255;//sunrise;	//100
							Q_Explosion[helly].Lvert[a][b].g = 255;//Q_Explosion[helly].Lvert[a][b].a;
							Q_Explosion[helly].Lvert[a][b].r = 255;//((rand() % 200) + 5);	//100 //180
							b++;
							}
						a++;
						}

					//##Flash Vertical##

					Q_Explosion[helly].Lvert[0][0].u = 0;
					Q_Explosion[helly].Lvert[0][0].v = 1;
					Q_Explosion[helly].Lvert[0][0].X = Q_Explosion[helly].VertFU1.X;
					Q_Explosion[helly].Lvert[0][0].Y = Q_Explosion[helly].VertFU1.Y;
					Q_Explosion[helly].Lvert[0][0].Z = Q_Explosion[helly].VertFU1.Z;

					Q_Explosion[helly].Lvert[0][1].u = 1;
					Q_Explosion[helly].Lvert[0][1].v = 1;
					Q_Explosion[helly].Lvert[0][1].X = Q_Explosion[helly].VertFU2.X;
					Q_Explosion[helly].Lvert[0][1].Y = Q_Explosion[helly].VertFU2.Y;
					Q_Explosion[helly].Lvert[0][1].Z = Q_Explosion[helly].VertFU2.Z;

					Q_Explosion[helly].Lvert[0][2].u = 1;
					Q_Explosion[helly].Lvert[0][2].v = 0;
					Q_Explosion[helly].Lvert[0][2].X = Q_Explosion[helly].VertFU3.X;
					Q_Explosion[helly].Lvert[0][2].Y = Q_Explosion[helly].VertFU3.Y;
					Q_Explosion[helly].Lvert[0][2].Z = Q_Explosion[helly].VertFU3.Z;

					Q_Explosion[helly].Lvert[0][3].u = 0;
					Q_Explosion[helly].Lvert[0][3].v = 0;
					Q_Explosion[helly].Lvert[0][3].X = Q_Explosion[helly].VertFU4.X;
					Q_Explosion[helly].Lvert[0][3].Y = Q_Explosion[helly].VertFU4.Y;
					Q_Explosion[helly].Lvert[0][3].Z = Q_Explosion[helly].VertFU4.Z;



					//##Flash Horizontal##

					Q_Explosion[helly].Lvert[1][0].u = 0;
					Q_Explosion[helly].Lvert[1][0].v = 1;
					Q_Explosion[helly].Lvert[1][0].X = Q_Explosion[helly].VertFD1.X;
					Q_Explosion[helly].Lvert[1][0].Y = Q_Explosion[helly].VertFD1.Y;
					Q_Explosion[helly].Lvert[1][0].Z = Q_Explosion[helly].VertFD1.Z;

					Q_Explosion[helly].Lvert[1][1].u = 1;
					Q_Explosion[helly].Lvert[1][1].v = 1;
					Q_Explosion[helly].Lvert[1][1].X = Q_Explosion[helly].VertFD2.X;
					Q_Explosion[helly].Lvert[1][1].Y = Q_Explosion[helly].VertFD2.Y;
					Q_Explosion[helly].Lvert[1][1].Z = Q_Explosion[helly].VertFD2.Z;

					Q_Explosion[helly].Lvert[1][2].u = 1;
					Q_Explosion[helly].Lvert[1][2].v = 0;
					Q_Explosion[helly].Lvert[1][2].X = Q_Explosion[helly].VertFD3.X;
					Q_Explosion[helly].Lvert[1][2].Y = Q_Explosion[helly].VertFD3.Y;
					Q_Explosion[helly].Lvert[1][2].Z = Q_Explosion[helly].VertFD3.Z;

					Q_Explosion[helly].Lvert[1][3].u = 0;
					Q_Explosion[helly].Lvert[1][3].v = 0;
					Q_Explosion[helly].Lvert[1][3].X = Q_Explosion[helly].VertFD4.X;
					Q_Explosion[helly].Lvert[1][3].Y = Q_Explosion[helly].VertFD4.Y;
					Q_Explosion[helly].Lvert[1][3].Z = Q_Explosion[helly].VertFD4.Z;


					//##Flash Spinner##

					Q_Explosion[helly].Lvert[2][0].u = 0;
					Q_Explosion[helly].Lvert[2][0].v = 1;
					Q_Explosion[helly].Lvert[2][0].X = Q_Explosion[helly].VertS1.X;
					Q_Explosion[helly].Lvert[2][0].Y = Q_Explosion[helly].VertS1.Y;
					Q_Explosion[helly].Lvert[2][0].Z = Q_Explosion[helly].VertS1.Z;

					Q_Explosion[helly].Lvert[2][1].u = 1;
					Q_Explosion[helly].Lvert[2][1].v = 1;
					Q_Explosion[helly].Lvert[2][1].X = Q_Explosion[helly].VertS2.X;
					Q_Explosion[helly].Lvert[2][1].Y = Q_Explosion[helly].VertS2.Y;
					Q_Explosion[helly].Lvert[2][1].Z = Q_Explosion[helly].VertS2.Z;

					Q_Explosion[helly].Lvert[2][2].u = 1;
					Q_Explosion[helly].Lvert[2][2].v = 0;
					Q_Explosion[helly].Lvert[2][2].X = Q_Explosion[helly].VertS3.X;
					Q_Explosion[helly].Lvert[2][2].Y = Q_Explosion[helly].VertS3.Y;
					Q_Explosion[helly].Lvert[2][2].Z = Q_Explosion[helly].VertS3.Z;

					Q_Explosion[helly].Lvert[2][3].u = 0;
					Q_Explosion[helly].Lvert[2][3].v = 0;
					Q_Explosion[helly].Lvert[2][3].X = Q_Explosion[helly].VertS4.X;
					Q_Explosion[helly].Lvert[2][3].Y = Q_Explosion[helly].VertS4.Y;
					Q_Explosion[helly].Lvert[2][3].Z = Q_Explosion[helly].VertS4.Z;

					//geWorld_AddPolyOnce(World, &Q_Explosion[helly].Lvert[0][0], 4, BulHitFlash, Q_Explosion[helly].Type, Q_Explosion[helly].RenderFlags, Q_Explosion[helly].ScaleBIT);
					//geWorld_AddPolyOnce(World, &Q_Explosion[helly].Lvert[1][0], 4, BulHitFlash, Q_Explosion[helly].Type, Q_Explosion[helly].RenderFlags, Q_Explosion[helly].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Explosion[helly].Lvert[2][0], 4, EXPexpandro1, Q_Explosion[helly].Type, Q_Explosion[helly].RenderFlags, Q_Explosion[helly].ScaleBIT);
					}

				} //~LIVE

			helly++;
			}
		}
	}



	//########  - Player TRAIL LINES Trails System Trail System Trails Control-  ########//

	/*if(player.NomTrailL > 0)
		{
		helly = 0;
		while(helly < player.NomTrailL)
			{
			if(player.Trail[helly].Live == 1)
				{
				//#### Effect Progression - Increment Material Counters
				player.Trail[helly].MaterialCNT--;
				if(player.Trail[helly].MaterialCNT < 82) player.Trail[helly].MaterialCNT = 96;
				if(player.Trail[helly].MaterialCNT > 96) player.Trail[helly].MaterialCNT = 96;

				aero = 0;
				while(aero < player.Trail[helly].LengNum)
					{
					if(player.Trail[helly].Lvert[aero][0].a > 0)
						{
						if(player.Trail[helly].BitmapPTR == 0) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, flametrail[player.Trail[helly].MaterialCNT], player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);

						//if(player.Trail[helly].BitmapPTR == 0) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, trail1, player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);
						//if(player.Trail[helly].BitmapPTR == 0) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, Water[player.Trail[helly].MaterialCNT], player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);
						if(player.Trail[helly].BitmapPTR == 1) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, trail2, player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);
						}

					//### Expand Trails
					player.Trail[helly].EXvert.X = player.Trail[helly].Lvert[aero][0].X;
					player.Trail[helly].EXvert.Y = player.Trail[helly].Lvert[aero][0].Y;
					player.Trail[helly].EXvert.Z = player.Trail[helly].Lvert[aero][0].Z;
					geVec3d_Subtract(&player.Trail[helly].EXvert, &player.Trail[helly].LineStartXF.Translation, &player.Trail[helly].EXpandVec);

					geVec3d_Normalize(&player.Trail[helly].EXpandVec);

					player.Trail[helly].EXvert1.X = player.Trail[helly].Lvert[aero][0].X;
					player.Trail[helly].EXvert1.Y = player.Trail[helly].Lvert[aero][0].Y;
					player.Trail[helly].EXvert1.Z = player.Trail[helly].Lvert[aero][0].Z;
					player.Trail[helly].EXvert4.X = player.Trail[helly].Lvert[aero][4].X;
					player.Trail[helly].EXvert4.Y = player.Trail[helly].Lvert[aero][4].Y;
					player.Trail[helly].EXvert4.Z = player.Trail[helly].Lvert[aero][4].Z;
					player.Trail[helly].EXvert2.X = player.Trail[helly].Lvert[aero][2].X;
					player.Trail[helly].EXvert2.Y = player.Trail[helly].Lvert[aero][2].Y;
					player.Trail[helly].EXvert2.Z = player.Trail[helly].Lvert[aero][2].Z;
					player.Trail[helly].EXvert3.X = player.Trail[helly].Lvert[aero][3].X;
					player.Trail[helly].EXvert3.Y = player.Trail[helly].Lvert[aero][3].Y;
					player.Trail[helly].EXvert3.Z = player.Trail[helly].Lvert[aero][3].Z;

					geVec3d_MA(&player.Trail[helly].EXvert1, -15, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert1);
					geVec3d_MA(&player.Trail[helly].EXvert4, -15, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert4);
					geVec3d_MA(&player.Trail[helly].EXvert2, -15, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert2);
					geVec3d_MA(&player.Trail[helly].EXvert3, -15, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert3);

					player.Trail[helly].Lvert[aero][0].X = player.Trail[helly].EXvert1.X;
					player.Trail[helly].Lvert[aero][0].Y = player.Trail[helly].EXvert1.Y;
					player.Trail[helly].Lvert[aero][0].Z = player.Trail[helly].EXvert1.Z;
					player.Trail[helly].Lvert[aero][4].X = player.Trail[helly].EXvert4.X;
					player.Trail[helly].Lvert[aero][4].Y = player.Trail[helly].EXvert4.Y;
					player.Trail[helly].Lvert[aero][4].Z = player.Trail[helly].EXvert4.Z;
					player.Trail[helly].Lvert[aero][0].X = player.Trail[helly].EXvert2.X;
					player.Trail[helly].Lvert[aero][0].Y = player.Trail[helly].EXvert2.Y;
					player.Trail[helly].Lvert[aero][0].Z = player.Trail[helly].EXvert2.Z;
					player.Trail[helly].Lvert[aero][4].X = player.Trail[helly].EXvert3.X;
					player.Trail[helly].Lvert[aero][4].Y = player.Trail[helly].EXvert3.Y;
					player.Trail[helly].Lvert[aero][4].Z = player.Trail[helly].EXvert3.Z;

					jet = 0;
					while(jet < player.Trail[helly].LengNum)
						{
						if(player.TrailFadeSpan[jet][0] == helly && player.TrailFadeSpan[jet][1] == aero)
							{
							if(player.TrailsOn == 1) player.Trail[helly].AlpFade = (50 - ((jet*20)*((10-player.Trail[helly].LengNum)+1)));
							if(player.TrailsOn == 0)							//**200**
								{
								player.Trail[helly].AlpFade = (125 - ((jet*20)*((10-player.Trail[helly].LengNum)+1)));
								}

							if(player.Trail[helly].AlpFade < 0) player.Trail[helly].AlpFade = 0;

							if(player.Trail[helly].Lvert[aero][0].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][0].a -= player.Trail[helly].AlpFade;
							else player.Trail[helly].ShiftFlag = 1;
							if(player.Trail[helly].Lvert[aero][1].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][1].a -= player.Trail[helly].AlpFade;
							else player.Trail[helly].ShiftFlag = 1;
							if(player.Trail[helly].Lvert[aero][2].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][2].a -= player.Trail[helly].AlpFade;
							else player.Trail[helly].ShiftFlag = 1;
							if(player.Trail[helly].Lvert[aero][3].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][3].a -= player.Trail[helly].AlpFade;
							else player.Trail[helly].ShiftFlag = 1;

							if(player.Trail[helly].ShiftFlag == 1 && jet == 0)
								{
								player.Trail[helly].ShiftFlag = 0;

								player.Trail[helly].Lvert[aero][0].a = 0;
								player.Trail[helly].Lvert[aero][1].a = 0;
								player.Trail[helly].Lvert[aero][2].a = 0;
								player.Trail[helly].Lvert[aero][3].a = 0;

								player.Trail[helly].SectionLIVE[aero] = 0;

								//Shift UP
								warp = 0;
								while(warp < player.Trail[helly].LengNum)
									{
									if(player.TrailFadeSpan[warp][1] + 1 < player.Trail[helly].LengNum) player.TrailFadeSpan[warp][1]++;
									else
										{
										if(player.TrailFadeSpan[warp][0] + 1 < player.NomTrailL) player.TrailFadeSpan[warp][0]++;
										else if(warp == 0)
											{
											trans = 0;
											while(trans < player.NomTrailL)
												{
												player.Trail[trans].Live = 0;
												trans++;
												}

											player.TrailFadeSpan[0][0] = 0;
											player.TrailFadeSpan[1][0] = 0;
											player.TrailFadeSpan[2][0] = 0;
											player.TrailFadeSpan[3][0] = 0;
											player.TrailFadeSpan[4][0] = 0;
											player.TrailFadeSpan[5][0] = 0;
											player.TrailFadeSpan[6][0] = 0;
											player.TrailFadeSpan[7][0] = 0;
											player.TrailFadeSpan[8][0] = 0;
											player.TrailFadeSpan[9][0] = 0;
											player.TrailFadeSpan[0][1] = 0;
											player.TrailFadeSpan[1][1] = 1;
											player.TrailFadeSpan[2][1] = 2;
											player.TrailFadeSpan[3][1] = 3;
											player.TrailFadeSpan[4][1] = 4;
											player.TrailFadeSpan[5][1] = 5;
											player.TrailFadeSpan[6][1] = 6;
											player.TrailFadeSpan[7][1] = 7;
											player.TrailFadeSpan[8][1] = 8;
											player.TrailFadeSpan[9][1] = 9;
											warp = 10;
											jet = 10;
											aero = player.Trail[helly].LengNum;
											helly = player.NomTrailL;
											player.NomTrailL = 0;
											}
										player.TrailFadeSpan[warp][1] = 0;
										}
									warp++;
									}
								}
							}
						jet++;
						}
					aero++;
					}

				if(player.Trail[helly].LengNum == 4)
					{
					SCRAM = 0;
					while(SCRAM < 4)
						{
						aero = 0;
						while(aero < player.Trail[helly].LengNum)
							{
							if(player.Trail[helly].Lvert[aero][0].a > 0)
								{
								if(player.Trail[helly].BitmapPTR == 0) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, trail1, player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);
								if(player.Trail[helly].BitmapPTR == 1) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, trail2, player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);
								//if(player.MatCounter[2]+1 < 142) player.MatCounter[2]+=1;
								//else player.MatCounter[2] = 82;
								}

							jet = 0;
							while(jet < player.Trail[helly].LengNum)
								{
								if(player.TrailFadeSpan[jet][0] == helly && player.TrailFadeSpan[jet][1] == aero)
									{
									if(player.TrailsOn == 1) player.Trail[helly].AlpFade = (200 - ((jet*20)*((10-player.Trail[helly].LengNum)+1)));
									if(player.TrailsOn == 0)
										{
										player.Trail[helly].AlpFade = (200 - ((jet*20)*((10-player.Trail[helly].LengNum)+1)));
										}

									if(player.Trail[helly].AlpFade < 0) player.Trail[helly].AlpFade = 0;

									if(player.Trail[helly].Lvert[aero][0].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][0].a -= player.Trail[helly].AlpFade;
									else player.Trail[helly].ShiftFlag = 1;
									if(player.Trail[helly].Lvert[aero][1].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][1].a -= player.Trail[helly].AlpFade;
									else player.Trail[helly].ShiftFlag = 1;
									if(player.Trail[helly].Lvert[aero][2].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][2].a -= player.Trail[helly].AlpFade;
									else player.Trail[helly].ShiftFlag = 1;
									if(player.Trail[helly].Lvert[aero][3].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][3].a -= player.Trail[helly].AlpFade;
									else player.Trail[helly].ShiftFlag = 1;

									if(player.Trail[helly].ShiftFlag == 1 && jet == 0)
										{
										player.Trail[helly].ShiftFlag = 0;

										player.Trail[helly].Lvert[aero][0].a = 0;
										player.Trail[helly].Lvert[aero][1].a = 0;
										player.Trail[helly].Lvert[aero][2].a = 0;
										player.Trail[helly].Lvert[aero][3].a = 0;

										player.Trail[helly].SectionLIVE[aero] = 0;

										//Shift UP
										warp = 0;
										while(warp < player.Trail[helly].LengNum)
											{
											if(player.TrailFadeSpan[warp][1] + 1 < player.Trail[helly].LengNum) player.TrailFadeSpan[warp][1]++;
											else
												{
												if(player.TrailFadeSpan[warp][0] + 1 < player.NomTrailL) player.TrailFadeSpan[warp][0]++;
												else if(warp == 0)
													{
													trans = 0;
													while(trans < player.NomTrailL)
														{
														player.Trail[trans].Live = 0;
														trans++;
														}

													player.TrailFadeSpan[0][0] = 0;
													player.TrailFadeSpan[1][0] = 0;
													player.TrailFadeSpan[2][0] = 0;
													player.TrailFadeSpan[3][0] = 0;
													player.TrailFadeSpan[4][0] = 0;
													player.TrailFadeSpan[5][0] = 0;
													player.TrailFadeSpan[6][0] = 0;
													player.TrailFadeSpan[7][0] = 0;
													player.TrailFadeSpan[8][0] = 0;
													player.TrailFadeSpan[9][0] = 0;
													player.TrailFadeSpan[0][1] = 0;
													player.TrailFadeSpan[1][1] = 1;
													player.TrailFadeSpan[2][1] = 2;
													player.TrailFadeSpan[3][1] = 3;
													player.TrailFadeSpan[4][1] = 4;
													player.TrailFadeSpan[5][1] = 5;
													player.TrailFadeSpan[6][1] = 6;
													player.TrailFadeSpan[7][1] = 7;
													player.TrailFadeSpan[8][1] = 8;
													player.TrailFadeSpan[9][1] = 9;
													warp = 10;
													jet = 10;
													aero = player.Trail[helly].LengNum;
													helly = player.NomTrailL;
													player.NomTrailL = 0;
													}
												player.TrailFadeSpan[warp][1] = 0;
												}
											warp++;
											}
										}
									}
								jet++;
								}
							aero++;
							}
						SCRAM++;
						}

					}
				}
			helly++;
			}
		}*/


	//### Trail system

	if(player.NomTrailL > 0)
		{
		helly = 0;
		while(helly < player.NomTrailL)
			{
			if(player.Trail[helly].Live == 1)
				{
				//#### Effect Progression - Increment Material Counters
				if(player.Trail[helly].BitmapPTR == 4)
					{
					player.Trail[helly].MaterialCNT--;
					if(player.Trail[helly].MaterialCNT < 82) player.Trail[helly].MaterialCNT = 96;
					if(player.Trail[helly].MaterialCNT > 96) player.Trail[helly].MaterialCNT = 96;
					}

				if(player.Trail[helly].BitmapPTR == 3)
					{
					player.Trail[helly].MaterialCNT--;
					if(player.Trail[helly].MaterialCNT < 124) player.Trail[helly].MaterialCNT = 136;
					if(player.Trail[helly].MaterialCNT > 136) player.Trail[helly].MaterialCNT = 136;
					}

				aero = 0;
				while(aero < player.Trail[helly].LengNum)
					{
					if(player.Trail[helly].SectionLIVE[aero] == 1)
						{
						if(player.Trail[helly].BitmapPTR != 1 && player.Trail[helly].LINK != 10)
							{
							//### Expand Trails
							player.Trail[helly].EXvert.X = player.Trail[helly].Lvert[aero][0].X;
							player.Trail[helly].EXvert.Y = player.Trail[helly].Lvert[aero][0].Y;
							player.Trail[helly].EXvert.Z = player.Trail[helly].Lvert[aero][0].Z;
							geVec3d_Subtract(&player.Trail[helly].EXvert, &player.Trail[helly].AvatarCENTER, &player.Trail[helly].EXpandVec);
							geVec3d_Normalize(&player.Trail[helly].EXpandVec);

							player.Trail[helly].EXvert1.X = player.Trail[helly].Lvert[aero][0].X;
							player.Trail[helly].EXvert1.Y = player.Trail[helly].Lvert[aero][0].Y;
							player.Trail[helly].EXvert1.Z = player.Trail[helly].Lvert[aero][0].Z;
							player.Trail[helly].EXvert2.X = player.Trail[helly].Lvert[aero][1].X;
							player.Trail[helly].EXvert2.Y = player.Trail[helly].Lvert[aero][1].Y;
							player.Trail[helly].EXvert2.Z = player.Trail[helly].Lvert[aero][1].Z;
							player.Trail[helly].EXvert3.X = player.Trail[helly].Lvert[aero][2].X;
							player.Trail[helly].EXvert3.Y = player.Trail[helly].Lvert[aero][2].Y;
							player.Trail[helly].EXvert3.Z = player.Trail[helly].Lvert[aero][2].Z;
							player.Trail[helly].EXvert4.X = player.Trail[helly].Lvert[aero][3].X;
							player.Trail[helly].EXvert4.Y = player.Trail[helly].Lvert[aero][3].Y;
							player.Trail[helly].EXvert4.Z = player.Trail[helly].Lvert[aero][3].Z;

							geVec3d_MA(&player.Trail[helly].EXvert1, player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.RELRawPower/35, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert1);
							geVec3d_MA(&player.Trail[helly].EXvert2, player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.RELRawPower/35, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert2);
							geVec3d_MA(&player.Trail[helly].EXvert3, player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.RELRawPower/35, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert3);
							geVec3d_MA(&player.Trail[helly].EXvert4, player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.RELRawPower/35, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert4);

							player.Trail[helly].Lvert[aero][0].X = player.Trail[helly].EXvert1.X;
							player.Trail[helly].Lvert[aero][0].Y = player.Trail[helly].EXvert1.Y;
							player.Trail[helly].Lvert[aero][0].Z = player.Trail[helly].EXvert1.Z;
							player.Trail[helly].Lvert[aero][1].X = player.Trail[helly].EXvert2.X;
							player.Trail[helly].Lvert[aero][1].Y = player.Trail[helly].EXvert2.Y;
							player.Trail[helly].Lvert[aero][1].Z = player.Trail[helly].EXvert2.Z;
							player.Trail[helly].Lvert[aero][2].X = player.Trail[helly].EXvert3.X;
							player.Trail[helly].Lvert[aero][2].Y = player.Trail[helly].EXvert3.Y;
							player.Trail[helly].Lvert[aero][2].Z = player.Trail[helly].EXvert3.Z;
							player.Trail[helly].Lvert[aero][3].X = player.Trail[helly].EXvert4.X;
							player.Trail[helly].Lvert[aero][3].Y = player.Trail[helly].EXvert4.Y;
							player.Trail[helly].Lvert[aero][3].Z = player.Trail[helly].EXvert4.Z;


							/*player.Trail[helly].EXvert.X = player.Trail[helly].Lvert[aero][0].X;
							player.Trail[helly].EXvert.Y = player.Trail[helly].Lvert[aero][0].Y;
							player.Trail[helly].EXvert.Z = player.Trail[helly].Lvert[aero][0].Z;

							player.Trail[helly].EXvert1.X = player.Trail[helly].Lvert[aero][4].X;
							player.Trail[helly].EXvert1.Y = player.Trail[helly].Lvert[aero][4].Y;
							player.Trail[helly].EXvert1.Z = player.Trail[helly].Lvert[aero][4].Z;

							//### Expand Trails
							geVec3d_Subtract(&player.Trail[helly].EXvert1, &player.Trail[helly].EXvert, &player.Trail[helly].EXpandVec);
							geVec3d_Normalize(&player.Trail[helly].EXpandVec);

							player.Trail[helly].EXvert1.X = player.Trail[helly].Lvert[aero][0].X;
							player.Trail[helly].EXvert1.Y = player.Trail[helly].Lvert[aero][0].Y;
							player.Trail[helly].EXvert1.Z = player.Trail[helly].Lvert[aero][0].Z;
							player.Trail[helly].EXvert2.X = player.Trail[helly].Lvert[aero][1].X;
							player.Trail[helly].EXvert2.Y = player.Trail[helly].Lvert[aero][1].Y;
							player.Trail[helly].EXvert2.Z = player.Trail[helly].Lvert[aero][1].Z;
							player.Trail[helly].EXvert3.X = player.Trail[helly].Lvert[aero][2].X;
							player.Trail[helly].EXvert3.Y = player.Trail[helly].Lvert[aero][2].Y;
							player.Trail[helly].EXvert3.Z = player.Trail[helly].Lvert[aero][2].Z;
							player.Trail[helly].EXvert4.X = player.Trail[helly].Lvert[aero][3].X;
							player.Trail[helly].EXvert4.Y = player.Trail[helly].Lvert[aero][3].Y;
							player.Trail[helly].EXvert4.Z = player.Trail[helly].Lvert[aero][3].Z;

							//geVec3d_MA(&player.Trail[helly].EXvert1, -1, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert1);
							//geVec3d_MA(&player.Trail[helly].EXvert2, -1, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert2);
							geVec3d_MA(&player.Trail[helly].EXvert3, 1, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert3);
							geVec3d_MA(&player.Trail[helly].EXvert4, 1, &player.Trail[helly].EXpandVec, &player.Trail[helly].EXvert4);

							player.Trail[helly].Lvert[aero][0].X = player.Trail[helly].EXvert1.X;
							player.Trail[helly].Lvert[aero][0].Y = player.Trail[helly].EXvert1.Y;
							player.Trail[helly].Lvert[aero][0].Z = player.Trail[helly].EXvert1.Z;
							player.Trail[helly].Lvert[aero][1].X = player.Trail[helly].EXvert2.X;
							player.Trail[helly].Lvert[aero][1].Y = player.Trail[helly].EXvert2.Y;
							player.Trail[helly].Lvert[aero][1].Z = player.Trail[helly].EXvert2.Z;
							player.Trail[helly].Lvert[aero][2].X = player.Trail[helly].EXvert3.X;
							player.Trail[helly].Lvert[aero][2].Y = player.Trail[helly].EXvert3.Y;
							player.Trail[helly].Lvert[aero][2].Z = player.Trail[helly].EXvert3.Z;
							player.Trail[helly].Lvert[aero][3].X = player.Trail[helly].EXvert4.X;
							player.Trail[helly].Lvert[aero][3].Y = player.Trail[helly].EXvert4.Y;
							player.Trail[helly].Lvert[aero][3].Z = player.Trail[helly].EXvert4.Z;*/

							if(player.Trail[helly].LINK == 0)
								{
								if(aero != 0)
									{
									player.Trail[helly].Lvert[aero][0].X = player.Trail[helly].Lvert[aero-1][3].X;
									player.Trail[helly].Lvert[aero][0].Y = player.Trail[helly].Lvert[aero-1][3].Y;
									player.Trail[helly].Lvert[aero][0].Z = player.Trail[helly].Lvert[aero-1][3].Z;
									player.Trail[helly].Lvert[aero][1].X = player.Trail[helly].Lvert[aero-1][2].X;
									player.Trail[helly].Lvert[aero][1].Y = player.Trail[helly].Lvert[aero-1][2].Y;
									player.Trail[helly].Lvert[aero][1].Z = player.Trail[helly].Lvert[aero-1][2].Z;
									}
								else
									{
									if(helly != 0)
										{
										player.Trail[helly].Lvert[aero][0].X = player.Trail[helly-1].Lvert[9][3].X;
										player.Trail[helly].Lvert[aero][0].Y = player.Trail[helly-1].Lvert[9][3].Y;
										player.Trail[helly].Lvert[aero][0].Z = player.Trail[helly-1].Lvert[9][3].Z;
										player.Trail[helly].Lvert[aero][1].X = player.Trail[helly-1].Lvert[9][2].X;
										player.Trail[helly].Lvert[aero][1].Y = player.Trail[helly-1].Lvert[9][2].Y;
										player.Trail[helly].Lvert[aero][1].Z = player.Trail[helly-1].Lvert[9][2].Z;
										}
									}
								}

							}
	
						if(player.Trail[helly].BitmapPTR == 1) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, trail2, player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);

						if(player.Trail[helly].BitmapPTR == 2) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, trail1, player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);

						if(player.Trail[helly].BitmapPTR == 3) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, Water[player.Trail[helly].MaterialCNT], player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);

						if(player.Trail[helly].BitmapPTR == 4) geWorld_AddPolyOnce(World, &player.Trail[helly].Lvert[aero][0], 4, flametrail[player.Trail[helly].MaterialCNT], player.Trail[helly].Type, player.Trail[helly].RenderFlags, player.Trail[helly].Scale);

						//### Reversed NUMERACY Algorithym

						player.Trail[helly].AFADE[aero] = (1 - (((helly * player.Trail[helly].LengNum) + aero) / (player.NomTrailL * player.Trail[helly].LengNum))) * 30;	//50 = VERY GOOD

						if(player.Trail[helly].Lvert[aero][0].a - player.Trail[helly].AFADE[aero] > 0) player.Trail[helly].Lvert[aero][0].a -= player.Trail[helly].AFADE[aero];
						else player.Trail[helly].SectionLIVE[aero] = 0;

						if(player.Trail[helly].Lvert[aero][1].a - player.Trail[helly].AFADE[aero] > 0) player.Trail[helly].Lvert[aero][1].a -= player.Trail[helly].AFADE[aero];
						else player.Trail[helly].SectionLIVE[aero] = 0;

						if(player.Trail[helly].Lvert[aero][2].a - player.Trail[helly].AFADE[aero] > 0) player.Trail[helly].Lvert[aero][2].a -= player.Trail[helly].AFADE[aero];
						else player.Trail[helly].SectionLIVE[aero] = 0;

						if(player.Trail[helly].Lvert[aero][3].a - player.Trail[helly].AFADE[aero] > 0) player.Trail[helly].Lvert[aero][3].a -= player.Trail[helly].AFADE[aero];
						else player.Trail[helly].SectionLIVE[aero] = 0;
						}
					else
						{
						if(aero == (player.Trail[helly].LengNum - 1))
							{
							player.Trail[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < player.NomTrailL - 1)
								{
								player.Trail[K] = player.Trail[K+1];
								K++;
								}

							player.NomTrailL--;
							helly--;
							}
						}


					/*jet = 0;
					while(jet < player.Trail[helly].LengNum)
						{
						if(player.TrailFadeSpan[jet][0] == helly && player.TrailFadeSpan[jet][1] == aero)
							{
							if(player.TrailsOn == 1) player.Trail[helly].AlpFade = (50 - ((jet*20)*((10-player.Trail[helly].LengNum)+1)));
							if(player.TrailsOn == 0)							//**200**
								{
								player.Trail[helly].AlpFade = (125 - ((jet*20)*((10-player.Trail[helly].LengNum)+1)));
								}

							if(player.Trail[helly].AlpFade < 0) player.Trail[helly].AlpFade = 0;

							if(player.Trail[helly].Lvert[aero][0].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][0].a -= player.Trail[helly].AlpFade;
							else player.Trail[helly].ShiftFlag = 1;
							if(player.Trail[helly].Lvert[aero][1].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][1].a -= player.Trail[helly].AlpFade;
							else player.Trail[helly].ShiftFlag = 1;
							if(player.Trail[helly].Lvert[aero][2].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][2].a -= player.Trail[helly].AlpFade;
							else player.Trail[helly].ShiftFlag = 1;
							if(player.Trail[helly].Lvert[aero][3].a - (player.Trail[helly].AlpFade) >= 0) player.Trail[helly].Lvert[aero][3].a -= player.Trail[helly].AlpFade;
							else player.Trail[helly].ShiftFlag = 1;

							if(player.Trail[helly].ShiftFlag == 1 && jet == 0)
								{
								player.Trail[helly].ShiftFlag = 0;

								player.Trail[helly].Lvert[aero][0].a = 0;
								player.Trail[helly].Lvert[aero][1].a = 0;
								player.Trail[helly].Lvert[aero][2].a = 0;
								player.Trail[helly].Lvert[aero][3].a = 0;

								player.Trail[helly].SectionLIVE[aero] = 0;

								//Shift UP
								warp = 0;
								while(warp < player.Trail[helly].LengNum)
									{
									if(player.TrailFadeSpan[warp][1] + 1 < player.Trail[helly].LengNum) player.TrailFadeSpan[warp][1]++;
									else
										{
										if(player.TrailFadeSpan[warp][0] + 1 < player.NomTrailL) player.TrailFadeSpan[warp][0]++;
										else if(warp == 0)
											{
											trans = 0;
											while(trans < player.NomTrailL)
												{
												player.Trail[trans].Live = 0;
												trans++;
												}

											player.TrailFadeSpan[0][0] = 0;
											player.TrailFadeSpan[1][0] = 0;
											player.TrailFadeSpan[2][0] = 0;
											player.TrailFadeSpan[3][0] = 0;
											player.TrailFadeSpan[4][0] = 0;
											player.TrailFadeSpan[5][0] = 0;
											player.TrailFadeSpan[6][0] = 0;
											player.TrailFadeSpan[7][0] = 0;
											player.TrailFadeSpan[8][0] = 0;
											player.TrailFadeSpan[9][0] = 0;
											player.TrailFadeSpan[0][1] = 0;
											player.TrailFadeSpan[1][1] = 1;
											player.TrailFadeSpan[2][1] = 2;
											player.TrailFadeSpan[3][1] = 3;
											player.TrailFadeSpan[4][1] = 4;
											player.TrailFadeSpan[5][1] = 5;
											player.TrailFadeSpan[6][1] = 6;
											player.TrailFadeSpan[7][1] = 7;
											player.TrailFadeSpan[8][1] = 8;
											player.TrailFadeSpan[9][1] = 9;
											warp = 10;
											jet = 10;
											aero = player.Trail[helly].LengNum;
											helly = player.NomTrailL;
											player.NomTrailL = 0;
											}
										player.TrailFadeSpan[warp][1] = 0;
										}
									warp++;
									}
								}
							}
						jet++;
						}*/
					aero++;
					}
				}
			helly++;
			}
		}



		//##### - AI TRAIL LINES - #####

	/*SCRAM = 0;
	while(SCRAM < NomAI)
		{
		if(Forge[SCRAM].LIVE == 1)
			{
			if(Forge[SCRAM].NomTrailL > 0)
				{
				helly = 0;
				while(helly < Forge[SCRAM].NomTrailL)
					{
					if(Forge[SCRAM].Trail[helly].Live == 1)
						{
						aero = 0;
						while(aero < Forge[SCRAM].Trail[helly].LengNum)
							{
							if(Forge[SCRAM].Trail[helly].Lvert[aero][0].a > 0)
								{
								Forge[SCRAM].Trail[helly].MaterialCNT++;
								if(Forge[SCRAM].Trail[helly].MaterialCNT < 124) Forge[SCRAM].Trail[helly].MaterialCNT = 124;
								if(Forge[SCRAM].Trail[helly].MaterialCNT > 136) Forge[SCRAM].Trail[helly].MaterialCNT = 124;

								if(Forge[SCRAM].Trail[helly].BitmapPTR == 0) geWorld_AddPolyOnce(World, &Forge[SCRAM].Trail[helly].Lvert[aero][0], 4, Water[Forge[SCRAM].Trail[helly].MaterialCNT], Forge[SCRAM].Trail[helly].Type, Forge[SCRAM].Trail[helly].RenderFlags, Forge[SCRAM].Trail[helly].Scale);

								//if(Forge[SCRAM].Trail[helly].BitmapPTR == 0) geWorld_AddPolyOnce(World, &Forge[SCRAM].Trail[helly].Lvert[aero][0], 4, trail1, Forge[SCRAM].Trail[helly].Type, Forge[SCRAM].Trail[helly].RenderFlags, Forge[SCRAM].Trail[helly].Scale);
								if(Forge[SCRAM].Trail[helly].BitmapPTR == 1) geWorld_AddPolyOnce(World, &Forge[SCRAM].Trail[helly].Lvert[aero][0], 4, trail2, Forge[SCRAM].Trail[helly].Type, Forge[SCRAM].Trail[helly].RenderFlags, Forge[SCRAM].Trail[helly].Scale);
								//if(player.MatCounter[2]+1 < 142) player.MatCounter[2]+=1;
								//else player.MatCounter[2] = 82;
								}

							jet = 0;
							while(jet < Forge[SCRAM].Trail[helly].LengNum)
								{
								if(Forge[SCRAM].TrailFadeSpan[jet][0] == helly && Forge[SCRAM].TrailFadeSpan[jet][1] == aero)
									{
									if(Forge[SCRAM].TrailsOn == 1) Forge[SCRAM].Trail[helly].AlpFade = (200 - (jet*20));
									if(Forge[SCRAM].TrailsOn == 0)
										{
										Forge[SCRAM].Trail[helly].AlpFade = (200 - (jet*20));
										}

									if(Forge[SCRAM].Trail[helly].AlpFade < 0) Forge[SCRAM].Trail[helly].AlpFade = 0;

									if(Forge[SCRAM].Trail[helly].Lvert[aero][0].a - (Forge[SCRAM].Trail[helly].AlpFade) >= 0) Forge[SCRAM].Trail[helly].Lvert[aero][0].a -= Forge[SCRAM].Trail[helly].AlpFade;
									else Forge[SCRAM].Trail[helly].ShiftFlag = 1;
									if(Forge[SCRAM].Trail[helly].Lvert[aero][1].a - (Forge[SCRAM].Trail[helly].AlpFade) >= 0) Forge[SCRAM].Trail[helly].Lvert[aero][1].a -= Forge[SCRAM].Trail[helly].AlpFade;
									else Forge[SCRAM].Trail[helly].ShiftFlag = 1;
									if(Forge[SCRAM].Trail[helly].Lvert[aero][2].a - (Forge[SCRAM].Trail[helly].AlpFade) >= 0) Forge[SCRAM].Trail[helly].Lvert[aero][2].a -= Forge[SCRAM].Trail[helly].AlpFade;
									else Forge[SCRAM].Trail[helly].ShiftFlag = 1;
									if(Forge[SCRAM].Trail[helly].Lvert[aero][3].a - (Forge[SCRAM].Trail[helly].AlpFade) >= 0) Forge[SCRAM].Trail[helly].Lvert[aero][3].a -= Forge[SCRAM].Trail[helly].AlpFade;
									else Forge[SCRAM].Trail[helly].ShiftFlag = 1;

									if(Forge[SCRAM].Trail[helly].ShiftFlag == 1 && jet == 0)
										{
										Forge[SCRAM].Trail[helly].ShiftFlag = 0;

										Forge[SCRAM].Trail[helly].Lvert[aero][0].a = 0;
										Forge[SCRAM].Trail[helly].Lvert[aero][1].a = 0;
										Forge[SCRAM].Trail[helly].Lvert[aero][2].a = 0;
										Forge[SCRAM].Trail[helly].Lvert[aero][3].a = 0;

										Forge[SCRAM].Trail[helly].SectionLIVE[aero] = 0;

										//Shift UP
										warp = 0;
										while(warp < Forge[SCRAM].Trail[helly].LengNum)
											{
											if(Forge[SCRAM].TrailFadeSpan[warp][1] + 1 < Forge[SCRAM].Trail[helly].LengNum) Forge[SCRAM].TrailFadeSpan[warp][1]++;
											else
												{
												if(Forge[SCRAM].TrailFadeSpan[warp][0] + 1 < Forge[SCRAM].NomTrailL) Forge[SCRAM].TrailFadeSpan[warp][0]++;
												else if(warp == 0)
													{
													trans = 0;
													while(trans < Forge[SCRAM].NomTrailL)
														{
														Forge[SCRAM].Trail[trans].Live = 0;
														trans++;
														}
													Forge[SCRAM].TrailFadeSpan[0][0] = 0;
													Forge[SCRAM].TrailFadeSpan[1][0] = 0;
													Forge[SCRAM].TrailFadeSpan[2][0] = 0;
													Forge[SCRAM].TrailFadeSpan[3][0] = 0;
													Forge[SCRAM].TrailFadeSpan[4][0] = 0;
													Forge[SCRAM].TrailFadeSpan[5][0] = 0;
													Forge[SCRAM].TrailFadeSpan[6][0] = 0;
													Forge[SCRAM].TrailFadeSpan[7][0] = 0;
													Forge[SCRAM].TrailFadeSpan[8][0] = 0;
													Forge[SCRAM].TrailFadeSpan[9][0] = 0;
													Forge[SCRAM].TrailFadeSpan[0][1] = 0;
													Forge[SCRAM].TrailFadeSpan[1][1] = 1;
													Forge[SCRAM].TrailFadeSpan[2][1] = 2;
													Forge[SCRAM].TrailFadeSpan[3][1] = 3;
													Forge[SCRAM].TrailFadeSpan[4][1] = 4;
													Forge[SCRAM].TrailFadeSpan[5][1] = 5;
													Forge[SCRAM].TrailFadeSpan[6][1] = 6;
													Forge[SCRAM].TrailFadeSpan[7][1] = 7;
													Forge[SCRAM].TrailFadeSpan[8][1] = 8;
													Forge[SCRAM].TrailFadeSpan[9][1] = 9;
													warp = 10;
													jet = 10;
													aero = Forge[SCRAM].Trail[helly].LengNum;
													helly = Forge[SCRAM].NomTrailL;
													Forge[SCRAM].NomTrailL = 0;
													}
												Forge[SCRAM].TrailFadeSpan[warp][1] = 0;
												}
											warp++;
											}
										}
									}
								jet++;
								}
							aero++;
							}
						}
					helly++;
					}
				}
			}
		SCRAM++;
		}*/



	SCRAM = 0;
	while(SCRAM < NomAI)
		{
		if(Forge[SCRAM].LIVE == 1)
			{
			if(Forge[SCRAM].NomTrailL > 0)
				{
				helly = 0;
				while(helly < Forge[SCRAM].NomTrailL)
					{
					if(Forge[SCRAM].Trail[helly].Live == 1)
						{
						//#### Effect Progression - Increment Material Counters
						if(Forge[SCRAM].Trail[helly].BitmapPTR == 4)
							{
							Forge[SCRAM].Trail[helly].MaterialCNT--;
							if(Forge[SCRAM].Trail[helly].MaterialCNT < 82) Forge[SCRAM].Trail[helly].MaterialCNT = 96;
							if(Forge[SCRAM].Trail[helly].MaterialCNT > 96) Forge[SCRAM].Trail[helly].MaterialCNT = 96;
							}

						if(Forge[SCRAM].Trail[helly].BitmapPTR == 3)
							{
							Forge[SCRAM].Trail[helly].MaterialCNT--;
							if(Forge[SCRAM].Trail[helly].MaterialCNT < 124) Forge[SCRAM].Trail[helly].MaterialCNT = 136;
							if(Forge[SCRAM].Trail[helly].MaterialCNT > 136) Forge[SCRAM].Trail[helly].MaterialCNT = 136;
							}

						aero = 0;
						while(aero < Forge[SCRAM].Trail[helly].LengNum)
							{
							if(Forge[SCRAM].Trail[helly].SectionLIVE[aero] == 1)
								{
								if(Forge[SCRAM].Trail[helly].BitmapPTR != 1 && Forge[SCRAM].Trail[helly].LINK != 10)
									{
									//### Expand Trails
									Forge[SCRAM].Trail[helly].EXvert.X = Forge[SCRAM].Trail[helly].Lvert[aero][0].X;
									Forge[SCRAM].Trail[helly].EXvert.Y = Forge[SCRAM].Trail[helly].Lvert[aero][0].Y;
									Forge[SCRAM].Trail[helly].EXvert.Z = Forge[SCRAM].Trail[helly].Lvert[aero][0].Z;
									geVec3d_Subtract(&Forge[SCRAM].Trail[helly].EXvert, &Forge[SCRAM].Trail[helly].AvatarCENTER, &Forge[SCRAM].Trail[helly].EXpandVec);
									geVec3d_Normalize(&Forge[SCRAM].Trail[helly].EXpandVec);

									Forge[SCRAM].Trail[helly].EXvert1.X = Forge[SCRAM].Trail[helly].Lvert[aero][0].X;
									Forge[SCRAM].Trail[helly].EXvert1.Y = Forge[SCRAM].Trail[helly].Lvert[aero][0].Y;
									Forge[SCRAM].Trail[helly].EXvert1.Z = Forge[SCRAM].Trail[helly].Lvert[aero][0].Z;
									Forge[SCRAM].Trail[helly].EXvert2.X = Forge[SCRAM].Trail[helly].Lvert[aero][1].X;
									Forge[SCRAM].Trail[helly].EXvert2.Y = Forge[SCRAM].Trail[helly].Lvert[aero][1].Y;
									Forge[SCRAM].Trail[helly].EXvert2.Z = Forge[SCRAM].Trail[helly].Lvert[aero][1].Z;
									Forge[SCRAM].Trail[helly].EXvert3.X = Forge[SCRAM].Trail[helly].Lvert[aero][2].X;
									Forge[SCRAM].Trail[helly].EXvert3.Y = Forge[SCRAM].Trail[helly].Lvert[aero][2].Y;
									Forge[SCRAM].Trail[helly].EXvert3.Z = Forge[SCRAM].Trail[helly].Lvert[aero][2].Z;
									Forge[SCRAM].Trail[helly].EXvert4.X = Forge[SCRAM].Trail[helly].Lvert[aero][3].X;
									Forge[SCRAM].Trail[helly].EXvert4.Y = Forge[SCRAM].Trail[helly].Lvert[aero][3].Y;
									Forge[SCRAM].Trail[helly].EXvert4.Z = Forge[SCRAM].Trail[helly].Lvert[aero][3].Z;

									geVec3d_MA(&Forge[SCRAM].Trail[helly].EXvert1, Forge[SCRAM].CharDATA.BodySKILL.RELRawPower/10, &Forge[SCRAM].Trail[helly].EXpandVec, &Forge[SCRAM].Trail[helly].EXvert1);
									geVec3d_MA(&Forge[SCRAM].Trail[helly].EXvert2, Forge[SCRAM].CharDATA.BodySKILL.RELRawPower/10, &Forge[SCRAM].Trail[helly].EXpandVec, &Forge[SCRAM].Trail[helly].EXvert2);
									geVec3d_MA(&Forge[SCRAM].Trail[helly].EXvert3, Forge[SCRAM].CharDATA.BodySKILL.RELRawPower/10, &Forge[SCRAM].Trail[helly].EXpandVec, &Forge[SCRAM].Trail[helly].EXvert3);
									geVec3d_MA(&Forge[SCRAM].Trail[helly].EXvert4, Forge[SCRAM].CharDATA.BodySKILL.RELRawPower/10, &Forge[SCRAM].Trail[helly].EXpandVec, &Forge[SCRAM].Trail[helly].EXvert4);

									Forge[SCRAM].Trail[helly].Lvert[aero][0].X = Forge[SCRAM].Trail[helly].EXvert1.X;
									Forge[SCRAM].Trail[helly].Lvert[aero][0].Y = Forge[SCRAM].Trail[helly].EXvert1.Y;
									Forge[SCRAM].Trail[helly].Lvert[aero][0].Z = Forge[SCRAM].Trail[helly].EXvert1.Z;
									Forge[SCRAM].Trail[helly].Lvert[aero][1].X = Forge[SCRAM].Trail[helly].EXvert2.X;
									Forge[SCRAM].Trail[helly].Lvert[aero][1].Y = Forge[SCRAM].Trail[helly].EXvert2.Y;
									Forge[SCRAM].Trail[helly].Lvert[aero][1].Z = Forge[SCRAM].Trail[helly].EXvert2.Z;
									Forge[SCRAM].Trail[helly].Lvert[aero][2].X = Forge[SCRAM].Trail[helly].EXvert3.X;
									Forge[SCRAM].Trail[helly].Lvert[aero][2].Y = Forge[SCRAM].Trail[helly].EXvert3.Y;
									Forge[SCRAM].Trail[helly].Lvert[aero][2].Z = Forge[SCRAM].Trail[helly].EXvert3.Z;
									Forge[SCRAM].Trail[helly].Lvert[aero][3].X = Forge[SCRAM].Trail[helly].EXvert4.X;
									Forge[SCRAM].Trail[helly].Lvert[aero][3].Y = Forge[SCRAM].Trail[helly].EXvert4.Y;
									Forge[SCRAM].Trail[helly].Lvert[aero][3].Z = Forge[SCRAM].Trail[helly].EXvert4.Z;


									/*Forge[SCRAM].Trail[helly].EXvert.X = Forge[SCRAM].Trail[helly].Lvert[aero][0].X;
									Forge[SCRAM].Trail[helly].EXvert.Y = Forge[SCRAM].Trail[helly].Lvert[aero][0].Y;
									Forge[SCRAM].Trail[helly].EXvert.Z = Forge[SCRAM].Trail[helly].Lvert[aero][0].Z;

									Forge[SCRAM].Trail[helly].EXvert1.X = Forge[SCRAM].Trail[helly].Lvert[aero][4].X;
									Forge[SCRAM].Trail[helly].EXvert1.Y = Forge[SCRAM].Trail[helly].Lvert[aero][4].Y;
									Forge[SCRAM].Trail[helly].EXvert1.Z = Forge[SCRAM].Trail[helly].Lvert[aero][4].Z;

									//### Expand Trails
									geVec3d_Subtract(&Forge[SCRAM].Trail[helly].EXvert1, &Forge[SCRAM].Trail[helly].EXvert, &Forge[SCRAM].Trail[helly].EXpandVec);
									geVec3d_Normalize(&Forge[SCRAM].Trail[helly].EXpandVec);

									Forge[SCRAM].Trail[helly].EXvert1.X = Forge[SCRAM].Trail[helly].Lvert[aero][0].X;
									Forge[SCRAM].Trail[helly].EXvert1.Y = Forge[SCRAM].Trail[helly].Lvert[aero][0].Y;
									Forge[SCRAM].Trail[helly].EXvert1.Z = Forge[SCRAM].Trail[helly].Lvert[aero][0].Z;
									Forge[SCRAM].Trail[helly].EXvert2.X = Forge[SCRAM].Trail[helly].Lvert[aero][1].X;
									Forge[SCRAM].Trail[helly].EXvert2.Y = Forge[SCRAM].Trail[helly].Lvert[aero][1].Y;
									Forge[SCRAM].Trail[helly].EXvert2.Z = Forge[SCRAM].Trail[helly].Lvert[aero][1].Z;
									Forge[SCRAM].Trail[helly].EXvert3.X = Forge[SCRAM].Trail[helly].Lvert[aero][2].X;
									Forge[SCRAM].Trail[helly].EXvert3.Y = Forge[SCRAM].Trail[helly].Lvert[aero][2].Y;
									Forge[SCRAM].Trail[helly].EXvert3.Z = Forge[SCRAM].Trail[helly].Lvert[aero][2].Z;
									Forge[SCRAM].Trail[helly].EXvert4.X = Forge[SCRAM].Trail[helly].Lvert[aero][3].X;
									Forge[SCRAM].Trail[helly].EXvert4.Y = Forge[SCRAM].Trail[helly].Lvert[aero][3].Y;
									Forge[SCRAM].Trail[helly].EXvert4.Z = Forge[SCRAM].Trail[helly].Lvert[aero][3].Z;

									//geVec3d_MA(&Forge[SCRAM].Trail[helly].EXvert1, -1, &Forge[SCRAM].Trail[helly].EXpandVec, &Forge[SCRAM].Trail[helly].EXvert1);
									//geVec3d_MA(&Forge[SCRAM].Trail[helly].EXvert2, -1, &Forge[SCRAM].Trail[helly].EXpandVec, &Forge[SCRAM].Trail[helly].EXvert2);
									geVec3d_MA(&Forge[SCRAM].Trail[helly].EXvert3, 1, &Forge[SCRAM].Trail[helly].EXpandVec, &Forge[SCRAM].Trail[helly].EXvert3);
									geVec3d_MA(&Forge[SCRAM].Trail[helly].EXvert4, 1, &Forge[SCRAM].Trail[helly].EXpandVec, &Forge[SCRAM].Trail[helly].EXvert4);

									Forge[SCRAM].Trail[helly].Lvert[aero][0].X = Forge[SCRAM].Trail[helly].EXvert1.X;
									Forge[SCRAM].Trail[helly].Lvert[aero][0].Y = Forge[SCRAM].Trail[helly].EXvert1.Y;
									Forge[SCRAM].Trail[helly].Lvert[aero][0].Z = Forge[SCRAM].Trail[helly].EXvert1.Z;
									Forge[SCRAM].Trail[helly].Lvert[aero][1].X = Forge[SCRAM].Trail[helly].EXvert2.X;
									Forge[SCRAM].Trail[helly].Lvert[aero][1].Y = Forge[SCRAM].Trail[helly].EXvert2.Y;
									Forge[SCRAM].Trail[helly].Lvert[aero][1].Z = Forge[SCRAM].Trail[helly].EXvert2.Z;
									Forge[SCRAM].Trail[helly].Lvert[aero][2].X = Forge[SCRAM].Trail[helly].EXvert3.X;
									Forge[SCRAM].Trail[helly].Lvert[aero][2].Y = Forge[SCRAM].Trail[helly].EXvert3.Y;
									Forge[SCRAM].Trail[helly].Lvert[aero][2].Z = Forge[SCRAM].Trail[helly].EXvert3.Z;
									Forge[SCRAM].Trail[helly].Lvert[aero][3].X = Forge[SCRAM].Trail[helly].EXvert4.X;
									Forge[SCRAM].Trail[helly].Lvert[aero][3].Y = Forge[SCRAM].Trail[helly].EXvert4.Y;
									Forge[SCRAM].Trail[helly].Lvert[aero][3].Z = Forge[SCRAM].Trail[helly].EXvert4.Z;*/



									if(Forge[SCRAM].Trail[helly].LINK == 0)
										{
										if(aero != 0)
											{
											Forge[SCRAM].Trail[helly].Lvert[aero][0].X = Forge[SCRAM].Trail[helly].Lvert[aero-1][3].X;
											Forge[SCRAM].Trail[helly].Lvert[aero][0].Y = Forge[SCRAM].Trail[helly].Lvert[aero-1][3].Y;
											Forge[SCRAM].Trail[helly].Lvert[aero][0].Z = Forge[SCRAM].Trail[helly].Lvert[aero-1][3].Z;
											Forge[SCRAM].Trail[helly].Lvert[aero][1].X = Forge[SCRAM].Trail[helly].Lvert[aero-1][2].X;
											Forge[SCRAM].Trail[helly].Lvert[aero][1].Y = Forge[SCRAM].Trail[helly].Lvert[aero-1][2].Y;
											Forge[SCRAM].Trail[helly].Lvert[aero][1].Z = Forge[SCRAM].Trail[helly].Lvert[aero-1][2].Z;
											}
										else
											{
											if(helly != 0 && Forge[SCRAM].Trail[helly-1].LINK != 1)
												{
												Forge[SCRAM].Trail[helly].Lvert[aero][0].X = Forge[SCRAM].Trail[helly-1].Lvert[9][3].X;
												Forge[SCRAM].Trail[helly].Lvert[aero][0].Y = Forge[SCRAM].Trail[helly-1].Lvert[9][3].Y;
												Forge[SCRAM].Trail[helly].Lvert[aero][0].Z = Forge[SCRAM].Trail[helly-1].Lvert[9][3].Z;
												Forge[SCRAM].Trail[helly].Lvert[aero][1].X = Forge[SCRAM].Trail[helly-1].Lvert[9][2].X;
												Forge[SCRAM].Trail[helly].Lvert[aero][1].Y = Forge[SCRAM].Trail[helly-1].Lvert[9][2].Y;
												Forge[SCRAM].Trail[helly].Lvert[aero][1].Z = Forge[SCRAM].Trail[helly-1].Lvert[9][2].Z;
												}
											}
										}
									}


								if(Forge[SCRAM].Trail[helly].BitmapPTR == 1) geWorld_AddPolyOnce(World, &Forge[SCRAM].Trail[helly].Lvert[aero][0], 4, trail2, Forge[SCRAM].Trail[helly].Type, Forge[SCRAM].Trail[helly].RenderFlags, Forge[SCRAM].Trail[helly].Scale);

								if(Forge[SCRAM].Trail[helly].BitmapPTR == 2) geWorld_AddPolyOnce(World, &Forge[SCRAM].Trail[helly].Lvert[aero][0], 4, trail1, Forge[SCRAM].Trail[helly].Type, Forge[SCRAM].Trail[helly].RenderFlags, Forge[SCRAM].Trail[helly].Scale);

								if(Forge[SCRAM].Trail[helly].BitmapPTR == 3) geWorld_AddPolyOnce(World, &Forge[SCRAM].Trail[helly].Lvert[aero][0], 4, Water[Forge[SCRAM].Trail[helly].MaterialCNT], Forge[SCRAM].Trail[helly].Type, Forge[SCRAM].Trail[helly].RenderFlags, Forge[SCRAM].Trail[helly].Scale);

								if(Forge[SCRAM].Trail[helly].BitmapPTR == 4) geWorld_AddPolyOnce(World, &Forge[SCRAM].Trail[helly].Lvert[aero][0], 4, flametrail[Forge[SCRAM].Trail[helly].MaterialCNT], Forge[SCRAM].Trail[helly].Type, Forge[SCRAM].Trail[helly].RenderFlags, Forge[SCRAM].Trail[helly].Scale);
								

								//### Reversed NUMERACY Algorithym

								Forge[SCRAM].Trail[helly].AFADE[aero] = (1 - (((helly * Forge[SCRAM].Trail[helly].LengNum) + aero) / (Forge[SCRAM].NomTrailL * Forge[SCRAM].Trail[helly].LengNum))) * 30;	//50 = VERY GOOD

								if(Forge[SCRAM].Trail[helly].Lvert[aero][0].a - Forge[SCRAM].Trail[helly].AFADE[aero] > 0) Forge[SCRAM].Trail[helly].Lvert[aero][0].a -= Forge[SCRAM].Trail[helly].AFADE[aero];
								else Forge[SCRAM].Trail[helly].SectionLIVE[aero] = 0;

								if(Forge[SCRAM].Trail[helly].Lvert[aero][1].a - Forge[SCRAM].Trail[helly].AFADE[aero] > 0) Forge[SCRAM].Trail[helly].Lvert[aero][1].a -= Forge[SCRAM].Trail[helly].AFADE[aero];
								else Forge[SCRAM].Trail[helly].SectionLIVE[aero] = 0;

								if(Forge[SCRAM].Trail[helly].Lvert[aero][2].a - Forge[SCRAM].Trail[helly].AFADE[aero] > 0) Forge[SCRAM].Trail[helly].Lvert[aero][2].a -= Forge[SCRAM].Trail[helly].AFADE[aero];
								else Forge[SCRAM].Trail[helly].SectionLIVE[aero] = 0;

								if(Forge[SCRAM].Trail[helly].Lvert[aero][3].a - Forge[SCRAM].Trail[helly].AFADE[aero] > 0) Forge[SCRAM].Trail[helly].Lvert[aero][3].a -= Forge[SCRAM].Trail[helly].AFADE[aero];
								else Forge[SCRAM].Trail[helly].SectionLIVE[aero] = 0;
								}
							else
								{
								if(aero == (Forge[SCRAM].Trail[helly].LengNum - 1))
									{
									Forge[SCRAM].Trail[helly].Live = 0;

									//### Array Reorder
									K = helly;
									while(K < Forge[SCRAM].NomTrailL - 1)
										{
										Forge[SCRAM].Trail[K] = Forge[SCRAM].Trail[K+1];
										K++;
										}

									Forge[SCRAM].NomTrailL--;
									helly--;
									}
								}
							aero++;
							}
						}
					helly++;
					}
				}
			}
		SCRAM++;
		}



	//##### - LIMB FLAMES - #####
	aero = 0;

	if(player.Aposestate == 59)
		{
				/*if(Q_LimbFlame[aero].LFlash == 1)
					{*/
				if(Q_LimbFlame[aero].JFogExist == 0)
					{
					Q_LimbFlame[aero].JFogExist = 1;
					Fog1 = geWorld_AddFog(World);
					Fog2 = geWorld_AddFog(World);
					Q_LimbFlame[aero].JFogPos = playact.ActorXform.Translation;
					Q_LimbFlame[aero].JFogPos.Y += 60;
					Q_LimbFlame[aero].JFog1Color.r = 255;
					Q_LimbFlame[aero].JFog1Color.g = 255;
					Q_LimbFlame[aero].JFog1Color.b = 255;
					Q_LimbFlame[aero].JFog1Color.a = 255;
					Q_LimbFlame[aero].JFog2Color.r = 45;
					Q_LimbFlame[aero].JFog2Color.g = 45;
					Q_LimbFlame[aero].JFog2Color.b = 65;
					Q_LimbFlame[aero].JFog2Color.a = 255;
					Q_LimbFlame[aero].LFlashCNT = 0;
					}


					if(Q_LimbFlame[aero].LFlashCNT == 0)
						{
						geFog_SetAttributes(Fog1, &Q_LimbFlame[aero].JFogPos, &Q_LimbFlame[aero].JFog1Color, 1000, 2000, 150);
						geFog_SetAttributes(Fog2, &Q_LimbFlame[aero].JFogPos, &Q_LimbFlame[aero].JFog2Color, 0, 0, 150);
						}


					if(Q_LimbFlame[aero].LFlashCNT == 3)
						{
						Q_LimbFlame[aero].JFogPos = playact.ActorXform.Translation;
						Q_LimbFlame[aero].JFogPos.Y += 60;
						Q_LimbFlame[aero].JFog1Color.r = 150;
						Q_LimbFlame[aero].JFog1Color.g = 150;
						Q_LimbFlame[aero].JFog1Color.b = 150;
						Q_LimbFlame[aero].JFog1Color.a = 45;

						geFog_SetAttributes(Fog1, &Q_LimbFlame[aero].JFogPos, &Q_LimbFlame[aero].JFog1Color, 1000, 3000, 150);
						}


					if(Q_LimbFlame[aero].LFlashCNT == 4)
						{
						Q_LimbFlame[aero].JFogPos = playact.ActorXform.Translation;
						Q_LimbFlame[aero].JFogPos.Y += 60;
						Q_LimbFlame[aero].JFog1Color.r = 0;
						Q_LimbFlame[aero].JFog1Color.g = 0;
						Q_LimbFlame[aero].JFog1Color.b = 0;
						Q_LimbFlame[aero].JFog1Color.a = 0;

						geFog_SetAttributes(Fog1, &Q_LimbFlame[aero].JFogPos, &Q_LimbFlame[aero].JFog1Color, 1000, 3000, 150);
						}


					if(Q_LimbFlame[aero].LFlashCNT == 5)
						{
						Q_LimbFlame[aero].JFogPos = playact.ActorXform.Translation;
						Q_LimbFlame[aero].JFogPos.Y += 60;
						Q_LimbFlame[aero].JFog1Color.r = 50;
						Q_LimbFlame[aero].JFog1Color.g = 50;
						Q_LimbFlame[aero].JFog1Color.b = 50;
						Q_LimbFlame[aero].JFog1Color.a = 255;

						geFog_SetAttributes(Fog1, &Q_LimbFlame[aero].JFogPos, &Q_LimbFlame[aero].JFog1Color, 1000, 3000, 150);
						}


					if(Q_LimbFlame[aero].LFlashCNT == 6)
						{
						Q_LimbFlame[aero].JFogPos = playact.ActorXform.Translation;
						Q_LimbFlame[aero].JFogPos.Y += 60;
						Q_LimbFlame[aero].JFog1Color.r = 0;
						Q_LimbFlame[aero].JFog1Color.g = 0;
						Q_LimbFlame[aero].JFog1Color.b = 0;
						Q_LimbFlame[aero].JFog1Color.a = 0;

						geFog_SetAttributes(Fog1, &Q_LimbFlame[aero].JFogPos, &Q_LimbFlame[aero].JFog1Color, 1000, 3000, 150);
						}


					if(Q_LimbFlame[aero].LFlashCNT == 8)
						{
						Q_LimbFlame[aero].JFogPos = playact.ActorXform.Translation;
						Q_LimbFlame[aero].JFogPos.Y += 60;
						Q_LimbFlame[aero].JFog1Color.r = 230;
						Q_LimbFlame[aero].JFog1Color.g = 230;
						Q_LimbFlame[aero].JFog1Color.b = 230;
						Q_LimbFlame[aero].JFog1Color.a = 255;

						geFog_SetAttributes(Fog1, &Q_LimbFlame[aero].JFogPos, &Q_LimbFlame[aero].JFog1Color, 1000, 3000, 150);
						}


					if(Q_LimbFlame[aero].LFlashCNT == 9)
						{
						Q_LimbFlame[aero].JFogPos = playact.ActorXform.Translation;
						Q_LimbFlame[aero].JFogPos.Y += 60;
						Q_LimbFlame[aero].JFog1Color.r = 70;
						Q_LimbFlame[aero].JFog1Color.g = 70;
						Q_LimbFlame[aero].JFog1Color.b = 70;
						Q_LimbFlame[aero].JFog1Color.a = 110;

						geFog_SetAttributes(Fog1, &Q_LimbFlame[aero].JFogPos, &Q_LimbFlame[aero].JFog1Color, 1000, 3000, 150);
						}

					if(Q_LimbFlame[aero].LFlashCNT == 11)
						{
						Q_LimbFlame[aero].JFogPos = playact.ActorXform.Translation;
						Q_LimbFlame[aero].JFogPos.Y += 60;
						Q_LimbFlame[aero].JFog1Color.r = 0;
						Q_LimbFlame[aero].JFog1Color.g = 0;
						Q_LimbFlame[aero].JFog1Color.b = 0;
						Q_LimbFlame[aero].JFog1Color.a = 0;

						geFog_SetAttributes(Fog1, &Q_LimbFlame[aero].JFogPos, &Q_LimbFlame[aero].JFog1Color, 1000, 3000, 150);
						geWorld_RemoveFog(World, Fog1);
						}


					Q_LimbFlame[aero].LFlashCNT++;
					//}


				if(Q_LimbFlame[aero].LightINIT == 0)
					{
					Q_LimbFlame[aero].LightINIT = 1;
					Q_LimbFlame[aero].Light = geWorld_AddLight(World);

					Q_LimbFlame[aero].LightColor.r = 40;
					Q_LimbFlame[aero].LightColor.g = 10;
					Q_LimbFlame[aero].LightColor.b = 55;
					Q_LimbFlame[aero].LightColor.a = 150;
					geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,40,40,110,150,100,190,GE_FALSE,8,NULL,GE_TRUE);
					

					//##### Shadows
					helly = 0;
					while(helly <= 2)
						{
						helly++;
						geActor_SetLightingOptions(player.Shadows[helly].Actor,GE_TRUE,&goup,0,0,0,0,0,0,GE_FALSE,0,NULL,GE_TRUE);
						geActor_SetAlpha(player.Shadows[helly].Actor, 90/(helly+1));
						}
					}


				/*if(tempint1 == 0 || tempint1 == 2 || tempint1 == 5 || tempint1 == 10 || tempint1 == 12)
					{
					geActor_GetBoneTransform(playact.Actor, "BIP01 L HAND", &player.RFistPos);
					Q_LimbFlame[aero].Pos = player.RFistPos.Translation;
					Q_LimbFlame[aero].STRPos = player.RFistPos.Translation;
					geActor_GetBoneTransform(playact.Actor, "BIP01 L FOREARM", &player.RFistPos);
					Q_LimbFlame[aero].Scale = 0*(player.attposecnt*2);	//19
					}

				if(tempint1 == 1 || tempint1 == 3 || tempint1 == 7 || tempint1 == 9 || tempint1 == 11)
					{
					geActor_GetBoneTransform(playact.Actor, "BIP01 R HAND", &player.RFistPos);
					Q_LimbFlame[aero].Pos = player.RFistPos.Translation;
					Q_LimbFlame[aero].STRPos = player.RFistPos.Translation;
					geActor_GetBoneTransform(playact.Actor, "BIP01 R FOREARM", &player.RFistPos);
					Q_LimbFlame[aero].Scale = 0*(player.attposecnt);
					}

				if(tempint1 == 4 || tempint1 == 6 || tempint1 == 8)
					{
					geActor_GetBoneTransform(playact.Actor, "BIP01 L FOOT", &player.RFistPos);
					Q_LimbFlame[aero].Pos = player.RFistPos.Translation;
					Q_LimbFlame[aero].STRPos = player.RFistPos.Translation;
					geActor_GetBoneTransform(playact.Actor, "BIP01 L CALF", &player.RFistPos);
					Q_LimbFlame[aero].Scale = 0*(player.attposecnt);
					}

				if(tempint1 == 13 || 1)
					{
					geActor_GetBoneTransform(playact.Actor, "BIP01 R FOOT", &player.RFistPos);
					Q_LimbFlame[aero].Pos = player.RFistPos.Translation;
					Q_LimbFlame[aero].STRPos = player.RFistPos.Translation;
					geActor_GetBoneTransform(playact.Actor, "BIP01 R CALF", &player.RFistPos);
					Q_LimbFlame[aero].Scale = 35;
					}*/


				geWorld_SetLightAttributes(World, Q_LimbFlame[aero].Light, &Q_LimbFlame[aero].Pos, &Q_LimbFlame[aero].LightColor, 700, GE_TRUE);

				Q_LimbFlame[aero].AlignMatrix = player.RFistPos;

				geXForm3d_GetUp(&Q_LimbFlame[aero].AlignMatrix, &Q_LimbFlame[aero].VecUp);
				//geVec3d_Inverse(&Q_LimbFlame[aero].VecUp);
				geXForm3d_GetIn(&Q_LimbFlame[aero].AlignMatrix, &Q_LimbFlame[aero].VecLeft);
				geVec3d_Inverse(&Q_LimbFlame[aero].VecLeft);
				geXForm3d_GetLeft(&Q_LimbFlame[aero].AlignMatrix, &Q_LimbFlame[aero].VecIn);
				//geVec3d_Inverse(&Q_LimbFlame[aero].VecIn);

				//### Calc Traj
				geVec3d_Subtract(&player.AttPos.Translation, &player.OAttPos.Translation, &Q_LimbFlame[aero].Traj);
				geVec3d_Normalize(&Q_LimbFlame[aero].Traj);
				geVec3d_Inverse(&Q_LimbFlame[aero].Traj);


				/*jet = 0;
				while(jet < 5)
					{
					Q_Cloud[NomCloud].CloudType = 4;

					Q_Cloud[NomCloud].CloudPos = player.AttPos.Translation;

					Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*75)+80;
					Q_Cloud[NomCloud].CloudScale = (((float)rand() / 32767)*0.07)+0.01;	//0.065	//45

					Q_Cloud[NomCloud].CloudTraVec = Q_LimbFlame[aero].Traj;

					Q_Cloud[NomCloud].CloudSpeed = ((((float)rand() / 32767))+0.2)*2;

					Q_Cloud[NomCloud].CloudLive = 1;

					NomCloud++;
					if(NomCloud > 4999) NomCloud = 0;
					jet++;
					}*/


				Q_LimbFlame[aero].Type = GE_TEXTURED_POLY;
				Q_LimbFlame[aero].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
				Q_LimbFlame[aero].ScaleBIT = 1.0f;
				//END INIT


				Q_LimbFlame[aero].MaterialCNT++;
				if(Q_LimbFlame[aero].MaterialCNT < 82) Q_LimbFlame[aero].MaterialCNT = 82;
				if(Q_LimbFlame[aero].MaterialCNT > 96) Q_LimbFlame[aero].MaterialCNT = 82;

				Q_LimbFlame[aero].MaterialCNT2++;
				if(Q_LimbFlame[aero].MaterialCNT2 < 44) Q_LimbFlame[aero].MaterialCNT2 = 44;
				if(Q_LimbFlame[aero].MaterialCNT2 > 63) Q_LimbFlame[aero].MaterialCNT2 = 44;


				//EDIT ALTER LIMB COLOR *******************************


				//### TOP CUFF VERTICES

				//MOVE CUFF FORWARDS
				geVec3d_MA(&Q_LimbFlame[aero].STRPos, Q_LimbFlame[aero].Scale/3, &Q_LimbFlame[aero].VecIn, &Q_LimbFlame[aero].Pos);
				
						//TOP VERT1
				geVec3d_MA(&Q_LimbFlame[aero].Pos, -Q_LimbFlame[aero].Scale/6, &Q_LimbFlame[aero].VecUp, &Q_LimbFlame[aero].VertT1);

						//TOP VERT3
				geVec3d_MA(&Q_LimbFlame[aero].Pos, Q_LimbFlame[aero].Scale/6, &Q_LimbFlame[aero].VecUp, &Q_LimbFlame[aero].VertT3);

						//TOP VERT2
				geVec3d_MA(&Q_LimbFlame[aero].Pos, -Q_LimbFlame[aero].Scale/6, &Q_LimbFlame[aero].VecLeft, &Q_LimbFlame[aero].VertT2);

						//TOP VERT4
				geVec3d_MA(&Q_LimbFlame[aero].Pos, Q_LimbFlame[aero].Scale/6, &Q_LimbFlame[aero].VecLeft, &Q_LimbFlame[aero].VertT4);


				//### BOTTOM ELBOW VERTICES
				geVec3d_MA(&Q_LimbFlame[aero].STRPos, Q_LimbFlame[aero].Scale, &Q_LimbFlame[aero].VecIn, &Q_LimbFlame[aero].Pos);


						//TOP VERT1
				geVec3d_MA(&Q_LimbFlame[aero].Pos, -Q_LimbFlame[aero].Scale/8, &Q_LimbFlame[aero].VecUp, &Q_LimbFlame[aero].VertB1);

						//TOP VERT3
				geVec3d_MA(&Q_LimbFlame[aero].Pos, Q_LimbFlame[aero].Scale/8, &Q_LimbFlame[aero].VecUp, &Q_LimbFlame[aero].VertB3);

						//TOP VERT2
				geVec3d_MA(&Q_LimbFlame[aero].Pos, -Q_LimbFlame[aero].Scale/8, &Q_LimbFlame[aero].VecLeft, &Q_LimbFlame[aero].VertB2);

						//TOP VERT4
				geVec3d_MA(&Q_LimbFlame[aero].Pos, Q_LimbFlame[aero].Scale/8, &Q_LimbFlame[aero].VecLeft, &Q_LimbFlame[aero].VertB4);


				//### UPPER TOP VERTICES
				geVec3d_MA(&Q_LimbFlame[aero].STRPos, -Q_LimbFlame[aero].Scale/3, &Q_LimbFlame[aero].VecIn, &Q_LimbFlame[aero].Pos);


						//TOP VERT1
				geVec3d_MA(&Q_LimbFlame[aero].Pos, -Q_LimbFlame[aero].Scale/12, &Q_LimbFlame[aero].VecUp, &Q_LimbFlame[aero].VertU1);

						//TOP VERT3
				geVec3d_MA(&Q_LimbFlame[aero].Pos, Q_LimbFlame[aero].Scale/12, &Q_LimbFlame[aero].VecUp, &Q_LimbFlame[aero].VertU3);

						//TOP VERT2
				geVec3d_MA(&Q_LimbFlame[aero].Pos, -Q_LimbFlame[aero].Scale/12, &Q_LimbFlame[aero].VecLeft, &Q_LimbFlame[aero].VertU2);

						//TOP VERT4
				geVec3d_MA(&Q_LimbFlame[aero].Pos, Q_LimbFlame[aero].Scale/12, &Q_LimbFlame[aero].VecLeft, &Q_LimbFlame[aero].VertU4);


					a=0;
					while( a <= 8 )
						{
						b=0;
						while( b <= 3 )
							{
							Q_LimbFlame[aero].Lvert[a][b].a = 95;//((rand() % 200) + 15);	//200
							Q_LimbFlame[aero].Lvert[a][b].b = 255;//sunrise;	//100
							Q_LimbFlame[aero].Lvert[a][b].g = 255;//Q_LimbFlame[aero].Lvert[a][b].a;
							Q_LimbFlame[aero].Lvert[a][b].r = 255;//((rand() % 200) + 5);	//100 //180
							b++;
							}
						a++;
						}


						//##### - ARM TRI'S

						Q_LimbFlame[aero].Lvert[0][0].u = 0;
						Q_LimbFlame[aero].Lvert[0][0].v = 0.5;
						Q_LimbFlame[aero].Lvert[0][0].X = Q_LimbFlame[aero].VertT1.X;
						Q_LimbFlame[aero].Lvert[0][0].Y = Q_LimbFlame[aero].VertT1.Y;
						Q_LimbFlame[aero].Lvert[0][0].Z = Q_LimbFlame[aero].VertT1.Z;

							
						Q_LimbFlame[aero].Lvert[0][1].u = 0.5;
						Q_LimbFlame[aero].Lvert[0][1].v = 0.5;
						Q_LimbFlame[aero].Lvert[0][1].X = Q_LimbFlame[aero].VertT2.X;
						Q_LimbFlame[aero].Lvert[0][1].Y = Q_LimbFlame[aero].VertT2.Y;
						Q_LimbFlame[aero].Lvert[0][1].Z = Q_LimbFlame[aero].VertT2.Z;

							
						Q_LimbFlame[aero].Lvert[0][2].u = 0.5;
						Q_LimbFlame[aero].Lvert[0][2].v = 0;
						Q_LimbFlame[aero].Lvert[0][2].X = Q_LimbFlame[aero].VertB2.X;
						Q_LimbFlame[aero].Lvert[0][2].Y = Q_LimbFlame[aero].VertB2.Y;
						Q_LimbFlame[aero].Lvert[0][2].Z = Q_LimbFlame[aero].VertB2.Z;


						Q_LimbFlame[aero].Lvert[0][3].u = 0;
						Q_LimbFlame[aero].Lvert[0][3].v = 0;
						Q_LimbFlame[aero].Lvert[0][3].X = Q_LimbFlame[aero].VertB1.X;
						Q_LimbFlame[aero].Lvert[0][3].Y = Q_LimbFlame[aero].VertB1.Y;
						Q_LimbFlame[aero].Lvert[0][3].Z = Q_LimbFlame[aero].VertB1.Z;



						Q_LimbFlame[aero].Lvert[1][0].u = 0;
						Q_LimbFlame[aero].Lvert[1][0].v = 0.5;
						Q_LimbFlame[aero].Lvert[1][0].X = Q_LimbFlame[aero].VertT2.X;
						Q_LimbFlame[aero].Lvert[1][0].Y = Q_LimbFlame[aero].VertT2.Y;
						Q_LimbFlame[aero].Lvert[1][0].Z = Q_LimbFlame[aero].VertT2.Z;

							
						Q_LimbFlame[aero].Lvert[1][1].u = 0.5;
						Q_LimbFlame[aero].Lvert[1][1].v = 0.5;
						Q_LimbFlame[aero].Lvert[1][1].X = Q_LimbFlame[aero].VertT3.X;
						Q_LimbFlame[aero].Lvert[1][1].Y = Q_LimbFlame[aero].VertT3.Y;
						Q_LimbFlame[aero].Lvert[1][1].Z = Q_LimbFlame[aero].VertT3.Z;

							
						Q_LimbFlame[aero].Lvert[1][2].u = 0.5;
						Q_LimbFlame[aero].Lvert[1][2].v = 0;
						Q_LimbFlame[aero].Lvert[1][2].X = Q_LimbFlame[aero].VertB3.X;
						Q_LimbFlame[aero].Lvert[1][2].Y = Q_LimbFlame[aero].VertB3.Y;
						Q_LimbFlame[aero].Lvert[1][2].Z = Q_LimbFlame[aero].VertB3.Z;


						Q_LimbFlame[aero].Lvert[1][3].u = 0;
						Q_LimbFlame[aero].Lvert[1][3].v = 0;
						Q_LimbFlame[aero].Lvert[1][3].X = Q_LimbFlame[aero].VertB2.X;
						Q_LimbFlame[aero].Lvert[1][3].Y = Q_LimbFlame[aero].VertB2.Y;
						Q_LimbFlame[aero].Lvert[1][3].Z = Q_LimbFlame[aero].VertB2.Z;



						Q_LimbFlame[aero].Lvert[2][0].u = 0;
						Q_LimbFlame[aero].Lvert[2][0].v = 0.5;
						Q_LimbFlame[aero].Lvert[2][0].X = Q_LimbFlame[aero].VertT3.X;
						Q_LimbFlame[aero].Lvert[2][0].Y = Q_LimbFlame[aero].VertT3.Y;
						Q_LimbFlame[aero].Lvert[2][0].Z = Q_LimbFlame[aero].VertT3.Z;

							
						Q_LimbFlame[aero].Lvert[2][1].u = 0.5;
						Q_LimbFlame[aero].Lvert[2][1].v = 0.5;
						Q_LimbFlame[aero].Lvert[2][1].X = Q_LimbFlame[aero].VertT4.X;
						Q_LimbFlame[aero].Lvert[2][1].Y = Q_LimbFlame[aero].VertT4.Y;
						Q_LimbFlame[aero].Lvert[2][1].Z = Q_LimbFlame[aero].VertT4.Z;

							
						Q_LimbFlame[aero].Lvert[2][2].u = 0.5;
						Q_LimbFlame[aero].Lvert[2][2].v = 0;
						Q_LimbFlame[aero].Lvert[2][2].X = Q_LimbFlame[aero].VertB4.X;
						Q_LimbFlame[aero].Lvert[2][2].Y = Q_LimbFlame[aero].VertB4.Y;
						Q_LimbFlame[aero].Lvert[2][2].Z = Q_LimbFlame[aero].VertB4.Z;


						Q_LimbFlame[aero].Lvert[2][3].u = 0;
						Q_LimbFlame[aero].Lvert[2][3].v = 0;
						Q_LimbFlame[aero].Lvert[2][3].X = Q_LimbFlame[aero].VertB3.X;
						Q_LimbFlame[aero].Lvert[2][3].Y = Q_LimbFlame[aero].VertB3.Y;
						Q_LimbFlame[aero].Lvert[2][3].Z = Q_LimbFlame[aero].VertB3.Z;



						Q_LimbFlame[aero].Lvert[3][0].u = 0;
						Q_LimbFlame[aero].Lvert[3][0].v = 0.5;
						Q_LimbFlame[aero].Lvert[3][0].X = Q_LimbFlame[aero].VertT4.X;
						Q_LimbFlame[aero].Lvert[3][0].Y = Q_LimbFlame[aero].VertT4.Y;
						Q_LimbFlame[aero].Lvert[3][0].Z = Q_LimbFlame[aero].VertT4.Z;

							
						Q_LimbFlame[aero].Lvert[3][1].u = 0.5;
						Q_LimbFlame[aero].Lvert[3][1].v = 0.5;
						Q_LimbFlame[aero].Lvert[3][1].X = Q_LimbFlame[aero].VertT1.X;
						Q_LimbFlame[aero].Lvert[3][1].Y = Q_LimbFlame[aero].VertT1.Y;
						Q_LimbFlame[aero].Lvert[3][1].Z = Q_LimbFlame[aero].VertT1.Z;

							
						Q_LimbFlame[aero].Lvert[3][2].u = 0.5;
						Q_LimbFlame[aero].Lvert[3][2].v = 0;
						Q_LimbFlame[aero].Lvert[3][2].X = Q_LimbFlame[aero].VertB1.X;
						Q_LimbFlame[aero].Lvert[3][2].Y = Q_LimbFlame[aero].VertB1.Y;
						Q_LimbFlame[aero].Lvert[3][2].Z = Q_LimbFlame[aero].VertB1.Z;


						Q_LimbFlame[aero].Lvert[3][3].u = 0;
						Q_LimbFlame[aero].Lvert[3][3].v = 0;
						Q_LimbFlame[aero].Lvert[3][3].X = Q_LimbFlame[aero].VertB4.X;
						Q_LimbFlame[aero].Lvert[3][3].Y = Q_LimbFlame[aero].VertB4.Y;
						Q_LimbFlame[aero].Lvert[3][3].Z = Q_LimbFlame[aero].VertB4.Z;


						//##### - CUFF TRI'S


						Q_LimbFlame[aero].Lvert[4][0].u = 0;
						Q_LimbFlame[aero].Lvert[4][0].v = 0;
						Q_LimbFlame[aero].Lvert[4][0].X = Q_LimbFlame[aero].VertU1.X;
						Q_LimbFlame[aero].Lvert[4][0].Y = Q_LimbFlame[aero].VertU1.Y;
						Q_LimbFlame[aero].Lvert[4][0].Z = Q_LimbFlame[aero].VertU1.Z;

							
						Q_LimbFlame[aero].Lvert[4][1].u = 0.5;
						Q_LimbFlame[aero].Lvert[4][1].v = 0;
						Q_LimbFlame[aero].Lvert[4][1].X = Q_LimbFlame[aero].VertU2.X;
						Q_LimbFlame[aero].Lvert[4][1].Y = Q_LimbFlame[aero].VertU2.Y;
						Q_LimbFlame[aero].Lvert[4][1].Z = Q_LimbFlame[aero].VertU2.Z;

							
						Q_LimbFlame[aero].Lvert[4][2].u = 0.5;
						Q_LimbFlame[aero].Lvert[4][2].v = 0.5;
						Q_LimbFlame[aero].Lvert[4][2].X = Q_LimbFlame[aero].VertT2.X;
						Q_LimbFlame[aero].Lvert[4][2].Y = Q_LimbFlame[aero].VertT2.Y;
						Q_LimbFlame[aero].Lvert[4][2].Z = Q_LimbFlame[aero].VertT2.Z;


						Q_LimbFlame[aero].Lvert[4][3].u = 0;
						Q_LimbFlame[aero].Lvert[4][3].v = 0.5;
						Q_LimbFlame[aero].Lvert[4][3].X = Q_LimbFlame[aero].VertT1.X;
						Q_LimbFlame[aero].Lvert[4][3].Y = Q_LimbFlame[aero].VertT1.Y;
						Q_LimbFlame[aero].Lvert[4][3].Z = Q_LimbFlame[aero].VertT1.Z;



						Q_LimbFlame[aero].Lvert[5][0].u = 0;
						Q_LimbFlame[aero].Lvert[5][0].v = 0;
						Q_LimbFlame[aero].Lvert[5][0].X = Q_LimbFlame[aero].VertU2.X;
						Q_LimbFlame[aero].Lvert[5][0].Y = Q_LimbFlame[aero].VertU2.Y;
						Q_LimbFlame[aero].Lvert[5][0].Z = Q_LimbFlame[aero].VertU2.Z;

							
						Q_LimbFlame[aero].Lvert[5][1].u = 0.5;
						Q_LimbFlame[aero].Lvert[5][1].v = 0;
						Q_LimbFlame[aero].Lvert[5][1].X = Q_LimbFlame[aero].VertU3.X;
						Q_LimbFlame[aero].Lvert[5][1].Y = Q_LimbFlame[aero].VertU3.Y;
						Q_LimbFlame[aero].Lvert[5][1].Z = Q_LimbFlame[aero].VertU3.Z;

							
						Q_LimbFlame[aero].Lvert[5][2].u = 0.5;
						Q_LimbFlame[aero].Lvert[5][2].v = 0.5;
						Q_LimbFlame[aero].Lvert[5][2].X = Q_LimbFlame[aero].VertT3.X;
						Q_LimbFlame[aero].Lvert[5][2].Y = Q_LimbFlame[aero].VertT3.Y;
						Q_LimbFlame[aero].Lvert[5][2].Z = Q_LimbFlame[aero].VertT3.Z;


						Q_LimbFlame[aero].Lvert[5][3].u = 0;
						Q_LimbFlame[aero].Lvert[5][3].v = 0.5;
						Q_LimbFlame[aero].Lvert[5][3].X = Q_LimbFlame[aero].VertT2.X;
						Q_LimbFlame[aero].Lvert[5][3].Y = Q_LimbFlame[aero].VertT2.Y;
						Q_LimbFlame[aero].Lvert[5][3].Z = Q_LimbFlame[aero].VertT2.Z;



						Q_LimbFlame[aero].Lvert[6][0].u = 0;
						Q_LimbFlame[aero].Lvert[6][0].v = 0;
						Q_LimbFlame[aero].Lvert[6][0].X = Q_LimbFlame[aero].VertU3.X;
						Q_LimbFlame[aero].Lvert[6][0].Y = Q_LimbFlame[aero].VertU3.Y;
						Q_LimbFlame[aero].Lvert[6][0].Z = Q_LimbFlame[aero].VertU3.Z;

							
						Q_LimbFlame[aero].Lvert[6][1].u = 0.5;
						Q_LimbFlame[aero].Lvert[6][1].v = 0;
						Q_LimbFlame[aero].Lvert[6][1].X = Q_LimbFlame[aero].VertU4.X;
						Q_LimbFlame[aero].Lvert[6][1].Y = Q_LimbFlame[aero].VertU4.Y;
						Q_LimbFlame[aero].Lvert[6][1].Z = Q_LimbFlame[aero].VertU4.Z;

							
						Q_LimbFlame[aero].Lvert[6][2].u = 0.5;
						Q_LimbFlame[aero].Lvert[6][2].v = 0.5;
						Q_LimbFlame[aero].Lvert[6][2].X = Q_LimbFlame[aero].VertT4.X;
						Q_LimbFlame[aero].Lvert[6][2].Y = Q_LimbFlame[aero].VertT4.Y;
						Q_LimbFlame[aero].Lvert[6][2].Z = Q_LimbFlame[aero].VertT4.Z;


						Q_LimbFlame[aero].Lvert[6][3].u = 0;
						Q_LimbFlame[aero].Lvert[6][3].v = 0.5;
						Q_LimbFlame[aero].Lvert[6][3].X = Q_LimbFlame[aero].VertT3.X;
						Q_LimbFlame[aero].Lvert[6][3].Y = Q_LimbFlame[aero].VertT3.Y;
						Q_LimbFlame[aero].Lvert[6][3].Z = Q_LimbFlame[aero].VertT3.Z;



						Q_LimbFlame[aero].Lvert[7][0].u = 0;
						Q_LimbFlame[aero].Lvert[7][0].v = 0;
						Q_LimbFlame[aero].Lvert[7][0].X = Q_LimbFlame[aero].VertU4.X;
						Q_LimbFlame[aero].Lvert[7][0].Y = Q_LimbFlame[aero].VertU4.Y;
						Q_LimbFlame[aero].Lvert[7][0].Z = Q_LimbFlame[aero].VertU4.Z;

							
						Q_LimbFlame[aero].Lvert[7][1].u = 0.5;
						Q_LimbFlame[aero].Lvert[7][1].v = 0;
						Q_LimbFlame[aero].Lvert[7][1].X = Q_LimbFlame[aero].VertU1.X;
						Q_LimbFlame[aero].Lvert[7][1].Y = Q_LimbFlame[aero].VertU1.Y;
						Q_LimbFlame[aero].Lvert[7][1].Z = Q_LimbFlame[aero].VertU1.Z;

							
						Q_LimbFlame[aero].Lvert[7][2].u = 0.5;
						Q_LimbFlame[aero].Lvert[7][2].v = 0.5;
						Q_LimbFlame[aero].Lvert[7][2].X = Q_LimbFlame[aero].VertT1.X;
						Q_LimbFlame[aero].Lvert[7][2].Y = Q_LimbFlame[aero].VertT1.Y;
						Q_LimbFlame[aero].Lvert[7][2].Z = Q_LimbFlame[aero].VertT1.Z;


						Q_LimbFlame[aero].Lvert[7][3].u = 0;
						Q_LimbFlame[aero].Lvert[7][3].v = 0.5;
						Q_LimbFlame[aero].Lvert[7][3].X = Q_LimbFlame[aero].VertT4.X;
						Q_LimbFlame[aero].Lvert[7][3].Y = Q_LimbFlame[aero].VertT4.Y;
						Q_LimbFlame[aero].Lvert[7][3].Z = Q_LimbFlame[aero].VertT4.Z;


						//##### - END TRI

						Q_LimbFlame[aero].Lvert[8][0].u = 0;
						Q_LimbFlame[aero].Lvert[8][0].v = 0.5;
						Q_LimbFlame[aero].Lvert[8][0].X = Q_LimbFlame[aero].VertU1.X;
						Q_LimbFlame[aero].Lvert[8][0].Y = Q_LimbFlame[aero].VertU1.Y;
						Q_LimbFlame[aero].Lvert[8][0].Z = Q_LimbFlame[aero].VertU1.Z;

							
						Q_LimbFlame[aero].Lvert[8][1].u = 0.5;
						Q_LimbFlame[aero].Lvert[8][1].v = 0.5;
						Q_LimbFlame[aero].Lvert[8][1].X = Q_LimbFlame[aero].VertU2.X;
						Q_LimbFlame[aero].Lvert[8][1].Y = Q_LimbFlame[aero].VertU2.Y;
						Q_LimbFlame[aero].Lvert[8][1].Z = Q_LimbFlame[aero].VertU2.Z;

							
						Q_LimbFlame[aero].Lvert[8][2].u = 0.5;
						Q_LimbFlame[aero].Lvert[8][2].v = 0;
						Q_LimbFlame[aero].Lvert[8][2].X = Q_LimbFlame[aero].VertU3.X;
						Q_LimbFlame[aero].Lvert[8][2].Y = Q_LimbFlame[aero].VertU3.Y;
						Q_LimbFlame[aero].Lvert[8][2].Z = Q_LimbFlame[aero].VertU3.Z;


						Q_LimbFlame[aero].Lvert[8][3].u = 0;
						Q_LimbFlame[aero].Lvert[8][3].v = 0;
						Q_LimbFlame[aero].Lvert[8][3].X = Q_LimbFlame[aero].VertU4.X;
						Q_LimbFlame[aero].Lvert[8][3].Y = Q_LimbFlame[aero].VertU4.Y;
						Q_LimbFlame[aero].Lvert[8][3].Z = Q_LimbFlame[aero].VertU4.Z;


						i = 0;
						while(i <= 7)
							{
							geWorld_AddPolyOnce(World, &Q_LimbFlame[aero].Lvert[i][0], 4, fire[Q_LimbFlame[aero].MaterialCNT], Q_LimbFlame[aero].Type, Q_LimbFlame[aero].RenderFlags, 1.0f);
							i++;
							}

						geWorld_AddPolyOnce(World, &Q_LimbFlame[aero].Lvert[8][0], 4, radfire[Q_LimbFlame[aero].MaterialCNT2], Q_LimbFlame[aero].Type, Q_LimbFlame[aero].RenderFlags, 1.0f);
						}
					else
						{
						if(Q_LimbFlame[aero].LightINIT == 1)
							{
							Q_LimbFlame[aero].LightINIT = 0;
							geWorld_RemoveLight(World, Q_LimbFlame[aero].Light);
							geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,190,145,100,GE_FALSE,8,NULL,GE_TRUE);

							//Shadows
							helly = 0;
							while(helly <= 2)
								{
								helly++;
								geActor_SetLightingOptions(player.Shadows[helly].Actor,GE_TRUE,&goup,255/((helly+1)/2),255/((helly+1)/2),255/((helly+1)/2),255/((helly+1)/2),255/((helly+1)/2),255/((helly+1)/2),GE_FALSE,0,NULL,GE_TRUE);
								geActor_SetAlpha(player.Shadows[helly].Actor, 150/(helly+1));
								}
							}

						if(Q_LimbFlame[aero].JFogExist == 1)
							{
							geWorld_RemoveFog(World, Fog2);
							Q_LimbFlame[aero].JFogExist = 0;
							Q_LimbFlame[aero].LFlashCNT = 0;
							}
						}


	//#####- MUZZLE FLASH -#####

	if(Q_MFlash[250].SkipFlag == 1)
		{
		Q_MFlash[250].SkipFlag = 0;
		geWorld_RemoveLight(World, Q_MFlash[250].Light);
		}

	if(Q_MFlash[250].JDamageLVL > 0)
		{
		Q_MFlash[250].JDamageLVL--;

		geActor_GetBoneTransform(player.Weapon.Actor, "BONE03", &Q_MFlash[250].AlignMatrix);

		geSound3D_GetConfig(World, &player.ViewXForm, &Q_MFlash[250].AlignMatrix.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
		//'FIRE' SOUND
		geSound_PlaySoundDef(SoundSys, S_RifleFire[11], Volume, Pan, S_TimeScale, GE_FALSE);
		}


	if(player.MFlash > 0 && Q_MFlash[250].SkipFlag == 0)
		{
		//INIT
		Q_MFlash[250].SkipFlag = 1;

		if(player.MFlash == 2) Q_MFlash[250].JDamageLVL = 1;
		if(player.MFlash == 3) Q_MFlash[250].JDamageLVL = 2;
		if(player.MFlash == 4) Q_MFlash[250].JDamageLVL = 3;


		//### Initialise one CARTRIDGE
							//V-- Maximum cartridge restriction
		if(NomCart > 200) NomCart = 0;
		geActor_GetBoneTransform(player.Weapon.Actor, "BONE02", &player.TempXForm1);
		Q_Cartridge[NomCart].WorldPos = player.TempXForm1.Translation;

		//Trajectory
		geActor_GetBoneTransform(player.Weapon.Actor, "BONE03", &player.TempXForm1);
		geXForm3d_GetLeft(&player.TempXForm1, &Q_Cartridge[NomCart].TrajVec);
		geVec3d_MA(&Q_Cartridge[NomCart].WorldPos, -5.6, &Q_Cartridge[NomCart].TrajVec, &Q_Cartridge[NomCart].WorldPos);
		
		geXForm3d_GetIn(&player.TempXForm1, &Q_Cartridge[NomCart].TrajVec);
		geVec3d_Inverse(&Q_Cartridge[NomCart].TrajVec);

		Q_Cartridge[NomCart].Scale = 0.5 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].ActorSCALE+(0.16*(((((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height+player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Weight)/2)/100)-0.5)*2)));
		
		Q_Cartridge[NomCart].TrajVec.X += (((float)rand() / 32767)/3);
		Q_Cartridge[NomCart].TrajVec.Z += (((float)rand() / 32767)/3);
		Q_Cartridge[NomCart].TrajVec.Y += 2.2;
		
		Q_Cartridge[NomCart].FloorBounce = 0;
		Q_Cartridge[NomCart].Gravity = 0.8;		//0.4

		geXForm3d_SetYRotation(&rotmat, PI/2);
		geXForm3d_Multiply(&player.TempXForm1, &rotmat, &player.TempXForm1);

		geXForm3d_SetZRotation(&rotmat, ((float)rand() / 32767)*6);
		geXForm3d_Multiply(&player.TempXForm1, &rotmat, &player.TempXForm1);

		geXForm3d_SetYRotation(&rotmat, ((float)rand() / 32767)/13);
		geXForm3d_Multiply(&player.TempXForm1, &rotmat, &player.TempXForm1);

		geXForm3d_SetZRotation(&rotmat, ((float)rand() / 32767)*2);
		geXForm3d_Multiply(&player.TempXForm1, &rotmat, &player.TempXForm1);

		Q_Cartridge[NomCart].AlignMatrix = player.TempXForm1;

		Q_Cartridge[NomCart].XSpin = ((float)rand() / 32767)/6;
		Q_Cartridge[NomCart].YSpin = ((float)rand() / 32767)/6;
		Q_Cartridge[NomCart].ZSpin = ((float)rand() / 32767)/6;

		Q_Cartridge[NomCart].Speed = (((float)rand() / 32767)+1)*3;	//*2

		Q_Cartridge[NomCart].Live = 1;

		NomCart++;


		//###### Initialise BULLET/S

		if(NetworkOption != 1)
			{
			SCRAM = 0;
			while((SCRAM < player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].BulletCNT) && (NomBullet < 398))	//V-- Maximum bullet restriction
				{
				//Trajectory
				geActor_GetBoneTransform(player.Weapon.Actor, "BONE03", &player.TempXForm2);
				Q_Bullet[NomBullet].WorldPos = player.TempXForm2.Translation;
				Q_Bullet[NomBullet].ORIGPos = player.TempXForm2.Translation;
				geXForm3d_GetLeft(&player.TempXForm2, &Q_Bullet[NomBullet].TrajVec);
				geVec3d_Inverse(&Q_Bullet[NomBullet].TrajVec);
				geVec3d_MA(&Q_Bullet[NomBullet].WorldPos, 4.5, &Q_Bullet[NomBullet].TrajVec, &Q_Bullet[NomBullet].WorldPos);

				if(player.Soldier.JAccuracyLVL == 0)
					{
					Q_Bullet[NomBullet].TrajVec.X += ((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3);
					Q_Bullet[NomBullet].TrajVec.Y += ((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3);
					Q_Bullet[NomBullet].TrajVec.Z += ((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3);
					}

				if(player.Soldier.JAccuracyLVL == 1)
					{
					Q_Bullet[NomBullet].TrajVec.X += (((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3) / 3);
					Q_Bullet[NomBullet].TrajVec.Y += (((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3) / 3);
					Q_Bullet[NomBullet].TrajVec.Z += (((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3) / 3);
					}

				if(player.Soldier.JAccuracyLVL == 2)
					{
					Q_Bullet[NomBullet].TrajVec.X += (((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3) / 6);
					Q_Bullet[NomBullet].TrajVec.Y += (((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3) / 6);
					Q_Bullet[NomBullet].TrajVec.Z += (((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3) / 6);
					}

				if(player.Soldier.JAccuracyLVL == 3)
					{
					Q_Bullet[NomBullet].TrajVec.X += (((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3) / 30);
					Q_Bullet[NomBullet].TrajVec.Y += (((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3) / 30);
					Q_Bullet[NomBullet].TrajVec.Z += (((((float)rand() / 32767)-0.5)/((player.CDATA->CharDATA[player.CDATA->CurrCHAR].WeaponSKILL.Accuracy/5000)*500))*((player.WeaponRecoil*200)+1)*(((5000 - player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Accuracy) / 5000) * 3) / 30);
					}

				player.QA_EFF_TRAVEC = Q_Bullet[NomBullet].TrajVec;

				Q_Bullet[NomBullet].AlignMatrix = player.TempXForm1;
				geXForm3d_SetYRotation(&rotmat, PI);
				geXForm3d_Multiply(&Q_Bullet[NomBullet].AlignMatrix, &rotmat, &Q_Bullet[NomBullet].AlignMatrix);

				Q_Bullet[NomBullet].ActorID = 250;

				//Spin
				Q_Bullet[NomBullet].Xrot = 0;
				Q_Bullet[NomBullet].Yrot = 0;
				Q_Bullet[NomBullet].Zrot = 0;

				Q_Bullet[NomBullet].BulletDMG = ((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Damage / 5000) * 65 * player.JINK3_WeaponFactor;
				Q_Bullet[NomBullet].BulletPWR = ((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Power / 5000) * 65 * player.JINK3_WeaponFactor;

				Q_Bullet[NomBullet].JDamageLVL = player.Soldier.JDamageLVL;

				if(Q_Bullet[NomBullet].JDamageLVL == 1)
					{
					Q_Bullet[NomBullet].BulletDMG = Q_Bullet[NomBullet].BulletDMG * 1.15;
					Q_Bullet[NomBullet].BulletPWR = Q_Bullet[NomBullet].BulletPWR * 1.15;
					}

				if(Q_Bullet[NomBullet].JDamageLVL == 2)
					{
					Q_Bullet[NomBullet].BulletDMG = Q_Bullet[NomBullet].BulletDMG * 1.75;
					Q_Bullet[NomBullet].BulletPWR = Q_Bullet[NomBullet].BulletPWR * 1.75;
					}

				if(Q_Bullet[NomBullet].JDamageLVL == 3 || Q_Bullet[NomBullet].BulletPWR > 45.5)
					{
					Q_Bullet[NomBullet].BulletDMG = Q_Bullet[NomBullet].BulletDMG * 3;
					Q_Bullet[NomBullet].BulletPWR = Q_Bullet[NomBullet].BulletPWR * 3;

					//##### INITIALISE A VAPOR TRAIL FOR ROCKET
					Q_VaporTrail[NomVaporTrails].StartWidth = 1.75;
					Q_VaporTrail[NomVaporTrails].WidthExpand = 2;
					Q_VaporTrail[NomVaporTrails].LifeOfPoint = 4;
					Q_VaporTrail[NomVaporTrails].NomPoints = 0;
					Q_VaporTrail[NomVaporTrails].Live = 1;
					Q_Bullet[NomBullet].VaporID1 = NomVaporTrails;
					if(NomVaporTrails < 598) NomVaporTrails++;
					}

				if(player.Mech.ACTIVE == 1)
					{
					Q_Bullet[NomBullet].JDamageLVL = 4;

					Q_Bullet[NomBullet].BulletDMG = Q_Bullet[NomBullet].BulletDMG * 10;
					Q_Bullet[NomBullet].BulletPWR = Q_Bullet[NomBullet].BulletPWR * 40;

					Q_Bullet[NomBullet].Scale = 10;
					Q_Bullet[NomBullet].Speed = 65;		//80

					//##### INITIALISE A VAPOR TRAIL FOR ROCKET
					Q_VaporTrail[NomVaporTrails].StartWidth = 2;
					Q_VaporTrail[NomVaporTrails].WidthExpand = 4;
					Q_VaporTrail[NomVaporTrails].LifeOfPoint = 3;
					Q_VaporTrail[NomVaporTrails].NomPoints = 0;
					Q_VaporTrail[NomVaporTrails].Live = 1;
					Q_Bullet[NomBullet].VaporID1 = NomVaporTrails;
					if(NomVaporTrails < 598) NomVaporTrails++;

					//##### INITIALISE A VAPOR TRAIL FOR ROCKET
					Q_VaporTrail[NomVaporTrails].StartWidth = 4;
					Q_VaporTrail[NomVaporTrails].WidthExpand = 6;
					Q_VaporTrail[NomVaporTrails].LifeOfPoint = 3;
					Q_VaporTrail[NomVaporTrails].NomPoints = 0;
					Q_VaporTrail[NomVaporTrails].Live = 1;
					Q_Bullet[NomBullet].VaporID2 = NomVaporTrails;
					if(NomVaporTrails < 598) NomVaporTrails++;

					//##### INITIALISE A VAPOR TRAIL FOR ROCKET
					Q_VaporTrail[NomVaporTrails].StartWidth = 6;
					Q_VaporTrail[NomVaporTrails].WidthExpand = 8;
					Q_VaporTrail[NomVaporTrails].LifeOfPoint = 3;
					Q_VaporTrail[NomVaporTrails].NomPoints = 0;
					Q_VaporTrail[NomVaporTrails].Live = 1;
					Q_Bullet[NomBullet].VaporID3 = NomVaporTrails;
					if(NomVaporTrails < 598) NomVaporTrails++;
					}
				else
					{
					Q_Bullet[NomBullet].Scale = 0.5;
					Q_Bullet[NomBullet].Speed = 250;	//80
					}

				Q_Bullet[NomBullet].ZSpin = ((float)rand() / 32767)/3;

				Q_Bullet[NomBullet].Gravity = 0.0001;

				Q_Bullet[NomBullet].Live = 1;

				NomBullet++;
				SCRAM++;
				}
			}


		player.Soldier.JAccuracyLVL = 0;
			
		geSound3D_GetConfig(World, &player.ViewXForm, &player.TempXForm1.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
		//'FIRE' SOUND

		geSound_PlaySoundDef(SoundSys, S_RifleFire[player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].QAS_Fire], Volume, Pan, S_TimeScale, GE_FALSE);

		if(player.Soldier.JDamageLVL > 0)
			{ geSound_PlaySoundDef(SoundSys, S_RifleFire[11], Volume, Pan, S_TimeScale, GE_FALSE); }

		if(player.Soldier.JDamageLVL > 1)
			{ geSound_PlaySoundDef(SoundSys, S_RifleFire[11], Volume, Pan, S_TimeScale, GE_FALSE); }

		if(player.Soldier.JDamageLVL > 2)
			{ geSound_PlaySoundDef(SoundSys, S_RifleFire[11], Volume, Pan, S_TimeScale, GE_FALSE); }


		//######## -  QA BULLET EFFECTS  - ########

		player.QA_EFF_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].ON;

		player.QA_EFF_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].Red;
		player.QA_EFF_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].Green;
		player.QA_EFF_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].Blue;
		player.QA_EFF_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].Alpha;

		player.QA_EFF_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[1].Red;
		player.QA_EFF_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[1].Green;
		player.QA_EFF_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[1].Blue;
		player.QA_EFF_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[1].Alpha;

		player.QA_EFF_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[2].Red;
		player.QA_EFF_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[2].Green;
		player.QA_EFF_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[2].Blue;
		player.QA_EFF_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[2].Alpha;

		player.QA_EFF_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[3].Red;
		player.QA_EFF_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[3].Green;
		player.QA_EFF_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[3].Blue;
		player.QA_EFF_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[3].Alpha;

		player.QA_EFF_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[4].Red;
		player.QA_EFF_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[4].Green;
		player.QA_EFF_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[4].Blue;
		player.QA_EFF_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[4].Alpha;

		player.QA_EFF_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].TYPE;
		player.QA_EFF_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].INT;
		geActor_GetBoneTransform(player.Weapon.Actor, "BONE03", &player.QA_EFF_BONEMATRIX);

		if(player.QA_EFF_SWITCH == 1)
			{
			switch(player.QA_EFF_TYPE)
				{
				case 1:
					{
					//###### Pink Flakes
					//SPARKS
					helly = 0;
					while(helly < player.QA_EFF_INTENSITY * TimeScale)
						{
						BSparks[NomSparks].Pos = player.QA_EFF_BONEMATRIX.Translation;

						BSparks[NomSparks].TraVec = player.QA_EFF_TRAVEC;

						BSparks[NomSparks].TraVec.X += ((((float)rand() / 32767)-0.15));
						BSparks[NomSparks].TraVec.Y += ((((float)rand() / 32767)-0.15));
						BSparks[NomSparks].TraVec.Z += ((((float)rand() / 32767)-0.15));

						BSparks[NomSparks].AlpFade = 255;
						BSparks[NomSparks].Timer = 0;
						BSparks[NomSparks].TimerGoal = ((((float)rand() / 32767)*30)+10);

						geVec3d_MA(&BSparks[NomSparks].Pos, 1, &BSparks[NomSparks].TraVec, &BSparks[NomSparks].Pos);
						
						BSparks[NomSparks].Speed = 8;

						BSparks[NomSparks].Gravity = 0.12;

						BSparks[NomSparks].Bounce = 0;

						BSparks[NomSparks].SmokeTrail = 0;
						BSparks[NomSparks].Live = 1;

						NomSparks++;
						if(NomSparks > 499) NomSparks = 0;
						helly++;
						}
					}break;
				}
			}

		Q_MFlash[250].JDamageLVL = player.Soldier.JDamageLVL;
		player.Soldier.JDamageLVL = 0;


		geActor_GetBoneTransform(player.Weapon.Actor, "BONE03", &Q_MFlash[250].AlignMatrix);

		Q_MFlash[250].Pos = Q_MFlash[250].AlignMatrix.Translation;


		geXForm3d_SetYRotation(&rotmat, PI/2);
		geXForm3d_Multiply(&Q_MFlash[250].AlignMatrix, &rotmat, &Q_MFlash[250].AlignMatrix);

		geXForm3d_SetZRotation(&rotmat, ((float)rand() / 32767)*6);
		geXForm3d_Multiply(&Q_MFlash[250].AlignMatrix, &rotmat, &Q_MFlash[250].AlignMatrix);

		geXForm3d_SetYRotation(&rotmat, ((float)rand() / 32767)/13);
		geXForm3d_Multiply(&Q_MFlash[250].AlignMatrix, &rotmat, &Q_MFlash[250].AlignMatrix);


		geXForm3d_GetUp(&Q_MFlash[250].AlignMatrix, &Q_MFlash[250].VecUp);
		geXForm3d_GetLeft(&Q_MFlash[250].AlignMatrix, &Q_MFlash[250].VecLeft);
		geXForm3d_GetIn(&Q_MFlash[250].AlignMatrix, &Q_MFlash[250].VecIn);
		geVec3d_Inverse(&Q_MFlash[250].VecIn);

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].ItemREF == 3 || player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].ItemREF == 4)	geVec3d_MA(&Q_MFlash[250].Pos, 105, &Q_MFlash[250].VecIn, &Q_MFlash[250].Pos);

		geVec3d_MA(&Q_MFlash[250].Pos, 10, &Q_MFlash[250].VecIn, &Q_MFlash[250].VecSTR);
		Q_MFlash[250].Light = geWorld_AddLight(World);
		Q_MFlash[250].LightColor.r = 255.0f;
		Q_MFlash[250].LightColor.g = 255.0f;
		Q_MFlash[250].LightColor.b = 200.0f;
		Q_MFlash[250].LightColor.a = 255.0f;
		geWorld_SetLightAttributes(World, Q_MFlash[250].Light, &Q_MFlash[250].VecSTR, &Q_MFlash[250].LightColor, (rand() % 50) + 150, GE_TRUE);

		Q_MFlash[250].Type = GE_TEXTURED_POLY;
		Q_MFlash[250].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
		Q_MFlash[250].ScaleBIT = 1.0f;


		//***** MFLASH POWER SCALE ******
		Q_MFlash[250].Scale = 20 * (Q_Bullet[NomBullet-1].BulletPWR);


		geVec3d_MA(&Q_MFlash[250].Pos, 3, &Q_MFlash[250].VecIn, &Q_MFlash[250].Pos);


			//##Flash Vertical##
				//TOP VERT1
		geVec3d_MA(&Q_MFlash[250].Pos, Q_MFlash[250].Scale/8, &Q_MFlash[250].VecUp, &Q_MFlash[250].VertFU1);

		geVec3d_MA(&Q_MFlash[250].VertFU1, Q_MFlash[250].Scale, &Q_MFlash[250].VecIn, &Q_MFlash[250].VertFU1);

				//TOP VERT2
		geVec3d_MA(&Q_MFlash[250].VertFU1, -Q_MFlash[250].Scale, &Q_MFlash[250].VecIn, &Q_MFlash[250].VertFU2);


				//BOTTOM VERT3
		geVec3d_MA(&Q_MFlash[250].VertFU2, -Q_MFlash[250].Scale/4, &Q_MFlash[250].VecUp, &Q_MFlash[250].VertFU3);

				//BOTTOM VERT4
		geVec3d_MA(&Q_MFlash[250].VertFU3, Q_MFlash[250].Scale, &Q_MFlash[250].VecIn, &Q_MFlash[250].VertFU4);


			//##Flash Horizontal##
				//LEFT VERT1
		geVec3d_MA(&Q_MFlash[250].Pos, -Q_MFlash[250].Scale/8, &Q_MFlash[250].VecLeft, &Q_MFlash[250].VertFD1);

		geVec3d_MA(&Q_MFlash[250].VertFD1, Q_MFlash[250].Scale, &Q_MFlash[250].VecIn, &Q_MFlash[250].VertFD1);


				//LEFT VERT2
		geVec3d_MA(&Q_MFlash[250].VertFD1, -Q_MFlash[250].Scale, &Q_MFlash[250].VecIn, &Q_MFlash[250].VertFD2);


				//RIGHT VERT3
		geVec3d_MA(&Q_MFlash[250].VertFD2, Q_MFlash[250].Scale/4, &Q_MFlash[250].VecLeft, &Q_MFlash[250].VertFD3);

				//RIGHT VERT4
		geVec3d_MA(&Q_MFlash[250].VertFD3, Q_MFlash[250].Scale, &Q_MFlash[250].VecIn, &Q_MFlash[250].VertFD4);
	

		geXForm3d_SetZRotation(&rotmat, ((float)rand() / 32767)*2);
		geXForm3d_Multiply(&Q_MFlash[250].AlignMatrix, &rotmat, &Q_MFlash[250].AlignMatrix);

		geXForm3d_GetUp(&Q_MFlash[250].AlignMatrix, &Q_MFlash[250].VecUp);
		geXForm3d_GetLeft(&Q_MFlash[250].AlignMatrix, &Q_MFlash[250].VecLeft);


			/*##Flash Spinner##
				//TOP VERT1
		geVec3d_MA(&Q_MFlash[250].Pos, Q_MFlash[250].Scale/14, &Q_MFlash[250].VecUp, &Q_MFlash[250].VertS1);

		geVec3d_MA(&Q_MFlash[250].VertS1, Q_MFlash[250].Scale/4, &Q_MFlash[250].VecLeft, &Q_MFlash[250].VertS1);

				//TOP VERT2
		geVec3d_MA(&Q_MFlash[250].VertS1, -Q_MFlash[250].Scale/2, &Q_MFlash[250].VecLeft, &Q_MFlash[250].VertS2);


				//BOTTOM VERT3
		geVec3d_MA(&Q_MFlash[250].VertS2, -Q_MFlash[250].Scale/7, &Q_MFlash[250].VecUp, &Q_MFlash[250].VertS3);

				//BOTTOM VERT4
		geVec3d_MA(&Q_MFlash[250].VertS3, Q_MFlash[250].Scale/2, &Q_MFlash[250].VecLeft, &Q_MFlash[250].VertS4);*/


			//##Flash Spinner##			-SQUARE
				//TOP VERT1
		geVec3d_MA(&Q_MFlash[250].Pos, Q_MFlash[250].Scale/4, &Q_MFlash[250].VecUp, &Q_MFlash[250].VertS1);

		geVec3d_MA(&Q_MFlash[250].VertS1, Q_MFlash[250].Scale/4, &Q_MFlash[250].VecLeft, &Q_MFlash[250].VertS1);

				//TOP VERT2
		geVec3d_MA(&Q_MFlash[250].VertS1, -Q_MFlash[250].Scale/2, &Q_MFlash[250].VecLeft, &Q_MFlash[250].VertS2);


				//BOTTOM VERT3
		geVec3d_MA(&Q_MFlash[250].VertS2, -Q_MFlash[250].Scale/2, &Q_MFlash[250].VecUp, &Q_MFlash[250].VertS3);

				//BOTTOM VERT4
		geVec3d_MA(&Q_MFlash[250].VertS3, Q_MFlash[250].Scale/2, &Q_MFlash[250].VecLeft, &Q_MFlash[250].VertS4);


			a=0;
			while( a <= 2 )
				{
				b=0;
				while( b <= 3 )
					{
					Q_MFlash[250].Lvert[a][b].a = 255;
					Q_MFlash[250].Lvert[a][b].b = 255;
					Q_MFlash[250].Lvert[a][b].g = 255;
					Q_MFlash[250].Lvert[a][b].r = 255;
					b++;
					}
				a++;
				}


				//##Flash Vertical##

				Q_MFlash[250].Lvert[0][0].u = 0;
				Q_MFlash[250].Lvert[0][0].v = 1;
				Q_MFlash[250].Lvert[0][0].X = Q_MFlash[250].VertFU1.X;
				Q_MFlash[250].Lvert[0][0].Y = Q_MFlash[250].VertFU1.Y;
				Q_MFlash[250].Lvert[0][0].Z = Q_MFlash[250].VertFU1.Z;

					
				Q_MFlash[250].Lvert[0][1].u = 1;
				Q_MFlash[250].Lvert[0][1].v = 1;
				Q_MFlash[250].Lvert[0][1].X = Q_MFlash[250].VertFU2.X;
				Q_MFlash[250].Lvert[0][1].Y = Q_MFlash[250].VertFU2.Y;
				Q_MFlash[250].Lvert[0][1].Z = Q_MFlash[250].VertFU2.Z;

					
				Q_MFlash[250].Lvert[0][2].u = 1;
				Q_MFlash[250].Lvert[0][2].v = 0;
				Q_MFlash[250].Lvert[0][2].X = Q_MFlash[250].VertFU3.X;
				Q_MFlash[250].Lvert[0][2].Y = Q_MFlash[250].VertFU3.Y;
				Q_MFlash[250].Lvert[0][2].Z = Q_MFlash[250].VertFU3.Z;


				Q_MFlash[250].Lvert[0][3].u = 0;
				Q_MFlash[250].Lvert[0][3].v = 0;
				Q_MFlash[250].Lvert[0][3].X = Q_MFlash[250].VertFU4.X;
				Q_MFlash[250].Lvert[0][3].Y = Q_MFlash[250].VertFU4.Y;
				Q_MFlash[250].Lvert[0][3].Z = Q_MFlash[250].VertFU4.Z;



				//##Flash Horizontal##

				Q_MFlash[250].Lvert[1][0].u = 0;
				Q_MFlash[250].Lvert[1][0].v = 1;
				Q_MFlash[250].Lvert[1][0].X = Q_MFlash[250].VertFD1.X;
				Q_MFlash[250].Lvert[1][0].Y = Q_MFlash[250].VertFD1.Y;
				Q_MFlash[250].Lvert[1][0].Z = Q_MFlash[250].VertFD1.Z;

					
				Q_MFlash[250].Lvert[1][1].u = 1;
				Q_MFlash[250].Lvert[1][1].v = 1;
				Q_MFlash[250].Lvert[1][1].X = Q_MFlash[250].VertFD2.X;
				Q_MFlash[250].Lvert[1][1].Y = Q_MFlash[250].VertFD2.Y;
				Q_MFlash[250].Lvert[1][1].Z = Q_MFlash[250].VertFD2.Z;

					
				Q_MFlash[250].Lvert[1][2].u = 1;
				Q_MFlash[250].Lvert[1][2].v = 0;
				Q_MFlash[250].Lvert[1][2].X = Q_MFlash[250].VertFD3.X;
				Q_MFlash[250].Lvert[1][2].Y = Q_MFlash[250].VertFD3.Y;
				Q_MFlash[250].Lvert[1][2].Z = Q_MFlash[250].VertFD3.Z;


				Q_MFlash[250].Lvert[1][3].u = 0;
				Q_MFlash[250].Lvert[1][3].v = 0;
				Q_MFlash[250].Lvert[1][3].X = Q_MFlash[250].VertFD4.X;
				Q_MFlash[250].Lvert[1][3].Y = Q_MFlash[250].VertFD4.Y;
				Q_MFlash[250].Lvert[1][3].Z = Q_MFlash[250].VertFD4.Z;


				//##Flash Spinner##

				Q_MFlash[250].Lvert[2][0].u = 0;
				Q_MFlash[250].Lvert[2][0].v = 1;
				Q_MFlash[250].Lvert[2][0].X = Q_MFlash[250].VertS1.X;
				Q_MFlash[250].Lvert[2][0].Y = Q_MFlash[250].VertS1.Y;
				Q_MFlash[250].Lvert[2][0].Z = Q_MFlash[250].VertS1.Z;

					
				Q_MFlash[250].Lvert[2][1].u = 1;
				Q_MFlash[250].Lvert[2][1].v = 1;
				Q_MFlash[250].Lvert[2][1].X = Q_MFlash[250].VertS2.X;
				Q_MFlash[250].Lvert[2][1].Y = Q_MFlash[250].VertS2.Y;
				Q_MFlash[250].Lvert[2][1].Z = Q_MFlash[250].VertS2.Z;

					
				Q_MFlash[250].Lvert[2][2].u = 1;
				Q_MFlash[250].Lvert[2][2].v = 0;
				Q_MFlash[250].Lvert[2][2].X = Q_MFlash[250].VertS3.X;
				Q_MFlash[250].Lvert[2][2].Y = Q_MFlash[250].VertS3.Y;
				Q_MFlash[250].Lvert[2][2].Z = Q_MFlash[250].VertS3.Z;


				Q_MFlash[250].Lvert[2][3].u = 0;
				Q_MFlash[250].Lvert[2][3].v = 0;
				Q_MFlash[250].Lvert[2][3].X = Q_MFlash[250].VertS4.X;
				Q_MFlash[250].Lvert[2][3].Y = Q_MFlash[250].VertS4.Y;
				Q_MFlash[250].Lvert[2][3].Z = Q_MFlash[250].VertS4.Z;


				geWorld_AddPolyOnce(World, &Q_MFlash[250].Lvert[0][0], 4, MFlashX, Q_MFlash[250].Type, Q_MFlash[250].RenderFlags, Q_MFlash[250].ScaleBIT);
				geWorld_AddPolyOnce(World, &Q_MFlash[250].Lvert[1][0], 4, MFlashX, Q_MFlash[250].Type, Q_MFlash[250].RenderFlags, Q_MFlash[250].ScaleBIT);
				geWorld_AddPolyOnce(World, &Q_MFlash[250].Lvert[2][0], 4, MFlashS, Q_MFlash[250].Type, Q_MFlash[250].RenderFlags, Q_MFlash[250].ScaleBIT);

		player.MFlash = 0;
		}


	//########- Cartridges -########

	if(NomCart > 0)
		{
		aero = 0;
		while(aero < NomCart)
			{
			if(Q_Cartridge[aero].Live == 1) //MOVEMENT
				{
				//Apply Gravity
				Q_Cartridge[aero].TrajVec.Y -= Q_Cartridge[aero].Gravity*TimeScale;

				Q_Cartridge[aero].OldPos = Q_Cartridge[aero].WorldPos;
				
				//Move
				geVec3d_MA(&Q_Cartridge[aero].WorldPos, Q_Cartridge[aero].Speed*TimeScale, &Q_Cartridge[aero].TrajVec, &Q_Cartridge[aero].WorldPos);

				geXForm3d_SetXRotation(&rotmat, Q_Cartridge[aero].XSpin*TimeScale);
				geXForm3d_Multiply(&Q_Cartridge[aero].AlignMatrix, &rotmat, &Q_Cartridge[aero].AlignMatrix);

				geXForm3d_SetYRotation(&rotmat, Q_Cartridge[aero].YSpin*TimeScale);
				geXForm3d_Multiply(&Q_Cartridge[aero].AlignMatrix, &rotmat, &Q_Cartridge[aero].AlignMatrix);

				geXForm3d_SetZRotation(&rotmat, Q_Cartridge[aero].ZSpin*TimeScale);
				geXForm3d_Multiply(&Q_Cartridge[aero].AlignMatrix, &rotmat, &Q_Cartridge[aero].AlignMatrix);

				if(geWorld_Collision(World,
					 NULL,
					 NULL,
					 &Q_Cartridge[aero].OldPos,
					 &Q_Cartridge[aero].WorldPos,
					 GE_CONTENTS_CANNOT_OCCUPY,
					 GE_COLLIDE_MODELS,
					 0xffffffff, NULL, NULL,
					 &Q_Cartridge[aero].Collision))
					{
					if(Q_Cartridge[aero].FloorBounce == 0)
						{
						Q_Cartridge[aero].WorldPos = Q_Cartridge[aero].OldPos;
						Q_Cartridge[aero].TrajVec = PHY_BounceVector(Q_Cartridge[aero].TrajVec, Q_Cartridge[aero].Collision.Plane.Normal);
						Q_Cartridge[aero].Gravity = Q_Cartridge[aero].Gravity * 2;
						Q_Cartridge[aero].FloorBounce = 1;
						}
					else
						{
						Q_Cartridge[aero].WorldPos = Q_Cartridge[aero].Collision.Impact;
						Q_Cartridge[aero].Live = 0;
						}
					}
				}	//END MOVEMENT


			Q_Cartridge[aero].AlignMatrix.Translation = Q_Cartridge[aero].WorldPos;

			Q_Cartridge[aero].Pos = Q_Cartridge[aero].AlignMatrix.Translation;


			geXForm3d_GetUp(&Q_Cartridge[aero].AlignMatrix, &Q_Cartridge[aero].VecUp);
			geXForm3d_GetLeft(&Q_Cartridge[aero].AlignMatrix, &Q_Cartridge[aero].VecLeft);
			geXForm3d_GetIn(&Q_Cartridge[aero].AlignMatrix, &Q_Cartridge[aero].VecIn);

			//DRAW CARTRIDGE

			//Q_Cartridge[aero].Bitmap = jinko;	//expandro1; //pyro2; //trail2
			Q_Cartridge[aero].Type = GE_GOURAUD_POLY;		//GE_TEXTURED_POLY; //GE_GOURAUD_POLY;
			Q_Cartridge[aero].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
			Q_Cartridge[aero].ScaleBIT = 1.0f;

			//Compensate for pivot
			geVec3d_MA(&Q_Cartridge[aero].Pos, -Q_Cartridge[aero].Scale*2, &Q_Cartridge[aero].VecIn, &Q_Cartridge[aero].Pos);	//1.1

			//##Back Verts##
					//BACK VERT1
			geVec3d_MA(&Q_Cartridge[aero].Pos, Q_Cartridge[aero].Scale/1.105, &Q_Cartridge[aero].VecUp, &Q_Cartridge[aero].VertB1);	//1.1

					//BACK VERT2
			geVec3d_MA(&Q_Cartridge[aero].Pos, Q_Cartridge[aero].Scale/6, &Q_Cartridge[aero].VecUp, &Q_Cartridge[aero].VertB2);

			geVec3d_MA(&Q_Cartridge[aero].VertB2, -Q_Cartridge[aero].Scale*0.89, &Q_Cartridge[aero].VecLeft, &Q_Cartridge[aero].VertB2);

			geVec3d_MA(&Q_Cartridge[aero].Pos, -Q_Cartridge[aero].Scale, &Q_Cartridge[aero].VecUp, &Q_Cartridge[aero].VertB3);

					//BACK VERT4
			geVec3d_MA(&Q_Cartridge[aero].VertB3, Q_Cartridge[aero].Scale/1.62, &Q_Cartridge[aero].VecLeft, &Q_Cartridge[aero].VertB4);	//1.75

					//BACK VERT3
			geVec3d_MA(&Q_Cartridge[aero].VertB3, -Q_Cartridge[aero].Scale/1.62, &Q_Cartridge[aero].VecLeft, &Q_Cartridge[aero].VertB3);

					//BACK VERT5
			geVec3d_MA(&Q_Cartridge[aero].VertB2, (Q_Cartridge[aero].Scale*2)*0.89, &Q_Cartridge[aero].VecLeft, &Q_Cartridge[aero].VertB5);


			//OTF FIX
			geVec3d_Subtract(&Q_Cartridge[aero].VertB3, &Q_Cartridge[aero].Pos, &Q_Cartridge[aero].VecSTR);
			geVec3d_MA(&Q_Cartridge[aero].VertB3, -0.23, &Q_Cartridge[aero].VecSTR, &Q_Cartridge[aero].VertB3);	//0.2106
			geVec3d_Subtract(&Q_Cartridge[aero].VertB4, &Q_Cartridge[aero].Pos, &Q_Cartridge[aero].VecSTR);
			geVec3d_MA(&Q_Cartridge[aero].VertB4, -0.23, &Q_Cartridge[aero].VecSTR, &Q_Cartridge[aero].VertB4);


			//##Front Verts##
					//FRONT VERT1
			geVec3d_MA(&Q_Cartridge[aero].Pos, Q_Cartridge[aero].Scale*4, &Q_Cartridge[aero].VecIn, &Q_Cartridge[aero].Pos);

			geVec3d_MA(&Q_Cartridge[aero].Pos, Q_Cartridge[aero].Scale/1.105, &Q_Cartridge[aero].VecUp, &Q_Cartridge[aero].VertF1);	//1.1

					//FRONT VERT2
			geVec3d_MA(&Q_Cartridge[aero].Pos, Q_Cartridge[aero].Scale/6, &Q_Cartridge[aero].VecUp, &Q_Cartridge[aero].VertF2);

			geVec3d_MA(&Q_Cartridge[aero].VertF2, -Q_Cartridge[aero].Scale*0.89, &Q_Cartridge[aero].VecLeft, &Q_Cartridge[aero].VertF2);

			geVec3d_MA(&Q_Cartridge[aero].Pos, -Q_Cartridge[aero].Scale, &Q_Cartridge[aero].VecUp, &Q_Cartridge[aero].VertF3);

					//FRONT VERT4
			geVec3d_MA(&Q_Cartridge[aero].VertF3, Q_Cartridge[aero].Scale/1.62, &Q_Cartridge[aero].VecLeft, &Q_Cartridge[aero].VertF4);	//1.75

					//FRONT VERT3
			geVec3d_MA(&Q_Cartridge[aero].VertF3, -Q_Cartridge[aero].Scale/1.62, &Q_Cartridge[aero].VecLeft, &Q_Cartridge[aero].VertF3);

					//FRONT VERT5
			geVec3d_MA(&Q_Cartridge[aero].VertF2, (Q_Cartridge[aero].Scale*2)*0.89, &Q_Cartridge[aero].VecLeft, &Q_Cartridge[aero].VertF5);


			geVec3d_Subtract(&Q_Cartridge[aero].VertF3, &Q_Cartridge[aero].Pos, &Q_Cartridge[aero].VecSTR);
			geVec3d_MA(&Q_Cartridge[aero].VertF3, -0.23, &Q_Cartridge[aero].VecSTR, &Q_Cartridge[aero].VertF3);	//0.2106
			geVec3d_Subtract(&Q_Cartridge[aero].VertF4, &Q_Cartridge[aero].Pos, &Q_Cartridge[aero].VecSTR);
			geVec3d_MA(&Q_Cartridge[aero].VertF4, -0.23, &Q_Cartridge[aero].VecSTR, &Q_Cartridge[aero].VertF4);


			//##Front Point##
					//FRONT POINT
			geVec3d_MA(&Q_Cartridge[aero].Pos, Q_Cartridge[aero].Scale*2.67, &Q_Cartridge[aero].VecIn, &Q_Cartridge[aero].VertFP);


			a=0;
			while( a <= 12 )
				{
				b=0;
				while( b <= 3 )
					{
					Q_Cartridge[aero].Lvert[a][b].a = 255;//((rand() % 200) + 15);	//200
					Q_Cartridge[aero].Lvert[a][b].b = 80;//sunrise;	//100
					Q_Cartridge[aero].Lvert[a][b].g = 160;//Q_Cartridge[aero].Lvert[a][b].a;
					Q_Cartridge[aero].Lvert[a][b].r = 160;//((rand() % 200) + 5);	//100 //180
					b++;
					}
				a++;
				}

			a=3;
			while( a <= 7 )
				{
				b=0;
				while( b <= 1 )
					{
					Q_Cartridge[aero].Lvert[a][b].a = 255;//((rand() % 200) + 15);	//200
					Q_Cartridge[aero].Lvert[a][b].b = 20;//sunrise;	//100
					Q_Cartridge[aero].Lvert[a][b].g = 90;//Q_Cartridge[aero].Lvert[a][b].a;
					Q_Cartridge[aero].Lvert[a][b].r = 90;//((rand() % 200) + 5);	//100 //180
					b++;
					}
				a++;
				}


				//## Back Tris ##

				Q_Cartridge[aero].Lvert[0][0].u = 0;
				Q_Cartridge[aero].Lvert[0][0].v = 1;
				Q_Cartridge[aero].Lvert[0][0].X = Q_Cartridge[aero].VertB1.X;
				Q_Cartridge[aero].Lvert[0][0].Y = Q_Cartridge[aero].VertB1.Y;
				Q_Cartridge[aero].Lvert[0][0].Z = Q_Cartridge[aero].VertB1.Z;
				Q_Cartridge[aero].Lvert[0][1].u = 1;
				Q_Cartridge[aero].Lvert[0][1].v = 1;
				Q_Cartridge[aero].Lvert[0][1].X = Q_Cartridge[aero].VertB2.X;
				Q_Cartridge[aero].Lvert[0][1].Y = Q_Cartridge[aero].VertB2.Y;
				Q_Cartridge[aero].Lvert[0][1].Z = Q_Cartridge[aero].VertB2.Z;
				Q_Cartridge[aero].Lvert[0][2].u = 1;
				Q_Cartridge[aero].Lvert[0][2].v = 0;
				Q_Cartridge[aero].Lvert[0][2].X = Q_Cartridge[aero].VertB3.X;
				Q_Cartridge[aero].Lvert[0][2].Y = Q_Cartridge[aero].VertB3.Y;
				Q_Cartridge[aero].Lvert[0][2].Z = Q_Cartridge[aero].VertB3.Z;


				Q_Cartridge[aero].Lvert[1][0].u = 0;
				Q_Cartridge[aero].Lvert[1][0].v = 1;
				Q_Cartridge[aero].Lvert[1][0].X = Q_Cartridge[aero].VertB3.X;
				Q_Cartridge[aero].Lvert[1][0].Y = Q_Cartridge[aero].VertB3.Y;
				Q_Cartridge[aero].Lvert[1][0].Z = Q_Cartridge[aero].VertB3.Z;
				Q_Cartridge[aero].Lvert[1][1].u = 1;
				Q_Cartridge[aero].Lvert[1][1].v = 1;
				Q_Cartridge[aero].Lvert[1][1].X = Q_Cartridge[aero].VertB4.X;
				Q_Cartridge[aero].Lvert[1][1].Y = Q_Cartridge[aero].VertB4.Y;
				Q_Cartridge[aero].Lvert[1][1].Z = Q_Cartridge[aero].VertB4.Z;
				Q_Cartridge[aero].Lvert[1][2].u = 1;
				Q_Cartridge[aero].Lvert[1][2].v = 0;
				Q_Cartridge[aero].Lvert[1][2].X = Q_Cartridge[aero].VertB1.X;
				Q_Cartridge[aero].Lvert[1][2].Y = Q_Cartridge[aero].VertB1.Y;
				Q_Cartridge[aero].Lvert[1][2].Z = Q_Cartridge[aero].VertB1.Z;


				Q_Cartridge[aero].Lvert[2][0].u = 0;
				Q_Cartridge[aero].Lvert[2][0].v = 1;
				Q_Cartridge[aero].Lvert[2][0].X = Q_Cartridge[aero].VertB4.X;
				Q_Cartridge[aero].Lvert[2][0].Y = Q_Cartridge[aero].VertB4.Y;
				Q_Cartridge[aero].Lvert[2][0].Z = Q_Cartridge[aero].VertB4.Z;
				Q_Cartridge[aero].Lvert[2][1].u = 1;
				Q_Cartridge[aero].Lvert[2][1].v = 1;
				Q_Cartridge[aero].Lvert[2][1].X = Q_Cartridge[aero].VertB5.X;
				Q_Cartridge[aero].Lvert[2][1].Y = Q_Cartridge[aero].VertB5.Y;
				Q_Cartridge[aero].Lvert[2][1].Z = Q_Cartridge[aero].VertB5.Z;
				Q_Cartridge[aero].Lvert[2][2].u = 1;
				Q_Cartridge[aero].Lvert[2][2].v = 0;
				Q_Cartridge[aero].Lvert[2][2].X = Q_Cartridge[aero].VertB1.X;
				Q_Cartridge[aero].Lvert[2][2].Y = Q_Cartridge[aero].VertB1.Y;
				Q_Cartridge[aero].Lvert[2][2].Z = Q_Cartridge[aero].VertB1.Z;


				//## Side Strips ##

				//Strip1
				Q_Cartridge[aero].Lvert[3][0].u = 1;
				Q_Cartridge[aero].Lvert[3][0].v = 0;
				Q_Cartridge[aero].Lvert[3][0].X = Q_Cartridge[aero].VertB1.X;
				Q_Cartridge[aero].Lvert[3][0].Y = Q_Cartridge[aero].VertB1.Y;
				Q_Cartridge[aero].Lvert[3][0].Z = Q_Cartridge[aero].VertB1.Z;
				Q_Cartridge[aero].Lvert[3][1].u = 0;
				Q_Cartridge[aero].Lvert[3][1].v = 0;
				Q_Cartridge[aero].Lvert[3][1].X = Q_Cartridge[aero].VertB2.X;
				Q_Cartridge[aero].Lvert[3][1].Y = Q_Cartridge[aero].VertB2.Y;
				Q_Cartridge[aero].Lvert[3][1].Z = Q_Cartridge[aero].VertB2.Z;
				Q_Cartridge[aero].Lvert[3][2].u = 1;
				Q_Cartridge[aero].Lvert[3][2].v = 1;
				Q_Cartridge[aero].Lvert[3][2].X = Q_Cartridge[aero].VertF2.X;
				Q_Cartridge[aero].Lvert[3][2].Y = Q_Cartridge[aero].VertF2.Y;
				Q_Cartridge[aero].Lvert[3][2].Z = Q_Cartridge[aero].VertF2.Z;
				Q_Cartridge[aero].Lvert[3][3].u = 1;
				Q_Cartridge[aero].Lvert[3][3].v = 1;
				Q_Cartridge[aero].Lvert[3][3].X = Q_Cartridge[aero].VertF1.X;
				Q_Cartridge[aero].Lvert[3][3].Y = Q_Cartridge[aero].VertF1.Y;
				Q_Cartridge[aero].Lvert[3][3].Z = Q_Cartridge[aero].VertF1.Z;


				//Strip2
				Q_Cartridge[aero].Lvert[4][0].u = 1;
				Q_Cartridge[aero].Lvert[4][0].v = 0;
				Q_Cartridge[aero].Lvert[4][0].X = Q_Cartridge[aero].VertB2.X;
				Q_Cartridge[aero].Lvert[4][0].Y = Q_Cartridge[aero].VertB2.Y;
				Q_Cartridge[aero].Lvert[4][0].Z = Q_Cartridge[aero].VertB2.Z;
				Q_Cartridge[aero].Lvert[4][1].u = 0;
				Q_Cartridge[aero].Lvert[4][1].v = 0;
				Q_Cartridge[aero].Lvert[4][1].X = Q_Cartridge[aero].VertB3.X;
				Q_Cartridge[aero].Lvert[4][1].Y = Q_Cartridge[aero].VertB3.Y;
				Q_Cartridge[aero].Lvert[4][1].Z = Q_Cartridge[aero].VertB3.Z;
				Q_Cartridge[aero].Lvert[4][2].u = 1;
				Q_Cartridge[aero].Lvert[4][2].v = 1;
				Q_Cartridge[aero].Lvert[4][2].X = Q_Cartridge[aero].VertF3.X;
				Q_Cartridge[aero].Lvert[4][2].Y = Q_Cartridge[aero].VertF3.Y;
				Q_Cartridge[aero].Lvert[4][2].Z = Q_Cartridge[aero].VertF3.Z;
				Q_Cartridge[aero].Lvert[4][3].u = 1;
				Q_Cartridge[aero].Lvert[4][3].v = 1;
				Q_Cartridge[aero].Lvert[4][3].X = Q_Cartridge[aero].VertF2.X;
				Q_Cartridge[aero].Lvert[4][3].Y = Q_Cartridge[aero].VertF2.Y;
				Q_Cartridge[aero].Lvert[4][3].Z = Q_Cartridge[aero].VertF2.Z;


				//Strip3
				Q_Cartridge[aero].Lvert[5][0].u = 1;
				Q_Cartridge[aero].Lvert[5][0].v = 0;
				Q_Cartridge[aero].Lvert[5][0].X = Q_Cartridge[aero].VertB3.X;
				Q_Cartridge[aero].Lvert[5][0].Y = Q_Cartridge[aero].VertB3.Y;
				Q_Cartridge[aero].Lvert[5][0].Z = Q_Cartridge[aero].VertB3.Z;
				Q_Cartridge[aero].Lvert[5][1].u = 0;
				Q_Cartridge[aero].Lvert[5][1].v = 0;
				Q_Cartridge[aero].Lvert[5][1].X = Q_Cartridge[aero].VertB4.X;
				Q_Cartridge[aero].Lvert[5][1].Y = Q_Cartridge[aero].VertB4.Y;
				Q_Cartridge[aero].Lvert[5][1].Z = Q_Cartridge[aero].VertB4.Z;
				Q_Cartridge[aero].Lvert[5][2].u = 1;
				Q_Cartridge[aero].Lvert[5][2].v = 1;
				Q_Cartridge[aero].Lvert[5][2].X = Q_Cartridge[aero].VertF4.X;
				Q_Cartridge[aero].Lvert[5][2].Y = Q_Cartridge[aero].VertF4.Y;
				Q_Cartridge[aero].Lvert[5][2].Z = Q_Cartridge[aero].VertF4.Z;
				Q_Cartridge[aero].Lvert[5][3].u = 1;
				Q_Cartridge[aero].Lvert[5][3].v = 1;
				Q_Cartridge[aero].Lvert[5][3].X = Q_Cartridge[aero].VertF3.X;
				Q_Cartridge[aero].Lvert[5][3].Y = Q_Cartridge[aero].VertF3.Y;
				Q_Cartridge[aero].Lvert[5][3].Z = Q_Cartridge[aero].VertF3.Z;


				//Strip4
				Q_Cartridge[aero].Lvert[6][0].u = 0;
				Q_Cartridge[aero].Lvert[6][0].v = 0;
				Q_Cartridge[aero].Lvert[6][0].X = Q_Cartridge[aero].VertB4.X;
				Q_Cartridge[aero].Lvert[6][0].Y = Q_Cartridge[aero].VertB4.Y;
				Q_Cartridge[aero].Lvert[6][0].Z = Q_Cartridge[aero].VertB4.Z;
				Q_Cartridge[aero].Lvert[6][1].u = 1;
				Q_Cartridge[aero].Lvert[6][1].v = 0;
				Q_Cartridge[aero].Lvert[6][1].X = Q_Cartridge[aero].VertB5.X;
				Q_Cartridge[aero].Lvert[6][1].Y = Q_Cartridge[aero].VertB5.Y;
				Q_Cartridge[aero].Lvert[6][1].Z = Q_Cartridge[aero].VertB5.Z;
				Q_Cartridge[aero].Lvert[6][2].u = 1;
				Q_Cartridge[aero].Lvert[6][2].v = 1;
				Q_Cartridge[aero].Lvert[6][2].X = Q_Cartridge[aero].VertF5.X;
				Q_Cartridge[aero].Lvert[6][2].Y = Q_Cartridge[aero].VertF5.Y;
				Q_Cartridge[aero].Lvert[6][2].Z = Q_Cartridge[aero].VertF5.Z;
				Q_Cartridge[aero].Lvert[6][3].u = 1;
				Q_Cartridge[aero].Lvert[6][3].v = 1;
				Q_Cartridge[aero].Lvert[6][3].X = Q_Cartridge[aero].VertF4.X;
				Q_Cartridge[aero].Lvert[6][3].Y = Q_Cartridge[aero].VertF4.Y;
				Q_Cartridge[aero].Lvert[6][3].Z = Q_Cartridge[aero].VertF4.Z;


				//Strip5
				Q_Cartridge[aero].Lvert[7][0].u = 0;
				Q_Cartridge[aero].Lvert[7][0].v = 0;
				Q_Cartridge[aero].Lvert[7][0].X = Q_Cartridge[aero].VertB5.X;
				Q_Cartridge[aero].Lvert[7][0].Y = Q_Cartridge[aero].VertB5.Y;
				Q_Cartridge[aero].Lvert[7][0].Z = Q_Cartridge[aero].VertB5.Z;
				Q_Cartridge[aero].Lvert[7][1].u = 1;
				Q_Cartridge[aero].Lvert[7][1].v = 0;
				Q_Cartridge[aero].Lvert[7][1].X = Q_Cartridge[aero].VertB1.X;
				Q_Cartridge[aero].Lvert[7][1].Y = Q_Cartridge[aero].VertB1.Y;
				Q_Cartridge[aero].Lvert[7][1].Z = Q_Cartridge[aero].VertB1.Z;
				Q_Cartridge[aero].Lvert[7][2].u = 1;
				Q_Cartridge[aero].Lvert[7][2].v = 1;
				Q_Cartridge[aero].Lvert[7][2].X = Q_Cartridge[aero].VertF1.X;
				Q_Cartridge[aero].Lvert[7][2].Y = Q_Cartridge[aero].VertF1.Y;
				Q_Cartridge[aero].Lvert[7][2].Z = Q_Cartridge[aero].VertF1.Z;
				Q_Cartridge[aero].Lvert[7][3].u = 1;
				Q_Cartridge[aero].Lvert[7][3].v = 1;
				Q_Cartridge[aero].Lvert[7][3].X = Q_Cartridge[aero].VertF5.X;
				Q_Cartridge[aero].Lvert[7][3].Y = Q_Cartridge[aero].VertF5.Y;
				Q_Cartridge[aero].Lvert[7][3].Z = Q_Cartridge[aero].VertF5.Z;


				//## Front Tris ##

				Q_Cartridge[aero].Lvert[8][0].u = 0;
				Q_Cartridge[aero].Lvert[8][0].v = 1;
				Q_Cartridge[aero].Lvert[8][0].X = Q_Cartridge[aero].VertF1.X;
				Q_Cartridge[aero].Lvert[8][0].Y = Q_Cartridge[aero].VertF1.Y;
				Q_Cartridge[aero].Lvert[8][0].Z = Q_Cartridge[aero].VertF1.Z;
				Q_Cartridge[aero].Lvert[8][1].u = 1;
				Q_Cartridge[aero].Lvert[8][1].v = 1;
				Q_Cartridge[aero].Lvert[8][1].X = Q_Cartridge[aero].VertF2.X;
				Q_Cartridge[aero].Lvert[8][1].Y = Q_Cartridge[aero].VertF2.Y;
				Q_Cartridge[aero].Lvert[8][1].Z = Q_Cartridge[aero].VertF2.Z;
				Q_Cartridge[aero].Lvert[8][2].u = 1;
				Q_Cartridge[aero].Lvert[8][2].v = 0;
				Q_Cartridge[aero].Lvert[8][2].X = Q_Cartridge[aero].VertFP.X;
				Q_Cartridge[aero].Lvert[8][2].Y = Q_Cartridge[aero].VertFP.Y;
				Q_Cartridge[aero].Lvert[8][2].Z = Q_Cartridge[aero].VertFP.Z;


				Q_Cartridge[aero].Lvert[9][0].u = 0;
				Q_Cartridge[aero].Lvert[9][0].v = 1;
				Q_Cartridge[aero].Lvert[9][0].X = Q_Cartridge[aero].VertF2.X;
				Q_Cartridge[aero].Lvert[9][0].Y = Q_Cartridge[aero].VertF2.Y;
				Q_Cartridge[aero].Lvert[9][0].Z = Q_Cartridge[aero].VertF2.Z;
				Q_Cartridge[aero].Lvert[9][1].u = 1;
				Q_Cartridge[aero].Lvert[9][1].v = 1;
				Q_Cartridge[aero].Lvert[9][1].X = Q_Cartridge[aero].VertF3.X;
				Q_Cartridge[aero].Lvert[9][1].Y = Q_Cartridge[aero].VertF3.Y;
				Q_Cartridge[aero].Lvert[9][1].Z = Q_Cartridge[aero].VertF3.Z;
				Q_Cartridge[aero].Lvert[9][2].u = 1;
				Q_Cartridge[aero].Lvert[9][2].v = 0;
				Q_Cartridge[aero].Lvert[9][2].X = Q_Cartridge[aero].VertFP.X;
				Q_Cartridge[aero].Lvert[9][2].Y = Q_Cartridge[aero].VertFP.Y;
				Q_Cartridge[aero].Lvert[9][2].Z = Q_Cartridge[aero].VertFP.Z;


				Q_Cartridge[aero].Lvert[10][0].u = 0;
				Q_Cartridge[aero].Lvert[10][0].v = 1;
				Q_Cartridge[aero].Lvert[10][0].X = Q_Cartridge[aero].VertF3.X;
				Q_Cartridge[aero].Lvert[10][0].Y = Q_Cartridge[aero].VertF3.Y;
				Q_Cartridge[aero].Lvert[10][0].Z = Q_Cartridge[aero].VertF3.Z;
				Q_Cartridge[aero].Lvert[10][1].u = 1;
				Q_Cartridge[aero].Lvert[10][1].v = 1;
				Q_Cartridge[aero].Lvert[10][1].X = Q_Cartridge[aero].VertF4.X;
				Q_Cartridge[aero].Lvert[10][1].Y = Q_Cartridge[aero].VertF4.Y;
				Q_Cartridge[aero].Lvert[10][1].Z = Q_Cartridge[aero].VertF4.Z;
				Q_Cartridge[aero].Lvert[10][2].u = 1;
				Q_Cartridge[aero].Lvert[10][2].v = 0;
				Q_Cartridge[aero].Lvert[10][2].X = Q_Cartridge[aero].VertFP.X;
				Q_Cartridge[aero].Lvert[10][2].Y = Q_Cartridge[aero].VertFP.Y;
				Q_Cartridge[aero].Lvert[10][2].Z = Q_Cartridge[aero].VertFP.Z;


				Q_Cartridge[aero].Lvert[11][0].u = 0;
				Q_Cartridge[aero].Lvert[11][0].v = 1;
				Q_Cartridge[aero].Lvert[11][0].X = Q_Cartridge[aero].VertF4.X;
				Q_Cartridge[aero].Lvert[11][0].Y = Q_Cartridge[aero].VertF4.Y;
				Q_Cartridge[aero].Lvert[11][0].Z = Q_Cartridge[aero].VertF4.Z;
				Q_Cartridge[aero].Lvert[11][1].u = 1;
				Q_Cartridge[aero].Lvert[11][1].v = 1;
				Q_Cartridge[aero].Lvert[11][1].X = Q_Cartridge[aero].VertF5.X;
				Q_Cartridge[aero].Lvert[11][1].Y = Q_Cartridge[aero].VertF5.Y;
				Q_Cartridge[aero].Lvert[11][1].Z = Q_Cartridge[aero].VertF5.Z;
				Q_Cartridge[aero].Lvert[11][2].u = 1;
				Q_Cartridge[aero].Lvert[11][2].v = 0;
				Q_Cartridge[aero].Lvert[11][2].X = Q_Cartridge[aero].VertFP.X;
				Q_Cartridge[aero].Lvert[11][2].Y = Q_Cartridge[aero].VertFP.Y;
				Q_Cartridge[aero].Lvert[11][2].Z = Q_Cartridge[aero].VertFP.Z;


				Q_Cartridge[aero].Lvert[12][0].u = 0;
				Q_Cartridge[aero].Lvert[12][0].v = 1;
				Q_Cartridge[aero].Lvert[12][0].X = Q_Cartridge[aero].VertF5.X;
				Q_Cartridge[aero].Lvert[12][0].Y = Q_Cartridge[aero].VertF5.Y;
				Q_Cartridge[aero].Lvert[12][0].Z = Q_Cartridge[aero].VertF5.Z;
				Q_Cartridge[aero].Lvert[12][1].u = 1;
				Q_Cartridge[aero].Lvert[12][1].v = 1;
				Q_Cartridge[aero].Lvert[12][1].X = Q_Cartridge[aero].VertF1.X;
				Q_Cartridge[aero].Lvert[12][1].Y = Q_Cartridge[aero].VertF1.Y;
				Q_Cartridge[aero].Lvert[12][1].Z = Q_Cartridge[aero].VertF1.Z;
				Q_Cartridge[aero].Lvert[12][2].u = 1;
				Q_Cartridge[aero].Lvert[12][2].v = 0;
				Q_Cartridge[aero].Lvert[12][2].X = Q_Cartridge[aero].VertFP.X;
				Q_Cartridge[aero].Lvert[12][2].Y = Q_Cartridge[aero].VertFP.Y;
				Q_Cartridge[aero].Lvert[12][2].Z = Q_Cartridge[aero].VertFP.Z;


				geWorld_AddPolyOnce(World, &Q_Cartridge[aero].Lvert[0][0], 3, pyro2, Q_Cartridge[aero].Type, Q_Cartridge[aero].RenderFlags, Q_Cartridge[aero].ScaleBIT);
				geWorld_AddPolyOnce(World, &Q_Cartridge[aero].Lvert[1][0], 3, pyro2, Q_Cartridge[aero].Type, Q_Cartridge[aero].RenderFlags, Q_Cartridge[aero].ScaleBIT);
				geWorld_AddPolyOnce(World, &Q_Cartridge[aero].Lvert[2][0], 3, pyro2, Q_Cartridge[aero].Type, Q_Cartridge[aero].RenderFlags, Q_Cartridge[aero].ScaleBIT);

				geWorld_AddPolyOnce(World, &Q_Cartridge[aero].Lvert[3][0], 4, pyro2, Q_Cartridge[aero].Type, Q_Cartridge[aero].RenderFlags, Q_Cartridge[aero].ScaleBIT);
				geWorld_AddPolyOnce(World, &Q_Cartridge[aero].Lvert[4][0], 4, pyro2, Q_Cartridge[aero].Type, Q_Cartridge[aero].RenderFlags, Q_Cartridge[aero].ScaleBIT);
				geWorld_AddPolyOnce(World, &Q_Cartridge[aero].Lvert[5][0], 4, pyro2, Q_Cartridge[aero].Type, Q_Cartridge[aero].RenderFlags, Q_Cartridge[aero].ScaleBIT);
				geWorld_AddPolyOnce(World, &Q_Cartridge[aero].Lvert[6][0], 4, pyro2, Q_Cartridge[aero].Type, Q_Cartridge[aero].RenderFlags, Q_Cartridge[aero].ScaleBIT);
				geWorld_AddPolyOnce(World, &Q_Cartridge[aero].Lvert[7][0], 4, pyro2, Q_Cartridge[aero].Type, Q_Cartridge[aero].RenderFlags, Q_Cartridge[aero].ScaleBIT);

			aero++;
			}
		}



	//########  - CLOUD SYSTEM - CLOUD CONTROL -  ########//

	if(NomCloud > 0)
		{
		aero = 0;
		while(aero < NomCloud)
			{
			if(Q_Cloud[aero].CloudLive == 1)
				{
				switch(Q_Cloud[aero].CloudType)
					{
						//###Smoke
					case 0:
						{												//25
						//Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*10)+0.5) *TimeScale;		//(((float)rand() / 32767)*3) *TimeScale;
						Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*3)+2) *TimeScale;		//(((float)rand() / 32767)*3) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.01) *TimeScale;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						//1
						Q_Cloud[aero].CloudPos.Y += 0.2*TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 50;	//130	//255
						Q_Cloud[aero].CloudLVert.g = 50;	//255
						Q_Cloud[aero].CloudLVert.b = 50;	//255
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						Q_Cloud[aero].CloudMatCNT++;
						if(Q_Cloud[aero].CloudMatCNT > 49 || Q_Cloud[aero].CloudMatCNT < 0) Q_Cloud[aero].CloudMatCNT = 0;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, QSmoke[Q_Cloud[aero].CloudMatCNT], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;


						//###Blood
					case 1:
						{
						Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*15) + 5) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.08) *TimeScale;

						//Implement This Blood Gravity?
						//Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*2) *TimeScale;
						//Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*2) *TimeScale;
						//Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*2) *TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 255;
						Q_Cloud[aero].CloudLVert.g = 255;
						Q_Cloud[aero].CloudLVert.b = 255;
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, CloudBlood, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;


						//###Fire
					case 2:
						{
						Q_Cloud[aero].CloudAlpha -= (((float)rand() / 32767)*15) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.01) *TimeScale;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudPos.Y += 1*TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 255;
						Q_Cloud[aero].CloudLVert.g = 255;
						Q_Cloud[aero].CloudLVert.b = 255;
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, radfire[Q_Cloud[aero].CloudSpecCnt], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);

						if(Q_Cloud[aero].CloudSpecCnt+1 < 64) Q_Cloud[aero].CloudSpecCnt += 1;
						else Q_Cloud[aero].CloudSpecCnt = 44;
						if(Q_Cloud[aero].CloudSpecCnt < 44) Q_Cloud[aero].CloudSpecCnt = 44;
						} break;


						//###Fire Expand to disperse fast
					case 3:
						{
						Q_Cloud[aero].CloudAlpha -= (((float)rand() / 32767)*35) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += ((((float)rand() / 32767)*0.1)+0.05) *TimeScale;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						//Q_Cloud[aero].CloudPos.Y -= 1;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 255;
						Q_Cloud[aero].CloudLVert.g = 255;
						Q_Cloud[aero].CloudLVert.b = 255;
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, radfire[Q_Cloud[aero].CloudSpecCnt], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);

						if(Q_Cloud[aero].CloudSpecCnt+1 < 64) Q_Cloud[aero].CloudSpecCnt += 1;
						else Q_Cloud[aero].CloudSpecCnt = 44;
						if(Q_Cloud[aero].CloudSpecCnt < 44) Q_Cloud[aero].CloudSpecCnt = 44;
						} break;


						//###Limb Fire Clouds
					case 4:
						{
						Q_Cloud[aero].CloudAlpha -= (((float)rand() / 32767)*10) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.003) *TimeScale;

						Q_Cloud[aero].CloudTraVec.Y -= 0.18*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 226;
						Q_Cloud[aero].CloudLVert.g = 255;
						Q_Cloud[aero].CloudLVert.b = 62;
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, CloudLimb, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;

						//###Smoke Two
					case 5:
						{
						//Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*2) + 1) *TimeScale;		//((((float)rand() / 32767)*1.5) + 0.8) *TimeScale;
						Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*3) + 1) *TimeScale;		//((((float)rand() / 32767)*1.5) + 0.8) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.00085) *TimeScale;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudPos.Y += (((float)rand() / 32767)*0.1)*TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 75;	//255
						Q_Cloud[aero].CloudLVert.g = 75;	//255
						Q_Cloud[aero].CloudLVert.b = 75;	//255
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						Q_Cloud[aero].CloudMatCNT++;
						if(Q_Cloud[aero].CloudMatCNT > 49 || Q_Cloud[aero].CloudMatCNT < 0) Q_Cloud[aero].CloudMatCNT = 0;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, QSmoke[Q_Cloud[aero].CloudMatCNT], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;


						//###Flames
					case 6:
						{
						Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*3.5) + 1.5) *TimeScale;		//((((float)rand() / 32767)*2.5) + 1) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						if(Q_Cloud[aero].CloudScaleDIR == 0)
							{
							if(Q_Cloud[aero].CloudScale + ((((float)rand() / 32767)*0.15)*TimeScale) < 1) Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.15)*TimeScale;
							else
								{
								Q_Cloud[aero].CloudScale = 1;
								Q_Cloud[aero].CloudScaleDIR = 1;
								}
							}
						else
							{
							if(Q_Cloud[aero].CloudScale - ((((float)rand() / 32767)*0.15)*TimeScale) > 0.01) Q_Cloud[aero].CloudScale -= (((float)rand() / 32767)*0.15)*TimeScale;
							else
								{
								Q_Cloud[aero].CloudScale = 0.01;
								Q_Cloud[aero].CloudScaleDIR = 0;
								}
							}

						Q_Cloud[aero].CloudSpecCnt++;
						if(Q_Cloud[aero].CloudSpecCnt > 15 || Q_Cloud[aero].CloudSpecCnt < 0) Q_Cloud[aero].CloudSpecCnt = 6;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.01)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.01)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.01)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudPos.Y += (((float)rand() / 32767)*0.1)*TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = Q_Cloud[aero].CloudRed;	//255
						Q_Cloud[aero].CloudLVert.g = Q_Cloud[aero].CloudGreen;	//255
						Q_Cloud[aero].CloudLVert.b = Q_Cloud[aero].CloudBlue;	//255
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						//geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, Cloud3, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, radfire[Q_Cloud[aero].CloudSpecCnt], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;


						//###Jink Smoke Blast
					case 7:
						{
						//Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*35) + 25) *TimeScale;
						Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*5) + 2) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudSpeed += 0.095;

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.005) *TimeScale;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudPos.Y += (((float)rand() / 32767)*0.14)*TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 75;
						Q_Cloud[aero].CloudLVert.g = 75;
						Q_Cloud[aero].CloudLVert.b = 75;
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						Q_Cloud[aero].CloudMatCNT++;
						if(Q_Cloud[aero].CloudMatCNT > 49 || Q_Cloud[aero].CloudMatCNT < 0) Q_Cloud[aero].CloudMatCNT = 0;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, QSmoke[Q_Cloud[aero].CloudMatCNT], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;

					case 8:
						{
						Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*35) + 25) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudSpeed += 0.095;

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.005) *TimeScale;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudPos.Y += (((float)rand() / 32767)*0.14)*TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 255;
						Q_Cloud[aero].CloudLVert.g = 255;
						Q_Cloud[aero].CloudLVert.b = 225;
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, Cloud3, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;


						//###Shock
					case 9:
						{												//25	15
						Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*35)+10) *TimeScale; //(((float)rand() / 32767)*3) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.025) *TimeScale;
						//Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.003) *TimeScale;

						//Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						//Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						//Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudSpeed *= 1.25 *TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 255;	//255
						Q_Cloud[aero].CloudLVert.g = 255;	//255
						Q_Cloud[aero].CloudLVert.b = 255;	//255
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, Cloud9, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;

						//###Smoke Two
					case 10:
						{
						//Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*2) + 1) *TimeScale;		//((((float)rand() / 32767)*1.5) + 0.8) *TimeScale;
						Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*5) + 1) *TimeScale;		//((((float)rand() / 32767)*1.5) + 0.8) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*0.01) *TimeScale;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.001)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudPos.Y += (((float)rand() / 32767)*0.7)*TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = 75;	//255
						Q_Cloud[aero].CloudLVert.g = 75;	//255
						Q_Cloud[aero].CloudLVert.b = 75;	//255
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						Q_Cloud[aero].CloudMatCNT++;
						if(Q_Cloud[aero].CloudMatCNT > 49 || Q_Cloud[aero].CloudMatCNT < 0) Q_Cloud[aero].CloudMatCNT = 0;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, QSmoke[Q_Cloud[aero].CloudMatCNT], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;

							//###Smoke
					case 11:
						{
						Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*Q_Cloud[aero].CloudALPHAINC)+(Q_Cloud[aero].CloudALPHAINC/3)) *TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*Q_Cloud[aero].CloudSCALEINC) *TimeScale;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.1)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudPos.Y -= Q_Cloud[aero].CloudGRAVITY*TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = Q_Cloud[aero].CloudRED;
						Q_Cloud[aero].CloudLVert.g = Q_Cloud[aero].CloudGREEN;
						Q_Cloud[aero].CloudLVert.b = Q_Cloud[aero].CloudBLUE;
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						Q_Cloud[aero].CloudMatCNT++;
						if(Q_Cloud[aero].CloudMatCNT > 49 || Q_Cloud[aero].CloudMatCNT < 0) Q_Cloud[aero].CloudMatCNT = 0;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, QSmoke[Q_Cloud[aero].CloudMatCNT], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;


							//###Smoke
					case 12:
						{
						if(Q_Cloud[aero].CloudPos.X > Q_Cloud[NomCloud].CloudMaxs.X
							&& Q_Cloud[aero].CloudPos.X < Q_Cloud[NomCloud].CloudMins.X
							&& Q_Cloud[aero].CloudPos.Y > Q_Cloud[NomCloud].CloudMaxs.Y
							&& Q_Cloud[aero].CloudPos.Y < Q_Cloud[NomCloud].CloudMins.Y
							&& Q_Cloud[aero].CloudPos.Z > Q_Cloud[NomCloud].CloudMaxs.Z
							&& Q_Cloud[aero].CloudPos.Z < Q_Cloud[NomCloud].CloudMins.Z)
							{
							Q_Cloud[aero].CloudAlpha -= ((((float)rand() / 32767)*Q_Cloud[aero].CloudALPHAINC)+(Q_Cloud[aero].CloudALPHAINC/3)) *TimeScale;
							}
						else Q_Cloud[aero].CloudAlpha -= 50 * TimeScale;

						if(Q_Cloud[aero].CloudAlpha <= 0)
							{
							Q_Cloud[aero].CloudAlpha = 0;
							Q_Cloud[aero].CloudLive = 0;

							//### Array Reorder
							K = aero;
							while(K < NomCloud - 1)
								{
								Q_Cloud[K] = Q_Cloud[K+1];
								K++;
								}

							NomCloud--;
							}

						Q_Cloud[aero].CloudScale += (((float)rand() / 32767)*Q_Cloud[aero].CloudSCALEINC) *TimeScale;

						Q_Cloud[aero].CloudTraVec.X += ((((float)rand() / 32767)-0.5)*0.2)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Y -= (((float)rand() / 32767)*2)*TimeScale;
						Q_Cloud[aero].CloudTraVec.Z += ((((float)rand() / 32767)-0.5)*0.2)*TimeScale;

						geVec3d_MA(&Q_Cloud[aero].CloudPos, Q_Cloud[aero].CloudSpeed*TimeScale, &Q_Cloud[aero].CloudTraVec, &Q_Cloud[aero].CloudPos);

						Q_Cloud[aero].CloudPos.Y -= Q_Cloud[aero].CloudGRAVITY*TimeScale;

						Q_Cloud[aero].CloudLVert.a = Q_Cloud[aero].CloudAlpha;
						Q_Cloud[aero].CloudLVert.r = Q_Cloud[aero].CloudRED;
						Q_Cloud[aero].CloudLVert.g = Q_Cloud[aero].CloudGREEN;
						Q_Cloud[aero].CloudLVert.b = Q_Cloud[aero].CloudBLUE;
						Q_Cloud[aero].CloudLVert.u = 0;
						Q_Cloud[aero].CloudLVert.v = 0;
						Q_Cloud[aero].CloudLVert.X = Q_Cloud[aero].CloudPos.X;
						Q_Cloud[aero].CloudLVert.Y = Q_Cloud[aero].CloudPos.Y;
						Q_Cloud[aero].CloudLVert.Z = Q_Cloud[aero].CloudPos.Z;

						Q_Cloud[aero].CloudMatCNT++;
						if(Q_Cloud[aero].CloudMatCNT > 49 || Q_Cloud[aero].CloudMatCNT < 0) Q_Cloud[aero].CloudMatCNT = 0;

						geWorld_AddPolyOnce(World, &Q_Cloud[aero].CloudLVert, 1, QSmoke[Q_Cloud[aero].CloudMatCNT], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_Cloud[aero].CloudScale);
						} break;
					}

				}//~LIVE
			aero++;
			}
		}


	//########  - 3D Sparks System -  ########//

	if(NomSparks > 0)
		{
		helly = 0;
		while(helly < NomSparks)
			{
			if(BSparks[helly].Live == 1)
				{
				BSparks[helly].Timer++;

				if(BSparks[helly].SmokeTrail == 0) BSparks[helly].Scale = 2.5;
				else
					{
					BSparks[helly].Scale = 80;	//55

					jet=0;
					while(jet < 2)	//3
						{
						Q_Cloud[NomCloud].CloudType = 0;

						Q_Cloud[NomCloud].CloudPos = BSparks[helly].Pos;

						Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*155)+50;
						Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.1;

						geVec3d_Clear(&Q_Cloud[NomCloud].CloudTraVec);

						Q_Cloud[NomCloud].CloudTraVec.X += (((float)rand() / 32767)-0.5)*2;
						Q_Cloud[NomCloud].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*2) + 2;
						Q_Cloud[NomCloud].CloudTraVec.Z += (((float)rand() / 32767)-0.5)*2;

						//Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)-0.5)*6;
						Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)-0.5)*3;

						Q_Cloud[NomCloud].CloudMatCNT = 0;

						Q_Cloud[NomCloud].CloudLive = 1;

						NomCloud++;
						if(NomCloud > 4999) NomCloud = 0;
						jet++;
						}


					jet=0;
					while(jet < 2)
						{
						//FLAME CLOUD
						Q_Cloud[NomCloud].CloudType = 8;

						Q_Cloud[NomCloud].CloudPos = BSparks[helly].Pos;

						Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*145);
						Q_Cloud[NomCloud].CloudScale = (((float)rand() / 32767)*0.35) * (0.05+(1-(BSparks[helly].Speed/100)));
						//Q_Cloud[NomCloud].CloudScale = (((float)rand() / 32767)*0.15) * (0.235+(1-(BSparks[helly].Speed/100)));

						if((((float)rand() / 32767)-0.5) > 0)
							{
							//RED CLOUD
							Q_Cloud[NomCloud].CloudRed = (((float)rand() / 32767)*45) + 250;
							Q_Cloud[NomCloud].CloudGreen = 200;
							Q_Cloud[NomCloud].CloudBlue = 200;
							}
						else
							{
							//YELLOW CLOUD
							Q_Cloud[NomCloud].CloudRed = (((float)rand() / 32767)*45) + 250;
							Q_Cloud[NomCloud].CloudGreen = (((float)rand() / 32767)*45) + 250;
							Q_Cloud[NomCloud].CloudBlue = 200;
							}

						geVec3d_Clear(&Q_Cloud[NomCloud].CloudTraVec);

						Q_Cloud[NomCloud].CloudTraVec.X += (((float)rand() / 32767)-0.5)*2;
						Q_Cloud[NomCloud].CloudTraVec.Y += ((((float)rand() / 32767)-0.5)*2) + 1;
						Q_Cloud[NomCloud].CloudTraVec.Z += (((float)rand() / 32767)-0.5)*2;

						Q_Cloud[NomCloud].CloudPos.X += (((float)rand() / 32767)-0.5)*25;
						Q_Cloud[NomCloud].CloudPos.Y += (((float)rand() / 32767)-0.5)*25;
						Q_Cloud[NomCloud].CloudPos.Z += (((float)rand() / 32767)-0.5)*25;

						Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)-0.5)*4;

						Q_Cloud[NomCloud].CloudLive = 1;

						NomCloud++;
						if(NomCloud > 4999) NomCloud = 0;
						jet++;
						}
					}
					

				BSparks[helly].TraVec.Y -= BSparks[helly].Gravity*TimeScale;

				BSparks[helly].OldPos = BSparks[helly].Pos;
				geVec3d_MA(&BSparks[helly].Pos, BSparks[helly].Speed*TimeScale, &BSparks[helly].TraVec, &BSparks[helly].Pos);


				if(geWorld_Collision(World,
					 NULL,
					 NULL,
					 &BSparks[helly].OldPos,
					 &BSparks[helly].Pos,
					 GE_CONTENTS_CANNOT_OCCUPY,
					 GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
					 0xffffffff, NULL, NULL,
					 &BSparks[helly].Collision))
					{
					BSparks[helly].Pos = BSparks[helly].OldPos;


					if(BSparks[helly].Bounce < 2)	//2
						{
						BSparks[helly].TraVec = PHY_BounceVector(BSparks[helly].TraVec, BSparks[helly].Collision.Plane.Normal);

						//BETTER
						BSparks[helly].Gravity = BSparks[helly].Gravity * 2;
						BSparks[helly].Speed = BSparks[helly].Speed / 1.5;
						BSparks[helly].Bounce++;
						}
					else
						{
						BSparks[helly].Live = 0;
						BSparks[helly].Pos.Y = -255;

						//### Array Reorder
						K = helly;
						while(K < NomSparks - 1)
							{
							BSparks[K] = BSparks[K+1];
							K++;
							}

						NomSparks--;
						}
					}
				

				BSparks[helly].Type = GE_TEXTURED_POLY;
				BSparks[helly].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
				if(BSparks[helly].SmokeTrail == 0) BSparks[helly].ScaleBIT = 1.0f;
				else BSparks[helly].ScaleBIT = 0.09f;

				geVec3d_Subtract(&player.ViewXForm.Translation, &BSparks[helly].Pos, &BSparks[helly].CameraVector);

				geVec3d_CrossProduct(&BSparks[helly].CameraVector, &BSparks[helly].TraVec, &BSparks[helly].VecUp);

				geVec3d_Normalize(&BSparks[helly].VecUp);

				BSparks[helly].VecSTR = BSparks[helly].TraVec;
				geVec3d_Normalize(&BSparks[helly].TraVec);

				geVec3d_MA(&BSparks[helly].Pos, -BSparks[helly].Scale/16, &BSparks[helly].VecUp, &BSparks[helly].VertF1);
				geVec3d_MA(&BSparks[helly].VertF1, BSparks[helly].Scale/8, &BSparks[helly].VecUp, &BSparks[helly].VertF2);

				geVec3d_MA(&BSparks[helly].VertF2, -BSparks[helly].Scale/8, &BSparks[helly].TraVec, &BSparks[helly].VertM1);
				geVec3d_MA(&BSparks[helly].VertM1, BSparks[helly].Scale/16, &BSparks[helly].VecUp, &BSparks[helly].VertM1);
				geVec3d_MA(&BSparks[helly].VertM1, -BSparks[helly].Scale/4, &BSparks[helly].VecUp, &BSparks[helly].VertM2);

				geVec3d_MA(&BSparks[helly].VertM1, -BSparks[helly].Scale/4, &BSparks[helly].TraVec, &BSparks[helly].VertM4);
				geVec3d_MA(&BSparks[helly].VertM2, -BSparks[helly].Scale/4, &BSparks[helly].TraVec, &BSparks[helly].VertM3);

				BSparks[helly].GravSTR = BSparks[helly].Gravity;
				BSparks[helly].TraVec = BSparks[helly].VecSTR;

				BSparks[helly].TraVec.Y += (BSparks[helly].Gravity*TimeScale);
				BSparks[helly].TraLength = geVec3d_Length(&BSparks[helly].TraVec);
				geVec3d_MA(&BSparks[helly].Pos, -((BSparks[helly].Speed*(BSparks[helly].TraLength*1))*TimeScale), &BSparks[helly].TraVec, &BSparks[helly].VertB1);

				BSparks[helly].Gravity = BSparks[helly].GravSTR;
				BSparks[helly].TraVec = BSparks[helly].VecSTR;

				if(BSparks[helly].Timer > BSparks[helly].TimerGoal) BSparks[helly].AlpFade -= 10;//((((float)rand() / 32767)*10)+5);
				if(BSparks[helly].AlpFade <= 0)
					{
					BSparks[helly].AlpFade = 0;
					BSparks[helly].Live = 0;
					}

					a=0;
					while( a <= 2 )
						{
						b=0;
						while( b <= 3 )
							{
							BSparks[helly].Lvert[a][b].a = BSparks[helly].AlpFade;
							BSparks[helly].Lvert[a][b].b = 255;
							BSparks[helly].Lvert[a][b].g = 255;
							BSparks[helly].Lvert[a][b].r = 255;
							b++;
							}
						a++;
						}

						//## FRONT ##

						BSparks[helly].Lvert[0][0].u = 0;
						BSparks[helly].Lvert[0][0].v = 1;
						BSparks[helly].Lvert[0][0].X = BSparks[helly].VertF1.X;
						BSparks[helly].Lvert[0][0].Y = BSparks[helly].VertF1.Y;
						BSparks[helly].Lvert[0][0].Z = BSparks[helly].VertF1.Z;
							
						BSparks[helly].Lvert[0][1].u = 1;
						BSparks[helly].Lvert[0][1].v = 1;
						BSparks[helly].Lvert[0][1].X = BSparks[helly].VertF2.X;
						BSparks[helly].Lvert[0][1].Y = BSparks[helly].VertF2.Y;
						BSparks[helly].Lvert[0][1].Z = BSparks[helly].VertF2.Z;
							
						BSparks[helly].Lvert[0][2].u = 1;
						BSparks[helly].Lvert[0][2].v = 0;
						BSparks[helly].Lvert[0][2].X = BSparks[helly].VertM1.X;
						BSparks[helly].Lvert[0][2].Y = BSparks[helly].VertM1.Y;
						BSparks[helly].Lvert[0][2].Z = BSparks[helly].VertM1.Z;

						BSparks[helly].Lvert[0][3].u = 0;
						BSparks[helly].Lvert[0][3].v = 0;
						BSparks[helly].Lvert[0][3].X = BSparks[helly].VertM2.X;
						BSparks[helly].Lvert[0][3].Y = BSparks[helly].VertM2.Y;
						BSparks[helly].Lvert[0][3].Z = BSparks[helly].VertM2.Z;

						//## MIDDLE ##

						BSparks[helly].Lvert[1][0].u = 0;
						BSparks[helly].Lvert[1][0].v = 1;
						BSparks[helly].Lvert[1][0].X = BSparks[helly].VertM1.X;
						BSparks[helly].Lvert[1][0].Y = BSparks[helly].VertM1.Y;
						BSparks[helly].Lvert[1][0].Z = BSparks[helly].VertM1.Z;

						BSparks[helly].Lvert[1][1].u = 0;
						BSparks[helly].Lvert[1][1].v = 0;
						BSparks[helly].Lvert[1][1].X = BSparks[helly].VertM2.X;
						BSparks[helly].Lvert[1][1].Y = BSparks[helly].VertM2.Y;
						BSparks[helly].Lvert[1][1].Z = BSparks[helly].VertM2.Z;
							
						BSparks[helly].Lvert[1][2].u = 1;
						BSparks[helly].Lvert[1][2].v = 0;
						BSparks[helly].Lvert[1][2].X = BSparks[helly].VertM3.X;
						BSparks[helly].Lvert[1][2].Y = BSparks[helly].VertM3.Y;
						BSparks[helly].Lvert[1][2].Z = BSparks[helly].VertM3.Z;

						BSparks[helly].Lvert[1][3].u = 1;
						BSparks[helly].Lvert[1][3].v = 1;
						BSparks[helly].Lvert[1][3].X = BSparks[helly].VertM4.X;
						BSparks[helly].Lvert[1][3].Y = BSparks[helly].VertM4.Y;
						BSparks[helly].Lvert[1][3].Z = BSparks[helly].VertM4.Z;

						//## TAIL ##

						BSparks[helly].Lvert[2][0].u = 0;
						BSparks[helly].Lvert[2][0].v = 0;
						BSparks[helly].Lvert[2][0].X = BSparks[helly].VertM3.X;
						BSparks[helly].Lvert[2][0].Y = BSparks[helly].VertM3.Y;
						BSparks[helly].Lvert[2][0].Z = BSparks[helly].VertM3.Z;
							
						BSparks[helly].Lvert[2][1].u = 0;
						BSparks[helly].Lvert[2][1].v = 1;
						BSparks[helly].Lvert[2][1].X = BSparks[helly].VertM4.X;
						BSparks[helly].Lvert[2][1].Y = BSparks[helly].VertM4.Y;
						BSparks[helly].Lvert[2][1].Z = BSparks[helly].VertM4.Z;
							
						BSparks[helly].Lvert[2][2].u = 1;
						BSparks[helly].Lvert[2][2].v = 0.5;
						BSparks[helly].Lvert[2][2].X = BSparks[helly].VertB1.X;
						BSparks[helly].Lvert[2][2].Y = BSparks[helly].VertB1.Y;
						BSparks[helly].Lvert[2][2].Z = BSparks[helly].VertB1.Z;


				if(BSparks[helly].SmokeTrail == 0)
					{
					geWorld_AddPolyOnce(World, &BSparks[helly].Lvert[0][0], 4, Spark, BSparks[helly].Type, BSparks[helly].RenderFlags, BSparks[helly].ScaleBIT);
					geWorld_AddPolyOnce(World, &BSparks[helly].Lvert[1][0], 4, Sparkmid, BSparks[helly].Type, BSparks[helly].RenderFlags, BSparks[helly].ScaleBIT);
					geWorld_AddPolyOnce(World, &BSparks[helly].Lvert[2][0], 3, Sparktail, BSparks[helly].Type, BSparks[helly].RenderFlags, BSparks[helly].ScaleBIT);
					}
				//else
				//	{
					//geWorld_AddPolyOnce(World, &BSparks[helly].Lvert[0][0], 1, radfire[BSparks[helly].MatCnt], GE_TEXTURED_POINT, BSparks[helly].RenderFlags, BSparks[helly].ScaleBIT);
					//geWorld_AddPolyOnce(World, &BSparks[helly].Lvert[1][0], 1, radfire[BSparks[helly].MatCnt], GE_TEXTURED_POINT, BSparks[helly].RenderFlags, BSparks[helly].ScaleBIT);
					//geWorld_AddPolyOnce(World, &BSparks[helly].Lvert[2][0], 1, radfire[BSparks[helly].MatCnt], GE_TEXTURED_POINT, BSparks[helly].RenderFlags, BSparks[helly].ScaleBIT);
					
					//if(BSparks[helly].MatCnt+1 <= 15) BSparks[helly].MatCnt += 1;
					//else BSparks[helly].MatCnt = 10;
				//	}

				}

			helly += 1;
			}
		}



	//########  - 3D Power Flash System -  ########//

	if(NomPowerFlash > 0)
		{
		helly = 0;
		while(helly < NomPowerFlash)
			{
			if(Q_PowerFlash[helly].Live == 1)
				{
				Q_PowerFlash[helly].Timer += 2;

				Q_PowerFlash[helly].Scale = 300;

				if(Q_PowerFlash[helly].Speed - (2 * TimeScale) > 5) Q_PowerFlash[helly].Speed -= (2 * TimeScale);
				else if(Q_PowerFlash[helly].Speed != 0) Q_PowerFlash[helly].Speed = 5;

				Q_PowerFlash[helly].TraVec.Y -= Q_PowerFlash[helly].Gravity*TimeScale;

				Q_PowerFlash[helly].OldPos = Q_PowerFlash[helly].Pos;
				geVec3d_MA(&Q_PowerFlash[helly].Pos, Q_PowerFlash[helly].Speed*TimeScale, &Q_PowerFlash[helly].TraVec, &Q_PowerFlash[helly].Pos);


				if(geWorld_Collision(World,
					 NULL,
					 NULL,
					 &Q_PowerFlash[helly].OldPos,
					 &Q_PowerFlash[helly].Pos,
					 GE_CONTENTS_CANNOT_OCCUPY,
					 GE_COLLIDE_MODELS /*| GE_COLLIDE_ACTORS*/,
					 0xffffffff, NULL, NULL,
					 &Q_PowerFlash[helly].Collision))
					{
					Q_PowerFlash[helly].Pos = Q_PowerFlash[helly].OldPos;

					Q_PowerFlash[helly].Speed = 0;

					/*if(Q_PowerFlash[helly].Bounce < 2)	//2
						{
						Q_PowerFlash[helly].TraVec = PHY_BounceVector(Q_PowerFlash[helly].TraVec, Q_PowerFlash[helly].Collision.Plane.Normal);

						//BETTER
						Q_PowerFlash[helly].Gravity = Q_PowerFlash[helly].Gravity * 2;
						Q_PowerFlash[helly].Speed = Q_PowerFlash[helly].Speed / 1.5;
						Q_PowerFlash[helly].Bounce++;
						}
					else
						{
						Q_PowerFlash[helly].Live = 0;
						Q_PowerFlash[helly].Pos.Y = -255;

						//### Array Reorder
						K = helly;
						while(K < NomSparks - 1)
							{
							Q_PowerFlash[K] = Q_PowerFlash[K+1];
							K++;
							}

						NomSparks--;
						}*/
					}
				

				Q_PowerFlash[helly].Type = GE_TEXTURED_POLY;
				Q_PowerFlash[helly].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
				if(Q_PowerFlash[helly].SmokeTrail == 0) Q_PowerFlash[helly].ScaleBIT = 1.0f;
				else Q_PowerFlash[helly].ScaleBIT = 0.09f;

				geVec3d_Subtract(&player.ViewXForm.Translation, &Q_PowerFlash[helly].Pos, &Q_PowerFlash[helly].CameraVector);

				geVec3d_CrossProduct(&Q_PowerFlash[helly].CameraVector, &Q_PowerFlash[helly].TraVec, &Q_PowerFlash[helly].VecUp);

				geVec3d_Normalize(&Q_PowerFlash[helly].VecUp);

				Q_PowerFlash[helly].VecSTR = Q_PowerFlash[helly].TraVec;
				geVec3d_Normalize(&Q_PowerFlash[helly].TraVec);

				geVec3d_MA(&Q_PowerFlash[helly].Pos, -Q_PowerFlash[helly].Scale/4, &Q_PowerFlash[helly].VecUp, &Q_PowerFlash[helly].VertF1);
				geVec3d_MA(&Q_PowerFlash[helly].VertF1, Q_PowerFlash[helly].Scale/4, &Q_PowerFlash[helly].VecUp, &Q_PowerFlash[helly].VertF2);

				geVec3d_MA(&Q_PowerFlash[helly].VertF2, -(Q_PowerFlash[helly].Scale/6) + ((((float)rand() / 32767)*50)+5), &Q_PowerFlash[helly].TraVec, &Q_PowerFlash[helly].VertM1);
				geVec3d_MA(&Q_PowerFlash[helly].VertM1, Q_PowerFlash[helly].Scale/4, &Q_PowerFlash[helly].VecUp, &Q_PowerFlash[helly].VertM1);
				geVec3d_MA(&Q_PowerFlash[helly].VertM1, -Q_PowerFlash[helly].Scale/4, &Q_PowerFlash[helly].VecUp, &Q_PowerFlash[helly].VertM2);

				geVec3d_MA(&Q_PowerFlash[helly].VertM1, -Q_PowerFlash[helly].Scale/4, &Q_PowerFlash[helly].TraVec, &Q_PowerFlash[helly].VertM4);
				geVec3d_MA(&Q_PowerFlash[helly].VertM2, -Q_PowerFlash[helly].Scale/4, &Q_PowerFlash[helly].TraVec, &Q_PowerFlash[helly].VertM3);

				Q_PowerFlash[helly].GravSTR = Q_PowerFlash[helly].Gravity;
				Q_PowerFlash[helly].TraVec = Q_PowerFlash[helly].VecSTR;

				Q_PowerFlash[helly].TraVec.Y += (Q_PowerFlash[helly].Gravity*TimeScale);
				Q_PowerFlash[helly].TraLength = geVec3d_Length(&Q_PowerFlash[helly].TraVec);
				geVec3d_MA(&Q_PowerFlash[helly].VertM1, -((Q_PowerFlash[helly].Speed*(Q_PowerFlash[helly].TraLength))*TimeScale), &Q_PowerFlash[helly].TraVec, &Q_PowerFlash[helly].VertM1);
				geVec3d_MA(&Q_PowerFlash[helly].VertM2, -((Q_PowerFlash[helly].Speed*(Q_PowerFlash[helly].TraLength))*TimeScale), &Q_PowerFlash[helly].TraVec, &Q_PowerFlash[helly].VertM2);

				Q_PowerFlash[helly].Gravity = Q_PowerFlash[helly].GravSTR;
				Q_PowerFlash[helly].TraVec = Q_PowerFlash[helly].VecSTR;

				Q_PowerFlash[helly].TimerGoal = 0;

				if(Q_PowerFlash[helly].Timer > Q_PowerFlash[helly].TimerGoal) Q_PowerFlash[helly].AlpFade -= (((float)rand() / 32767)*30) * TimeScale;	//3.5		//((((float)rand() / 32767)*10)+5);
				if(Q_PowerFlash[helly].AlpFade <= 0)
					{
					Q_PowerFlash[helly].AlpFade = 0;
					Q_PowerFlash[helly].Live = 0;
					}

					a=0;
					while( a <= 2 )
						{
						b=0;
						while( b <= 3 )
							{
							Q_PowerFlash[helly].Lvert[a][b].a = Q_PowerFlash[helly].AlpFade;
							Q_PowerFlash[helly].Lvert[a][b].b = Q_PowerFlash[helly].EffBLUE;
							Q_PowerFlash[helly].Lvert[a][b].g = Q_PowerFlash[helly].EffGREEN;
							Q_PowerFlash[helly].Lvert[a][b].r = Q_PowerFlash[helly].EffRED;
							b++;
							}
						a++;
						}

						//## FRONT ##

						Q_PowerFlash[helly].Lvert[0][0].u = 0;
						Q_PowerFlash[helly].Lvert[0][0].v = 1;
						Q_PowerFlash[helly].Lvert[0][0].X = Q_PowerFlash[helly].VertF1.X;
						Q_PowerFlash[helly].Lvert[0][0].Y = Q_PowerFlash[helly].VertF1.Y;
						Q_PowerFlash[helly].Lvert[0][0].Z = Q_PowerFlash[helly].VertF1.Z;
							
						Q_PowerFlash[helly].Lvert[0][1].u = 1;
						Q_PowerFlash[helly].Lvert[0][1].v = 1;
						Q_PowerFlash[helly].Lvert[0][1].X = Q_PowerFlash[helly].VertF2.X;
						Q_PowerFlash[helly].Lvert[0][1].Y = Q_PowerFlash[helly].VertF2.Y;
						Q_PowerFlash[helly].Lvert[0][1].Z = Q_PowerFlash[helly].VertF2.Z;
							
						Q_PowerFlash[helly].Lvert[0][2].u = 1;
						Q_PowerFlash[helly].Lvert[0][2].v = 0;
						Q_PowerFlash[helly].Lvert[0][2].X = Q_PowerFlash[helly].VertM1.X;
						Q_PowerFlash[helly].Lvert[0][2].Y = Q_PowerFlash[helly].VertM1.Y;
						Q_PowerFlash[helly].Lvert[0][2].Z = Q_PowerFlash[helly].VertM1.Z;

						Q_PowerFlash[helly].Lvert[0][3].u = 0;
						Q_PowerFlash[helly].Lvert[0][3].v = 0;
						Q_PowerFlash[helly].Lvert[0][3].X = Q_PowerFlash[helly].VertM2.X;
						Q_PowerFlash[helly].Lvert[0][3].Y = Q_PowerFlash[helly].VertM2.Y;
						Q_PowerFlash[helly].Lvert[0][3].Z = Q_PowerFlash[helly].VertM2.Z;

						//## MIDDLE ##

						Q_PowerFlash[helly].Lvert[1][0].u = 0;
						Q_PowerFlash[helly].Lvert[1][0].v = 1;
						Q_PowerFlash[helly].Lvert[1][0].X = Q_PowerFlash[helly].VertM1.X;
						Q_PowerFlash[helly].Lvert[1][0].Y = Q_PowerFlash[helly].VertM1.Y;
						Q_PowerFlash[helly].Lvert[1][0].Z = Q_PowerFlash[helly].VertM1.Z;

						Q_PowerFlash[helly].Lvert[1][1].u = 0;
						Q_PowerFlash[helly].Lvert[1][1].v = 0;
						Q_PowerFlash[helly].Lvert[1][1].X = Q_PowerFlash[helly].VertM2.X;
						Q_PowerFlash[helly].Lvert[1][1].Y = Q_PowerFlash[helly].VertM2.Y;
						Q_PowerFlash[helly].Lvert[1][1].Z = Q_PowerFlash[helly].VertM2.Z;
							
						Q_PowerFlash[helly].Lvert[1][2].u = 1;
						Q_PowerFlash[helly].Lvert[1][2].v = 0;
						Q_PowerFlash[helly].Lvert[1][2].X = Q_PowerFlash[helly].VertM3.X;
						Q_PowerFlash[helly].Lvert[1][2].Y = Q_PowerFlash[helly].VertM3.Y;
						Q_PowerFlash[helly].Lvert[1][2].Z = Q_PowerFlash[helly].VertM3.Z;

						Q_PowerFlash[helly].Lvert[1][3].u = 1;
						Q_PowerFlash[helly].Lvert[1][3].v = 1;
						Q_PowerFlash[helly].Lvert[1][3].X = Q_PowerFlash[helly].VertM4.X;
						Q_PowerFlash[helly].Lvert[1][3].Y = Q_PowerFlash[helly].VertM4.Y;
						Q_PowerFlash[helly].Lvert[1][3].Z = Q_PowerFlash[helly].VertM4.Z;

						//## TAIL ##

						Q_PowerFlash[helly].Lvert[2][0].u = 0;
						Q_PowerFlash[helly].Lvert[2][0].v = 1;
						Q_PowerFlash[helly].Lvert[2][0].X = Q_PowerFlash[helly].VertM3.X;
						Q_PowerFlash[helly].Lvert[2][0].Y = Q_PowerFlash[helly].VertM3.Y;
						Q_PowerFlash[helly].Lvert[2][0].Z = Q_PowerFlash[helly].VertM3.Z;
							
						Q_PowerFlash[helly].Lvert[2][1].u = 1;
						Q_PowerFlash[helly].Lvert[2][1].v = 0;
						Q_PowerFlash[helly].Lvert[2][1].X = Q_PowerFlash[helly].VertM4.X;
						Q_PowerFlash[helly].Lvert[2][1].Y = Q_PowerFlash[helly].VertM4.Y;
						Q_PowerFlash[helly].Lvert[2][1].Z = Q_PowerFlash[helly].VertM4.Z;
							
						Q_PowerFlash[helly].Lvert[2][2].u = 1;
						Q_PowerFlash[helly].Lvert[2][2].v = 1;
						Q_PowerFlash[helly].Lvert[2][2].X = Q_PowerFlash[helly].VertB1.X;
						Q_PowerFlash[helly].Lvert[2][2].Y = Q_PowerFlash[helly].VertB1.Y;
						Q_PowerFlash[helly].Lvert[2][2].Z = Q_PowerFlash[helly].VertB1.Z;


				//if(Q_PowerFlash[helly].SmokeTrail == 0)
				//	{
				//geWorld_AddPolyOnce(World, &Q_PowerFlash[helly].Lvert[0][0], 4, flame[Q_PowerFlash[helly].MatCNT], Q_PowerFlash[helly].Type, Q_PowerFlash[helly].RenderFlags, Q_PowerFlash[helly].ScaleBIT);
				//geWorld_AddPolyOnce(World, &Q_PowerFlash[helly].Lvert[1][0], 4, flame[Q_PowerFlash[helly].MatCNT], Q_PowerFlash[helly].Type, Q_PowerFlash[helly].RenderFlags, Q_PowerFlash[helly].ScaleBIT);
				//geWorld_AddPolyOnce(World, &Q_PowerFlash[helly].Lvert[2][0], 3, flame[Q_PowerFlash[helly].MatCNT], Q_PowerFlash[helly].Type, Q_PowerFlash[helly].RenderFlags, Q_PowerFlash[helly].ScaleBIT);
				//	}
				//else
				//	{
					//geWorld_AddPolyOnce(World, &Q_PowerFlash[helly].Lvert[0][0], 1, radfire[Q_PowerFlash[helly].MatCnt], GE_TEXTURED_POINT, Q_PowerFlash[helly].RenderFlags, Q_PowerFlash[helly].ScaleBIT);
					//geWorld_AddPolyOnce(World, &Q_PowerFlash[helly].Lvert[1][0], 1, radfire[Q_PowerFlash[helly].MatCnt], GE_TEXTURED_POINT, Q_PowerFlash[helly].RenderFlags, Q_PowerFlash[helly].ScaleBIT);
					//geWorld_AddPolyOnce(World, &Q_PowerFlash[helly].Lvert[2][0], 1, radfire[Q_PowerFlash[helly].MatCnt], GE_TEXTURED_POINT, Q_PowerFlash[helly].RenderFlags, Q_PowerFlash[helly].ScaleBIT);
					
					//if(Q_PowerFlash[helly].MatCnt+1 <= 15) Q_PowerFlash[helly].MatCnt += 1;
					//else Q_PowerFlash[helly].MatCnt = 10;
				//	}

				Q_PowerFlash[helly].VertF1 = Q_PowerFlash[helly].Pos;

				geVec3d_MA(&Q_PowerFlash[helly].VertF1, -Q_PowerFlash[helly].Speed * (Q_PowerFlash[helly].Size/20), &Q_PowerFlash[helly].TraVec, &Q_PowerFlash[helly].VertM1);

				DrawLaser(World, &Q_PowerFlash[helly].VertF1, &Q_PowerFlash[helly].VertM1, &player.ViewXForm.Translation, Q_PowerFlash[helly].Size, flame[Q_PowerFlash[helly].MatCNT], Q_PowerFlash[helly].AlpFade, 255, 255, 255, 0);


				player.ATTCoronaLvert.X = Q_PowerFlash[helly].Pos.X;
				player.ATTCoronaLvert.Y = Q_PowerFlash[helly].Pos.Y;
				player.ATTCoronaLvert.Z = Q_PowerFlash[helly].Pos.Z;
				player.ATTCoronaLvert.r = 255;
				player.ATTCoronaLvert.g = 255;
				player.ATTCoronaLvert.b = 255;
				player.ATTCoronaLvert.a = Q_PowerFlash[helly].AlpFade/3;

				geWorld_AddPolyOnce(World, &player.ATTCoronaLvert, 1, SparkCorona[player.ATTCoronaMatt], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 0.14);



				if(TIME > Q_PowerFlash[helly].MatCNTtimer + 1)
					{
					if(Q_PowerFlash[helly].MatCNT + 1 < 16)
						{
						Q_PowerFlash[helly].MatCNT++;
						Q_PowerFlash[helly].MatCNTtimer = TIME;
						}
					else Q_PowerFlash[helly].MatCNT = 6;
					}
				}

			helly += 1;
			}
		}


		//########  - 3D Heal Sparks System -  ########//

	if(NetworkOption != 1)
		{
		if(NomHSpark > 0)
			{
			helly = 0;
			while(helly < NomHSpark)
				{
				if(HealSparks[helly].Live == 1)
					{
					switch(HealSparks[helly].HTYPE)
						{
						case 0:	//Heal Sparks
							{
							if(HealSparks[helly].Released == 1)
								{
								//#### Show Target Locks
								if(HealSparks[helly].DisplayAlpha - 5 > 10) HealSparks[helly].DisplayAlpha -= 5;
								else HealSparks[helly].DisplayAlpha = 10;

								if(HealSparks[helly].DisplayColor - 25 > 0) HealSparks[helly].DisplayColor -= 25;
								else HealSparks[helly].DisplayColor = 0;

								if(HealSparks[helly].DisplayScale + 0.05 < 0.5) HealSparks[helly].DisplayScale += 0.06;
								else HealSparks[helly].DisplayScale = 0.5;

								if(HealSparks[helly].Absorbed == 0)
									{
									if(HealSparks[helly].ScaleSTR + 1 < 33) HealSparks[helly].ScaleSTR += 1;
									else HealSparks[helly].ScaleSTR = 33;
									}
								
								if(HealSparks[helly].HealTarget == 250)
									{
									HealSparks[helly].LaserLV.a = HealSparks[helly].DisplayAlpha;
									HealSparks[helly].LaserLV.r = 0;
									HealSparks[helly].LaserLV.g = 255;
									HealSparks[helly].LaserLV.b = 255;
									HealSparks[helly].LaserLV.X = playact.ActorXform.Translation.X;
									HealSparks[helly].LaserLV.Y = playact.ActorXform.Translation.Y + 65;
									HealSparks[helly].LaserLV.Z = playact.ActorXform.Translation.Z;

									geWorld_AddPolyOnce(World, &HealSparks[helly].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, HealSparks[helly].DisplayScale);
									}
								else
									{
									HealSparks[helly].LaserLV.a = HealSparks[helly].DisplayAlpha;
									HealSparks[helly].LaserLV.r = 0;
									HealSparks[helly].LaserLV.g = 255;
									HealSparks[helly].LaserLV.b = 255;
									HealSparks[helly].LaserLV.X = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.X;
									HealSparks[helly].LaserLV.Y = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.Y + 65;
									HealSparks[helly].LaserLV.Z = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.Z;

									geWorld_AddPolyOnce(World, &HealSparks[helly].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, HealSparks[helly].DisplayScale);
									}

								if(HealSparks[helly].HealTarget == 250)
									{
									HealSparks[helly].TargetVec = playact.ActorXform.Translation;
									HealSparks[helly].TargetVec.Y += 65;
									}
								else
									{
									HealSparks[helly].TargetVec = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation;
									HealSparks[helly].TargetVec.Y += 65;
									}

								geVec3d_Subtract(&HealSparks[helly].TargetVec, &HealSparks[helly].Pos, &HealSparks[helly].TargetVec);
								geVec3d_Normalize(&HealSparks[helly].TargetVec);

								if(HealSparks[helly].ActorID == 250)
									{
									HealSparks[helly].TraVec.X += ( ( HealSparks[helly].TargetVec.X - HealSparks[helly].TraVec.X ) / (1.3 + (13 * (1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[1].Accuracy / 5000))))) *TimeScale;
									HealSparks[helly].TraVec.Y += ( ( HealSparks[helly].TargetVec.Y - HealSparks[helly].TraVec.Y ) / (1.7 + (31.2 * (1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[1].Accuracy / 5000))))) *TimeScale;
									HealSparks[helly].TraVec.Z += ( ( HealSparks[helly].TargetVec.Z - HealSparks[helly].TraVec.Z ) / (1.3 + (13 * (1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[1].Accuracy / 5000))))) *TimeScale;
									HealSparks[helly].TraVec.Y += HealSparks[helly].DownSpeed*TimeScale;
									}
								else
									{
									HealSparks[helly].TraVec.X += ( ( HealSparks[helly].TargetVec.X - HealSparks[helly].TraVec.X ) / (1.3 + (13 * (1 - (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[1].Accuracy / 5000))))) *TimeScale;	//9
									HealSparks[helly].TraVec.Y += ( ( HealSparks[helly].TargetVec.Y - HealSparks[helly].TraVec.Y ) / (1.7 + (31.2 * (1 - (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[1].Accuracy / 5000))))) *TimeScale;	//18
									HealSparks[helly].TraVec.Z += ( ( HealSparks[helly].TargetVec.Z - HealSparks[helly].TraVec.Z ) / (1.3 + (13 * (1 - (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[1].Accuracy / 5000))))) *TimeScale;	//9
									HealSparks[helly].TraVec.Y += HealSparks[helly].DownSpeed*TimeScale;
									}

								HealSparks[helly].OldPos = HealSparks[helly].Pos;
								if(HealSparks[helly].Absorbed == 0) geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Speed*TimeScale, &HealSparks[helly].TraVec, &HealSparks[helly].Pos);

								//Apply Gravity
								HealSparks[helly].DownSpeed -= HealSparks[helly].Gravity*TimeScale;
								}
							else
								{
								if(HealSparks[helly].ActorID == 250)
									{
									warp = 0;
									SHADOW = 0;
									while(SHADOW < player.Cleric.HSparkNOM)
										{
										if(player.Cleric.HSparkID[SHADOW] == helly) warp++;
										SHADOW++;
										}

									if(player.Aposestate != 200 || warp == 0) HealSparks[helly].Released = 1;
									}
								else
									{
									if((Forge[HealSparks[helly].ActorID].Aposestate != 200) || ((Forge[HealSparks[helly].ActorID].Cleric.HSparkID[0] != helly) && (Forge[HealSparks[helly].ActorID].Cleric.HSparkID[1] != helly) && (Forge[HealSparks[helly].ActorID].Cleric.HSparkID[2] != helly)))
										{ HealSparks[helly].Released = 1; }

									warp = 0;
									SHADOW = 0;
									while(SHADOW < Forge[HealSparks[helly].ActorID].Cleric.HSparkNOM)
										{
										if(Forge[HealSparks[helly].ActorID].Cleric.HSparkID[SHADOW] == helly) warp++;
										SHADOW++;
										}

									if(Forge[HealSparks[helly].ActorID].Aposestate != 200 || warp == 0) HealSparks[helly].Released = 1;
									}
								}

							if(HealSparks[helly].Absorbed > 0)
								{
								if(HealSparks[helly].Absorbed == 1)
									{
									HealSparks[helly].Absorbed = 2;
									HealSparks[helly].AvatarLightB = 100;
									}

								if(HealSparks[helly].Absorbed > 0 && HealSparks[helly].Absorbed < 3)
									{
									HealSparks[helly].AvatarINCB += 20;

									//### Explode the Heal Spark
									if(HealSparks[helly].AlpFade <= 0 && HealSparks[helly].LightON == 1)
										{
										HealSparks[helly].AlpFade = 0;
										HealSparks[helly].LightON = 0;
										geWorld_RemoveLight(World, HealSparks[helly].Light);
										}
									else
										{
										HealSparks[helly].ScaleSTR += 10;
										HealSparks[helly].AlpFade -= 25;
										}

									if(HealSparks[helly].ActorID == 250)
										{
										if(HealSparks[helly].HealTarget == 250)
											{
											player.HB_Health += 15 + (500 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[1].Potency / 5000));
											if(player.HB_Health > player.HB_MaxHealth) player.HB_Health = player.HB_MaxHealth;
											}
										else
											{
											Forge[HealSparks[helly].HealTarget].HB_Health += 15 + (500 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[1].Potency / 5000));
											if(Forge[HealSparks[helly].HealTarget].HB_Health > Forge[HealSparks[helly].HealTarget].HB_MaxHealth) Forge[HealSparks[helly].HealTarget].HB_Health = Forge[HealSparks[helly].HealTarget].HB_MaxHealth;
											}
										}
									else
										{
										if(HealSparks[helly].HealTarget == 250)
											{
											player.HB_Health += 15 + (500 * (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[1].Potency / 5000));
											if(player.HB_Health > player.HB_MaxHealth) player.HB_Health = player.HB_MaxHealth;
											}
										else
											{
											Forge[HealSparks[helly].HealTarget].HB_Health += 15 + (500 * (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[1].Potency / 5000));
											if(Forge[HealSparks[helly].HealTarget].HB_Health > Forge[HealSparks[helly].HealTarget].HB_MaxHealth) Forge[HealSparks[helly].HealTarget].HB_Health = Forge[HealSparks[helly].HealTarget].HB_MaxHealth;
											}
										}

									if(HealSparks[helly].AvatarINCB > 255 && HealSparks[helly].LightBlueFULL == 0)
										{
										HealSparks[helly].AvatarINCB = 255;
										HealSparks[helly].LightBlueFULL = 1;
										}

									if(HealSparks[helly].HealTarget == 250)
										{
										geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE);
										}
									else
										{
										geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE);
										}
									
									if(HealSparks[helly].LightBlueFULL == 1)
										{
										HealSparks[helly].Absorbed = 3;
										}
									}

								if(HealSparks[helly].Absorbed == 3)
									{
									if((HealSparks[helly].AvatarINCB < HealSparks[helly].AvatarLightB) && (HealSparks[helly].LightBlueFULL == 1))
										{
										HealSparks[helly].AvatarINCB = HealSparks[helly].AvatarLightB;
										HealSparks[helly].LightBlueFULL = 0;
										}
									else if(HealSparks[helly].LightBlueFULL == 1) HealSparks[helly].AvatarINCB -= 20;


									if(HealSparks[helly].HealTarget == 250)
										{
										geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE);
										}
									else
										{
										geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE);
										}
									
									if(HealSparks[helly].LightBlueFULL == 0)
										{
										if(HealSparks[helly].HealTarget == 250)
											{
											geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarLightB,GE_FALSE,8,NULL,GE_TRUE);
											}
										else
											{
											geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarLightB,GE_FALSE,8,NULL,GE_TRUE);
											}

										//Live to Zero need to reorder array here
										HealSparks[helly].Live = 0;
										if(HealSparks[helly].LightON == 1) geWorld_RemoveLight(World, HealSparks[helly].Light);
										HealSparks[helly].LightON = 0;

										//### Array Reorder
										K = helly;
										while(K < NomHSpark - 1)
											{
											HealSparks[K] = HealSparks[K+1];
											K++;
											}

										NomHSpark--;
										}
									}

								if(HealSparks[helly].Absorbed == 4)
									{
									if(HealSparks[helly].AlpFade <= 0 && HealSparks[helly].LightON == 1)
										{
										HealSparks[helly].AlpFade = 0;
										HealSparks[helly].LightON = 0;
										geWorld_RemoveLight(World, HealSparks[helly].Light);
										HealSparks[helly].Absorbed = 5;
										}
									else
										{
										HealSparks[helly].ScaleSTR += 10;
										HealSparks[helly].AlpFade -= 25;
										}
									}

								if(HealSparks[helly].Absorbed == 5)
									{
									//Live to Zero need to reorder array here
									HealSparks[helly].Live = 0;
									if(HealSparks[helly].LightON == 1) geWorld_RemoveLight(World, HealSparks[helly].Light);
									HealSparks[helly].LightON = 0;

									//### Array Reorder
									K = helly;
									while(K < NomHSpark - 1)
										{
										HealSparks[K] = HealSparks[K+1];
										K++;
										}

									NomHSpark--;
									}
								}

							HealSparks[helly].CNTR += TimeScale;

							if(HealSparks[helly].CNTR > 1)
								{
								HealSparks[helly].CNTR = 0;

								jet=0;
								while(jet < 2 && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
									Q_PntSprite[NomPntSprite].Scale = 0.015f;
									Q_PntSprite[NomPntSprite].PartType = 57;

									Q_PntSprite[NomPntSprite].IR = 255;
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 75;
									Q_PntSprite[NomPntSprite].Speed = 0.1;
									Q_PntSprite[NomPntSprite].Pos = HealSparks[helly].Pos;

									Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

									Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

									Q_PntSprite[NomPntSprite].ActorID = HealSparks[helly].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}
								}

							if(HealSparks[helly].LightON == 1) geWorld_SetLightAttributes(World, HealSparks[helly].Light, &HealSparks[helly].Pos, &HealSparks[helly].LightColor, 100, GE_TRUE);
							}break;

						case 1:	//Energy Grab Sparks
							{
							if(HealSparks[helly].Released == 1)
								{
								//#### Show Target Locks
								if(HealSparks[helly].DisplayAlpha - 5 > 10) HealSparks[helly].DisplayAlpha -= 5;
								else HealSparks[helly].DisplayAlpha = 10;

								if(HealSparks[helly].DisplayColor - 25 > 0) HealSparks[helly].DisplayColor -= 25;
								else HealSparks[helly].DisplayColor = 0;

								if(HealSparks[helly].DisplayScale + 0.05 < 0.5) HealSparks[helly].DisplayScale += 0.06;
								else HealSparks[helly].DisplayScale = 0.9;

								if(HealSparks[helly].Absorbed == 0)
									{
									if(HealSparks[helly].ScaleSTR + 1 < 33) HealSparks[helly].ScaleSTR += 1;
									else HealSparks[helly].ScaleSTR = 33;
									}
								
								if(HealSparks[helly].HealTarget == 250)
									{
									HealSparks[helly].LaserLV.a = HealSparks[helly].DisplayAlpha;
									HealSparks[helly].LaserLV.r = 0;
									HealSparks[helly].LaserLV.g = 255;
									HealSparks[helly].LaserLV.b = 255;
									HealSparks[helly].LaserLV.X = playact.ActorXform.Translation.X;
									HealSparks[helly].LaserLV.Y = playact.ActorXform.Translation.Y + 65;
									HealSparks[helly].LaserLV.Z = playact.ActorXform.Translation.Z;

									geWorld_AddPolyOnce(World, &HealSparks[helly].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, HealSparks[helly].DisplayScale);
									}
								else
									{
									HealSparks[helly].LaserLV.a = HealSparks[helly].DisplayAlpha;
									HealSparks[helly].LaserLV.r = 0;
									HealSparks[helly].LaserLV.g = 255;
									HealSparks[helly].LaserLV.b = 255;
									HealSparks[helly].LaserLV.X = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.X;
									HealSparks[helly].LaserLV.Y = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.Y + 65;
									HealSparks[helly].LaserLV.Z = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.Z;

									geWorld_AddPolyOnce(World, &HealSparks[helly].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, HealSparks[helly].DisplayScale);
									}


								if(HealSparks[helly].HealTarget == 250)
									{
									HealSparks[helly].TargetVec = playact.ActorXform.Translation;
									HealSparks[helly].TargetVec.Y += 65;
									}
								else
									{
									HealSparks[helly].TargetVec = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation;
									HealSparks[helly].TargetVec.Y += 65;
									}

								geVec3d_Subtract(&HealSparks[helly].TargetVec, &HealSparks[helly].Pos, &HealSparks[helly].TargetVec);
								geVec3d_Normalize(&HealSparks[helly].TargetVec);

								if(HealSparks[helly].ActorID == 250)
									{
									HealSparks[helly].TraVec.X += ( ( HealSparks[helly].TargetVec.X - HealSparks[helly].TraVec.X ) / (1.3 + (13 * (1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[0].Accuracy / 5000))))) *TimeScale;
									HealSparks[helly].TraVec.Y += ( ( HealSparks[helly].TargetVec.Y - HealSparks[helly].TraVec.Y ) / (1.7 + (31.2 * (1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[0].Accuracy / 5000))))) *TimeScale;
									HealSparks[helly].TraVec.Z += ( ( HealSparks[helly].TargetVec.Z - HealSparks[helly].TraVec.Z ) / (1.3 + (13 * (1 - (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[0].Accuracy / 5000))))) *TimeScale;
									HealSparks[helly].TraVec.Y += HealSparks[helly].DownSpeed*TimeScale;
									}
								else
									{
									HealSparks[helly].TraVec.X += ( ( HealSparks[helly].TargetVec.X - HealSparks[helly].TraVec.X ) / (1.3 + (13 * (1 - (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[0].Accuracy / 5000))))) *TimeScale;	//9
									HealSparks[helly].TraVec.Y += ( ( HealSparks[helly].TargetVec.Y - HealSparks[helly].TraVec.Y ) / (1.7 + (31.2 * (1 - (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[0].Accuracy / 5000))))) *TimeScale;	//18
									HealSparks[helly].TraVec.Z += ( ( HealSparks[helly].TargetVec.Z - HealSparks[helly].TraVec.Z ) / (1.3 + (13 * (1 - (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[0].Accuracy / 5000))))) *TimeScale;	//9
									HealSparks[helly].TraVec.Y += HealSparks[helly].DownSpeed*TimeScale;
									}

								HealSparks[helly].OldPos = HealSparks[helly].Pos;
								if(HealSparks[helly].Absorbed == 0) geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Speed*TimeScale, &HealSparks[helly].TraVec, &HealSparks[helly].Pos);

								//Apply Gravity
								HealSparks[helly].DownSpeed -= HealSparks[helly].Gravity*TimeScale;
								}
							else
								{
								if(HealSparks[helly].ActorID == 250)
									{
									warp = 0;
									SHADOW = 0;
									while(SHADOW < player.Cleric.HSparkNOM)
										{
										if(player.Cleric.HSparkID[SHADOW] == helly) warp++;
										SHADOW++;
										}

									if(player.Aposestate != 202 || warp == 0) HealSparks[helly].Released = 1;
									}
								else
									{
									if((Forge[HealSparks[helly].ActorID].Aposestate != 200) || ((Forge[HealSparks[helly].ActorID].Cleric.HSparkID[0] != helly) && (Forge[HealSparks[helly].ActorID].Cleric.HSparkID[1] != helly) && (Forge[HealSparks[helly].ActorID].Cleric.HSparkID[2] != helly)))
										{ HealSparks[helly].Released = 1; }

									warp = 0;
									SHADOW = 0;
									while(SHADOW < Forge[HealSparks[helly].ActorID].Cleric.HSparkNOM)
										{
										if(Forge[HealSparks[helly].ActorID].Cleric.HSparkID[SHADOW] == helly) warp++;
										SHADOW++;
										}

									if(Forge[HealSparks[helly].ActorID].Aposestate != 202 || warp == 0) HealSparks[helly].Released = 1;
									}
								}

							if(HealSparks[helly].Absorbed > 0)
								{
								if(HealSparks[helly].Absorbed == 1)
									{
									HealSparks[helly].Absorbed = 2;
									HealSparks[helly].AvatarLightR = 190;
									HealSparks[helly].AvatarLightG = 145;
									HealSparks[helly].AvatarLightB = 100;
									}

								if(HealSparks[helly].Absorbed > 0 && HealSparks[helly].Absorbed < 3)
									{
									HealSparks[helly].AvatarINCR -= 20;
									HealSparks[helly].AvatarINCG -= 20;
									HealSparks[helly].AvatarINCB -= 20;
									
									//### Explode the Heal Spark
									if(HealSparks[helly].AlpFade <= 0)
										{
										HealSparks[helly].AlpFade = 0;
										}
									else
										{
										HealSparks[helly].ScaleSTR += 10;
										HealSparks[helly].AlpFade -= 25;
										}

									//#### SPARK FUNCTIONALITY
									if(HealSparks[helly].ActorID == 250)
										{
										if(HealSparks[helly].HealTarget != 250)
											{
											player.HB_Energy += 15 + (350 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[0].Potency / 5000));
											if(player.HB_Energy > player.HB_MaxEnergy) player.HB_Energy = player.HB_MaxEnergy;

											Forge[HealSparks[helly].HealTarget].HB_Energy -= 15 + (350 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[0].Potency / 5000));
											if(Forge[HealSparks[helly].HealTarget].HB_Energy < 0) Forge[HealSparks[helly].HealTarget].HB_Energy = 0;
											}
										}
									else
										{
										if(HealSparks[helly].HealTarget == 250)
											{
											Forge[HealSparks[helly].ActorID].HB_Energy += 15 + (350 * (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[0].Potency / 5000));
											if(Forge[HealSparks[helly].ActorID].HB_Energy > Forge[HealSparks[helly].ActorID].HB_MaxEnergy) Forge[HealSparks[helly].ActorID].HB_Energy = Forge[HealSparks[helly].ActorID].HB_MaxEnergy;

											player.HB_Energy -= 15 + (350 * (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[0].Potency / 5000));
											if(player.HB_Energy < 0) player.HB_Energy = 0;
											}
										else
											{
											Forge[HealSparks[helly].ActorID].HB_Energy += 15 + (350 * (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[0].Potency / 5000));
											if(Forge[HealSparks[helly].ActorID].HB_Energy > Forge[HealSparks[helly].ActorID].HB_MaxEnergy) Forge[HealSparks[helly].ActorID].HB_Energy = Forge[HealSparks[helly].ActorID].HB_MaxEnergy;

											Forge[HealSparks[helly].HealTarget].HB_Energy -= 15 + (350 * (Forge[HealSparks[helly].ActorID].CharDATA.CLSClericSKILL[0].Potency / 5000));
											if(Forge[HealSparks[helly].HealTarget].HB_Energy < 0) Forge[HealSparks[helly].HealTarget].HB_Energy = 0;
											}
										}

									if(HealSparks[helly].AvatarINCR < 70 && HealSparks[helly].LightRedFULL == 0)
										{
										HealSparks[helly].AvatarINCR = 70;
										HealSparks[helly].LightRedFULL = 1;
										}
									if(HealSparks[helly].AvatarINCG < 70 && HealSparks[helly].LightGreenFULL == 0)
										{
										HealSparks[helly].AvatarINCG = 70;
										HealSparks[helly].LightGreenFULL = 1;
										}
									
									if(HealSparks[helly].AvatarINCB < 70 && HealSparks[helly].LightBlueFULL == 0)
										{
										HealSparks[helly].AvatarINCB = 70;
										HealSparks[helly].LightBlueFULL = 1;
										}

									if(HealSparks[helly].HealTarget == 250)
									{ geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarINCR,HealSparks[helly].AvatarINCG,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE); }
									else { geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarINCR,HealSparks[helly].AvatarINCG,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE); }
									
									if(HealSparks[helly].LightRedFULL == 1 && HealSparks[helly].LightGreenFULL == 1 && HealSparks[helly].LightBlueFULL == 1)
										{
										HealSparks[helly].Absorbed = 3;
										}
									}

								if(HealSparks[helly].Absorbed == 3)
									{
									if((HealSparks[helly].AvatarINCR > HealSparks[helly].AvatarLightR) && (HealSparks[helly].LightRedFULL == 1))
										{
										HealSparks[helly].AvatarINCR = HealSparks[helly].AvatarLightR;
										HealSparks[helly].LightRedFULL = 0;
										}
									else if(HealSparks[helly].LightRedFULL == 1) HealSparks[helly].AvatarINCR += 20;

									if((HealSparks[helly].AvatarINCG > HealSparks[helly].AvatarLightG) && (HealSparks[helly].LightGreenFULL == 1))
										{
										HealSparks[helly].AvatarINCG = HealSparks[helly].AvatarLightG;
										HealSparks[helly].LightGreenFULL = 0;
										}
									else if(HealSparks[helly].LightGreenFULL == 1) HealSparks[helly].AvatarINCG += 20;

									if((HealSparks[helly].AvatarINCB > HealSparks[helly].AvatarLightB) && (HealSparks[helly].LightBlueFULL == 1))
										{
										HealSparks[helly].AvatarINCB = HealSparks[helly].AvatarLightB;
										HealSparks[helly].LightBlueFULL = 0;
										}
									else if(HealSparks[helly].LightBlueFULL == 1) HealSparks[helly].AvatarINCB += 20;


									if(HealSparks[helly].HealTarget == 250)
									{ geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarINCR,HealSparks[helly].AvatarINCG,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE); }
									else { geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarINCR,HealSparks[helly].AvatarINCG,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE); }
									
									if(HealSparks[helly].LightRedFULL == 0 && HealSparks[helly].LightGreenFULL == 0 && HealSparks[helly].LightBlueFULL == 0)
										{
										if(HealSparks[helly].HealTarget == 250)
										{ geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarLightR,HealSparks[helly].AvatarLightG,HealSparks[helly].AvatarLightB,GE_FALSE,8,NULL,GE_TRUE); }
										else { geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarLightR,HealSparks[helly].AvatarLightG,HealSparks[helly].AvatarLightB,GE_FALSE,8,NULL,GE_TRUE); }

										//Live to Zero need to reorder array here
										HealSparks[helly].Live = 0;
										
										//### Array Reorder
										K = helly;
										while(K < NomHSpark - 1)
											{
											HealSparks[K] = HealSparks[K+1];
											K++;
											}

										NomHSpark--;
										}
									}


								if(HealSparks[helly].Absorbed == 4)
									{
									if(HealSparks[helly].AlpFade <= 0)
										{
										HealSparks[helly].AlpFade = 0;
										HealSparks[helly].Absorbed = 5;
										}
									else
										{
										HealSparks[helly].ScaleSTR += 10;
										HealSparks[helly].AlpFade -= 25;
										}
									}

								if(HealSparks[helly].Absorbed == 5)
									{
									//Live to Zero need to reorder array here
									HealSparks[helly].Live = 0;

									//### Array Reorder
									K = helly;
									while(K < NomHSpark - 1)
										{
										HealSparks[K] = HealSparks[K+1];
										K++;
										}

									NomHSpark--;
									}
								}

							HealSparks[helly].CNTR += TimeScale;

							if(HealSparks[helly].CNTR > 1)
								{
								HealSparks[helly].CNTR = 0;

								jet=0;
								while(jet < 2 && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
									Q_PntSprite[NomPntSprite].Scale = 0.015f;
									Q_PntSprite[NomPntSprite].PartType = 57;

									Q_PntSprite[NomPntSprite].IR = 0;
									Q_PntSprite[NomPntSprite].IG = 0;
									Q_PntSprite[NomPntSprite].IB = 0;

									Q_PntSprite[NomPntSprite].Alpha = 75;
									Q_PntSprite[NomPntSprite].Speed = 0.1;
									Q_PntSprite[NomPntSprite].Pos = HealSparks[helly].Pos;

									Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

									Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

									Q_PntSprite[NomPntSprite].ActorID = HealSparks[helly].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}
								}

							}break;
						}


					if(geWorld_Collision(World,
						 NULL,
						 NULL,
						 &HealSparks[helly].OldPos,
						 &HealSparks[helly].Pos,
						 GE_CONTENTS_CANNOT_OCCUPY,
						 GE_COLLIDE_MODELS | GE_COLLIDE_ACTORS,
						 0xffffffff, NULL, NULL,
						 &HealSparks[helly].Collision) && HealSparks[helly].Absorbed == 0)
						{
						HealSparks[helly].Pos = HealSparks[helly].OldPos;

						if(HealSparks[helly].Collision.Actor != NULL && HealSparks[helly].Collision.Actor->IDflag == HealSparks[helly].HealTarget)
							{
							HealSparks[helly].Absorbed = 1;
							}
						else	//Spark Impacts With Geometry
							{
							HealSparks[helly].TraVec = PHY_BounceVector(HealSparks[helly].TraVec, HealSparks[helly].Collision.Plane.Normal);

							HealSparks[helly].TraVec.X += ((((float)rand() / 32767)*2)-1);
							HealSparks[helly].TraVec.Y += ((((float)rand() / 32767)*2)-1);
							HealSparks[helly].TraVec.Z += ((((float)rand() / 32767)*2)-1);

							//BETTER
							HealSparks[helly].DownSpeed = 0;
							}
						}
					

					//### Spark Drawing Scale
					
					HealSparks[helly].Scale = HealSparks[helly].ScaleSTR;
					HealSparks[helly].Type = GE_TEXTURED_POLY;
					HealSparks[helly].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
					HealSparks[helly].ScaleBIT = 0.15f;	//0.2

					//Calculate Direction Vectors
					geXForm3d_SetYRotation(&RotateMatrix, PI/2);
					geXForm3d_Rotate(&RotateMatrix, &HealSparks[helly].TraVec, &HealSparks[helly].VecLeft);
					geVec3d_Normalize(&HealSparks[helly].VecLeft);
					HealSparks[helly].VecLeft.Y = 0;

					geVec3d_CrossProduct(&HealSparks[helly].VecLeft, &HealSparks[helly].TraVec, &HealSparks[helly].VecUp);
					geVec3d_Normalize(&HealSparks[helly].VecUp);

					HealSparks[helly].VecSTR = HealSparks[helly].TraVec;
					geVec3d_Normalize(&HealSparks[helly].TraVec);

					//Front Vert
					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/17, &HealSparks[helly].TraVec, &HealSparks[helly].VertF1);

					//Ball Verts
					//Standard Left Up down
					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/8, &HealSparks[helly].VecUp, &HealSparks[helly].VertB1);

					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/12, &HealSparks[helly].VecUp, &HealSparks[helly].VertB2);
					geVec3d_MA(&HealSparks[helly].VertB2, HealSparks[helly].Scale/12, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB2);

					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/8, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB3);

					geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/12, &HealSparks[helly].VecUp, &HealSparks[helly].VertB4);
					geVec3d_MA(&HealSparks[helly].VertB4, HealSparks[helly].Scale/12, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB4);

					geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/8, &HealSparks[helly].VecUp, &HealSparks[helly].VertB5);

					geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/12, &HealSparks[helly].VecUp, &HealSparks[helly].VertB6);
					geVec3d_MA(&HealSparks[helly].VertB6, -HealSparks[helly].Scale/12, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB6);

					geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/8, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB7);

					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/12, &HealSparks[helly].VecUp, &HealSparks[helly].VertB8);
					geVec3d_MA(&HealSparks[helly].VertB8, -HealSparks[helly].Scale/12, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB8);

					//### Twist Tail Points round
					HealSparks[helly].VecSTR = HealSparks[helly].TraVec;
					HealSparks[helly].DownSpeedSTR = HealSparks[helly].DownSpeed;

					HealSparks[helly].TraVec.Y += (HealSparks[helly].DownSpeed*TimeScale);
					HealSparks[helly].TraLength = geVec3d_Length(&HealSparks[helly].TraVec);
					geVec3d_MA(&HealSparks[helly].Pos, -((HealSparks[helly].Speed*(HealSparks[helly].TraLength*1))*TimeScale), &HealSparks[helly].TraVec, &HealSparks[helly].PosBrush);

					HealSparks[helly].TraVec = HealSparks[helly].VecSTR;
					HealSparks[helly].DownSpeed = HealSparks[helly].DownSpeedSTR;

					//Shift back for tail verts  ##WORKS BUT FROZEN
					//geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/2.6, &HealSparks[helly].TraVec, &HealSparks[helly].PosBrush);

					//### Reduce Scale for tail verts
					HealSparks[helly].Scale /= 3;

					//Tail Verts
					//Standard Left Up down
					geVec3d_MA(&HealSparks[helly].PosBrush, HealSparks[helly].Scale/24, &HealSparks[helly].VecUp, &HealSparks[helly].VertT1);

					geVec3d_MA(&HealSparks[helly].PosBrush, HealSparks[helly].Scale/36, &HealSparks[helly].VecUp, &HealSparks[helly].VertT2);
					geVec3d_MA(&HealSparks[helly].VertT2, HealSparks[helly].Scale/36, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT2);

					geVec3d_MA(&HealSparks[helly].PosBrush, HealSparks[helly].Scale/24, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT3);

					geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/36, &HealSparks[helly].VecUp, &HealSparks[helly].VertT4);
					geVec3d_MA(&HealSparks[helly].VertT4, HealSparks[helly].Scale/36, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT4);

					geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/24, &HealSparks[helly].VecUp, &HealSparks[helly].VertT5);


					geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/36, &HealSparks[helly].VecUp, &HealSparks[helly].VertT6);
					geVec3d_MA(&HealSparks[helly].VertT6, -HealSparks[helly].Scale/36, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT6);

					geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/24, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT7);

					geVec3d_MA(&HealSparks[helly].PosBrush, HealSparks[helly].Scale/36, &HealSparks[helly].VecUp, &HealSparks[helly].VertT8);
					geVec3d_MA(&HealSparks[helly].VertT8, -HealSparks[helly].Scale/36, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT8);

					//Shift back for End Vert
					//geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/2, &HealSparks[helly].TraVec, &HealSparks[helly].VertE1);

					//### Twist End Point round
					HealSparks[helly].VecSTR = HealSparks[helly].TraVec;
					HealSparks[helly].DownSpeedSTR = HealSparks[helly].DownSpeed;

					HealSparks[helly].TraVec.Y += (HealSparks[helly].DownSpeed*TimeScale);
					HealSparks[helly].TraLength = geVec3d_Length(&HealSparks[helly].TraVec);
					geVec3d_MA(&HealSparks[helly].Pos, -((HealSparks[helly].Speed*(HealSparks[helly].TraLength*2.4))*TimeScale), &HealSparks[helly].TraVec, &HealSparks[helly].VertE1);

					HealSparks[helly].TraVec = HealSparks[helly].VecSTR;
					HealSparks[helly].DownSpeed = HealSparks[helly].DownSpeedSTR;

					if(HealSparks[helly].Absorbed == 0)
						{
						if(HealSparks[helly].FadeDir == 0)
							{
							HealSparks[helly].AlpFade -= 40;//((((float)rand() / 32767)*10)+5);
							if(HealSparks[helly].AlpFade <= 170)
								{
								HealSparks[helly].AlpFade = 170;
								HealSparks[helly].FadeDir = 1;
								}
							}

						if(HealSparks[helly].FadeDir == 1)
							{
							HealSparks[helly].AlpFade += 40;//((((float)rand() / 32767)*10)+5);
							if(HealSparks[helly].AlpFade >= 255)
								{
								HealSparks[helly].AlpFade = 255;
								HealSparks[helly].FadeDir = 0;
								}
							}
						}
					


						a=0;
						while( a <= 23 )
							{
							b=0;
							while( b <= 3 )
								{
								HealSparks[helly].Lvert[a][b].a = HealSparks[helly].AlpFade;
								HealSparks[helly].Lvert[a][b].b = 255;
								HealSparks[helly].Lvert[a][b].g = 225;
								HealSparks[helly].Lvert[a][b].r = 225;
								b++;
								}
							a++;
							}

						//Set Corona
						HealSparks[helly].Lvert[24][0].a = HealSparks[helly].AlpFade/2.2;
						HealSparks[helly].Lvert[24][0].b = 255;
						HealSparks[helly].Lvert[24][0].g = 255;
						HealSparks[helly].Lvert[24][0].r = 255;

							//First Ring
							//## FRONT ##
							HealSparks[helly].Lvert[0][0].u = 0.5;
							HealSparks[helly].Lvert[0][0].v = 1;
							HealSparks[helly].Lvert[0][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[0][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[0][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[0][1].u = 0;
							HealSparks[helly].Lvert[0][1].v = 0;
							HealSparks[helly].Lvert[0][1].X = HealSparks[helly].VertB1.X;
							HealSparks[helly].Lvert[0][1].Y = HealSparks[helly].VertB1.Y;
							HealSparks[helly].Lvert[0][1].Z = HealSparks[helly].VertB1.Z;

							HealSparks[helly].Lvert[0][2].u = 1;
							HealSparks[helly].Lvert[0][2].v = 0;
							HealSparks[helly].Lvert[0][2].X = HealSparks[helly].VertB2.X;
							HealSparks[helly].Lvert[0][2].Y = HealSparks[helly].VertB2.Y;
							HealSparks[helly].Lvert[0][2].Z = HealSparks[helly].VertB2.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[1][0].u = 0.5;
							HealSparks[helly].Lvert[1][0].v = 1;
							HealSparks[helly].Lvert[1][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[1][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[1][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[1][1].u = 0;
							HealSparks[helly].Lvert[1][1].v = 0;
							HealSparks[helly].Lvert[1][1].X = HealSparks[helly].VertB2.X;
							HealSparks[helly].Lvert[1][1].Y = HealSparks[helly].VertB2.Y;
							HealSparks[helly].Lvert[1][1].Z = HealSparks[helly].VertB2.Z;
								
							HealSparks[helly].Lvert[1][2].u = 1;
							HealSparks[helly].Lvert[1][2].v = 0;
							HealSparks[helly].Lvert[1][2].X = HealSparks[helly].VertB3.X;
							HealSparks[helly].Lvert[1][2].Y = HealSparks[helly].VertB3.Y;
							HealSparks[helly].Lvert[1][2].Z = HealSparks[helly].VertB3.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[2][0].u = 0.5;
							HealSparks[helly].Lvert[2][0].v = 0;
							HealSparks[helly].Lvert[2][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[2][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[2][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[2][1].u = 0;
							HealSparks[helly].Lvert[2][1].v = 1;
							HealSparks[helly].Lvert[2][1].X = HealSparks[helly].VertB3.X;
							HealSparks[helly].Lvert[2][1].Y = HealSparks[helly].VertB3.Y;
							HealSparks[helly].Lvert[2][1].Z = HealSparks[helly].VertB3.Z;
								
							HealSparks[helly].Lvert[2][2].u = 1;
							HealSparks[helly].Lvert[2][2].v = 0.5;
							HealSparks[helly].Lvert[2][2].X = HealSparks[helly].VertB4.X;
							HealSparks[helly].Lvert[2][2].Y = HealSparks[helly].VertB4.Y;
							HealSparks[helly].Lvert[2][2].Z = HealSparks[helly].VertB4.Z;


							//## FRONT ##
							HealSparks[helly].Lvert[3][0].u = 0.5;
							HealSparks[helly].Lvert[3][0].v = 1;
							HealSparks[helly].Lvert[3][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[3][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[3][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[3][1].u = 1;
							HealSparks[helly].Lvert[3][1].v = 1;
							HealSparks[helly].Lvert[3][1].X = HealSparks[helly].VertB4.X;
							HealSparks[helly].Lvert[3][1].Y = HealSparks[helly].VertB4.Y;
							HealSparks[helly].Lvert[3][1].Z = HealSparks[helly].VertB4.Z;
								
							HealSparks[helly].Lvert[3][2].u = 1;
							HealSparks[helly].Lvert[3][2].v = 0;
							HealSparks[helly].Lvert[3][2].X = HealSparks[helly].VertB5.X;
							HealSparks[helly].Lvert[3][2].Y = HealSparks[helly].VertB5.Y;
							HealSparks[helly].Lvert[3][2].Z = HealSparks[helly].VertB5.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[4][0].u = 0.5;
							HealSparks[helly].Lvert[4][0].v = 1;
							HealSparks[helly].Lvert[4][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[4][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[4][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[4][1].u = 0;
							HealSparks[helly].Lvert[4][1].v = 0;
							HealSparks[helly].Lvert[4][1].X = HealSparks[helly].VertB5.X;
							HealSparks[helly].Lvert[4][1].Y = HealSparks[helly].VertB5.Y;
							HealSparks[helly].Lvert[4][1].Z = HealSparks[helly].VertB5.Z;
								
							HealSparks[helly].Lvert[4][2].u = 1;
							HealSparks[helly].Lvert[4][2].v = 0;
							HealSparks[helly].Lvert[4][2].X = HealSparks[helly].VertB6.X;
							HealSparks[helly].Lvert[4][2].Y = HealSparks[helly].VertB6.Y;
							HealSparks[helly].Lvert[4][2].Z = HealSparks[helly].VertB6.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[5][0].u = 0.5;
							HealSparks[helly].Lvert[5][0].v = 0;
							HealSparks[helly].Lvert[5][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[5][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[5][0].Z = HealSparks[helly].VertF1.Z;

							HealSparks[helly].Lvert[5][1].u = 0;
							HealSparks[helly].Lvert[5][1].v = 1;
							HealSparks[helly].Lvert[5][1].X = HealSparks[helly].VertB6.X;
							HealSparks[helly].Lvert[5][1].Y = HealSparks[helly].VertB6.Y;
							HealSparks[helly].Lvert[5][1].Z = HealSparks[helly].VertB6.Z;

							HealSparks[helly].Lvert[5][2].u = 1;
							HealSparks[helly].Lvert[5][2].v = 0.5;
							HealSparks[helly].Lvert[5][2].X = HealSparks[helly].VertB7.X;
							HealSparks[helly].Lvert[5][2].Y = HealSparks[helly].VertB7.Y;
							HealSparks[helly].Lvert[5][2].Z = HealSparks[helly].VertB7.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[6][0].u = 0.5;
							HealSparks[helly].Lvert[6][0].v = 0;
							HealSparks[helly].Lvert[6][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[6][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[6][0].Z = HealSparks[helly].VertF1.Z;

							HealSparks[helly].Lvert[6][1].u = 0;
							HealSparks[helly].Lvert[6][1].v = 1;
							HealSparks[helly].Lvert[6][1].X = HealSparks[helly].VertB7.X;
							HealSparks[helly].Lvert[6][1].Y = HealSparks[helly].VertB7.Y;
							HealSparks[helly].Lvert[6][1].Z = HealSparks[helly].VertB7.Z;

							HealSparks[helly].Lvert[6][2].u = 1;
							HealSparks[helly].Lvert[6][2].v = 0.5;
							HealSparks[helly].Lvert[6][2].X = HealSparks[helly].VertB8.X;
							HealSparks[helly].Lvert[6][2].Y = HealSparks[helly].VertB8.Y;
							HealSparks[helly].Lvert[6][2].Z = HealSparks[helly].VertB8.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[7][0].u = 0.5;
							HealSparks[helly].Lvert[7][0].v = 0;
							HealSparks[helly].Lvert[7][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[7][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[7][0].Z = HealSparks[helly].VertF1.Z;

							HealSparks[helly].Lvert[7][1].u = 0;
							HealSparks[helly].Lvert[7][1].v = 1;
							HealSparks[helly].Lvert[7][1].X = HealSparks[helly].VertB8.X;
							HealSparks[helly].Lvert[7][1].Y = HealSparks[helly].VertB8.Y;
							HealSparks[helly].Lvert[7][1].Z = HealSparks[helly].VertB8.Z;
								
							HealSparks[helly].Lvert[7][2].u = 1;
							HealSparks[helly].Lvert[7][2].v = 0.5;
							HealSparks[helly].Lvert[7][2].X = HealSparks[helly].VertB1.X;
							HealSparks[helly].Lvert[7][2].Y = HealSparks[helly].VertB1.Y;
							HealSparks[helly].Lvert[7][2].Z = HealSparks[helly].VertB1.Z;


						//### Next Ring
							//## FRONT ##
							HealSparks[helly].Lvert[8][0].u = 0;
							HealSparks[helly].Lvert[8][0].v = 1;
							HealSparks[helly].Lvert[8][0].X = HealSparks[helly].VertB1.X;
							HealSparks[helly].Lvert[8][0].Y = HealSparks[helly].VertB1.Y;
							HealSparks[helly].Lvert[8][0].Z = HealSparks[helly].VertB1.Z;

							HealSparks[helly].Lvert[8][1].u = 0;
							HealSparks[helly].Lvert[8][1].v = 1;
							HealSparks[helly].Lvert[8][1].X = HealSparks[helly].VertT1.X;
							HealSparks[helly].Lvert[8][1].Y = HealSparks[helly].VertT1.Y;
							HealSparks[helly].Lvert[8][1].Z = HealSparks[helly].VertT1.Z;

							HealSparks[helly].Lvert[8][2].u = 1;
							HealSparks[helly].Lvert[8][2].v = 0;
							HealSparks[helly].Lvert[8][2].X = HealSparks[helly].VertT2.X;
							HealSparks[helly].Lvert[8][2].Y = HealSparks[helly].VertT2.Y;
							HealSparks[helly].Lvert[8][2].Z = HealSparks[helly].VertT2.Z;

							HealSparks[helly].Lvert[8][3].u = 1;
							HealSparks[helly].Lvert[8][3].v = 0;
							HealSparks[helly].Lvert[8][3].X = HealSparks[helly].VertB2.X;
							HealSparks[helly].Lvert[8][3].Y = HealSparks[helly].VertB2.Y;
							HealSparks[helly].Lvert[8][3].Z = HealSparks[helly].VertB2.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[9][0].u = 0;
							HealSparks[helly].Lvert[9][0].v = 1;
							HealSparks[helly].Lvert[9][0].X = HealSparks[helly].VertB2.X;
							HealSparks[helly].Lvert[9][0].Y = HealSparks[helly].VertB2.Y;
							HealSparks[helly].Lvert[9][0].Z = HealSparks[helly].VertB2.Z;

							HealSparks[helly].Lvert[9][1].u = 0;
							HealSparks[helly].Lvert[9][1].v = 0;
							HealSparks[helly].Lvert[9][1].X = HealSparks[helly].VertT2.X;
							HealSparks[helly].Lvert[9][1].Y = HealSparks[helly].VertT2.Y;
							HealSparks[helly].Lvert[9][1].Z = HealSparks[helly].VertT2.Z;
								
							HealSparks[helly].Lvert[9][2].u = 1;
							HealSparks[helly].Lvert[9][2].v = 0;
							HealSparks[helly].Lvert[9][2].X = HealSparks[helly].VertT3.X;
							HealSparks[helly].Lvert[9][2].Y = HealSparks[helly].VertT3.Y;
							HealSparks[helly].Lvert[9][2].Z = HealSparks[helly].VertT3.Z;

							HealSparks[helly].Lvert[9][3].u = 1;
							HealSparks[helly].Lvert[9][3].v = 0;
							HealSparks[helly].Lvert[9][3].X = HealSparks[helly].VertB3.X;
							HealSparks[helly].Lvert[9][3].Y = HealSparks[helly].VertB3.Y;
							HealSparks[helly].Lvert[9][3].Z = HealSparks[helly].VertB3.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[10][0].u = 0;
							HealSparks[helly].Lvert[10][0].v = 0;
							HealSparks[helly].Lvert[10][0].X = HealSparks[helly].VertB3.X;
							HealSparks[helly].Lvert[10][0].Y = HealSparks[helly].VertB3.Y;
							HealSparks[helly].Lvert[10][0].Z = HealSparks[helly].VertB3.Z;

							HealSparks[helly].Lvert[10][1].u = 0;
							HealSparks[helly].Lvert[10][1].v = 1;
							HealSparks[helly].Lvert[10][1].X = HealSparks[helly].VertT3.X;
							HealSparks[helly].Lvert[10][1].Y = HealSparks[helly].VertT3.Y;
							HealSparks[helly].Lvert[10][1].Z = HealSparks[helly].VertT3.Z;
								
							HealSparks[helly].Lvert[10][2].u = 1;
							HealSparks[helly].Lvert[10][2].v = 0.5;
							HealSparks[helly].Lvert[10][2].X = HealSparks[helly].VertT4.X;
							HealSparks[helly].Lvert[10][2].Y = HealSparks[helly].VertT4.Y;
							HealSparks[helly].Lvert[10][2].Z = HealSparks[helly].VertT4.Z;

							HealSparks[helly].Lvert[10][3].u = 1;
							HealSparks[helly].Lvert[10][3].v = 0.5;
							HealSparks[helly].Lvert[10][3].X = HealSparks[helly].VertB4.X;
							HealSparks[helly].Lvert[10][3].Y = HealSparks[helly].VertB4.Y;
							HealSparks[helly].Lvert[10][3].Z = HealSparks[helly].VertB4.Z;


							//## FRONT ##
							HealSparks[helly].Lvert[11][0].u = 0;
							HealSparks[helly].Lvert[11][0].v = 1;
							HealSparks[helly].Lvert[11][0].X = HealSparks[helly].VertB4.X;
							HealSparks[helly].Lvert[11][0].Y = HealSparks[helly].VertB4.Y;
							HealSparks[helly].Lvert[11][0].Z = HealSparks[helly].VertB4.Z;
								
							HealSparks[helly].Lvert[11][1].u = 0;
							HealSparks[helly].Lvert[11][1].v = 1;
							HealSparks[helly].Lvert[11][1].X = HealSparks[helly].VertT4.X;
							HealSparks[helly].Lvert[11][1].Y = HealSparks[helly].VertT4.Y;
							HealSparks[helly].Lvert[11][1].Z = HealSparks[helly].VertT4.Z;

							HealSparks[helly].Lvert[11][2].u = 1;
							HealSparks[helly].Lvert[11][2].v = 0;
							HealSparks[helly].Lvert[11][2].X = HealSparks[helly].VertT5.X;
							HealSparks[helly].Lvert[11][2].Y = HealSparks[helly].VertT5.Y;
							HealSparks[helly].Lvert[11][2].Z = HealSparks[helly].VertT5.Z;

							HealSparks[helly].Lvert[11][3].u = 1;
							HealSparks[helly].Lvert[11][3].v = 0;
							HealSparks[helly].Lvert[11][3].X = HealSparks[helly].VertB5.X;
							HealSparks[helly].Lvert[11][3].Y = HealSparks[helly].VertB5.Y;
							HealSparks[helly].Lvert[11][3].Z = HealSparks[helly].VertB5.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[12][0].u = 0;
							HealSparks[helly].Lvert[12][0].v = 1;
							HealSparks[helly].Lvert[12][0].X = HealSparks[helly].VertB5.X;
							HealSparks[helly].Lvert[12][0].Y = HealSparks[helly].VertB5.Y;
							HealSparks[helly].Lvert[12][0].Z = HealSparks[helly].VertB5.Z;
								
							HealSparks[helly].Lvert[12][1].u = 0;
							HealSparks[helly].Lvert[12][1].v = 0;
							HealSparks[helly].Lvert[12][1].X = HealSparks[helly].VertT5.X;
							HealSparks[helly].Lvert[12][1].Y = HealSparks[helly].VertT5.Y;
							HealSparks[helly].Lvert[12][1].Z = HealSparks[helly].VertT5.Z;
								
							HealSparks[helly].Lvert[12][2].u = 1;
							HealSparks[helly].Lvert[12][2].v = 0;
							HealSparks[helly].Lvert[12][2].X = HealSparks[helly].VertT6.X;
							HealSparks[helly].Lvert[12][2].Y = HealSparks[helly].VertT6.Y;
							HealSparks[helly].Lvert[12][2].Z = HealSparks[helly].VertT6.Z;

							HealSparks[helly].Lvert[12][3].u = 1;
							HealSparks[helly].Lvert[12][3].v = 0;
							HealSparks[helly].Lvert[12][3].X = HealSparks[helly].VertB6.X;
							HealSparks[helly].Lvert[12][3].Y = HealSparks[helly].VertB6.Y;
							HealSparks[helly].Lvert[12][3].Z = HealSparks[helly].VertB6.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[13][0].u = 0;
							HealSparks[helly].Lvert[13][0].v = 0;
							HealSparks[helly].Lvert[13][0].X = HealSparks[helly].VertB6.X;
							HealSparks[helly].Lvert[13][0].Y = HealSparks[helly].VertB6.Y;
							HealSparks[helly].Lvert[13][0].Z = HealSparks[helly].VertB6.Z;

							HealSparks[helly].Lvert[13][1].u = 0;
							HealSparks[helly].Lvert[13][1].v = 1;
							HealSparks[helly].Lvert[13][1].X = HealSparks[helly].VertT6.X;
							HealSparks[helly].Lvert[13][1].Y = HealSparks[helly].VertT6.Y;
							HealSparks[helly].Lvert[13][1].Z = HealSparks[helly].VertT6.Z;
								
							HealSparks[helly].Lvert[13][2].u = 1;
							HealSparks[helly].Lvert[13][2].v = 0.5;
							HealSparks[helly].Lvert[13][2].X = HealSparks[helly].VertT7.X;
							HealSparks[helly].Lvert[13][2].Y = HealSparks[helly].VertT7.Y;
							HealSparks[helly].Lvert[13][2].Z = HealSparks[helly].VertT7.Z;

							HealSparks[helly].Lvert[13][3].u = 1;
							HealSparks[helly].Lvert[13][3].v = 0.5;
							HealSparks[helly].Lvert[13][3].X = HealSparks[helly].VertB7.X;
							HealSparks[helly].Lvert[13][3].Y = HealSparks[helly].VertB7.Y;
							HealSparks[helly].Lvert[13][3].Z = HealSparks[helly].VertB7.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[14][0].u = 0;
							HealSparks[helly].Lvert[14][0].v = 0;
							HealSparks[helly].Lvert[14][0].X = HealSparks[helly].VertB7.X;
							HealSparks[helly].Lvert[14][0].Y = HealSparks[helly].VertB7.Y;
							HealSparks[helly].Lvert[14][0].Z = HealSparks[helly].VertB7.Z;
								
							HealSparks[helly].Lvert[14][1].u = 0;
							HealSparks[helly].Lvert[14][1].v = 1;
							HealSparks[helly].Lvert[14][1].X = HealSparks[helly].VertT7.X;
							HealSparks[helly].Lvert[14][1].Y = HealSparks[helly].VertT7.Y;
							HealSparks[helly].Lvert[14][1].Z = HealSparks[helly].VertT7.Z;
								
							HealSparks[helly].Lvert[14][2].u = 1;
							HealSparks[helly].Lvert[14][2].v = 0.5;
							HealSparks[helly].Lvert[14][2].X = HealSparks[helly].VertT8.X;
							HealSparks[helly].Lvert[14][2].Y = HealSparks[helly].VertT8.Y;
							HealSparks[helly].Lvert[14][2].Z = HealSparks[helly].VertT8.Z;

							HealSparks[helly].Lvert[14][3].u = 1;
							HealSparks[helly].Lvert[14][3].v = 0.5;
							HealSparks[helly].Lvert[14][3].X = HealSparks[helly].VertB8.X;
							HealSparks[helly].Lvert[14][3].Y = HealSparks[helly].VertB8.Y;
							HealSparks[helly].Lvert[14][3].Z = HealSparks[helly].VertB8.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[15][0].u = 0;
							HealSparks[helly].Lvert[15][0].v = 0;
							HealSparks[helly].Lvert[15][0].X = HealSparks[helly].VertB8.X;
							HealSparks[helly].Lvert[15][0].Y = HealSparks[helly].VertB8.Y;
							HealSparks[helly].Lvert[15][0].Z = HealSparks[helly].VertB8.Z;

							HealSparks[helly].Lvert[15][1].u = 0;
							HealSparks[helly].Lvert[15][1].v = 1;
							HealSparks[helly].Lvert[15][1].X = HealSparks[helly].VertT8.X;
							HealSparks[helly].Lvert[15][1].Y = HealSparks[helly].VertT8.Y;
							HealSparks[helly].Lvert[15][1].Z = HealSparks[helly].VertT8.Z;

							HealSparks[helly].Lvert[15][2].u = 1;
							HealSparks[helly].Lvert[15][2].v = 0.5;
							HealSparks[helly].Lvert[15][2].X = HealSparks[helly].VertT1.X;
							HealSparks[helly].Lvert[15][2].Y = HealSparks[helly].VertT1.Y;
							HealSparks[helly].Lvert[15][2].Z = HealSparks[helly].VertT1.Z;

							HealSparks[helly].Lvert[15][3].u = 1;
							HealSparks[helly].Lvert[15][3].v = 0.5;
							HealSparks[helly].Lvert[15][3].X = HealSparks[helly].VertB1.X;
							HealSparks[helly].Lvert[15][3].Y = HealSparks[helly].VertB1.Y;
							HealSparks[helly].Lvert[15][3].Z = HealSparks[helly].VertB1.Z;


						//Tail End
							//END Ring
							//## FRONT ##
							HealSparks[helly].Lvert[16][0].u = 0.5;
							HealSparks[helly].Lvert[16][0].v = 1;
							HealSparks[helly].Lvert[16][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[16][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[16][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[16][1].u = 0;
							HealSparks[helly].Lvert[16][1].v = 0;
							HealSparks[helly].Lvert[16][1].X = HealSparks[helly].VertT1.X;
							HealSparks[helly].Lvert[16][1].Y = HealSparks[helly].VertT1.Y;
							HealSparks[helly].Lvert[16][1].Z = HealSparks[helly].VertT1.Z;
								
							HealSparks[helly].Lvert[16][2].u = 1;
							HealSparks[helly].Lvert[16][2].v = 0;
							HealSparks[helly].Lvert[16][2].X = HealSparks[helly].VertT2.X;
							HealSparks[helly].Lvert[16][2].Y = HealSparks[helly].VertT2.Y;
							HealSparks[helly].Lvert[16][2].Z = HealSparks[helly].VertT2.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[17][0].u = 0.5;
							HealSparks[helly].Lvert[17][0].v = 1;
							HealSparks[helly].Lvert[17][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[17][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[17][0].Z = HealSparks[helly].VertE1.Z;
								
							HealSparks[helly].Lvert[17][1].u = 0;
							HealSparks[helly].Lvert[17][1].v = 0;
							HealSparks[helly].Lvert[17][1].X = HealSparks[helly].VertT2.X;
							HealSparks[helly].Lvert[17][1].Y = HealSparks[helly].VertT2.Y;
							HealSparks[helly].Lvert[17][1].Z = HealSparks[helly].VertT2.Z;
								
							HealSparks[helly].Lvert[17][2].u = 1;
							HealSparks[helly].Lvert[17][2].v = 0;
							HealSparks[helly].Lvert[17][2].X = HealSparks[helly].VertT3.X;
							HealSparks[helly].Lvert[17][2].Y = HealSparks[helly].VertT3.Y;
							HealSparks[helly].Lvert[17][2].Z = HealSparks[helly].VertT3.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[18][0].u = 0.5;
							HealSparks[helly].Lvert[18][0].v = 0;
							HealSparks[helly].Lvert[18][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[18][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[18][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[18][1].u = 0;
							HealSparks[helly].Lvert[18][1].v = 0;
							HealSparks[helly].Lvert[18][1].X = HealSparks[helly].VertT4.X;
							HealSparks[helly].Lvert[18][1].Y = HealSparks[helly].VertT4.Y;
							HealSparks[helly].Lvert[18][1].Z = HealSparks[helly].VertT4.Z;

							HealSparks[helly].Lvert[18][2].u = 1;
							HealSparks[helly].Lvert[18][2].v = 0.5;
							HealSparks[helly].Lvert[18][2].X = HealSparks[helly].VertT3.X;
							HealSparks[helly].Lvert[18][2].Y = HealSparks[helly].VertT3.Y;
							HealSparks[helly].Lvert[18][2].Z = HealSparks[helly].VertT3.Z;


							//## FRONT ##
							HealSparks[helly].Lvert[19][0].u = 0.5;
							HealSparks[helly].Lvert[19][0].v = 1;
							HealSparks[helly].Lvert[19][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[19][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[19][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[19][1].u = 1;
							HealSparks[helly].Lvert[19][1].v = 0;
							HealSparks[helly].Lvert[19][1].X = HealSparks[helly].VertT4.X;
							HealSparks[helly].Lvert[19][1].Y = HealSparks[helly].VertT4.Y;
							HealSparks[helly].Lvert[19][1].Z = HealSparks[helly].VertT4.Z;

							HealSparks[helly].Lvert[19][2].u = 1;
							HealSparks[helly].Lvert[19][2].v = 0;
							HealSparks[helly].Lvert[19][2].X = HealSparks[helly].VertT5.X;
							HealSparks[helly].Lvert[19][2].Y = HealSparks[helly].VertT5.Y;
							HealSparks[helly].Lvert[19][2].Z = HealSparks[helly].VertT5.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[20][0].u = 0.5;
							HealSparks[helly].Lvert[20][0].v = 1;
							HealSparks[helly].Lvert[20][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[20][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[20][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[20][1].u = 0;
							HealSparks[helly].Lvert[20][1].v = 0;
							HealSparks[helly].Lvert[20][1].X = HealSparks[helly].VertT6.X;
							HealSparks[helly].Lvert[20][1].Y = HealSparks[helly].VertT6.Y;
							HealSparks[helly].Lvert[20][1].Z = HealSparks[helly].VertT6.Z;
								
							HealSparks[helly].Lvert[20][2].u = 1;
							HealSparks[helly].Lvert[20][2].v = 0;
							HealSparks[helly].Lvert[20][2].X = HealSparks[helly].VertT5.X;
							HealSparks[helly].Lvert[20][2].Y = HealSparks[helly].VertT5.Y;
							HealSparks[helly].Lvert[20][2].Z = HealSparks[helly].VertT5.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[21][0].u = 0.5;
							HealSparks[helly].Lvert[21][0].v = 0;
							HealSparks[helly].Lvert[21][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[21][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[21][0].Z = HealSparks[helly].VertE1.Z;
								
							HealSparks[helly].Lvert[21][1].u = 0;
							HealSparks[helly].Lvert[21][1].v = 0;
							HealSparks[helly].Lvert[21][1].X = HealSparks[helly].VertT7.X;
							HealSparks[helly].Lvert[21][1].Y = HealSparks[helly].VertT7.Y;
							HealSparks[helly].Lvert[21][1].Z = HealSparks[helly].VertT7.Z;

							HealSparks[helly].Lvert[21][2].u = 1;
							HealSparks[helly].Lvert[21][2].v = 0.5;
							HealSparks[helly].Lvert[21][2].X = HealSparks[helly].VertT6.X;
							HealSparks[helly].Lvert[21][2].Y = HealSparks[helly].VertT6.Y;
							HealSparks[helly].Lvert[21][2].Z = HealSparks[helly].VertT6.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[22][0].u = 0.5;
							HealSparks[helly].Lvert[22][0].v = 0;
							HealSparks[helly].Lvert[22][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[22][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[22][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[22][1].u = 0;
							HealSparks[helly].Lvert[22][1].v = 0;
							HealSparks[helly].Lvert[22][1].X = HealSparks[helly].VertT8.X;
							HealSparks[helly].Lvert[22][1].Y = HealSparks[helly].VertT8.Y;
							HealSparks[helly].Lvert[22][1].Z = HealSparks[helly].VertT8.Z;
								
							HealSparks[helly].Lvert[22][2].u = 1;
							HealSparks[helly].Lvert[22][2].v = 0.5;
							HealSparks[helly].Lvert[22][2].X = HealSparks[helly].VertT7.X;
							HealSparks[helly].Lvert[22][2].Y = HealSparks[helly].VertT7.Y;
							HealSparks[helly].Lvert[22][2].Z = HealSparks[helly].VertT7.Z;

							//## TAIL ##
							HealSparks[helly].Lvert[23][0].u = 0.5;
							HealSparks[helly].Lvert[23][0].v = 0;
							HealSparks[helly].Lvert[23][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[23][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[23][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[23][1].u = 0;
							HealSparks[helly].Lvert[23][1].v = 0;
							HealSparks[helly].Lvert[23][1].X = HealSparks[helly].VertT1.X;
							HealSparks[helly].Lvert[23][1].Y = HealSparks[helly].VertT1.Y;
							HealSparks[helly].Lvert[23][1].Z = HealSparks[helly].VertT1.Z;

							HealSparks[helly].Lvert[23][2].u = 1;
							HealSparks[helly].Lvert[23][2].v = 0.5;
							HealSparks[helly].Lvert[23][2].X = HealSparks[helly].VertT8.X;
							HealSparks[helly].Lvert[23][2].Y = HealSparks[helly].VertT8.Y;
							HealSparks[helly].Lvert[23][2].Z = HealSparks[helly].VertT8.Z;


							//## CORONA ##
							HealSparks[helly].Lvert[24][0].u = 0;
							HealSparks[helly].Lvert[24][0].v = 0;
							HealSparks[helly].Lvert[24][0].X = HealSparks[helly].Pos.X;
							HealSparks[helly].Lvert[24][0].Y = HealSparks[helly].Pos.Y;
							HealSparks[helly].Lvert[24][0].Z = HealSparks[helly].Pos.Z;


						switch(HealSparks[helly].HTYPE)
							{
							case 0:
								{
								if(HealSparks[helly].AlpFade > 0)
									{
									i = 0;
									while(i <= 7)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 3, HealSparktail, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									i = 8;
									while(i <= 15)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 4, HealSparktail, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									i = 15;
									while(i <= 23)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 3, RanSpark, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[24][0], 1, SparkCorona[HealSparks[helly].CoronaMatCnt], GE_TEXTURED_POINT, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT * (HealSparks[helly].ScaleSTR / 33));
									}


								//### Increment Corona Material
								if(HealSparks[helly].CoronaMatCntDIR == 0)
									{
									HealSparks[helly].CoronaMatCnt++;
									if(HealSparks[helly].CoronaMatCnt > 3)
										{
										HealSparks[helly].CoronaMatCnt = 3;
										HealSparks[helly].CoronaMatCntDIR = 1;
										}
									}
								else
									{
									HealSparks[helly].CoronaMatCnt--;
									if(HealSparks[helly].CoronaMatCnt < 0)
										{
										HealSparks[helly].CoronaMatCnt = 0;
										HealSparks[helly].CoronaMatCntDIR = 0;
										}
									}
								}break;


							case 1:
								{
								if(HealSparks[helly].AlpFade > 0)
									{
									i = 0;
									while(i <= 7)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 3, EGrabSparktail, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									i = 8;
									while(i <= 15)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 4, EGrabSparktail, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									i = 15;
									while(i <= 23)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 3, EGrabRanSpark, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[24][0], 1, EGrabCorona[HealSparks[helly].CoronaMatCnt], GE_TEXTURED_POINT, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT * (HealSparks[helly].ScaleSTR / 33));
									}


								//### Increment Corona Material
								if(HealSparks[helly].CoronaMatCntDIR == 0)
									{
									HealSparks[helly].CoronaMatCnt++;
									if(HealSparks[helly].CoronaMatCnt > 3)
										{
										HealSparks[helly].CoronaMatCnt = 3;
										HealSparks[helly].CoronaMatCntDIR = 1;
										}
									}
								else
									{
									HealSparks[helly].CoronaMatCnt--;
									if(HealSparks[helly].CoronaMatCnt < 0)
										{
										HealSparks[helly].CoronaMatCnt = 0;
										HealSparks[helly].CoronaMatCntDIR = 0;
										}
									}
								}break;
							}
					}

				helly++;
				}
			}
		}
	else	//##### Phantom Client Heal Sparks
		{
		if(NomHSpark > 0)
			{
			helly = 0;
			while(helly < NomHSpark)
				{
				if(HealSparks[helly].Live == 1)
					{
					switch(HealSparks[helly].HTYPE)
						{
						case 0:	//Heal Sparks
							{
							if(HealSparks[helly].LightON == 0)
								{
								HealSparks[helly].Light = geWorld_AddLight(World);
								HealSparks[helly].LightColor.r = 255;
								HealSparks[helly].LightColor.g = 255;
								HealSparks[helly].LightColor.b = 255;
								HealSparks[helly].LightON = 1;

								SCRAM=0;
								while(SCRAM < 15 && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
									Q_PntSprite[NomPntSprite].Scale = 0.015f;
									Q_PntSprite[NomPntSprite].PartType = 57;

									Q_PntSprite[NomPntSprite].IR = 255;
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 75;
									Q_PntSprite[NomPntSprite].Speed = 0.1;
									Q_PntSprite[NomPntSprite].Pos = HealSparks[helly].Pos;

									Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

									Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

									Q_PntSprite[NomPntSprite].ActorID = HealSparks[helly].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									SCRAM++;
									}
								}

							if(HealSparks[helly].Released == 1)
								{
								//#### Show Target Locks
								if(HealSparks[helly].DisplayAlpha - 5 > 10) HealSparks[helly].DisplayAlpha -= 5;
								else HealSparks[helly].DisplayAlpha = 10;

								if(HealSparks[helly].DisplayColor - 25 > 0) HealSparks[helly].DisplayColor -= 25;
								else HealSparks[helly].DisplayColor = 0;

								if(HealSparks[helly].DisplayScale + 0.05 < 0.5) HealSparks[helly].DisplayScale += 0.06;
								else HealSparks[helly].DisplayScale = 0.5;

								if(HealSparks[helly].Absorbed == 0)
									{
									if(HealSparks[helly].ScaleSTR + 1 < 33) HealSparks[helly].ScaleSTR += 1;
									else HealSparks[helly].ScaleSTR = 33;
									}
								
								if(HealSparks[helly].HealTarget == 250)
									{
									HealSparks[helly].LaserLV.a = HealSparks[helly].DisplayAlpha;
									HealSparks[helly].LaserLV.r = 0;
									HealSparks[helly].LaserLV.g = 255;
									HealSparks[helly].LaserLV.b = 255;
									HealSparks[helly].LaserLV.X = playact.ActorXform.Translation.X;
									HealSparks[helly].LaserLV.Y = playact.ActorXform.Translation.Y + 65;
									HealSparks[helly].LaserLV.Z = playact.ActorXform.Translation.Z;

									geWorld_AddPolyOnce(World, &HealSparks[helly].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, HealSparks[helly].DisplayScale);
									}
								else
									{
									HealSparks[helly].LaserLV.a = HealSparks[helly].DisplayAlpha;
									HealSparks[helly].LaserLV.r = 0;
									HealSparks[helly].LaserLV.g = 255;
									HealSparks[helly].LaserLV.b = 255;
									HealSparks[helly].LaserLV.X = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.X;
									HealSparks[helly].LaserLV.Y = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.Y + 65;
									HealSparks[helly].LaserLV.Z = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.Z;

									geWorld_AddPolyOnce(World, &HealSparks[helly].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, HealSparks[helly].DisplayScale);
									}
								}
							

							if(HealSparks[helly].Absorbed > 0)
								{
								if(HealSparks[helly].Absorbed == 1)
									{
									HealSparks[helly].Absorbed = 2;
									HealSparks[helly].AvatarLightB = 100;
									}

								if(HealSparks[helly].Absorbed > 0 && HealSparks[helly].Absorbed < 3)
									{
									HealSparks[helly].AvatarINCB += 20;

									//### Explode the Heal Spark
									if(HealSparks[helly].AlpFade <= 0 && HealSparks[helly].LightON == 1)
										{
										HealSparks[helly].AlpFade = 0;
										HealSparks[helly].LightON = 0;
										geWorld_RemoveLight(World, HealSparks[helly].Light);
										}
									else
										{
										HealSparks[helly].ScaleSTR += 10;
										HealSparks[helly].AlpFade -= 25;
										}

									if(HealSparks[helly].AvatarINCB > 255 && HealSparks[helly].LightBlueFULL == 0)
										{
										HealSparks[helly].AvatarINCB = 255;
										HealSparks[helly].LightBlueFULL = 1;
										}

									if(HealSparks[helly].HealTarget == 250)
										{
										geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE);
										}
									else
										{
										geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE);
										}
									
									if(HealSparks[helly].LightBlueFULL == 1)
										{
										HealSparks[helly].Absorbed = 3;
										}
									}

								if(HealSparks[helly].Absorbed == 3)
									{
									if((HealSparks[helly].AvatarINCB < HealSparks[helly].AvatarLightB) && (HealSparks[helly].LightBlueFULL == 1))
										{
										HealSparks[helly].AvatarINCB = HealSparks[helly].AvatarLightB;
										HealSparks[helly].LightBlueFULL = 0;
										}
									else if(HealSparks[helly].LightBlueFULL == 1) HealSparks[helly].AvatarINCB -= 20;


									if(HealSparks[helly].HealTarget == 250)
										{
										geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE);
										}
									else
										{
										geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE);
										}
									
									if(HealSparks[helly].LightBlueFULL == 0)
										{
										if(HealSparks[helly].HealTarget == 250)
											{
											geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarLightB,GE_FALSE,8,NULL,GE_TRUE);
											}
										else
											{
											geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,190,145,HealSparks[helly].AvatarLightB,GE_FALSE,8,NULL,GE_TRUE);
											}
										}
									}

								if(HealSparks[helly].Absorbed == 5)
									{
									jet=0;
									while(jet < 15 && (NomPntSprite < 24998))
										{
										Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
										Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
										Q_PntSprite[NomPntSprite].Scale = 0.065f;
										Q_PntSprite[NomPntSprite].PartType = 58;

										Q_PntSprite[NomPntSprite].IR = 255;
										Q_PntSprite[NomPntSprite].IG = 255;
										Q_PntSprite[NomPntSprite].IB = 255;

										Q_PntSprite[NomPntSprite].Alpha = 75;
										Q_PntSprite[NomPntSprite].Speed = 0.1;
										Q_PntSprite[NomPntSprite].Pos = HealSparks[helly].Pos;

										Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
										Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
										Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

										Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
										Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
										Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

										Q_PntSprite[NomPntSprite].ActorID = HealSparks[helly].ActorID;

										Q_PntSprite[NomPntSprite].Live = 1;

										NomPntSprite++;
										jet++;
										}
									}
								}

							HealSparks[helly].CNTR += TimeScale;

							if(HealSparks[helly].CNTR > 1)
								{
								HealSparks[helly].CNTR = 0;

								jet=0;
								while(jet < 2 && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
									Q_PntSprite[NomPntSprite].Scale = 0.015f;
									Q_PntSprite[NomPntSprite].PartType = 57;

									Q_PntSprite[NomPntSprite].IR = 255;
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 75;
									Q_PntSprite[NomPntSprite].Speed = 0.1;
									Q_PntSprite[NomPntSprite].Pos = HealSparks[helly].Pos;

									Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

									Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

									Q_PntSprite[NomPntSprite].ActorID = HealSparks[helly].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}
								}

							if(HealSparks[helly].LightON == 1) geWorld_SetLightAttributes(World, HealSparks[helly].Light, &HealSparks[helly].Pos, &HealSparks[helly].LightColor, 100, GE_TRUE);
							}break;

						case 1:	//Energy Grab Sparks
							{
							if(HealSparks[helly].Released == 1)
								{
								//#### Show Target Locks
								if(HealSparks[helly].DisplayAlpha - 5 > 10) HealSparks[helly].DisplayAlpha -= 5;
								else HealSparks[helly].DisplayAlpha = 10;

								if(HealSparks[helly].DisplayColor - 25 > 0) HealSparks[helly].DisplayColor -= 25;
								else HealSparks[helly].DisplayColor = 0;

								if(HealSparks[helly].DisplayScale + 0.05 < 0.5) HealSparks[helly].DisplayScale += 0.06;
								else HealSparks[helly].DisplayScale = 0.9;

								if(HealSparks[helly].Absorbed == 0)
									{
									if(HealSparks[helly].ScaleSTR + 1 < 33) HealSparks[helly].ScaleSTR += 1;
									else HealSparks[helly].ScaleSTR = 33;
									}
								
								if(HealSparks[helly].HealTarget == 250)
									{
									HealSparks[helly].LaserLV.a = HealSparks[helly].DisplayAlpha;
									HealSparks[helly].LaserLV.r = 0;
									HealSparks[helly].LaserLV.g = 255;
									HealSparks[helly].LaserLV.b = 255;
									HealSparks[helly].LaserLV.X = playact.ActorXform.Translation.X;
									HealSparks[helly].LaserLV.Y = playact.ActorXform.Translation.Y + 65;
									HealSparks[helly].LaserLV.Z = playact.ActorXform.Translation.Z;

									geWorld_AddPolyOnce(World, &HealSparks[helly].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, HealSparks[helly].DisplayScale);
									}
								else
									{
									HealSparks[helly].LaserLV.a = HealSparks[helly].DisplayAlpha;
									HealSparks[helly].LaserLV.r = 0;
									HealSparks[helly].LaserLV.g = 255;
									HealSparks[helly].LaserLV.b = 255;
									HealSparks[helly].LaserLV.X = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.X;
									HealSparks[helly].LaserLV.Y = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.Y + 65;
									HealSparks[helly].LaserLV.Z = Forge[HealSparks[helly].HealTarget].Avatar.ActorXform.Translation.Z;

									geWorld_AddPolyOnce(World, &HealSparks[helly].LaserLV, 1, reticuleE, GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, HealSparks[helly].DisplayScale);
									}
								}

							if(HealSparks[helly].Absorbed > 0)
								{
								if(HealSparks[helly].Absorbed == 1)
									{
									HealSparks[helly].Absorbed = 2;
									HealSparks[helly].AvatarLightR = 190;
									HealSparks[helly].AvatarLightG = 145;
									HealSparks[helly].AvatarLightB = 100;
									}

								if(HealSparks[helly].Absorbed > 0 && HealSparks[helly].Absorbed < 3)
									{
									HealSparks[helly].AvatarINCR -= 20;
									HealSparks[helly].AvatarINCG -= 20;
									HealSparks[helly].AvatarINCB -= 20;
									
									//### Explode the Heal Spark
									if(HealSparks[helly].AlpFade <= 0)
										{
										HealSparks[helly].AlpFade = 0;
										}
									else
										{
										HealSparks[helly].ScaleSTR += 10;
										HealSparks[helly].AlpFade -= 25;
										}

									if(HealSparks[helly].AvatarINCR < 70 && HealSparks[helly].LightRedFULL == 0)
										{
										HealSparks[helly].AvatarINCR = 70;
										HealSparks[helly].LightRedFULL = 1;
										}
									if(HealSparks[helly].AvatarINCG < 70 && HealSparks[helly].LightGreenFULL == 0)
										{
										HealSparks[helly].AvatarINCG = 70;
										HealSparks[helly].LightGreenFULL = 1;
										}
									
									if(HealSparks[helly].AvatarINCB < 70 && HealSparks[helly].LightBlueFULL == 0)
										{
										HealSparks[helly].AvatarINCB = 70;
										HealSparks[helly].LightBlueFULL = 1;
										}

									if(HealSparks[helly].HealTarget == 250)
									{ geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarINCR,HealSparks[helly].AvatarINCG,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE); }
									else { geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarINCR,HealSparks[helly].AvatarINCG,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE); }
									
									if(HealSparks[helly].LightRedFULL == 1 && HealSparks[helly].LightGreenFULL == 1 && HealSparks[helly].LightBlueFULL == 1)
										{
										HealSparks[helly].Absorbed = 3;
										}
									}

								if(HealSparks[helly].Absorbed == 3)
									{
									if((HealSparks[helly].AvatarINCR > HealSparks[helly].AvatarLightR) && (HealSparks[helly].LightRedFULL == 1))
										{
										HealSparks[helly].AvatarINCR = HealSparks[helly].AvatarLightR;
										HealSparks[helly].LightRedFULL = 0;
										}
									else if(HealSparks[helly].LightRedFULL == 1) HealSparks[helly].AvatarINCR += 20;

									if((HealSparks[helly].AvatarINCG > HealSparks[helly].AvatarLightG) && (HealSparks[helly].LightGreenFULL == 1))
										{
										HealSparks[helly].AvatarINCG = HealSparks[helly].AvatarLightG;
										HealSparks[helly].LightGreenFULL = 0;
										}
									else if(HealSparks[helly].LightGreenFULL == 1) HealSparks[helly].AvatarINCG += 20;

									if((HealSparks[helly].AvatarINCB > HealSparks[helly].AvatarLightB) && (HealSparks[helly].LightBlueFULL == 1))
										{
										HealSparks[helly].AvatarINCB = HealSparks[helly].AvatarLightB;
										HealSparks[helly].LightBlueFULL = 0;
										}
									else if(HealSparks[helly].LightBlueFULL == 1) HealSparks[helly].AvatarINCB += 20;


									if(HealSparks[helly].HealTarget == 250)
									{ geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarINCR,HealSparks[helly].AvatarINCG,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE); }
									else { geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarINCR,HealSparks[helly].AvatarINCG,HealSparks[helly].AvatarINCB,GE_FALSE,8,NULL,GE_TRUE); }
									
									if(HealSparks[helly].LightRedFULL == 0 && HealSparks[helly].LightGreenFULL == 0 && HealSparks[helly].LightBlueFULL == 0)
										{
										if(HealSparks[helly].HealTarget == 250)
										{ geActor_SetLightingOptions(playact.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarLightR,HealSparks[helly].AvatarLightG,HealSparks[helly].AvatarLightB,GE_FALSE,8,NULL,GE_TRUE); }
										else { geActor_SetLightingOptions(Forge[HealSparks[helly].HealTarget].Avatar.Actor,GE_TRUE,&goup,200,200,200,HealSparks[helly].AvatarLightR,HealSparks[helly].AvatarLightG,HealSparks[helly].AvatarLightB,GE_FALSE,8,NULL,GE_TRUE); }
										}
									}

								if(HealSparks[helly].Absorbed == 5)
									{
									jet=0;
									while(jet < 15 && (NomPntSprite < 24998))
										{
										Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
										Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
										Q_PntSprite[NomPntSprite].Scale = 0.065f;
										Q_PntSprite[NomPntSprite].PartType = 58;

										Q_PntSprite[NomPntSprite].IR = 0;
										Q_PntSprite[NomPntSprite].IG = 0;
										Q_PntSprite[NomPntSprite].IB = 0;

										Q_PntSprite[NomPntSprite].Alpha = 75;
										Q_PntSprite[NomPntSprite].Speed = 0.1;
										Q_PntSprite[NomPntSprite].Pos = HealSparks[helly].Pos;

										Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
										Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
										Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

										Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
										Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
										Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

										Q_PntSprite[NomPntSprite].ActorID = HealSparks[helly].ActorID;

										Q_PntSprite[NomPntSprite].Live = 1;

										NomPntSprite++;
										jet++;
										}
									}
								}

							HealSparks[helly].CNTR += TimeScale;

							if(HealSparks[helly].CNTR > 1)
								{
								HealSparks[helly].CNTR = 0;

								jet=0;
								while(jet < 2 && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;
									Q_PntSprite[NomPntSprite].Scale = 0.015f;
									Q_PntSprite[NomPntSprite].PartType = 57;

									Q_PntSprite[NomPntSprite].IR = 0;
									Q_PntSprite[NomPntSprite].IG = 0;
									Q_PntSprite[NomPntSprite].IB = 0;

									Q_PntSprite[NomPntSprite].Alpha = 75;
									Q_PntSprite[NomPntSprite].Speed = 0.1;
									Q_PntSprite[NomPntSprite].Pos = HealSparks[helly].Pos;

									Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
									Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

									Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*1;
									Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*1;

									Q_PntSprite[NomPntSprite].ActorID = HealSparks[helly].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}
								}
							}break;
						}
					

					//### Spark Drawing Scale
					
					HealSparks[helly].Scale = HealSparks[helly].ScaleSTR;
					HealSparks[helly].Type = GE_TEXTURED_POLY;
					HealSparks[helly].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
					HealSparks[helly].ScaleBIT = 0.15f;	//0.2

					//Calculate Direction Vectors
					geXForm3d_SetYRotation(&RotateMatrix, PI/2);
					geXForm3d_Rotate(&RotateMatrix, &HealSparks[helly].TraVec, &HealSparks[helly].VecLeft);
					geVec3d_Normalize(&HealSparks[helly].VecLeft);
					HealSparks[helly].VecLeft.Y = 0;

					geVec3d_CrossProduct(&HealSparks[helly].VecLeft, &HealSparks[helly].TraVec, &HealSparks[helly].VecUp);
					geVec3d_Normalize(&HealSparks[helly].VecUp);

					HealSparks[helly].VecSTR = HealSparks[helly].TraVec;
					geVec3d_Normalize(&HealSparks[helly].TraVec);

					//Front Vert
					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/17, &HealSparks[helly].TraVec, &HealSparks[helly].VertF1);

					//Ball Verts
					//Standard Left Up down
					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/8, &HealSparks[helly].VecUp, &HealSparks[helly].VertB1);

					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/12, &HealSparks[helly].VecUp, &HealSparks[helly].VertB2);
					geVec3d_MA(&HealSparks[helly].VertB2, HealSparks[helly].Scale/12, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB2);

					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/8, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB3);

					geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/12, &HealSparks[helly].VecUp, &HealSparks[helly].VertB4);
					geVec3d_MA(&HealSparks[helly].VertB4, HealSparks[helly].Scale/12, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB4);

					geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/8, &HealSparks[helly].VecUp, &HealSparks[helly].VertB5);

					geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/12, &HealSparks[helly].VecUp, &HealSparks[helly].VertB6);
					geVec3d_MA(&HealSparks[helly].VertB6, -HealSparks[helly].Scale/12, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB6);

					geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/8, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB7);

					geVec3d_MA(&HealSparks[helly].Pos, HealSparks[helly].Scale/12, &HealSparks[helly].VecUp, &HealSparks[helly].VertB8);
					geVec3d_MA(&HealSparks[helly].VertB8, -HealSparks[helly].Scale/12, &HealSparks[helly].VecLeft, &HealSparks[helly].VertB8);

					//### Twist Tail Points round
					HealSparks[helly].VecSTR = HealSparks[helly].TraVec;
					HealSparks[helly].DownSpeedSTR = HealSparks[helly].DownSpeed;

					HealSparks[helly].TraVec.Y += (HealSparks[helly].DownSpeed*TimeScale);
					HealSparks[helly].TraLength = geVec3d_Length(&HealSparks[helly].TraVec);
					geVec3d_MA(&HealSparks[helly].Pos, -((HealSparks[helly].Speed*(HealSparks[helly].TraLength*1))*TimeScale), &HealSparks[helly].TraVec, &HealSparks[helly].PosBrush);

					HealSparks[helly].TraVec = HealSparks[helly].VecSTR;
					HealSparks[helly].DownSpeed = HealSparks[helly].DownSpeedSTR;

					//Shift back for tail verts  ##WORKS BUT FROZEN
					//geVec3d_MA(&HealSparks[helly].Pos, -HealSparks[helly].Scale/2.6, &HealSparks[helly].TraVec, &HealSparks[helly].PosBrush);

					//### Reduce Scale for tail verts
					HealSparks[helly].Scale /= 3;

					//Tail Verts
					//Standard Left Up down
					geVec3d_MA(&HealSparks[helly].PosBrush, HealSparks[helly].Scale/24, &HealSparks[helly].VecUp, &HealSparks[helly].VertT1);

					geVec3d_MA(&HealSparks[helly].PosBrush, HealSparks[helly].Scale/36, &HealSparks[helly].VecUp, &HealSparks[helly].VertT2);
					geVec3d_MA(&HealSparks[helly].VertT2, HealSparks[helly].Scale/36, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT2);

					geVec3d_MA(&HealSparks[helly].PosBrush, HealSparks[helly].Scale/24, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT3);

					geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/36, &HealSparks[helly].VecUp, &HealSparks[helly].VertT4);
					geVec3d_MA(&HealSparks[helly].VertT4, HealSparks[helly].Scale/36, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT4);

					geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/24, &HealSparks[helly].VecUp, &HealSparks[helly].VertT5);


					geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/36, &HealSparks[helly].VecUp, &HealSparks[helly].VertT6);
					geVec3d_MA(&HealSparks[helly].VertT6, -HealSparks[helly].Scale/36, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT6);

					geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/24, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT7);

					geVec3d_MA(&HealSparks[helly].PosBrush, HealSparks[helly].Scale/36, &HealSparks[helly].VecUp, &HealSparks[helly].VertT8);
					geVec3d_MA(&HealSparks[helly].VertT8, -HealSparks[helly].Scale/36, &HealSparks[helly].VecLeft, &HealSparks[helly].VertT8);

					//Shift back for End Vert
					//geVec3d_MA(&HealSparks[helly].PosBrush, -HealSparks[helly].Scale/2, &HealSparks[helly].TraVec, &HealSparks[helly].VertE1);

					//### Twist End Point round
					HealSparks[helly].VecSTR = HealSparks[helly].TraVec;
					HealSparks[helly].DownSpeedSTR = HealSparks[helly].DownSpeed;

					HealSparks[helly].TraVec.Y += (HealSparks[helly].DownSpeed*TimeScale);
					HealSparks[helly].TraLength = geVec3d_Length(&HealSparks[helly].TraVec);
					geVec3d_MA(&HealSparks[helly].Pos, -((HealSparks[helly].Speed*(HealSparks[helly].TraLength*2.4))*TimeScale), &HealSparks[helly].TraVec, &HealSparks[helly].VertE1);

					HealSparks[helly].TraVec = HealSparks[helly].VecSTR;
					HealSparks[helly].DownSpeed = HealSparks[helly].DownSpeedSTR;

					if(HealSparks[helly].Absorbed == 0)
						{
						if(HealSparks[helly].FadeDir == 0)
							{
							HealSparks[helly].AlpFade -= 40;//((((float)rand() / 32767)*10)+5);
							if(HealSparks[helly].AlpFade <= 170)
								{
								HealSparks[helly].AlpFade = 170;
								HealSparks[helly].FadeDir = 1;
								}
							}

						if(HealSparks[helly].FadeDir == 1)
							{
							HealSparks[helly].AlpFade += 40;//((((float)rand() / 32767)*10)+5);
							if(HealSparks[helly].AlpFade >= 255)
								{
								HealSparks[helly].AlpFade = 255;
								HealSparks[helly].FadeDir = 0;
								}
							}
						}
					


						a=0;
						while( a <= 23 )
							{
							b=0;
							while( b <= 3 )
								{
								HealSparks[helly].Lvert[a][b].a = HealSparks[helly].AlpFade;
								HealSparks[helly].Lvert[a][b].b = 255;
								HealSparks[helly].Lvert[a][b].g = 225;
								HealSparks[helly].Lvert[a][b].r = 225;
								b++;
								}
							a++;
							}

						//Set Corona
						HealSparks[helly].Lvert[24][0].a = HealSparks[helly].AlpFade/2.2;
						HealSparks[helly].Lvert[24][0].b = 255;
						HealSparks[helly].Lvert[24][0].g = 255;
						HealSparks[helly].Lvert[24][0].r = 255;

							//First Ring
							//## FRONT ##
							HealSparks[helly].Lvert[0][0].u = 0.5;
							HealSparks[helly].Lvert[0][0].v = 1;
							HealSparks[helly].Lvert[0][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[0][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[0][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[0][1].u = 0;
							HealSparks[helly].Lvert[0][1].v = 0;
							HealSparks[helly].Lvert[0][1].X = HealSparks[helly].VertB1.X;
							HealSparks[helly].Lvert[0][1].Y = HealSparks[helly].VertB1.Y;
							HealSparks[helly].Lvert[0][1].Z = HealSparks[helly].VertB1.Z;

							HealSparks[helly].Lvert[0][2].u = 1;
							HealSparks[helly].Lvert[0][2].v = 0;
							HealSparks[helly].Lvert[0][2].X = HealSparks[helly].VertB2.X;
							HealSparks[helly].Lvert[0][2].Y = HealSparks[helly].VertB2.Y;
							HealSparks[helly].Lvert[0][2].Z = HealSparks[helly].VertB2.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[1][0].u = 0.5;
							HealSparks[helly].Lvert[1][0].v = 1;
							HealSparks[helly].Lvert[1][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[1][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[1][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[1][1].u = 0;
							HealSparks[helly].Lvert[1][1].v = 0;
							HealSparks[helly].Lvert[1][1].X = HealSparks[helly].VertB2.X;
							HealSparks[helly].Lvert[1][1].Y = HealSparks[helly].VertB2.Y;
							HealSparks[helly].Lvert[1][1].Z = HealSparks[helly].VertB2.Z;
								
							HealSparks[helly].Lvert[1][2].u = 1;
							HealSparks[helly].Lvert[1][2].v = 0;
							HealSparks[helly].Lvert[1][2].X = HealSparks[helly].VertB3.X;
							HealSparks[helly].Lvert[1][2].Y = HealSparks[helly].VertB3.Y;
							HealSparks[helly].Lvert[1][2].Z = HealSparks[helly].VertB3.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[2][0].u = 0.5;
							HealSparks[helly].Lvert[2][0].v = 0;
							HealSparks[helly].Lvert[2][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[2][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[2][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[2][1].u = 0;
							HealSparks[helly].Lvert[2][1].v = 1;
							HealSparks[helly].Lvert[2][1].X = HealSparks[helly].VertB3.X;
							HealSparks[helly].Lvert[2][1].Y = HealSparks[helly].VertB3.Y;
							HealSparks[helly].Lvert[2][1].Z = HealSparks[helly].VertB3.Z;
								
							HealSparks[helly].Lvert[2][2].u = 1;
							HealSparks[helly].Lvert[2][2].v = 0.5;
							HealSparks[helly].Lvert[2][2].X = HealSparks[helly].VertB4.X;
							HealSparks[helly].Lvert[2][2].Y = HealSparks[helly].VertB4.Y;
							HealSparks[helly].Lvert[2][2].Z = HealSparks[helly].VertB4.Z;


							//## FRONT ##
							HealSparks[helly].Lvert[3][0].u = 0.5;
							HealSparks[helly].Lvert[3][0].v = 1;
							HealSparks[helly].Lvert[3][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[3][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[3][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[3][1].u = 1;
							HealSparks[helly].Lvert[3][1].v = 1;
							HealSparks[helly].Lvert[3][1].X = HealSparks[helly].VertB4.X;
							HealSparks[helly].Lvert[3][1].Y = HealSparks[helly].VertB4.Y;
							HealSparks[helly].Lvert[3][1].Z = HealSparks[helly].VertB4.Z;
								
							HealSparks[helly].Lvert[3][2].u = 1;
							HealSparks[helly].Lvert[3][2].v = 0;
							HealSparks[helly].Lvert[3][2].X = HealSparks[helly].VertB5.X;
							HealSparks[helly].Lvert[3][2].Y = HealSparks[helly].VertB5.Y;
							HealSparks[helly].Lvert[3][2].Z = HealSparks[helly].VertB5.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[4][0].u = 0.5;
							HealSparks[helly].Lvert[4][0].v = 1;
							HealSparks[helly].Lvert[4][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[4][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[4][0].Z = HealSparks[helly].VertF1.Z;
								
							HealSparks[helly].Lvert[4][1].u = 0;
							HealSparks[helly].Lvert[4][1].v = 0;
							HealSparks[helly].Lvert[4][1].X = HealSparks[helly].VertB5.X;
							HealSparks[helly].Lvert[4][1].Y = HealSparks[helly].VertB5.Y;
							HealSparks[helly].Lvert[4][1].Z = HealSparks[helly].VertB5.Z;
								
							HealSparks[helly].Lvert[4][2].u = 1;
							HealSparks[helly].Lvert[4][2].v = 0;
							HealSparks[helly].Lvert[4][2].X = HealSparks[helly].VertB6.X;
							HealSparks[helly].Lvert[4][2].Y = HealSparks[helly].VertB6.Y;
							HealSparks[helly].Lvert[4][2].Z = HealSparks[helly].VertB6.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[5][0].u = 0.5;
							HealSparks[helly].Lvert[5][0].v = 0;
							HealSparks[helly].Lvert[5][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[5][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[5][0].Z = HealSparks[helly].VertF1.Z;

							HealSparks[helly].Lvert[5][1].u = 0;
							HealSparks[helly].Lvert[5][1].v = 1;
							HealSparks[helly].Lvert[5][1].X = HealSparks[helly].VertB6.X;
							HealSparks[helly].Lvert[5][1].Y = HealSparks[helly].VertB6.Y;
							HealSparks[helly].Lvert[5][1].Z = HealSparks[helly].VertB6.Z;

							HealSparks[helly].Lvert[5][2].u = 1;
							HealSparks[helly].Lvert[5][2].v = 0.5;
							HealSparks[helly].Lvert[5][2].X = HealSparks[helly].VertB7.X;
							HealSparks[helly].Lvert[5][2].Y = HealSparks[helly].VertB7.Y;
							HealSparks[helly].Lvert[5][2].Z = HealSparks[helly].VertB7.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[6][0].u = 0.5;
							HealSparks[helly].Lvert[6][0].v = 0;
							HealSparks[helly].Lvert[6][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[6][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[6][0].Z = HealSparks[helly].VertF1.Z;

							HealSparks[helly].Lvert[6][1].u = 0;
							HealSparks[helly].Lvert[6][1].v = 1;
							HealSparks[helly].Lvert[6][1].X = HealSparks[helly].VertB7.X;
							HealSparks[helly].Lvert[6][1].Y = HealSparks[helly].VertB7.Y;
							HealSparks[helly].Lvert[6][1].Z = HealSparks[helly].VertB7.Z;

							HealSparks[helly].Lvert[6][2].u = 1;
							HealSparks[helly].Lvert[6][2].v = 0.5;
							HealSparks[helly].Lvert[6][2].X = HealSparks[helly].VertB8.X;
							HealSparks[helly].Lvert[6][2].Y = HealSparks[helly].VertB8.Y;
							HealSparks[helly].Lvert[6][2].Z = HealSparks[helly].VertB8.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[7][0].u = 0.5;
							HealSparks[helly].Lvert[7][0].v = 0;
							HealSparks[helly].Lvert[7][0].X = HealSparks[helly].VertF1.X;
							HealSparks[helly].Lvert[7][0].Y = HealSparks[helly].VertF1.Y;
							HealSparks[helly].Lvert[7][0].Z = HealSparks[helly].VertF1.Z;

							HealSparks[helly].Lvert[7][1].u = 0;
							HealSparks[helly].Lvert[7][1].v = 1;
							HealSparks[helly].Lvert[7][1].X = HealSparks[helly].VertB8.X;
							HealSparks[helly].Lvert[7][1].Y = HealSparks[helly].VertB8.Y;
							HealSparks[helly].Lvert[7][1].Z = HealSparks[helly].VertB8.Z;
								
							HealSparks[helly].Lvert[7][2].u = 1;
							HealSparks[helly].Lvert[7][2].v = 0.5;
							HealSparks[helly].Lvert[7][2].X = HealSparks[helly].VertB1.X;
							HealSparks[helly].Lvert[7][2].Y = HealSparks[helly].VertB1.Y;
							HealSparks[helly].Lvert[7][2].Z = HealSparks[helly].VertB1.Z;


						//### Next Ring
							//## FRONT ##
							HealSparks[helly].Lvert[8][0].u = 0;
							HealSparks[helly].Lvert[8][0].v = 1;
							HealSparks[helly].Lvert[8][0].X = HealSparks[helly].VertB1.X;
							HealSparks[helly].Lvert[8][0].Y = HealSparks[helly].VertB1.Y;
							HealSparks[helly].Lvert[8][0].Z = HealSparks[helly].VertB1.Z;

							HealSparks[helly].Lvert[8][1].u = 0;
							HealSparks[helly].Lvert[8][1].v = 1;
							HealSparks[helly].Lvert[8][1].X = HealSparks[helly].VertT1.X;
							HealSparks[helly].Lvert[8][1].Y = HealSparks[helly].VertT1.Y;
							HealSparks[helly].Lvert[8][1].Z = HealSparks[helly].VertT1.Z;

							HealSparks[helly].Lvert[8][2].u = 1;
							HealSparks[helly].Lvert[8][2].v = 0;
							HealSparks[helly].Lvert[8][2].X = HealSparks[helly].VertT2.X;
							HealSparks[helly].Lvert[8][2].Y = HealSparks[helly].VertT2.Y;
							HealSparks[helly].Lvert[8][2].Z = HealSparks[helly].VertT2.Z;

							HealSparks[helly].Lvert[8][3].u = 1;
							HealSparks[helly].Lvert[8][3].v = 0;
							HealSparks[helly].Lvert[8][3].X = HealSparks[helly].VertB2.X;
							HealSparks[helly].Lvert[8][3].Y = HealSparks[helly].VertB2.Y;
							HealSparks[helly].Lvert[8][3].Z = HealSparks[helly].VertB2.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[9][0].u = 0;
							HealSparks[helly].Lvert[9][0].v = 1;
							HealSparks[helly].Lvert[9][0].X = HealSparks[helly].VertB2.X;
							HealSparks[helly].Lvert[9][0].Y = HealSparks[helly].VertB2.Y;
							HealSparks[helly].Lvert[9][0].Z = HealSparks[helly].VertB2.Z;

							HealSparks[helly].Lvert[9][1].u = 0;
							HealSparks[helly].Lvert[9][1].v = 0;
							HealSparks[helly].Lvert[9][1].X = HealSparks[helly].VertT2.X;
							HealSparks[helly].Lvert[9][1].Y = HealSparks[helly].VertT2.Y;
							HealSparks[helly].Lvert[9][1].Z = HealSparks[helly].VertT2.Z;
								
							HealSparks[helly].Lvert[9][2].u = 1;
							HealSparks[helly].Lvert[9][2].v = 0;
							HealSparks[helly].Lvert[9][2].X = HealSparks[helly].VertT3.X;
							HealSparks[helly].Lvert[9][2].Y = HealSparks[helly].VertT3.Y;
							HealSparks[helly].Lvert[9][2].Z = HealSparks[helly].VertT3.Z;

							HealSparks[helly].Lvert[9][3].u = 1;
							HealSparks[helly].Lvert[9][3].v = 0;
							HealSparks[helly].Lvert[9][3].X = HealSparks[helly].VertB3.X;
							HealSparks[helly].Lvert[9][3].Y = HealSparks[helly].VertB3.Y;
							HealSparks[helly].Lvert[9][3].Z = HealSparks[helly].VertB3.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[10][0].u = 0;
							HealSparks[helly].Lvert[10][0].v = 0;
							HealSparks[helly].Lvert[10][0].X = HealSparks[helly].VertB3.X;
							HealSparks[helly].Lvert[10][0].Y = HealSparks[helly].VertB3.Y;
							HealSparks[helly].Lvert[10][0].Z = HealSparks[helly].VertB3.Z;

							HealSparks[helly].Lvert[10][1].u = 0;
							HealSparks[helly].Lvert[10][1].v = 1;
							HealSparks[helly].Lvert[10][1].X = HealSparks[helly].VertT3.X;
							HealSparks[helly].Lvert[10][1].Y = HealSparks[helly].VertT3.Y;
							HealSparks[helly].Lvert[10][1].Z = HealSparks[helly].VertT3.Z;
								
							HealSparks[helly].Lvert[10][2].u = 1;
							HealSparks[helly].Lvert[10][2].v = 0.5;
							HealSparks[helly].Lvert[10][2].X = HealSparks[helly].VertT4.X;
							HealSparks[helly].Lvert[10][2].Y = HealSparks[helly].VertT4.Y;
							HealSparks[helly].Lvert[10][2].Z = HealSparks[helly].VertT4.Z;

							HealSparks[helly].Lvert[10][3].u = 1;
							HealSparks[helly].Lvert[10][3].v = 0.5;
							HealSparks[helly].Lvert[10][3].X = HealSparks[helly].VertB4.X;
							HealSparks[helly].Lvert[10][3].Y = HealSparks[helly].VertB4.Y;
							HealSparks[helly].Lvert[10][3].Z = HealSparks[helly].VertB4.Z;


							//## FRONT ##
							HealSparks[helly].Lvert[11][0].u = 0;
							HealSparks[helly].Lvert[11][0].v = 1;
							HealSparks[helly].Lvert[11][0].X = HealSparks[helly].VertB4.X;
							HealSparks[helly].Lvert[11][0].Y = HealSparks[helly].VertB4.Y;
							HealSparks[helly].Lvert[11][0].Z = HealSparks[helly].VertB4.Z;
								
							HealSparks[helly].Lvert[11][1].u = 0;
							HealSparks[helly].Lvert[11][1].v = 1;
							HealSparks[helly].Lvert[11][1].X = HealSparks[helly].VertT4.X;
							HealSparks[helly].Lvert[11][1].Y = HealSparks[helly].VertT4.Y;
							HealSparks[helly].Lvert[11][1].Z = HealSparks[helly].VertT4.Z;

							HealSparks[helly].Lvert[11][2].u = 1;
							HealSparks[helly].Lvert[11][2].v = 0;
							HealSparks[helly].Lvert[11][2].X = HealSparks[helly].VertT5.X;
							HealSparks[helly].Lvert[11][2].Y = HealSparks[helly].VertT5.Y;
							HealSparks[helly].Lvert[11][2].Z = HealSparks[helly].VertT5.Z;

							HealSparks[helly].Lvert[11][3].u = 1;
							HealSparks[helly].Lvert[11][3].v = 0;
							HealSparks[helly].Lvert[11][3].X = HealSparks[helly].VertB5.X;
							HealSparks[helly].Lvert[11][3].Y = HealSparks[helly].VertB5.Y;
							HealSparks[helly].Lvert[11][3].Z = HealSparks[helly].VertB5.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[12][0].u = 0;
							HealSparks[helly].Lvert[12][0].v = 1;
							HealSparks[helly].Lvert[12][0].X = HealSparks[helly].VertB5.X;
							HealSparks[helly].Lvert[12][0].Y = HealSparks[helly].VertB5.Y;
							HealSparks[helly].Lvert[12][0].Z = HealSparks[helly].VertB5.Z;
								
							HealSparks[helly].Lvert[12][1].u = 0;
							HealSparks[helly].Lvert[12][1].v = 0;
							HealSparks[helly].Lvert[12][1].X = HealSparks[helly].VertT5.X;
							HealSparks[helly].Lvert[12][1].Y = HealSparks[helly].VertT5.Y;
							HealSparks[helly].Lvert[12][1].Z = HealSparks[helly].VertT5.Z;
								
							HealSparks[helly].Lvert[12][2].u = 1;
							HealSparks[helly].Lvert[12][2].v = 0;
							HealSparks[helly].Lvert[12][2].X = HealSparks[helly].VertT6.X;
							HealSparks[helly].Lvert[12][2].Y = HealSparks[helly].VertT6.Y;
							HealSparks[helly].Lvert[12][2].Z = HealSparks[helly].VertT6.Z;

							HealSparks[helly].Lvert[12][3].u = 1;
							HealSparks[helly].Lvert[12][3].v = 0;
							HealSparks[helly].Lvert[12][3].X = HealSparks[helly].VertB6.X;
							HealSparks[helly].Lvert[12][3].Y = HealSparks[helly].VertB6.Y;
							HealSparks[helly].Lvert[12][3].Z = HealSparks[helly].VertB6.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[13][0].u = 0;
							HealSparks[helly].Lvert[13][0].v = 0;
							HealSparks[helly].Lvert[13][0].X = HealSparks[helly].VertB6.X;
							HealSparks[helly].Lvert[13][0].Y = HealSparks[helly].VertB6.Y;
							HealSparks[helly].Lvert[13][0].Z = HealSparks[helly].VertB6.Z;

							HealSparks[helly].Lvert[13][1].u = 0;
							HealSparks[helly].Lvert[13][1].v = 1;
							HealSparks[helly].Lvert[13][1].X = HealSparks[helly].VertT6.X;
							HealSparks[helly].Lvert[13][1].Y = HealSparks[helly].VertT6.Y;
							HealSparks[helly].Lvert[13][1].Z = HealSparks[helly].VertT6.Z;
								
							HealSparks[helly].Lvert[13][2].u = 1;
							HealSparks[helly].Lvert[13][2].v = 0.5;
							HealSparks[helly].Lvert[13][2].X = HealSparks[helly].VertT7.X;
							HealSparks[helly].Lvert[13][2].Y = HealSparks[helly].VertT7.Y;
							HealSparks[helly].Lvert[13][2].Z = HealSparks[helly].VertT7.Z;

							HealSparks[helly].Lvert[13][3].u = 1;
							HealSparks[helly].Lvert[13][3].v = 0.5;
							HealSparks[helly].Lvert[13][3].X = HealSparks[helly].VertB7.X;
							HealSparks[helly].Lvert[13][3].Y = HealSparks[helly].VertB7.Y;
							HealSparks[helly].Lvert[13][3].Z = HealSparks[helly].VertB7.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[14][0].u = 0;
							HealSparks[helly].Lvert[14][0].v = 0;
							HealSparks[helly].Lvert[14][0].X = HealSparks[helly].VertB7.X;
							HealSparks[helly].Lvert[14][0].Y = HealSparks[helly].VertB7.Y;
							HealSparks[helly].Lvert[14][0].Z = HealSparks[helly].VertB7.Z;
								
							HealSparks[helly].Lvert[14][1].u = 0;
							HealSparks[helly].Lvert[14][1].v = 1;
							HealSparks[helly].Lvert[14][1].X = HealSparks[helly].VertT7.X;
							HealSparks[helly].Lvert[14][1].Y = HealSparks[helly].VertT7.Y;
							HealSparks[helly].Lvert[14][1].Z = HealSparks[helly].VertT7.Z;
								
							HealSparks[helly].Lvert[14][2].u = 1;
							HealSparks[helly].Lvert[14][2].v = 0.5;
							HealSparks[helly].Lvert[14][2].X = HealSparks[helly].VertT8.X;
							HealSparks[helly].Lvert[14][2].Y = HealSparks[helly].VertT8.Y;
							HealSparks[helly].Lvert[14][2].Z = HealSparks[helly].VertT8.Z;

							HealSparks[helly].Lvert[14][3].u = 1;
							HealSparks[helly].Lvert[14][3].v = 0.5;
							HealSparks[helly].Lvert[14][3].X = HealSparks[helly].VertB8.X;
							HealSparks[helly].Lvert[14][3].Y = HealSparks[helly].VertB8.Y;
							HealSparks[helly].Lvert[14][3].Z = HealSparks[helly].VertB8.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[15][0].u = 0;
							HealSparks[helly].Lvert[15][0].v = 0;
							HealSparks[helly].Lvert[15][0].X = HealSparks[helly].VertB8.X;
							HealSparks[helly].Lvert[15][0].Y = HealSparks[helly].VertB8.Y;
							HealSparks[helly].Lvert[15][0].Z = HealSparks[helly].VertB8.Z;

							HealSparks[helly].Lvert[15][1].u = 0;
							HealSparks[helly].Lvert[15][1].v = 1;
							HealSparks[helly].Lvert[15][1].X = HealSparks[helly].VertT8.X;
							HealSparks[helly].Lvert[15][1].Y = HealSparks[helly].VertT8.Y;
							HealSparks[helly].Lvert[15][1].Z = HealSparks[helly].VertT8.Z;

							HealSparks[helly].Lvert[15][2].u = 1;
							HealSparks[helly].Lvert[15][2].v = 0.5;
							HealSparks[helly].Lvert[15][2].X = HealSparks[helly].VertT1.X;
							HealSparks[helly].Lvert[15][2].Y = HealSparks[helly].VertT1.Y;
							HealSparks[helly].Lvert[15][2].Z = HealSparks[helly].VertT1.Z;

							HealSparks[helly].Lvert[15][3].u = 1;
							HealSparks[helly].Lvert[15][3].v = 0.5;
							HealSparks[helly].Lvert[15][3].X = HealSparks[helly].VertB1.X;
							HealSparks[helly].Lvert[15][3].Y = HealSparks[helly].VertB1.Y;
							HealSparks[helly].Lvert[15][3].Z = HealSparks[helly].VertB1.Z;


						//Tail End
							//END Ring
							//## FRONT ##
							HealSparks[helly].Lvert[16][0].u = 0.5;
							HealSparks[helly].Lvert[16][0].v = 1;
							HealSparks[helly].Lvert[16][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[16][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[16][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[16][1].u = 0;
							HealSparks[helly].Lvert[16][1].v = 0;
							HealSparks[helly].Lvert[16][1].X = HealSparks[helly].VertT1.X;
							HealSparks[helly].Lvert[16][1].Y = HealSparks[helly].VertT1.Y;
							HealSparks[helly].Lvert[16][1].Z = HealSparks[helly].VertT1.Z;
								
							HealSparks[helly].Lvert[16][2].u = 1;
							HealSparks[helly].Lvert[16][2].v = 0;
							HealSparks[helly].Lvert[16][2].X = HealSparks[helly].VertT2.X;
							HealSparks[helly].Lvert[16][2].Y = HealSparks[helly].VertT2.Y;
							HealSparks[helly].Lvert[16][2].Z = HealSparks[helly].VertT2.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[17][0].u = 0.5;
							HealSparks[helly].Lvert[17][0].v = 1;
							HealSparks[helly].Lvert[17][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[17][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[17][0].Z = HealSparks[helly].VertE1.Z;
								
							HealSparks[helly].Lvert[17][1].u = 0;
							HealSparks[helly].Lvert[17][1].v = 0;
							HealSparks[helly].Lvert[17][1].X = HealSparks[helly].VertT2.X;
							HealSparks[helly].Lvert[17][1].Y = HealSparks[helly].VertT2.Y;
							HealSparks[helly].Lvert[17][1].Z = HealSparks[helly].VertT2.Z;
								
							HealSparks[helly].Lvert[17][2].u = 1;
							HealSparks[helly].Lvert[17][2].v = 0;
							HealSparks[helly].Lvert[17][2].X = HealSparks[helly].VertT3.X;
							HealSparks[helly].Lvert[17][2].Y = HealSparks[helly].VertT3.Y;
							HealSparks[helly].Lvert[17][2].Z = HealSparks[helly].VertT3.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[18][0].u = 0.5;
							HealSparks[helly].Lvert[18][0].v = 0;
							HealSparks[helly].Lvert[18][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[18][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[18][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[18][1].u = 0;
							HealSparks[helly].Lvert[18][1].v = 0;
							HealSparks[helly].Lvert[18][1].X = HealSparks[helly].VertT4.X;
							HealSparks[helly].Lvert[18][1].Y = HealSparks[helly].VertT4.Y;
							HealSparks[helly].Lvert[18][1].Z = HealSparks[helly].VertT4.Z;

							HealSparks[helly].Lvert[18][2].u = 1;
							HealSparks[helly].Lvert[18][2].v = 0.5;
							HealSparks[helly].Lvert[18][2].X = HealSparks[helly].VertT3.X;
							HealSparks[helly].Lvert[18][2].Y = HealSparks[helly].VertT3.Y;
							HealSparks[helly].Lvert[18][2].Z = HealSparks[helly].VertT3.Z;


							//## FRONT ##
							HealSparks[helly].Lvert[19][0].u = 0.5;
							HealSparks[helly].Lvert[19][0].v = 1;
							HealSparks[helly].Lvert[19][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[19][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[19][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[19][1].u = 1;
							HealSparks[helly].Lvert[19][1].v = 0;
							HealSparks[helly].Lvert[19][1].X = HealSparks[helly].VertT4.X;
							HealSparks[helly].Lvert[19][1].Y = HealSparks[helly].VertT4.Y;
							HealSparks[helly].Lvert[19][1].Z = HealSparks[helly].VertT4.Z;

							HealSparks[helly].Lvert[19][2].u = 1;
							HealSparks[helly].Lvert[19][2].v = 0;
							HealSparks[helly].Lvert[19][2].X = HealSparks[helly].VertT5.X;
							HealSparks[helly].Lvert[19][2].Y = HealSparks[helly].VertT5.Y;
							HealSparks[helly].Lvert[19][2].Z = HealSparks[helly].VertT5.Z;


							//## MIDDLE ##
							HealSparks[helly].Lvert[20][0].u = 0.5;
							HealSparks[helly].Lvert[20][0].v = 1;
							HealSparks[helly].Lvert[20][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[20][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[20][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[20][1].u = 0;
							HealSparks[helly].Lvert[20][1].v = 0;
							HealSparks[helly].Lvert[20][1].X = HealSparks[helly].VertT6.X;
							HealSparks[helly].Lvert[20][1].Y = HealSparks[helly].VertT6.Y;
							HealSparks[helly].Lvert[20][1].Z = HealSparks[helly].VertT6.Z;
								
							HealSparks[helly].Lvert[20][2].u = 1;
							HealSparks[helly].Lvert[20][2].v = 0;
							HealSparks[helly].Lvert[20][2].X = HealSparks[helly].VertT5.X;
							HealSparks[helly].Lvert[20][2].Y = HealSparks[helly].VertT5.Y;
							HealSparks[helly].Lvert[20][2].Z = HealSparks[helly].VertT5.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[21][0].u = 0.5;
							HealSparks[helly].Lvert[21][0].v = 0;
							HealSparks[helly].Lvert[21][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[21][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[21][0].Z = HealSparks[helly].VertE1.Z;
								
							HealSparks[helly].Lvert[21][1].u = 0;
							HealSparks[helly].Lvert[21][1].v = 0;
							HealSparks[helly].Lvert[21][1].X = HealSparks[helly].VertT7.X;
							HealSparks[helly].Lvert[21][1].Y = HealSparks[helly].VertT7.Y;
							HealSparks[helly].Lvert[21][1].Z = HealSparks[helly].VertT7.Z;

							HealSparks[helly].Lvert[21][2].u = 1;
							HealSparks[helly].Lvert[21][2].v = 0.5;
							HealSparks[helly].Lvert[21][2].X = HealSparks[helly].VertT6.X;
							HealSparks[helly].Lvert[21][2].Y = HealSparks[helly].VertT6.Y;
							HealSparks[helly].Lvert[21][2].Z = HealSparks[helly].VertT6.Z;


							//## TAIL ##
							HealSparks[helly].Lvert[22][0].u = 0.5;
							HealSparks[helly].Lvert[22][0].v = 0;
							HealSparks[helly].Lvert[22][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[22][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[22][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[22][1].u = 0;
							HealSparks[helly].Lvert[22][1].v = 0;
							HealSparks[helly].Lvert[22][1].X = HealSparks[helly].VertT8.X;
							HealSparks[helly].Lvert[22][1].Y = HealSparks[helly].VertT8.Y;
							HealSparks[helly].Lvert[22][1].Z = HealSparks[helly].VertT8.Z;
								
							HealSparks[helly].Lvert[22][2].u = 1;
							HealSparks[helly].Lvert[22][2].v = 0.5;
							HealSparks[helly].Lvert[22][2].X = HealSparks[helly].VertT7.X;
							HealSparks[helly].Lvert[22][2].Y = HealSparks[helly].VertT7.Y;
							HealSparks[helly].Lvert[22][2].Z = HealSparks[helly].VertT7.Z;

							//## TAIL ##
							HealSparks[helly].Lvert[23][0].u = 0.5;
							HealSparks[helly].Lvert[23][0].v = 0;
							HealSparks[helly].Lvert[23][0].X = HealSparks[helly].VertE1.X;
							HealSparks[helly].Lvert[23][0].Y = HealSparks[helly].VertE1.Y;
							HealSparks[helly].Lvert[23][0].Z = HealSparks[helly].VertE1.Z;

							HealSparks[helly].Lvert[23][1].u = 0;
							HealSparks[helly].Lvert[23][1].v = 0;
							HealSparks[helly].Lvert[23][1].X = HealSparks[helly].VertT1.X;
							HealSparks[helly].Lvert[23][1].Y = HealSparks[helly].VertT1.Y;
							HealSparks[helly].Lvert[23][1].Z = HealSparks[helly].VertT1.Z;

							HealSparks[helly].Lvert[23][2].u = 1;
							HealSparks[helly].Lvert[23][2].v = 0.5;
							HealSparks[helly].Lvert[23][2].X = HealSparks[helly].VertT8.X;
							HealSparks[helly].Lvert[23][2].Y = HealSparks[helly].VertT8.Y;
							HealSparks[helly].Lvert[23][2].Z = HealSparks[helly].VertT8.Z;


							//## CORONA ##
							HealSparks[helly].Lvert[24][0].u = 0;
							HealSparks[helly].Lvert[24][0].v = 0;
							HealSparks[helly].Lvert[24][0].X = HealSparks[helly].Pos.X;
							HealSparks[helly].Lvert[24][0].Y = HealSparks[helly].Pos.Y;
							HealSparks[helly].Lvert[24][0].Z = HealSparks[helly].Pos.Z;


						switch(HealSparks[helly].HTYPE)
							{
							case 0:
								{
								if(HealSparks[helly].AlpFade > 0)
									{
									i = 0;
									while(i <= 7)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 3, HealSparktail, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									i = 8;
									while(i <= 15)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 4, HealSparktail, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									i = 15;
									while(i <= 23)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 3, RanSpark, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[24][0], 1, SparkCorona[HealSparks[helly].CoronaMatCnt], GE_TEXTURED_POINT, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT * (HealSparks[helly].ScaleSTR / 33));
									}


								//### Increment Corona Material
								if(HealSparks[helly].CoronaMatCntDIR == 0)
									{
									HealSparks[helly].CoronaMatCnt++;
									if(HealSparks[helly].CoronaMatCnt > 3)
										{
										HealSparks[helly].CoronaMatCnt = 3;
										HealSparks[helly].CoronaMatCntDIR = 1;
										}
									}
								else
									{
									HealSparks[helly].CoronaMatCnt--;
									if(HealSparks[helly].CoronaMatCnt < 0)
										{
										HealSparks[helly].CoronaMatCnt = 0;
										HealSparks[helly].CoronaMatCntDIR = 0;
										}
									}
								}break;


							case 1:
								{
								if(HealSparks[helly].AlpFade > 0)
									{
									i = 0;
									while(i <= 7)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 3, EGrabSparktail, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									i = 8;
									while(i <= 15)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 4, EGrabSparktail, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									i = 15;
									while(i <= 23)
										{
										geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[i][0], 3, EGrabRanSpark, HealSparks[helly].Type, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT);
										i++;
										}

									geWorld_AddPolyOnce(World, &HealSparks[helly].Lvert[24][0], 1, EGrabCorona[HealSparks[helly].CoronaMatCnt], GE_TEXTURED_POINT, HealSparks[helly].RenderFlags, HealSparks[helly].ScaleBIT * (HealSparks[helly].ScaleSTR / 33));
									}


								//### Increment Corona Material
								if(HealSparks[helly].CoronaMatCntDIR == 0)
									{
									HealSparks[helly].CoronaMatCnt++;
									if(HealSparks[helly].CoronaMatCnt > 3)
										{
										HealSparks[helly].CoronaMatCnt = 3;
										HealSparks[helly].CoronaMatCntDIR = 1;
										}
									}
								else
									{
									HealSparks[helly].CoronaMatCnt--;
									if(HealSparks[helly].CoronaMatCnt < 0)
										{
										HealSparks[helly].CoronaMatCnt = 0;
										HealSparks[helly].CoronaMatCntDIR = 0;
										}
									}
								}break;
							}
					}

				helly++;
				}
			}
		}



	//########  - Spike System -  ########//

	if(NomSpikes > 0)
		{
		helly = 0;
		while(helly < NomSpikes)
			{
			if(HHSpike[helly].Live == 1)
				{
				switch(HHSpike[helly].EffectType)
					{
					
					case 0:	//##### - Heavy Hit Spikes - #####
						{
						//## Increment Timer (Unused)
						HHSpike[helly].Timer++;

						//### Conditionally Apply Gravity	//FROZEN
						//HHSpike[helly].TraVec.Y -= HHSpike[helly].Gravity*TimeScale;

						//#### Move End Of Spike Outwards
						geVec3d_MA(&HHSpike[helly].FrontPos, HHSpike[helly].Speed*TimeScale, &HHSpike[helly].TraVec, &HHSpike[helly].FrontPos);
						if(HHSpike[helly].MoveTail == 1) geVec3d_MA(&HHSpike[helly].TailPos, HHSpike[helly].Speed*TimeScale, &HHSpike[helly].TraVec, &HHSpike[helly].TailPos);

						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						if(HHSpike[helly].DistBetween > 130) HHSpike[helly].MoveTail = 1;


						//##### Alpha Control
						if(HHSpike[helly].FadeDir == 0)
							{
							if(HHSpike[helly].AlpFade + 70 < 255) HHSpike[helly].AlpFade += 70;
							else
								{
								HHSpike[helly].AlpFade = 255;
								HHSpike[helly].FadeDir = 1;
								}
							}

						if(HHSpike[helly].FadeDir == 1)
							{
							if(HHSpike[helly].AlpFade - 6 > 0) HHSpike[helly].AlpFade -= 6;
							else
								{
								HHSpike[helly].AlpFade = 0;
								HHSpike[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomSpikes - 1)
									{
									HHSpike[K] = HHSpike[K+1];
									K++;
									}

								NomSpikes--;
								}
							}


						//###### Increase Width
						if(HHSpike[helly].Width + 0.25 < 8) HHSpike[helly].Width += 0.25;
						else HHSpike[helly].Width = 8;

						//####### Draw Spike Tris
						if(HHSpike[helly].AlpFade > 0) DrawLaser(World, &HHSpike[helly].TailPos, &HHSpike[helly].FrontPos, &player.ViewXForm.Translation, HHSpike[helly].Width, HHSpikeBmp, HHSpike[helly].AlpFade, 255, 255, 255, 0);

						} break;


					case 1:	//##### - Hadou-ken Spikes - #####
						{
						//## Increment Timer (Unused)
						HHSpike[helly].Timer++;

						//###### Move End Of Spike Outwards ######
						//### Check Distance
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						if(HHSpike[helly].DistBetween < 180) geVec3d_MA(&HHSpike[helly].FrontPos, HHSpike[helly].Speed*TimeScale, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						
						//### Follow Trajectory
						//geVec3d_MA(&HHSpike[helly].FrontPos, (HHSpike[helly].Speed*TimeScale)*50, &HHSpike[helly].TraVec, &HHSpike[helly].FrontPos);

						HHSpike[helly].FrontPos.X += HHSpike[helly].IncX;
						HHSpike[helly].FrontPos.Y += HHSpike[helly].IncY;
						HHSpike[helly].FrontPos.Z += HHSpike[helly].IncZ;

						//### Clip to static distance
						geVec3d_Subtract(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos, &HHSpike[helly].OutVec);
						geVec3d_Normalize(&HHSpike[helly].OutVec);

						//#### Maintain Spike Start Positions
						HHSpike[helly].CenterPos = Q_LEnergy[HHSpike[helly].EnergyID].LightPos;
						geVec3d_MA(&HHSpike[helly].CenterPos, HHSpike[helly].DistBetween, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);


						//### Randomly Alter Trajectory
						HHSpike[helly].IncX += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncY += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncZ += ((((float)rand() / 32767)-0.5)/50);

						//##### Alpha Control
						if(HHSpike[helly].FadeDir == 0)
							{
							if(HHSpike[helly].AlpFade + 25 < 255)
								{
								HHSpike[helly].AlpFade += 25;
								//###### Increase Width
								if(HHSpike[helly].Width + 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 12;
								}
							else
								{
								HHSpike[helly].AlpFade = 255;
								HHSpike[helly].FadeDir = 1;
								HHSpike[helly].Width = 8;
								}
							}

						if(HHSpike[helly].FadeDir == 1)
							{
							if(HHSpike[helly].AlpFade - 25 > 0)
								{
								HHSpike[helly].AlpFade -= 25;
								//###### Increase Width
								if(HHSpike[helly].Width - 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 0;
								}
							else
								{
								HHSpike[helly].AlpFade = 0;
								HHSpike[helly].FadeDir = 0;
								HHSpike[helly].Width = 0;
								}
							}
						
						//####### Draw Spike Tris
						if(HHSpike[helly].AlpFade > 0) DrawLaser(World, &HHSpike[helly].CenterPos, &HHSpike[helly].FrontPos, &player.ViewXForm.Translation, HHSpike[helly].Width, HADSpikeBmp, HHSpike[helly].AlpFade, 255, 255, 255, 0);

						if(Q_LEnergy[HHSpike[helly].EnergyID].Live == 0)
							{
							HHSpike[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomSpikes - 1)
								{
								HHSpike[K] = HHSpike[K+1];
								K++;
								}

							NomSpikes--;
							}
						} break;


					case 2:	//##### - Spawn Spikes - #####
						{
						//## Increment Timer (Unused)
						HHSpike[helly].Timer++;

						//### Conditionally Apply Gravity	//FROZEN
						//HHSpike[helly].TraVec.Y -= HHSpike[helly].Gravity*TimeScale;

						//#### Move End Of Spike Outwards
						geVec3d_MA(&HHSpike[helly].FrontPos, HHSpike[helly].Speed*TimeScale, &HHSpike[helly].TraVec, &HHSpike[helly].FrontPos);
						if(HHSpike[helly].MoveTail == 1) geVec3d_MA(&HHSpike[helly].TailPos, HHSpike[helly].Speed*TimeScale, &HHSpike[helly].TraVec, &HHSpike[helly].TailPos);

						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						if(HHSpike[helly].DistBetween > 130) HHSpike[helly].MoveTail = 1;


						//##### Alpha Control
						if(HHSpike[helly].FadeDir == 0)
							{
							if(HHSpike[helly].AlpFade + 70 < 255) HHSpike[helly].AlpFade += 70;
							else
								{
								HHSpike[helly].AlpFade = 255;
								HHSpike[helly].FadeDir = 1;
								}
							}

						if(HHSpike[helly].FadeDir == 1)
							{
							if(HHSpike[helly].AlpFade - 6 > 0) HHSpike[helly].AlpFade -= 6;
							else
								{
								HHSpike[helly].AlpFade = 0;
								HHSpike[helly].Live = 0;

								//### Array Reorder
								K = helly;
								while(K < NomSpikes - 1)
									{
									HHSpike[K] = HHSpike[K+1];
									K++;
									}

								NomSpikes--;
								}
							}


						//###### Increase Width
						if(HHSpike[helly].Width + 0.25 < 8) HHSpike[helly].Width += 0.25;
						else HHSpike[helly].Width = 8;

						//####### Draw Spike Tris
						if(HHSpike[helly].AlpFade > 0) DrawLaser(World, &HHSpike[helly].TailPos, &HHSpike[helly].FrontPos, &player.ViewXForm.Translation, HHSpike[helly].Width, SPAWNSpikeBmp, HHSpike[helly].AlpFade, 255, 255, 255, 0);

						} break;


					case 3:	//##### - Trail Spikes - #####
						{
						//## Increment Timer (Unused)
						HHSpike[helly].Timer++;

						//###### Move End Of Spike Outwards ######
						//### Check Distance
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						if(HHSpike[helly].DistBetween < 180) geVec3d_MA(&HHSpike[helly].FrontPos, HHSpike[helly].Speed*TimeScale, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						
						//### Follow Trajectory
						//geVec3d_MA(&HHSpike[helly].FrontPos, (HHSpike[helly].Speed*TimeScale)*50, &HHSpike[helly].TraVec, &HHSpike[helly].FrontPos);

						HHSpike[helly].FrontPos.X += HHSpike[helly].IncX;
						HHSpike[helly].FrontPos.Y += HHSpike[helly].IncY;
						HHSpike[helly].FrontPos.Z += HHSpike[helly].IncZ;

						//### Clip to static distance
						geVec3d_Subtract(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos, &HHSpike[helly].OutVec);
						geVec3d_Normalize(&HHSpike[helly].OutVec);

						//#### Maintain Spike Start Positions
						//HHSpike[helly].CenterPos = player.AttPos.Translation;
						//geVec3d_MA(&HHSpike[helly].CenterPos, HHSpike[helly].DistBetween, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);

						//#### Maintain Spike Start Positions
						HHSpike[helly].CenterPos = Q_LEnergy[HHSpike[helly].EnergyID].LightPos;
						geVec3d_MA(&HHSpike[helly].CenterPos, HHSpike[helly].DistBetween, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);

						//### Randomly Alter Trajectory
						HHSpike[helly].IncX += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncY += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncZ += ((((float)rand() / 32767)-0.5)/50);

						//##### Alpha Control
						if(HHSpike[helly].FadeDir == 0)
							{
							if(HHSpike[helly].AlpFade + 10 < 170)	//100	//25  255
								{
								HHSpike[helly].AlpFade += 10;
								//###### Increase Width
								if(HHSpike[helly].Width + 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 12;
								}
							else
								{
								HHSpike[helly].AlpFade = 170;
								HHSpike[helly].FadeDir = 1;
								HHSpike[helly].Width = 8;
								}
							}

						if(HHSpike[helly].FadeDir == 1)
							{
							if(HHSpike[helly].AlpFade - 10 > 0)
								{
								HHSpike[helly].AlpFade -= 10;
								//###### Increase Width
								if(HHSpike[helly].Width - 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 0;
								}
							else
								{
								HHSpike[helly].AlpFade = 0;
								HHSpike[helly].FadeDir = 0;
								HHSpike[helly].Width = 0;
								}
							}
						
						//####### Draw Spike Tris
						if(HHSpike[helly].AlpFade > 0) DrawLaser(World, &HHSpike[helly].CenterPos, &HHSpike[helly].FrontPos, &player.ViewXForm.Translation, HHSpike[helly].Width, HADSpikeBmp, HHSpike[helly].AlpFade, 255, 130, 130, 0);

						if(Q_LEnergy[HHSpike[helly].EnergyID].Live == 0)
							{
							player.JSSpikes = 0;
							HHSpike[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomSpikes - 1)
								{
								HHSpike[K] = HHSpike[K+1];
								K++;
								}

							NomSpikes--;
							}
						} break;


					case 4:	//##### - AI Trail Spikes - #####
						{
						//## Increment Timer (Unused)
						HHSpike[helly].Timer++;

						//###### Move End Of Spike Outwards ######
						//### Check Distance
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						if(HHSpike[helly].DistBetween < 180) geVec3d_MA(&HHSpike[helly].FrontPos, HHSpike[helly].Speed*TimeScale, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						
						//### Follow Trajectory
						//geVec3d_MA(&HHSpike[helly].FrontPos, (HHSpike[helly].Speed*TimeScale)*50, &HHSpike[helly].TraVec, &HHSpike[helly].FrontPos);

						HHSpike[helly].FrontPos.X += HHSpike[helly].IncX;
						HHSpike[helly].FrontPos.Y += HHSpike[helly].IncY;
						HHSpike[helly].FrontPos.Z += HHSpike[helly].IncZ;

						//### Clip to static distance
						geVec3d_Subtract(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos, &HHSpike[helly].OutVec);
						geVec3d_Normalize(&HHSpike[helly].OutVec);

						//#### Maintain Spike Start Positions
						HHSpike[helly].CenterPos = Forge[HHSpike[helly].AvatarID].AttPos.Translation;
						geVec3d_MA(&HHSpike[helly].CenterPos, HHSpike[helly].DistBetween, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);


						//### Randomly Alter Trajectory
						HHSpike[helly].IncX += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncY += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncZ += ((((float)rand() / 32767)-0.5)/50);

						//##### Alpha Control
						if(HHSpike[helly].FadeDir == 0)
							{
							if(HHSpike[helly].AlpFade + 25 < 170)
								{
								HHSpike[helly].AlpFade += 25;
								//###### Increase Width
								if(HHSpike[helly].Width + 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 12;
								}
							else
								{
								HHSpike[helly].AlpFade = 170;
								HHSpike[helly].FadeDir = 1;
								HHSpike[helly].Width = 8;
								}
							}

						if(HHSpike[helly].FadeDir == 1)
							{
							if(HHSpike[helly].AlpFade - 25 > 0)
								{
								HHSpike[helly].AlpFade -= 25;
								//###### Increase Width
								if(HHSpike[helly].Width - 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 0;
								}
							else
								{
								HHSpike[helly].AlpFade = 0;
								HHSpike[helly].FadeDir = 0;
								HHSpike[helly].Width = 0;
								}
							}
						
						//####### Draw Spike Tris
						//if(HHSpike[helly].AlpFade > 0) DrawLaser(World, &HHSpike[helly].CenterPos, &HHSpike[helly].FrontPos, &player.ViewXForm.Translation, HHSpike[helly].Width, HADSpikeBmp, HHSpike[helly].AlpFade, 255, 255, 255, 0);

						if(Forge[HHSpike[helly].AvatarID].attackon == 0 || Forge[HHSpike[helly].AvatarID].HitLethal == 0)
							{
							Forge[HHSpike[helly].AvatarID].JSSpikes = 0;
							HHSpike[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomSpikes - 1)
								{
								HHSpike[K] = HHSpike[K+1];
								K++;
								}

							NomSpikes--;
							}
						} break;


					case 5:	//##### - Trail Spikes (Small) - #####
						{
						//## Increment Timer (Unused)
						HHSpike[helly].Timer++;

						//###### Move End Of Spike Outwards ######
						//### Check Distance
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						if(HHSpike[helly].DistBetween < 180) geVec3d_MA(&HHSpike[helly].FrontPos, HHSpike[helly].Speed*TimeScale, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						
						//### Follow Trajectory
						//geVec3d_MA(&HHSpike[helly].FrontPos, (HHSpike[helly].Speed*TimeScale)*50, &HHSpike[helly].TraVec, &HHSpike[helly].FrontPos);

						HHSpike[helly].FrontPos.X += HHSpike[helly].IncX;
						HHSpike[helly].FrontPos.Y += HHSpike[helly].IncY;
						HHSpike[helly].FrontPos.Z += HHSpike[helly].IncZ;

						//### Clip to static distance
						geVec3d_Subtract(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos, &HHSpike[helly].OutVec);
						geVec3d_Normalize(&HHSpike[helly].OutVec);

						//#### Maintain Spike Start Positions
						//HHSpike[helly].CenterPos = player.AttPos.Translation;
						//geVec3d_MA(&HHSpike[helly].CenterPos, HHSpike[helly].DistBetween, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);

						//#### Maintain Spike Start Positions
						HHSpike[helly].CenterPos = Q_LEnergy[HHSpike[helly].EnergyID].LightPos;
						geVec3d_MA(&HHSpike[helly].CenterPos, HHSpike[helly].DistBetween, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);

						//### Randomly Alter Trajectory
						HHSpike[helly].IncX += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncY += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncZ += ((((float)rand() / 32767)-0.5)/50);

						//##### Alpha Control
						if(HHSpike[helly].FadeDir == 0)
							{
							if(HHSpike[helly].AlpFade + 10 < 170)	//25  255
								{
								HHSpike[helly].AlpFade += 10;
								//###### Increase Width
								if(HHSpike[helly].Width + 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 12;
								}
							else
								{
								HHSpike[helly].AlpFade = 170;
								HHSpike[helly].FadeDir = 1;
								HHSpike[helly].Width = 8;
								}
							}

						if(HHSpike[helly].FadeDir == 1)
							{
							if(HHSpike[helly].AlpFade - 10 > 0)
								{
								HHSpike[helly].AlpFade -= 10;
								//###### Increase Width
								if(HHSpike[helly].Width - 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 0;
								}
							else
								{
								HHSpike[helly].AlpFade = 0;
								HHSpike[helly].FadeDir = 0;
								HHSpike[helly].Width = 0;
								}
							}

						HHSpike[helly].Width = 1;
						
						//####### Draw Spike Tris
						if(HHSpike[helly].AlpFade > 0) DrawLaser(World, &HHSpike[helly].CenterPos, &HHSpike[helly].FrontPos, &player.ViewXForm.Translation, HHSpike[helly].Width, HADSpikeBmp, HHSpike[helly].AlpFade, 255, 255, 255, 0);

						if(Q_LEnergy[HHSpike[helly].EnergyID].Live == 0)
							{
							player.JSSpikes = 0;
							HHSpike[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomSpikes - 1)
								{
								HHSpike[K] = HHSpike[K+1];
								K++;
								}

							NomSpikes--;
							}
						} break;


					case 6:	//##### - AI Trail Spikes HUGE - #####
						{
						//## Increment Timer (Unused)
						HHSpike[helly].Timer++;

						//###### Move End Of Spike Outwards ######
						//### Check Distance
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						if(HHSpike[helly].DistBetween < 180) geVec3d_MA(&HHSpike[helly].FrontPos, HHSpike[helly].Speed*TimeScale, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);
						HHSpike[helly].DistBetween = geVec3d_DistanceBetween(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos);
						
						//### Follow Trajectory
						//geVec3d_MA(&HHSpike[helly].FrontPos, (HHSpike[helly].Speed*TimeScale)*50, &HHSpike[helly].TraVec, &HHSpike[helly].FrontPos);

						HHSpike[helly].FrontPos.X += HHSpike[helly].IncX;
						HHSpike[helly].FrontPos.Y += HHSpike[helly].IncY;
						HHSpike[helly].FrontPos.Z += HHSpike[helly].IncZ;

						//### Clip to static distance
						geVec3d_Subtract(&HHSpike[helly].FrontPos, &HHSpike[helly].CenterPos, &HHSpike[helly].OutVec);
						geVec3d_Normalize(&HHSpike[helly].OutVec);

						//#### Maintain Spike Start Positions
						//HHSpike[helly].CenterPos = Forge[HHSpike[helly].AvatarID].AttPos.Translation;
						//geVec3d_MA(&HHSpike[helly].CenterPos, HHSpike[helly].DistBetween, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);

						//#### Maintain Spike Start Positions
						HHSpike[helly].CenterPos = Q_LEnergy[HHSpike[helly].EnergyID].LightPos;
						geVec3d_MA(&HHSpike[helly].CenterPos, HHSpike[helly].DistBetween, &HHSpike[helly].OutVec, &HHSpike[helly].FrontPos);


						//### Randomly Alter Trajectory
						HHSpike[helly].IncX += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncY += ((((float)rand() / 32767)-0.5)/50);
						HHSpike[helly].IncZ += ((((float)rand() / 32767)-0.5)/50);

						//##### Alpha Control
						if(HHSpike[helly].FadeDir == 0)
							{
							if(HHSpike[helly].AlpFade + 25 < 170)
								{
								HHSpike[helly].AlpFade += 25;
								//###### Increase Width
								if(HHSpike[helly].Width + 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 12;
								}
							else
								{
								HHSpike[helly].AlpFade = 170;
								HHSpike[helly].FadeDir = 1;
								HHSpike[helly].Width = 8;
								}
							}

						if(HHSpike[helly].FadeDir == 1)
							{
							if(HHSpike[helly].AlpFade - 25 > 0)
								{
								HHSpike[helly].AlpFade -= 25;
								//###### Increase Width
								if(HHSpike[helly].Width - 0.25 < 12) HHSpike[helly].Width += 0.25;
								else HHSpike[helly].Width = 0;
								}
							else
								{
								HHSpike[helly].AlpFade = 0;
								HHSpike[helly].FadeDir = 0;
								HHSpike[helly].Width = 0;
								}
							}

						HHSpike[helly].Width = 120;
						
						//####### Draw Spike Tris
						if(HHSpike[helly].AlpFade > 0) DrawLaser(World, &HHSpike[helly].CenterPos, &HHSpike[helly].FrontPos, &player.ViewXForm.Translation, HHSpike[helly].Width, HADSpikeBmp, HHSpike[helly].AlpFade, 255, 255, 255, 0);

						if(Q_LEnergy[HHSpike[helly].EnergyID].Live == 0)
							{
							Forge[HHSpike[helly].AvatarID].JSSpikes = 0;
							HHSpike[helly].Live = 0;

							//### Array Reorder
							K = helly;
							while(K < NomSpikes - 1)
								{
								HHSpike[K] = HHSpike[K+1];
								K++;
								}

							NomSpikes--;
							}
						} break;

					}
				}

			helly++;
			}
		}


	//####- SINGLE PLAYER AND SERVER BULLET SYSTEM -####

if(NetworkOption != 1)
	{
	if(NomBullet > 0)
		{
		aero = 0;
		while(aero < NomBullet)
			{
			if(Q_Bullet[aero].Live == 1) //MOVEMENT
				{
				//Apply Gravity
				Q_Bullet[aero].TrajVec.Y -= Q_Bullet[aero].Gravity*TimeScale;
				
				//Move
				geVec3d_MA(&Q_Bullet[aero].WorldPos, Q_Bullet[aero].Speed*TimeScale, &Q_Bullet[aero].TrajVec, &Q_Bullet[aero].NewPos);


				//######===-- Q_OBJECT COLLISION DETECTION --===#######
				SCRAM=0;
				while(SCRAM < NomQObject)
					{
					if(QObject[SCRAM].LIVE == 1 && QObject[SCRAM].AvatarID != Q_Bullet[aero].ActorID)
						{
						//### COLLISION CHECK
						if(QObject[SCRAM].StrengthBANK > 0)
							{
							switch(QObject[SCRAM].CollisionTYPE)
								{
								case 0:
									{
									TESTDist = 100;
									TESTPosS = Q_Bullet[aero].WorldPos;
									TESTPosE = Q_Bullet[aero].NewPos;
									while(TESTDist > 1)
										{
										geVec3d_MA(&TESTPosS, 1, &Q_Bullet[aero].TrajVec, &TESTPosS);

										TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &QObject[SCRAM].Pos);

										TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

										if(TESTShieldDIST < QObject[SCRAM].Scale)
											{
											//Set Player Enemy Display to correct enemy
											if(Q_Bullet[aero].ActorID == 250)
												{
												player.HB_LastAvatarHitID = (SCRAM + 1) * -1;
												}
											else
												{
												Forge[Q_Bullet[aero].ActorID].HB_LastAvatarHitID = (SCRAM + 1) * -1;
												}

											//### Block Hit Flash
											Q_MeleeHit[NomMelHit].Live = 1;
											Q_MeleeHit[NomMelHit].INIT = 0;
											Q_MeleeHit[NomMelHit].HitTYPE = 1;
											Q_MeleeHit[NomMelHit].HitRESULT = 9;
																				//VVVVVV-----?? Change this 'impact point' to Bone hit translation maybe ??
											Q_MeleeHit[NomMelHit].Impact = TESTPosS;	//Point of impact in world space
											Q_MeleeHit[NomMelHit].Bonenum = detcnt;						//Number index of the bone hit
											Q_MeleeHit[NomMelHit].AttboneXF = Q_Bullet[aero].AlignMatrix;

											Q_MeleeHit[NomMelHit].AttboneXF.Translation = Origin;
											geXForm3d_SetYRotation(&rotmat, (PI/2));
											geXForm3d_Multiply(&Q_MeleeHit[NomMelHit].AttboneXF, &rotmat, &Q_MeleeHit[NomMelHit].AttboneXF);
											Q_MeleeHit[NomMelHit].AttboneXF.Translation = Q_Bullet[aero].AlignMatrix.Translation;

											Q_MeleeHit[NomMelHit].HitPowerPercent = 1;
											Q_MeleeHit[NomMelHit].BloodAmt = 0;
											
											//Expandro3D Struct
											Q_MeleeHit[NomMelHit].Expandro3D.Radius = 60;					//Switch 0 = Off !0 = On
											Q_MeleeHit[NomMelHit].Expandro3D.MaxRadius = 500 * (Q_Bullet[aero].BulletDMG / 5);				//Max Radius
											Q_MeleeHit[NomMelHit].Expandro3D.StartFade = 5;
											Q_MeleeHit[NomMelHit].Expandro3D.Red = 255;
											Q_MeleeHit[NomMelHit].Expandro3D.Blue = 60;
											Q_MeleeHit[NomMelHit].Expandro3D.Green = 60;

												//Increment number of MeleeHits
											NomMelHit += 1;

											/*Q_BulletHit[NomBulHit].Live = 1;
											Q_BulletHit[NomBulHit].Init = 0;
											Q_BulletHit[NomBulHit].EffectType = 0;

											Q_BulletHit[NomBulHit].BulletDMG = Q_Bullet[aero].BulletDMG;
											Q_BulletHit[NomBulHit].BulletPWR = Q_Bullet[aero].BulletPWR;
											Q_BulletHit[NomBulHit].ActorID = Q_Bullet[aero].ActorID;
											Q_BulletHit[NomBulHit].BulletTraj = Q_Bullet[aero].TrajVec;
											Q_BulletHit[NomBulHit].CollNormal = Q_Bullet[aero].Collision.Plane.Normal;
											Q_BulletHit[NomBulHit].Pos = Q_Bullet[aero].Collision.Impact;

											NomBulHit++;
											if(NomBulHit > 499) NomBulHit = 0;*/

											QObject[SCRAM].StrengthBANK -= (Q_Bullet[aero].BulletDMG / 10);

											TESTPosS = TESTPosE;
											TESTDist = 0;
											}
										}

									}break;
								}
							}
						}

					SCRAM++;
					}


				//##### PLAYER SHIELD COLLIDE TEST
				if((player.Cleric.ShieldAlpha > 0) && (Q_Bullet[aero].ActorID != 250) && (Q_Bullet[aero].Live == 1))
					{
					if(Forge[Q_Bullet[aero].ActorID].Team != player.Team)
						{
						TESTDist = 100;
						TESTPosS = Q_Bullet[aero].WorldPos;
						TESTPosE = Q_Bullet[aero].NewPos;
						while(TESTDist > 10.5)
							{
							geVec3d_MA(&TESTPosS, 10, &Q_Bullet[aero].TrajVec, &TESTPosS);

							TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &player.Shield.ActorXform.Translation);

							TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

							if(TESTShieldDIST < (65 * player.Cleric.ShieldScale))
								{
								if(player.HB_Energy > 0)
									{
									//## Set the new pos to the point of collision
									Q_Bullet[aero].NewPos = TESTPosS;
									TESTPosS = TESTPosE;
									TESTDist = 0;
									Q_Bullet[aero].Live = 0;

									player.HB_Energy -= (Q_Bullet[aero].BulletDMG / 5) / (10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Duration/5000));

									Q_BulletHit[NomBulHit].Live = 1;
									Q_BulletHit[NomBulHit].Init = 0;
									Q_BulletHit[NomBulHit].EffectType = 100;

									Q_BulletHit[NomBulHit].BulletDMG = Q_Bullet[aero].BulletDMG;
									Q_BulletHit[NomBulHit].BulletPWR = Q_Bullet[aero].BulletPWR;
									Q_BulletHit[NomBulHit].ActorID = Q_Bullet[aero].ActorID;
									Q_BulletHit[NomBulHit].BulletTraj = Q_Bullet[aero].TrajVec;
									Q_BulletHit[NomBulHit].CollNormal = Q_Bullet[aero].TrajVec;
									geVec3d_Inverse(&Q_BulletHit[NomBulHit].CollNormal);
									Q_BulletHit[NomBulHit].Pos = TESTPosS;

									NomBulHit++;
									if(NomBulHit > 499) NomBulHit = 0;

									/*//+---=VAPOR TRAIL=---+
									if(Q_Bullet[aero].JDamageLVL == 3)
										{
										Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

										//### Array Reorder
										K = Q_Bullet[aero].VaporID1;
										while(K < NomVaporTrails - 1)
											{
											Q_VaporTrail[K] = Q_VaporTrail[K+1];
											K++;
											}

										NomVaporTrails--;
										}

									if(Q_Bullet[aero].Scale > 5)
										{
										Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

										//### Array Reorder
										K = Q_Bullet[aero].VaporID1;
										while(K < NomVaporTrails - 1)
											{
											Q_VaporTrail[K] = Q_VaporTrail[K+1];
											K++;
											}

										NomVaporTrails--;

										Q_VaporTrail[Q_Bullet[aero].VaporID2].Live = 0;

										//### Array Reorder
										K = Q_Bullet[aero].VaporID2;
										while(K < NomVaporTrails - 1)
											{
											Q_VaporTrail[K] = Q_VaporTrail[K+1];
											K++;
											}

										NomVaporTrails--;

										Q_VaporTrail[Q_Bullet[aero].VaporID3].Live = 0;

										//### Array Reorder
										K = Q_Bullet[aero].VaporID3;
										while(K < NomVaporTrails - 1)
											{
											Q_VaporTrail[K] = Q_VaporTrail[K+1];
											K++;
											}

										NomVaporTrails--;
										}*/

									//### Array Reorder
									K = aero;
									while(K < NomBullet - 1)
										{
										Q_Bullet[K] = Q_Bullet[K+1];
										K++;
										}

									NomBullet--;
									}
								}
							}
						}
					}

				//##### AVATAR SHIELD COLLIDE TEST
				SCRAM=0;
				while(SCRAM < NomAI)
					{
					if(Forge[SCRAM].LIVE == 1)
						{
						if(Forge[SCRAM].Cleric.ShieldAlpha > 0 && (Q_Bullet[aero].Live == 1))
							{
							if(Q_Bullet[aero].ActorID == 250)
								{
								if(player.Team != Forge[SCRAM].Team)
									{
									TESTDist = 100;
									TESTPosS = Q_Bullet[aero].WorldPos;
									TESTPosE = Q_Bullet[aero].NewPos;
									while(TESTDist > 10.5)
										{
										geVec3d_MA(&TESTPosS, 10, &Q_Bullet[aero].TrajVec, &TESTPosS);

										TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

										TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

										if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
											{
											if(Forge[SCRAM].HB_Energy > 0)
												{
												//## Set the new pos to the point of collision
												Q_Bullet[aero].NewPos = TESTPosS;
												TESTPosS = TESTPosE;
												TESTDist = 0;
												Q_Bullet[aero].Live = 0;

												Forge[SCRAM].HB_Energy -= (Q_Bullet[aero].BulletDMG / 5) / (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Duration/5000));

												Q_BulletHit[NomBulHit].Live = 1;
												Q_BulletHit[NomBulHit].Init = 0;
												Q_BulletHit[NomBulHit].EffectType = 100;

												Q_BulletHit[NomBulHit].BulletDMG = Q_Bullet[aero].BulletDMG;
												Q_BulletHit[NomBulHit].BulletPWR = Q_Bullet[aero].BulletPWR;
												Q_BulletHit[NomBulHit].ActorID = Q_Bullet[aero].ActorID;
												Q_BulletHit[NomBulHit].BulletTraj = Q_Bullet[aero].TrajVec;
												Q_BulletHit[NomBulHit].CollNormal = Q_Bullet[aero].TrajVec;
												geVec3d_Inverse(&Q_BulletHit[NomBulHit].CollNormal);
												Q_BulletHit[NomBulHit].Pos = TESTPosS;

												NomBulHit++;
												if(NomBulHit > 499) NomBulHit = 0;

												/*//+---=VAPOR TRAIL=---+
												if(Q_Bullet[aero].JDamageLVL == 3)
													{
													Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

													//### Array Reorder
													K = Q_Bullet[aero].VaporID1;
													while(K < NomVaporTrails - 1)
														{
														Q_VaporTrail[K] = Q_VaporTrail[K+1];
														K++;
														}

													NomVaporTrails--;
													}

												if(Q_Bullet[aero].Scale > 5)
													{
													Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

													//### Array Reorder
													K = Q_Bullet[aero].VaporID1;
													while(K < NomVaporTrails - 1)
														{
														Q_VaporTrail[K] = Q_VaporTrail[K+1];
														K++;
														}

													NomVaporTrails--;

													Q_VaporTrail[Q_Bullet[aero].VaporID2].Live = 0;

													//### Array Reorder
													K = Q_Bullet[aero].VaporID2;
													while(K < NomVaporTrails - 1)
														{
														Q_VaporTrail[K] = Q_VaporTrail[K+1];
														K++;
														}

													NomVaporTrails--;

													Q_VaporTrail[Q_Bullet[aero].VaporID3].Live = 0;

													//### Array Reorder
													K = Q_Bullet[aero].VaporID3;
													while(K < NomVaporTrails - 1)
														{
														Q_VaporTrail[K] = Q_VaporTrail[K+1];
														K++;
														}

													NomVaporTrails--;
													}*/

												//### Array Reorder
												K = aero;
												while(K < NomBullet - 1)
													{
													Q_Bullet[K] = Q_Bullet[K+1];
													K++;
													}

												NomBullet--;
												}
											}
										}
									}
								}
							else
								{
								if(Forge[Q_Bullet[aero].ActorID].Team != Forge[SCRAM].Team)
									{
									TESTDist = 100;
									TESTPosS = Q_Bullet[aero].WorldPos;
									TESTPosE = Q_Bullet[aero].NewPos;
									while(TESTDist > 10.5)
										{
										geVec3d_MA(&TESTPosS, 10, &Q_Bullet[aero].TrajVec, &TESTPosS);

										TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

										TESTDist = geVec3d_DistanceBetween(&TESTPosS, &TESTPosE);

										if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
											{
											if(Forge[SCRAM].HB_Energy > 0)
												{
												//## Set the new pos to the point of collision
												Q_Bullet[aero].NewPos = TESTPosS;
												TESTPosS = TESTPosE;
												TESTDist = 0;
												Q_Bullet[aero].Live = 0;

												Forge[SCRAM].HB_Energy -= Q_Bullet[aero].BulletDMG / 5;

												Q_BulletHit[NomBulHit].Live = 1;
												Q_BulletHit[NomBulHit].Init = 0;
												Q_BulletHit[NomBulHit].EffectType = 100;

												Q_BulletHit[NomBulHit].BulletDMG = Q_Bullet[aero].BulletDMG;
												Q_BulletHit[NomBulHit].BulletPWR = Q_Bullet[aero].BulletPWR;
												Q_BulletHit[NomBulHit].ActorID = Q_Bullet[aero].ActorID;
												Q_BulletHit[NomBulHit].BulletTraj = Q_Bullet[aero].TrajVec;
												Q_BulletHit[NomBulHit].CollNormal = Q_Bullet[aero].TrajVec;
												geVec3d_Inverse(&Q_BulletHit[NomBulHit].CollNormal);
												Q_BulletHit[NomBulHit].Pos = TESTPosS;

												NomBulHit++;
												if(NomBulHit > 499) NomBulHit = 0;

												//+---=VAPOR TRAIL=---+
												/*if(Q_Bullet[aero].JDamageLVL == 3)
													{
													Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

													//### Array Reorder
													K = Q_Bullet[aero].VaporID1;
													while(K < NomVaporTrails - 1)
														{
														Q_VaporTrail[K] = Q_VaporTrail[K+1];
														K++;
														}

													NomVaporTrails--;
													}

												if(Q_Bullet[aero].Scale > 5)
													{
													Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

													//### Array Reorder
													K = Q_Bullet[aero].VaporID1;
													while(K < NomVaporTrails - 1)
														{
														Q_VaporTrail[K] = Q_VaporTrail[K+1];
														K++;
														}

													NomVaporTrails--;

													Q_VaporTrail[Q_Bullet[aero].VaporID2].Live = 0;

													//### Array Reorder
													K = Q_Bullet[aero].VaporID2;
													while(K < NomVaporTrails - 1)
														{
														Q_VaporTrail[K] = Q_VaporTrail[K+1];
														K++;
														}

													NomVaporTrails--;

													Q_VaporTrail[Q_Bullet[aero].VaporID3].Live = 0;

													//### Array Reorder
													K = Q_Bullet[aero].VaporID3;
													while(K < NomVaporTrails - 1)
														{
														Q_VaporTrail[K] = Q_VaporTrail[K+1];
														K++;
														}

													NomVaporTrails--;
													}*/

												//### Array Reorder
												K = aero;
												while(K < NomBullet - 1)
													{
													Q_Bullet[K] = Q_Bullet[K+1];
													K++;
													}

												NomBullet--;
												}
											}
										}
									}
								}
							}
						}
					SCRAM++;
					}


				if(geWorld_Collision(World,
					 NULL,
					 NULL,
					 &Q_Bullet[aero].WorldPos,
					 &Q_Bullet[aero].NewPos,
					 GE_CONTENTS_CANNOT_OCCUPY,
					 GE_COLLIDE_ACTORS,
					 0xffffffff, NULL, NULL,
					 &Q_Bullet[aero].Collision) && (Q_Bullet[aero].Live == 1))
					{
					if(Q_Bullet[aero].Collision.Actor->IDflag == 250)	//# Player Hit
						{
						//## Hit Reactions
						if(player.Aposestate != 30 && player.HB_RecoverMode < 2 && player.HB_Dead == 0)
							{
							//### Set Actor hit index
							Q_BulletHit[NomBulHit].ActorHITID = 250;

							//## Set the new pos to the point of collision
							Q_Bullet[aero].NewPos = Q_Bullet[aero].Collision.Impact;
							Q_Bullet[aero].Live = 0;

							if(Q_Bullet[aero].NewPos.Y > (playact.ActorXform.Translation.Y + 82))	//Head
								{
								Q_BulletHit[NomBulHit].EffectType = 3;
								}
							else
								{
								if(Q_Bullet[aero].NewPos.Y > (playact.ActorXform.Translation.Y + 69))	//Torso / legs
									{
									Q_BulletHit[NomBulHit].EffectType = 2;
									}
								else
									{
									Q_BulletHit[NomBulHit].EffectType = 1;
									}
								}

							Q_BulletHit[NomBulHit].Live = 1;
							Q_BulletHit[NomBulHit].Init = 0;
							Q_BulletHit[NomBulHit].BulletDMG = Q_Bullet[aero].BulletDMG;
							Q_BulletHit[NomBulHit].BulletPWR = Q_Bullet[aero].BulletPWR;
							Q_BulletHit[NomBulHit].ActorID = Q_Bullet[aero].ActorID;
							Q_BulletHit[NomBulHit].BulletTraj = Q_Bullet[aero].TrajVec;
							Q_BulletHit[NomBulHit].CollNormal = Q_Bullet[aero].Collision.Plane.Normal;
							Q_BulletHit[NomBulHit].Pos = Q_Bullet[aero].Collision.Impact;

							NomBulHit++;
							if(NomBulHit > 499) NomBulHit = 0;

							//+---=VAPOR TRAIL=---+
							/*if(Q_Bullet[aero].JDamageLVL == 3)
								{
								Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

								//### Array Reorder
								K = Q_Bullet[aero].VaporID1;
								while(K < NomVaporTrails - 1)
									{
									Q_VaporTrail[K] = Q_VaporTrail[K+1];
									K++;
									}

								NomVaporTrails--;
								}

							if(Q_Bullet[aero].Scale > 5)
								{
								Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

								//### Array Reorder
								K = Q_Bullet[aero].VaporID1;
								while(K < NomVaporTrails - 1)
									{
									Q_VaporTrail[K] = Q_VaporTrail[K+1];
									K++;
									}

								NomVaporTrails--;

								Q_VaporTrail[Q_Bullet[aero].VaporID2].Live = 0;

								//### Array Reorder
								K = Q_Bullet[aero].VaporID2;
								while(K < NomVaporTrails - 1)
									{
									Q_VaporTrail[K] = Q_VaporTrail[K+1];
									K++;
									}

								NomVaporTrails--;

								Q_VaporTrail[Q_Bullet[aero].VaporID3].Live = 0;

								//### Array Reorder
								K = Q_Bullet[aero].VaporID3;
								while(K < NomVaporTrails - 1)
									{
									Q_VaporTrail[K] = Q_VaporTrail[K+1];
									K++;
									}

								NomVaporTrails--;
								}*/

							//### Array Reorder
							K = aero;
							while(K < NomBullet - 1)
								{
								Q_Bullet[K] = Q_Bullet[K+1];
								K++;
								}

							NomBullet--;
							aero--;
							}
						}
					else
						{
						if(Q_Bullet[aero].Collision.Actor->IDflag != 251)
							{
							//## Hit Reactions
							if(Forge[Q_Bullet[aero].Collision.Actor->IDflag].Aposestate != 30 && Forge[Q_Bullet[aero].Collision.Actor->IDflag].HB_RecoverMode < 2 && Forge[Q_Bullet[aero].Collision.Actor->IDflag].HB_Dead == 0)
								{
								//### Set Actor hit index
								Q_BulletHit[NomBulHit].ActorHITID = Q_Bullet[aero].Collision.Actor->IDflag;

								// Set the new pos to the point of collision
								Q_Bullet[aero].NewPos = Q_Bullet[aero].Collision.Impact;
								Q_Bullet[aero].Live = 0;

								if(Q_Bullet[aero].NewPos.Y > (Forge[Q_Bullet[aero].Collision.Actor->IDflag].Avatar.ActorXform.Translation.Y + 82))	//Head
									{
									Q_BulletHit[NomBulHit].EffectType = 3;
									}
								else
									{
									if(Q_Bullet[aero].NewPos.Y > (Forge[Q_Bullet[aero].Collision.Actor->IDflag].Avatar.ActorXform.Translation.Y + 69))	//Head
										{
										Q_BulletHit[NomBulHit].EffectType = 2;
										}
									else
										{
										Q_BulletHit[NomBulHit].EffectType = 1;
										}
									}

								Q_BulletHit[NomBulHit].Live = 1;
								Q_BulletHit[NomBulHit].Init = 0;
								Q_BulletHit[NomBulHit].BulletDMG = Q_Bullet[aero].BulletDMG;
								Q_BulletHit[NomBulHit].BulletPWR = Q_Bullet[aero].BulletPWR;
								Q_BulletHit[NomBulHit].ActorID = Q_Bullet[aero].ActorID;
								Q_BulletHit[NomBulHit].BulletTraj = Q_Bullet[aero].TrajVec;
								Q_BulletHit[NomBulHit].CollNormal = Q_Bullet[aero].Collision.Plane.Normal;
								Q_BulletHit[NomBulHit].Pos = Q_Bullet[aero].Collision.Impact;

								NomBulHit++;
								if(NomBulHit > 499) NomBulHit = 0;

								//+---=VAPOR TRAIL=---+
								/*if(Q_Bullet[aero].JDamageLVL == 3)
									{
									Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

									//### Array Reorder
									K = Q_Bullet[aero].VaporID1;
									while(K < NomVaporTrails - 1)
										{
										Q_VaporTrail[K] = Q_VaporTrail[K+1];
										K++;
										}

									NomVaporTrails--;
									}

								if(Q_Bullet[aero].Scale > 5)
									{
									Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

									//### Array Reorder
									K = Q_Bullet[aero].VaporID1;
									while(K < NomVaporTrails - 1)
										{
										Q_VaporTrail[K] = Q_VaporTrail[K+1];
										K++;
										}

									NomVaporTrails--;

									Q_VaporTrail[Q_Bullet[aero].VaporID2].Live = 0;

									//### Array Reorder
									K = Q_Bullet[aero].VaporID2;
									while(K < NomVaporTrails - 1)
										{
										Q_VaporTrail[K] = Q_VaporTrail[K+1];
										K++;
										}

									NomVaporTrails--;

									Q_VaporTrail[Q_Bullet[aero].VaporID3].Live = 0;

									//### Array Reorder
									K = Q_Bullet[aero].VaporID3;
									while(K < NomVaporTrails - 1)
										{
										Q_VaporTrail[K] = Q_VaporTrail[K+1];
										K++;
										}

									NomVaporTrails--;
									}*/

								//### Array Reorder
								K = aero;
								while(K < NomBullet - 1)
									{
									Q_Bullet[K] = Q_Bullet[K+1];
									K++;
									}

								NomBullet--;
								aero--;
								}
							}
						}
					}
					
				if(geWorld_Collision(World,
					 NULL,
					 NULL,
					 &Q_Bullet[aero].WorldPos,
					 &Q_Bullet[aero].NewPos,
					 GE_CONTENTS_CANNOT_OCCUPY,
					 GE_COLLIDE_MODELS,
					 0xffffffff, NULL, NULL,
					 &Q_Bullet[aero].Collision) && Q_Bullet[aero].Live == 1)
					{
					//## Set the new pos to the point of collision
					Q_Bullet[aero].NewPos = Q_Bullet[aero].Collision.Impact;
					Q_Bullet[aero].Live = 0;

					Q_BulletHit[NomBulHit].Live = 1;
					Q_BulletHit[NomBulHit].Init = 0;
					Q_BulletHit[NomBulHit].EffectType = 0;

					Q_BulletHit[NomBulHit].BulletDMG = Q_Bullet[aero].BulletDMG;
					Q_BulletHit[NomBulHit].BulletPWR = Q_Bullet[aero].BulletPWR;
					Q_BulletHit[NomBulHit].ActorID = Q_Bullet[aero].ActorID;
					Q_BulletHit[NomBulHit].BulletTraj = Q_Bullet[aero].TrajVec;
					Q_BulletHit[NomBulHit].CollNormal = Q_Bullet[aero].Collision.Plane.Normal;
					Q_BulletHit[NomBulHit].Pos = Q_Bullet[aero].Collision.Impact;

					NomBulHit++;
					if(NomBulHit > 499) NomBulHit = 0;

					//+---=VAPOR TRAIL=---+
					/*if(Q_Bullet[aero].JDamageLVL == 3)
						{
						Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

						//### Array Reorder
						K = Q_Bullet[aero].VaporID1;
						while(K < NomVaporTrails - 1)
							{
							Q_VaporTrail[K] = Q_VaporTrail[K+1];
							K++;
							}

						NomVaporTrails--;
						}

					if(Q_Bullet[aero].Scale > 5)
						{
						Q_VaporTrail[Q_Bullet[aero].VaporID1].Live = 0;

						//### Array Reorder
						K = Q_Bullet[aero].VaporID1;
						while(K < NomVaporTrails - 1)
							{
							Q_VaporTrail[K] = Q_VaporTrail[K+1];
							K++;
							}

						NomVaporTrails--;

						Q_VaporTrail[Q_Bullet[aero].VaporID2].Live = 0;

						//### Array Reorder
						K = Q_Bullet[aero].VaporID2;
						while(K < NomVaporTrails - 1)
							{
							Q_VaporTrail[K] = Q_VaporTrail[K+1];
							K++;
							}

						NomVaporTrails--;

						Q_VaporTrail[Q_Bullet[aero].VaporID3].Live = 0;

						//### Array Reorder
						K = Q_Bullet[aero].VaporID3;
						while(K < NomVaporTrails - 1)
							{
							Q_VaporTrail[K] = Q_VaporTrail[K+1];
							K++;
							}

						NomVaporTrails--;
						}*/

					//### Array Reorder
					K = aero;
					while(K < NomBullet - 1)
						{
						Q_Bullet[K] = Q_Bullet[K+1];
						K++;
						}

					NomBullet--;
					aero--;
					}


				if(Q_Bullet[aero].Live == 1)
					{
					//## Bullet Trails
					if(Q_Bullet[aero].JDamageLVL == 0)
						{
						if(TimeScale > 0.65)
							{
							//## Bullet Trails
							if(geVec3d_DistanceBetween(&Q_Bullet[aero].NewPos, &Q_Bullet[aero].ORIGPos) < Q_Bullet[aero].Speed)
								{
								Q_Bullet[aero].TrailStart = Q_Bullet[aero].ORIGPos;
								Q_Bullet[aero].TrailEnd = Q_Bullet[aero].NewPos;
								}
							else
								{
								Q_Bullet[aero].TrailStart = Q_Bullet[aero].NewPos;
								Q_Bullet[aero].TrailEnd = Q_Bullet[aero].NewPos;
								geVec3d_MA(&Q_Bullet[aero].TrailEnd, -Q_Bullet[aero].Speed, &Q_Bullet[aero].TrajVec, &Q_Bullet[aero].TrailStart);
								}

							if(Q_Bullet[aero].Live == 0)
								{
								Q_Bullet[aero].TrailStart = Q_Bullet[aero].WorldPos;
								DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 0.55, BulletTrail, 30, 255, 255, 220, 0);
								}
							else DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 0.55, BulletTrail, 70, 255, 255, 220, 0);
							}
						else
							{
							//Particle ejjector LVL02
							player.QAEFF_CNTR01[0] += 1;
							player.QAEFF_ROTAMT[0] = 0;

							TempVec1 = Q_Bullet[aero].WorldPos;

							if(player.QAEFF_CNTR01[0] > 2)
								{
								player.QAEFF_CNTR01[0] = 0;

								jet=0;
								while((jet < 15) && (NomPntSprite < 24998))
									{
									Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
									Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
									Q_PntSprite[NomPntSprite].Scale = 0.02f;		//0.025f//0.002f
									Q_PntSprite[NomPntSprite].PartType = 26;

									Q_PntSprite[NomPntSprite].IR = 255;
									Q_PntSprite[NomPntSprite].IG = 255;
									Q_PntSprite[NomPntSprite].IB = 255;

									Q_PntSprite[NomPntSprite].Alpha = 30;
									Q_PntSprite[NomPntSprite].Speed = 0.35;
									Q_PntSprite[NomPntSprite].SpeedDIR = 0;
									Q_PntSprite[NomPntSprite].Pos = TempVec1;

									Q_PntSprite[NomPntSprite].VecUp = Q_Bullet[aero].TrajVec;

										//Calculate Direction Vectors
									geXForm3d_SetYRotation(&RotateMatrix, PI/2);
									geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);

									Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);

									geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);

									geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);

									geXForm3d_SetYRotation(&RotateMatrix3, player.QAEFF_ROTAMT[0]);

									player.QAEFF_ROTAMT[0] += 0.42;

									geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);

									geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);

									geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

									Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

									Q_PntSprite[NomPntSprite].Live = 1;

									NomPntSprite++;
									jet++;
									}
								}
							}
						}
					else
						{
						//## Bullet Trails
						if(geVec3d_DistanceBetween(&Q_Bullet[aero].NewPos, &Q_Bullet[aero].ORIGPos) < Q_Bullet[aero].Speed)
							{
							Q_Bullet[aero].TrailStart = Q_Bullet[aero].ORIGPos;
							Q_Bullet[aero].TrailEnd = Q_Bullet[aero].NewPos;
							}
						else
							{
							Q_Bullet[aero].TrailStart = Q_Bullet[aero].NewPos;
							Q_Bullet[aero].TrailEnd = Q_Bullet[aero].NewPos;
							geVec3d_MA(&Q_Bullet[aero].TrailEnd, -Q_Bullet[aero].Speed, &Q_Bullet[aero].TrajVec, &Q_Bullet[aero].TrailStart);
							}

						switch(Q_Bullet[aero].JDamageLVL)
							{
							case 1:
								{
								if(Q_Bullet[aero].Live == 0)
									{
									Q_Bullet[aero].TrailStart = Q_Bullet[aero].WorldPos;
									DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 3, QAEFF29, 30, 255, 255, 255, 0);
									}
								else DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 3, QAEFF29, 90, 255, 255, 255, 0);

								//##### Render Main Sprite
								Q_Bullet[aero].Lvert[0][0].X = Q_Bullet[aero].WorldPos.X;
								Q_Bullet[aero].Lvert[0][0].Y = Q_Bullet[aero].WorldPos.Y;
								Q_Bullet[aero].Lvert[0][0].Z = Q_Bullet[aero].WorldPos.Z;
								Q_Bullet[aero].Lvert[0][0].r = 255;
								Q_Bullet[aero].Lvert[0][0].g = 255;
								Q_Bullet[aero].Lvert[0][0].b = 255;
								Q_Bullet[aero].Lvert[0][0].a = 90;

								geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[0][0], 1, QAEFF28, GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF, 0.2f);
								}break;

							case 2:
								{
								if(Q_Bullet[aero].Live == 0)
									{
									Q_Bullet[aero].TrailStart = Q_Bullet[aero].WorldPos;
									DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 5, QAEFF29, 50, 255, 255, 255, 0);
									}
								else DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 5, QAEFF29, 135, 255, 255, 255, 0);

								//##### Render Main Sprite
								Q_Bullet[aero].Lvert[0][0].X = Q_Bullet[aero].WorldPos.X;
								Q_Bullet[aero].Lvert[0][0].Y = Q_Bullet[aero].WorldPos.Y;
								Q_Bullet[aero].Lvert[0][0].Z = Q_Bullet[aero].WorldPos.Z;
								Q_Bullet[aero].Lvert[0][0].r = 255;
								Q_Bullet[aero].Lvert[0][0].g = 255;
								Q_Bullet[aero].Lvert[0][0].b = 255;
								Q_Bullet[aero].Lvert[0][0].a = 135;

								geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[0][0], 1, QAEFF28, GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF, 0.35f);
								}break;

							case 3:
								{
								if(Q_Bullet[aero].Live == 0)
									{
									Q_Bullet[aero].TrailStart = Q_Bullet[aero].WorldPos;
									DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 10, QAEFF29, 100, 255, 255, 255, 0);
									}
								else DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 10, QAEFF29, 200, 255, 255, 255, 0);

								//##### Render Main Sprite
								Q_Bullet[aero].Lvert[0][0].X = Q_Bullet[aero].WorldPos.X;
								Q_Bullet[aero].Lvert[0][0].Y = Q_Bullet[aero].WorldPos.Y;
								Q_Bullet[aero].Lvert[0][0].Z = Q_Bullet[aero].WorldPos.Z;
								Q_Bullet[aero].Lvert[0][0].r = 255;
								Q_Bullet[aero].Lvert[0][0].g = 255;
								Q_Bullet[aero].Lvert[0][0].b = 255;
								Q_Bullet[aero].Lvert[0][0].a = 200;

								geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[0][0], 1, QAEFF28, GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF, 0.5f);
								}break;
							}
						}


					Q_Bullet[aero].WorldPos = Q_Bullet[aero].NewPos;

					//Spin Bullet
					Q_Bullet[aero].Zrot += Q_Bullet[aero].ZSpin*TimeScale;

					geXForm3d_SetZRotation(&rotmat, Q_Bullet[aero].Zrot);
					geXForm3d_Multiply(&Q_Bullet[aero].AlignMatrix, &rotmat, &Q_Bullet[aero].AlignMatrix);

					Q_Bullet[aero].AlignMatrix.Translation = Q_Bullet[aero].WorldPos;

					Q_Bullet[aero].Pos = Q_Bullet[aero].AlignMatrix.Translation;

					geXForm3d_GetUp(&Q_Bullet[aero].AlignMatrix, &Q_Bullet[aero].VecUp);
					geXForm3d_GetLeft(&Q_Bullet[aero].AlignMatrix, &Q_Bullet[aero].VecLeft);
					geXForm3d_GetIn(&Q_Bullet[aero].AlignMatrix, &Q_Bullet[aero].VecIn);


					//##### Jink Damage single vapor
					if(Q_Bullet[aero].JDamageLVL == 3 || Q_Bullet[aero].BulletPWR > 45.5)
						{
						ColourSTART.r = 255;
						ColourSTART.g = 255;
						ColourSTART.b = 255;
						ColourSTART.a = 055;
						ColourEND.r = 255;
						ColourEND.g = 255;
						ColourEND.b = 255;
						ColourEND.a = 0;
						if(Q_VaporTrail[Q_Bullet[aero].VaporID1].NomPoints <= 998) Q_AddTrailPNT(Q_Bullet[aero].VaporID1, Q_Bullet[aero].Pos, ColourSTART, ColourEND, Wind, 0);
						}


					//+---=VAPOR TRAIL=---+
					if(Q_Bullet[aero].JDamageLVL == 4)
						{
						ColourSTART.r = 255;
						ColourSTART.g = 255;
						ColourSTART.b = 255;
						ColourSTART.a = 45;
						ColourEND.r = 255;
						ColourEND.g = 255;
						ColourEND.b = 255;
						ColourEND.a = 0;

						TempVec1 = Q_Bullet[aero].Pos;
						TempVec2 = Q_Bullet[aero].Pos;

						TempVec1.X += ((((float)rand() / 32767)-0.5)*2 + 1);
						TempVec1.Y += ((((float)rand() / 32767)-0.5)*2 + 1);
						TempVec1.Z += ((((float)rand() / 32767)-0.5)*2 + 1);

						geVec3d_Subtract(&TempVec1, &TempVec2, &TempVec2);
						
						if(Q_VaporTrail[Q_Bullet[aero].VaporID1].NomPoints <= 998) Q_AddTrailPNT(Q_Bullet[aero].VaporID1, Q_Bullet[aero].Pos, ColourSTART, ColourEND, TempVec2, 0);


						ColourSTART.r = 255;
						ColourSTART.g = 255;
						ColourSTART.b = 255;
						ColourSTART.a = 45;
						ColourEND.r = 255;
						ColourEND.g = 255;
						ColourEND.b = 255;
						ColourEND.a = 0;

						TempVec1 = Q_Bullet[aero].Pos;
						TempVec2 = Q_Bullet[aero].Pos;

						TempVec1.X += ((((float)rand() / 32767)-0.5)*2 + 1);
						TempVec1.Y += ((((float)rand() / 32767)-0.5)*2 + 1);
						TempVec1.Z += ((((float)rand() / 32767)-0.5)*2 + 1);

						geVec3d_Subtract(&TempVec1, &TempVec2, &TempVec2);
						
						if(Q_VaporTrail[Q_Bullet[aero].VaporID1].NomPoints <= 998) Q_AddTrailPNT(Q_Bullet[aero].VaporID2, Q_Bullet[aero].Pos, ColourSTART, ColourEND, TempVec2, 0);


						ColourSTART.r = 255;
						ColourSTART.g = 255;
						ColourSTART.b = 255;
						ColourSTART.a = 45;
						ColourEND.r = 255;
						ColourEND.g = 255;
						ColourEND.b = 255;
						ColourEND.a = 0;

						TempVec1 = Q_Bullet[aero].Pos;
						TempVec2 = Q_Bullet[aero].Pos;

						TempVec1.X += ((((float)rand() / 32767)-0.5)*2 + 1);
						TempVec1.Y += ((((float)rand() / 32767)-0.5)*2 + 1);
						TempVec1.Z += ((((float)rand() / 32767)-0.5)*2 + 1);

						geVec3d_Subtract(&TempVec1, &TempVec2, &TempVec2);
						
						if(Q_VaporTrail[Q_Bullet[aero].VaporID1].NomPoints <= 998) Q_AddTrailPNT(Q_Bullet[aero].VaporID3, Q_Bullet[aero].Pos, ColourSTART, ColourEND, TempVec2, 0);

						//ROCKET DRIVE

						TempVec1 = Q_Bullet[aero].Pos;
						TempVec2 = Q_Bullet[aero].Pos;

						geVec3d_MA(&TempVec2, -90, &Q_Bullet[aero].TrajVec, &TempVec2);	//1.1

						Q_Bullet[aero].RDriveMATCNT++;
						if(Q_Bullet[aero].RDriveMATCNT < 0) Q_Bullet[aero].RDriveMATCNT = 0;
						if(Q_Bullet[aero].RDriveMATCNT > 9) Q_Bullet[aero].RDriveMATCNT = 0;

						DrawLaser(World, &TempVec2, &TempVec1, &player.ViewXForm.Translation, 20, Rocket[Q_Bullet[aero].RDriveMATCNT], 255, 255, 255, 255, 0);

						TempVec1 = Q_Bullet[aero].TrajVec;
						geVec3d_Inverse(&TempVec1);

						jet=0;
						while(jet < 3)
							{
							//#### Smoke Blast
							Q_Cloud[NomCloud].CloudType = 10;
							Q_Cloud[NomCloud].CloudPos = Q_Bullet[aero].Pos;
							Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*80)+175;
							Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.35;	//0.33;
							Q_Cloud[NomCloud].CloudTraVec = TempVec1;
							Q_Cloud[NomCloud].CloudTraVec.Y += 0.35;
							Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)*0.03) + 0.5;
							Q_Cloud[NomCloud].CloudMatCNT = 0;
							Q_Cloud[NomCloud].CloudLive = 1;

							NomCloud++;
							if(NomCloud > 4999) NomCloud = 0;
							jet++;
							}
						}

					


					//+---=====DRAW BULLET=====---+

					Q_Bullet[aero].Type = GE_GOURAUD_POLY;
					Q_Bullet[aero].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
					Q_Bullet[aero].ScaleBIT = 1.0f;

					//Compensate for pivot
					geVec3d_MA(&Q_Bullet[aero].Pos, -Q_Bullet[aero].Scale*2, &Q_Bullet[aero].VecIn, &Q_Bullet[aero].Pos);	//1.1

					//##Back Verts##
							//BACK VERT1
					geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale/1.105, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertB1);	//1.1

							//BACK VERT2
					geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale/6, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertB2);

					geVec3d_MA(&Q_Bullet[aero].VertB2, -Q_Bullet[aero].Scale*0.89, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertB2);

					geVec3d_MA(&Q_Bullet[aero].Pos, -Q_Bullet[aero].Scale, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertB3);

							//BACK VERT4
					geVec3d_MA(&Q_Bullet[aero].VertB3, Q_Bullet[aero].Scale/1.62, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertB4);	//1.75

							//BACK VERT3
					geVec3d_MA(&Q_Bullet[aero].VertB3, -Q_Bullet[aero].Scale/1.62, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertB3);

							//BACK VERT5
					geVec3d_MA(&Q_Bullet[aero].VertB2, (Q_Bullet[aero].Scale*2)*0.89, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertB5);


					//OTF FIX
					geVec3d_Subtract(&Q_Bullet[aero].VertB3, &Q_Bullet[aero].Pos, &Q_Bullet[aero].VecSTR);
					geVec3d_MA(&Q_Bullet[aero].VertB3, -0.23, &Q_Bullet[aero].VecSTR, &Q_Bullet[aero].VertB3);	//0.2106
					geVec3d_Subtract(&Q_Bullet[aero].VertB4, &Q_Bullet[aero].Pos, &Q_Bullet[aero].VecSTR);
					geVec3d_MA(&Q_Bullet[aero].VertB4, -0.23, &Q_Bullet[aero].VecSTR, &Q_Bullet[aero].VertB4);


					//##Front Verts##
							//FRONT VERT1
					geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale*4, &Q_Bullet[aero].VecIn, &Q_Bullet[aero].Pos);

					geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale/1.105, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertF1);	//1.1

							//FRONT VERT2
					geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale/6, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertF2);

					geVec3d_MA(&Q_Bullet[aero].VertF2, -Q_Bullet[aero].Scale*0.89, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertF2);

					geVec3d_MA(&Q_Bullet[aero].Pos, -Q_Bullet[aero].Scale, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertF3);

							//FRONT VERT4
					geVec3d_MA(&Q_Bullet[aero].VertF3, Q_Bullet[aero].Scale/1.62, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertF4);	//1.75

							//FRONT VERT3
					geVec3d_MA(&Q_Bullet[aero].VertF3, -Q_Bullet[aero].Scale/1.62, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertF3);

							//FRONT VERT5
					geVec3d_MA(&Q_Bullet[aero].VertF2, (Q_Bullet[aero].Scale*2)*0.89, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertF5);


					geVec3d_Subtract(&Q_Bullet[aero].VertF3, &Q_Bullet[aero].Pos, &Q_Bullet[aero].VecSTR);
					geVec3d_MA(&Q_Bullet[aero].VertF3, -0.23, &Q_Bullet[aero].VecSTR, &Q_Bullet[aero].VertF3);	//0.2106
					geVec3d_Subtract(&Q_Bullet[aero].VertF4, &Q_Bullet[aero].Pos, &Q_Bullet[aero].VecSTR);
					geVec3d_MA(&Q_Bullet[aero].VertF4, -0.23, &Q_Bullet[aero].VecSTR, &Q_Bullet[aero].VertF4);


					//##Front Point##
							//FRONT POINT
					geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale*2.67, &Q_Bullet[aero].VecIn, &Q_Bullet[aero].VertFP);


					a=0;
					while( a <= 12 )
						{
						b=0;
						while( b <= 3 )
							{
							Q_Bullet[aero].Lvert[a][b].a = 255;
							Q_Bullet[aero].Lvert[a][b].b = 80;
							Q_Bullet[aero].Lvert[a][b].g = 160;
							Q_Bullet[aero].Lvert[a][b].r = 160;
							b++;
							}
						a++;
						}

					a=3;
					while( a <= 7 )
						{
						b=0;
						while( b <= 1 )
							{
							Q_Bullet[aero].Lvert[a][b].a = 255;
							Q_Bullet[aero].Lvert[a][b].b = 20;
							Q_Bullet[aero].Lvert[a][b].g = 90;
							Q_Bullet[aero].Lvert[a][b].r = 90;
							b++;
							}
						a++;
						}


						//## Back Tris ##

						Q_Bullet[aero].Lvert[0][0].u = 0;
						Q_Bullet[aero].Lvert[0][0].v = 1;
						Q_Bullet[aero].Lvert[0][0].X = Q_Bullet[aero].VertB1.X;
						Q_Bullet[aero].Lvert[0][0].Y = Q_Bullet[aero].VertB1.Y;
						Q_Bullet[aero].Lvert[0][0].Z = Q_Bullet[aero].VertB1.Z;
						Q_Bullet[aero].Lvert[0][1].u = 1;
						Q_Bullet[aero].Lvert[0][1].v = 1;
						Q_Bullet[aero].Lvert[0][1].X = Q_Bullet[aero].VertB2.X;
						Q_Bullet[aero].Lvert[0][1].Y = Q_Bullet[aero].VertB2.Y;
						Q_Bullet[aero].Lvert[0][1].Z = Q_Bullet[aero].VertB2.Z;
						Q_Bullet[aero].Lvert[0][2].u = 1;
						Q_Bullet[aero].Lvert[0][2].v = 0;
						Q_Bullet[aero].Lvert[0][2].X = Q_Bullet[aero].VertB3.X;
						Q_Bullet[aero].Lvert[0][2].Y = Q_Bullet[aero].VertB3.Y;
						Q_Bullet[aero].Lvert[0][2].Z = Q_Bullet[aero].VertB3.Z;


						Q_Bullet[aero].Lvert[1][0].u = 0;
						Q_Bullet[aero].Lvert[1][0].v = 1;
						Q_Bullet[aero].Lvert[1][0].X = Q_Bullet[aero].VertB3.X;
						Q_Bullet[aero].Lvert[1][0].Y = Q_Bullet[aero].VertB3.Y;
						Q_Bullet[aero].Lvert[1][0].Z = Q_Bullet[aero].VertB3.Z;
						Q_Bullet[aero].Lvert[1][1].u = 1;
						Q_Bullet[aero].Lvert[1][1].v = 1;
						Q_Bullet[aero].Lvert[1][1].X = Q_Bullet[aero].VertB4.X;
						Q_Bullet[aero].Lvert[1][1].Y = Q_Bullet[aero].VertB4.Y;
						Q_Bullet[aero].Lvert[1][1].Z = Q_Bullet[aero].VertB4.Z;
						Q_Bullet[aero].Lvert[1][2].u = 1;
						Q_Bullet[aero].Lvert[1][2].v = 0;
						Q_Bullet[aero].Lvert[1][2].X = Q_Bullet[aero].VertB1.X;
						Q_Bullet[aero].Lvert[1][2].Y = Q_Bullet[aero].VertB1.Y;
						Q_Bullet[aero].Lvert[1][2].Z = Q_Bullet[aero].VertB1.Z;


						Q_Bullet[aero].Lvert[2][0].u = 0;
						Q_Bullet[aero].Lvert[2][0].v = 1;
						Q_Bullet[aero].Lvert[2][0].X = Q_Bullet[aero].VertB4.X;
						Q_Bullet[aero].Lvert[2][0].Y = Q_Bullet[aero].VertB4.Y;
						Q_Bullet[aero].Lvert[2][0].Z = Q_Bullet[aero].VertB4.Z;
						Q_Bullet[aero].Lvert[2][1].u = 1;
						Q_Bullet[aero].Lvert[2][1].v = 1;
						Q_Bullet[aero].Lvert[2][1].X = Q_Bullet[aero].VertB5.X;
						Q_Bullet[aero].Lvert[2][1].Y = Q_Bullet[aero].VertB5.Y;
						Q_Bullet[aero].Lvert[2][1].Z = Q_Bullet[aero].VertB5.Z;
						Q_Bullet[aero].Lvert[2][2].u = 1;
						Q_Bullet[aero].Lvert[2][2].v = 0;
						Q_Bullet[aero].Lvert[2][2].X = Q_Bullet[aero].VertB1.X;
						Q_Bullet[aero].Lvert[2][2].Y = Q_Bullet[aero].VertB1.Y;
						Q_Bullet[aero].Lvert[2][2].Z = Q_Bullet[aero].VertB1.Z;


						//## Side Strips ##

						//Strip1
						Q_Bullet[aero].Lvert[3][0].u = 1;
						Q_Bullet[aero].Lvert[3][0].v = 0;
						Q_Bullet[aero].Lvert[3][0].X = Q_Bullet[aero].VertB1.X;
						Q_Bullet[aero].Lvert[3][0].Y = Q_Bullet[aero].VertB1.Y;
						Q_Bullet[aero].Lvert[3][0].Z = Q_Bullet[aero].VertB1.Z;
						Q_Bullet[aero].Lvert[3][1].u = 0;
						Q_Bullet[aero].Lvert[3][1].v = 0;
						Q_Bullet[aero].Lvert[3][1].X = Q_Bullet[aero].VertB2.X;
						Q_Bullet[aero].Lvert[3][1].Y = Q_Bullet[aero].VertB2.Y;
						Q_Bullet[aero].Lvert[3][1].Z = Q_Bullet[aero].VertB2.Z;
						Q_Bullet[aero].Lvert[3][2].u = 1;
						Q_Bullet[aero].Lvert[3][2].v = 1;
						Q_Bullet[aero].Lvert[3][2].X = Q_Bullet[aero].VertF2.X;
						Q_Bullet[aero].Lvert[3][2].Y = Q_Bullet[aero].VertF2.Y;
						Q_Bullet[aero].Lvert[3][2].Z = Q_Bullet[aero].VertF2.Z;
						Q_Bullet[aero].Lvert[3][3].u = 1;
						Q_Bullet[aero].Lvert[3][3].v = 1;
						Q_Bullet[aero].Lvert[3][3].X = Q_Bullet[aero].VertF1.X;
						Q_Bullet[aero].Lvert[3][3].Y = Q_Bullet[aero].VertF1.Y;
						Q_Bullet[aero].Lvert[3][3].Z = Q_Bullet[aero].VertF1.Z;


						//Strip2
						Q_Bullet[aero].Lvert[4][0].u = 1;
						Q_Bullet[aero].Lvert[4][0].v = 0;
						Q_Bullet[aero].Lvert[4][0].X = Q_Bullet[aero].VertB2.X;
						Q_Bullet[aero].Lvert[4][0].Y = Q_Bullet[aero].VertB2.Y;
						Q_Bullet[aero].Lvert[4][0].Z = Q_Bullet[aero].VertB2.Z;
						Q_Bullet[aero].Lvert[4][1].u = 0;
						Q_Bullet[aero].Lvert[4][1].v = 0;
						Q_Bullet[aero].Lvert[4][1].X = Q_Bullet[aero].VertB3.X;
						Q_Bullet[aero].Lvert[4][1].Y = Q_Bullet[aero].VertB3.Y;
						Q_Bullet[aero].Lvert[4][1].Z = Q_Bullet[aero].VertB3.Z;
						Q_Bullet[aero].Lvert[4][2].u = 1;
						Q_Bullet[aero].Lvert[4][2].v = 1;
						Q_Bullet[aero].Lvert[4][2].X = Q_Bullet[aero].VertF3.X;
						Q_Bullet[aero].Lvert[4][2].Y = Q_Bullet[aero].VertF3.Y;
						Q_Bullet[aero].Lvert[4][2].Z = Q_Bullet[aero].VertF3.Z;
						Q_Bullet[aero].Lvert[4][3].u = 1;
						Q_Bullet[aero].Lvert[4][3].v = 1;
						Q_Bullet[aero].Lvert[4][3].X = Q_Bullet[aero].VertF2.X;
						Q_Bullet[aero].Lvert[4][3].Y = Q_Bullet[aero].VertF2.Y;
						Q_Bullet[aero].Lvert[4][3].Z = Q_Bullet[aero].VertF2.Z;


						//Strip3
						Q_Bullet[aero].Lvert[5][0].u = 1;
						Q_Bullet[aero].Lvert[5][0].v = 0;
						Q_Bullet[aero].Lvert[5][0].X = Q_Bullet[aero].VertB3.X;
						Q_Bullet[aero].Lvert[5][0].Y = Q_Bullet[aero].VertB3.Y;
						Q_Bullet[aero].Lvert[5][0].Z = Q_Bullet[aero].VertB3.Z;
						Q_Bullet[aero].Lvert[5][1].u = 0;
						Q_Bullet[aero].Lvert[5][1].v = 0;
						Q_Bullet[aero].Lvert[5][1].X = Q_Bullet[aero].VertB4.X;
						Q_Bullet[aero].Lvert[5][1].Y = Q_Bullet[aero].VertB4.Y;
						Q_Bullet[aero].Lvert[5][1].Z = Q_Bullet[aero].VertB4.Z;
						Q_Bullet[aero].Lvert[5][2].u = 1;
						Q_Bullet[aero].Lvert[5][2].v = 1;
						Q_Bullet[aero].Lvert[5][2].X = Q_Bullet[aero].VertF4.X;
						Q_Bullet[aero].Lvert[5][2].Y = Q_Bullet[aero].VertF4.Y;
						Q_Bullet[aero].Lvert[5][2].Z = Q_Bullet[aero].VertF4.Z;
						Q_Bullet[aero].Lvert[5][3].u = 1;
						Q_Bullet[aero].Lvert[5][3].v = 1;
						Q_Bullet[aero].Lvert[5][3].X = Q_Bullet[aero].VertF3.X;
						Q_Bullet[aero].Lvert[5][3].Y = Q_Bullet[aero].VertF3.Y;
						Q_Bullet[aero].Lvert[5][3].Z = Q_Bullet[aero].VertF3.Z;


						//Strip4
						Q_Bullet[aero].Lvert[6][0].u = 0;
						Q_Bullet[aero].Lvert[6][0].v = 0;
						Q_Bullet[aero].Lvert[6][0].X = Q_Bullet[aero].VertB4.X;
						Q_Bullet[aero].Lvert[6][0].Y = Q_Bullet[aero].VertB4.Y;
						Q_Bullet[aero].Lvert[6][0].Z = Q_Bullet[aero].VertB4.Z;
						Q_Bullet[aero].Lvert[6][1].u = 1;
						Q_Bullet[aero].Lvert[6][1].v = 0;
						Q_Bullet[aero].Lvert[6][1].X = Q_Bullet[aero].VertB5.X;
						Q_Bullet[aero].Lvert[6][1].Y = Q_Bullet[aero].VertB5.Y;
						Q_Bullet[aero].Lvert[6][1].Z = Q_Bullet[aero].VertB5.Z;
						Q_Bullet[aero].Lvert[6][2].u = 1;
						Q_Bullet[aero].Lvert[6][2].v = 1;
						Q_Bullet[aero].Lvert[6][2].X = Q_Bullet[aero].VertF5.X;
						Q_Bullet[aero].Lvert[6][2].Y = Q_Bullet[aero].VertF5.Y;
						Q_Bullet[aero].Lvert[6][2].Z = Q_Bullet[aero].VertF5.Z;
						Q_Bullet[aero].Lvert[6][3].u = 1;
						Q_Bullet[aero].Lvert[6][3].v = 1;
						Q_Bullet[aero].Lvert[6][3].X = Q_Bullet[aero].VertF4.X;
						Q_Bullet[aero].Lvert[6][3].Y = Q_Bullet[aero].VertF4.Y;
						Q_Bullet[aero].Lvert[6][3].Z = Q_Bullet[aero].VertF4.Z;


						//Strip5
						Q_Bullet[aero].Lvert[7][0].u = 0;
						Q_Bullet[aero].Lvert[7][0].v = 0;
						Q_Bullet[aero].Lvert[7][0].X = Q_Bullet[aero].VertB5.X;
						Q_Bullet[aero].Lvert[7][0].Y = Q_Bullet[aero].VertB5.Y;
						Q_Bullet[aero].Lvert[7][0].Z = Q_Bullet[aero].VertB5.Z;
						Q_Bullet[aero].Lvert[7][1].u = 1;
						Q_Bullet[aero].Lvert[7][1].v = 0;
						Q_Bullet[aero].Lvert[7][1].X = Q_Bullet[aero].VertB1.X;
						Q_Bullet[aero].Lvert[7][1].Y = Q_Bullet[aero].VertB1.Y;
						Q_Bullet[aero].Lvert[7][1].Z = Q_Bullet[aero].VertB1.Z;
						Q_Bullet[aero].Lvert[7][2].u = 1;
						Q_Bullet[aero].Lvert[7][2].v = 1;
						Q_Bullet[aero].Lvert[7][2].X = Q_Bullet[aero].VertF1.X;
						Q_Bullet[aero].Lvert[7][2].Y = Q_Bullet[aero].VertF1.Y;
						Q_Bullet[aero].Lvert[7][2].Z = Q_Bullet[aero].VertF1.Z;
						Q_Bullet[aero].Lvert[7][3].u = 1;
						Q_Bullet[aero].Lvert[7][3].v = 1;
						Q_Bullet[aero].Lvert[7][3].X = Q_Bullet[aero].VertF5.X;
						Q_Bullet[aero].Lvert[7][3].Y = Q_Bullet[aero].VertF5.Y;
						Q_Bullet[aero].Lvert[7][3].Z = Q_Bullet[aero].VertF5.Z;


						//## Front Tris ##

						Q_Bullet[aero].Lvert[8][0].u = 0;
						Q_Bullet[aero].Lvert[8][0].v = 1;
						Q_Bullet[aero].Lvert[8][0].X = Q_Bullet[aero].VertF1.X;
						Q_Bullet[aero].Lvert[8][0].Y = Q_Bullet[aero].VertF1.Y;
						Q_Bullet[aero].Lvert[8][0].Z = Q_Bullet[aero].VertF1.Z;
						Q_Bullet[aero].Lvert[8][1].u = 1;
						Q_Bullet[aero].Lvert[8][1].v = 1;
						Q_Bullet[aero].Lvert[8][1].X = Q_Bullet[aero].VertF2.X;
						Q_Bullet[aero].Lvert[8][1].Y = Q_Bullet[aero].VertF2.Y;
						Q_Bullet[aero].Lvert[8][1].Z = Q_Bullet[aero].VertF2.Z;
						Q_Bullet[aero].Lvert[8][2].u = 1;
						Q_Bullet[aero].Lvert[8][2].v = 0;
						Q_Bullet[aero].Lvert[8][2].X = Q_Bullet[aero].VertFP.X;
						Q_Bullet[aero].Lvert[8][2].Y = Q_Bullet[aero].VertFP.Y;
						Q_Bullet[aero].Lvert[8][2].Z = Q_Bullet[aero].VertFP.Z;


						Q_Bullet[aero].Lvert[9][0].u = 0;
						Q_Bullet[aero].Lvert[9][0].v = 1;
						Q_Bullet[aero].Lvert[9][0].X = Q_Bullet[aero].VertF2.X;
						Q_Bullet[aero].Lvert[9][0].Y = Q_Bullet[aero].VertF2.Y;
						Q_Bullet[aero].Lvert[9][0].Z = Q_Bullet[aero].VertF2.Z;
						Q_Bullet[aero].Lvert[9][1].u = 1;
						Q_Bullet[aero].Lvert[9][1].v = 1;
						Q_Bullet[aero].Lvert[9][1].X = Q_Bullet[aero].VertF3.X;
						Q_Bullet[aero].Lvert[9][1].Y = Q_Bullet[aero].VertF3.Y;
						Q_Bullet[aero].Lvert[9][1].Z = Q_Bullet[aero].VertF3.Z;
						Q_Bullet[aero].Lvert[9][2].u = 1;
						Q_Bullet[aero].Lvert[9][2].v = 0;
						Q_Bullet[aero].Lvert[9][2].X = Q_Bullet[aero].VertFP.X;
						Q_Bullet[aero].Lvert[9][2].Y = Q_Bullet[aero].VertFP.Y;
						Q_Bullet[aero].Lvert[9][2].Z = Q_Bullet[aero].VertFP.Z;


						Q_Bullet[aero].Lvert[10][0].u = 0;
						Q_Bullet[aero].Lvert[10][0].v = 1;
						Q_Bullet[aero].Lvert[10][0].X = Q_Bullet[aero].VertF3.X;
						Q_Bullet[aero].Lvert[10][0].Y = Q_Bullet[aero].VertF3.Y;
						Q_Bullet[aero].Lvert[10][0].Z = Q_Bullet[aero].VertF3.Z;
						Q_Bullet[aero].Lvert[10][1].u = 1;
						Q_Bullet[aero].Lvert[10][1].v = 1;
						Q_Bullet[aero].Lvert[10][1].X = Q_Bullet[aero].VertF4.X;
						Q_Bullet[aero].Lvert[10][1].Y = Q_Bullet[aero].VertF4.Y;
						Q_Bullet[aero].Lvert[10][1].Z = Q_Bullet[aero].VertF4.Z;
						Q_Bullet[aero].Lvert[10][2].u = 1;
						Q_Bullet[aero].Lvert[10][2].v = 0;
						Q_Bullet[aero].Lvert[10][2].X = Q_Bullet[aero].VertFP.X;
						Q_Bullet[aero].Lvert[10][2].Y = Q_Bullet[aero].VertFP.Y;
						Q_Bullet[aero].Lvert[10][2].Z = Q_Bullet[aero].VertFP.Z;


						Q_Bullet[aero].Lvert[11][0].u = 0;
						Q_Bullet[aero].Lvert[11][0].v = 1;
						Q_Bullet[aero].Lvert[11][0].X = Q_Bullet[aero].VertF4.X;
						Q_Bullet[aero].Lvert[11][0].Y = Q_Bullet[aero].VertF4.Y;
						Q_Bullet[aero].Lvert[11][0].Z = Q_Bullet[aero].VertF4.Z;
						Q_Bullet[aero].Lvert[11][1].u = 1;
						Q_Bullet[aero].Lvert[11][1].v = 1;
						Q_Bullet[aero].Lvert[11][1].X = Q_Bullet[aero].VertF5.X;
						Q_Bullet[aero].Lvert[11][1].Y = Q_Bullet[aero].VertF5.Y;
						Q_Bullet[aero].Lvert[11][1].Z = Q_Bullet[aero].VertF5.Z;
						Q_Bullet[aero].Lvert[11][2].u = 1;
						Q_Bullet[aero].Lvert[11][2].v = 0;
						Q_Bullet[aero].Lvert[11][2].X = Q_Bullet[aero].VertFP.X;
						Q_Bullet[aero].Lvert[11][2].Y = Q_Bullet[aero].VertFP.Y;
						Q_Bullet[aero].Lvert[11][2].Z = Q_Bullet[aero].VertFP.Z;


						Q_Bullet[aero].Lvert[12][0].u = 0;
						Q_Bullet[aero].Lvert[12][0].v = 1;
						Q_Bullet[aero].Lvert[12][0].X = Q_Bullet[aero].VertF5.X;
						Q_Bullet[aero].Lvert[12][0].Y = Q_Bullet[aero].VertF5.Y;
						Q_Bullet[aero].Lvert[12][0].Z = Q_Bullet[aero].VertF5.Z;
						Q_Bullet[aero].Lvert[12][1].u = 1;
						Q_Bullet[aero].Lvert[12][1].v = 1;
						Q_Bullet[aero].Lvert[12][1].X = Q_Bullet[aero].VertF1.X;
						Q_Bullet[aero].Lvert[12][1].Y = Q_Bullet[aero].VertF1.Y;
						Q_Bullet[aero].Lvert[12][1].Z = Q_Bullet[aero].VertF1.Z;
						Q_Bullet[aero].Lvert[12][2].u = 1;
						Q_Bullet[aero].Lvert[12][2].v = 0;
						Q_Bullet[aero].Lvert[12][2].X = Q_Bullet[aero].VertFP.X;
						Q_Bullet[aero].Lvert[12][2].Y = Q_Bullet[aero].VertFP.Y;
						Q_Bullet[aero].Lvert[12][2].Z = Q_Bullet[aero].VertFP.Z;



						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[0][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[1][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[2][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);

						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[3][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[4][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[5][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[6][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[7][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);

						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[8][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[9][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[10][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[11][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
						geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[12][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					}
				}
			aero++;
			}
		}
	}
else
	{
	//########  - PHANTOM BULLET SYSTEM CLIENT MODE -  ########
	if(NomBullet > 0)
		{
		aero = 0;
		while(aero < NomBullet)
			{
			if(Q_Bullet[aero].Live == 1) //MOVEMENT
				{
				Q_Bullet[aero].NewPos = Q_Bullet[aero].WorldPos;


				//## Bullet Trails
				if(Q_Bullet[aero].JDamageLVL == 0)
					{
					if(TimeScale > 0.65)
						{
						//## Bullet Trails
						if(geVec3d_DistanceBetween(&Q_Bullet[aero].NewPos, &Q_Bullet[aero].ORIGPos) < Q_Bullet[aero].Speed)
							{
							Q_Bullet[aero].TrailStart = Q_Bullet[aero].ORIGPos;
							Q_Bullet[aero].TrailEnd = Q_Bullet[aero].NewPos;
							}
						else
							{
							Q_Bullet[aero].TrailStart = Q_Bullet[aero].NewPos;
							Q_Bullet[aero].TrailEnd = Q_Bullet[aero].NewPos;
							geVec3d_MA(&Q_Bullet[aero].TrailEnd, -Q_Bullet[aero].Speed, &Q_Bullet[aero].TrajVec, &Q_Bullet[aero].TrailStart);
							}

						if(Q_Bullet[aero].Live == 0)
							{
							Q_Bullet[aero].TrailStart = Q_Bullet[aero].WorldPos;
							DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 0.55, BulletTrail, 30, 255, 255, 220, 0);
							}
						else DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 0.55, BulletTrail, 70, 255, 255, 220, 0);
						}
					else
						{
						//Particle ejjector LVL02
						player.QAEFF_CNTR01[0] += 1;
						player.QAEFF_ROTAMT[0] = 0;

						TempVec1 = Q_Bullet[aero].WorldPos;

						if(player.QAEFF_CNTR01[0] > 2)
							{
							player.QAEFF_CNTR01[0] = 0;

							jet=0;
							while((jet < 15) && (NomPntSprite < 24998))
								{
								Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
								Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
								Q_PntSprite[NomPntSprite].Scale = 0.02f;		//0.025f//0.002f
								Q_PntSprite[NomPntSprite].PartType = 26;

								Q_PntSprite[NomPntSprite].IR = 255;
								Q_PntSprite[NomPntSprite].IG = 255;
								Q_PntSprite[NomPntSprite].IB = 255;

								Q_PntSprite[NomPntSprite].Alpha = 30;
								Q_PntSprite[NomPntSprite].Speed = 0.35;
								Q_PntSprite[NomPntSprite].SpeedDIR = 0;
								Q_PntSprite[NomPntSprite].Pos = TempVec1;

								Q_PntSprite[NomPntSprite].VecUp = Q_Bullet[aero].TrajVec;

									//Calculate Direction Vectors
								geXForm3d_SetYRotation(&RotateMatrix, PI/2);
								geXForm3d_Rotate(&RotateMatrix, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].VecLeft);

								Q_PntSprite[NomPntSprite].VecLeft.Y = 0;
								geVec3d_Normalize(&Q_PntSprite[NomPntSprite].VecLeft);

								geVec3d_CrossProduct(&Q_PntSprite[NomPntSprite].VecLeft, &Q_PntSprite[NomPntSprite].VecUp, &Q_PntSprite[NomPntSprite].TraVec);

								geXForm3d_SetFromLeftUpIn(&RotateMatrix2,&Q_PntSprite[NomPntSprite].VecLeft,&Q_PntSprite[NomPntSprite].VecUp,&Q_PntSprite[NomPntSprite].TraVec);

								geXForm3d_SetYRotation(&RotateMatrix3, player.QAEFF_ROTAMT[0]);

								player.QAEFF_ROTAMT[0] += 0.42;

								geXForm3d_Multiply(&RotateMatrix2, &RotateMatrix3, &RotateMatrix2);

								geXForm3d_GetIn(&RotateMatrix2, &Q_PntSprite[NomPntSprite].TraVec);

								geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

								Q_PntSprite[NomPntSprite].ActorID = Q_PntSprite[helly].ActorID;

								Q_PntSprite[NomPntSprite].Live = 1;

								NomPntSprite++;
								jet++;
								}
							}
						}
					}
				else
					{
					//## Bullet Trails
					if(geVec3d_DistanceBetween(&Q_Bullet[aero].NewPos, &Q_Bullet[aero].ORIGPos) < Q_Bullet[aero].Speed)
						{
						Q_Bullet[aero].TrailStart = Q_Bullet[aero].ORIGPos;
						Q_Bullet[aero].TrailEnd = Q_Bullet[aero].NewPos;
						}
					else
						{
						Q_Bullet[aero].TrailStart = Q_Bullet[aero].NewPos;
						Q_Bullet[aero].TrailEnd = Q_Bullet[aero].NewPos;
						geVec3d_MA(&Q_Bullet[aero].TrailEnd, -Q_Bullet[aero].Speed, &Q_Bullet[aero].TrajVec, &Q_Bullet[aero].TrailStart);
						}

					switch(Q_Bullet[aero].JDamageLVL)
						{
						case 1:
							{
							if(Q_Bullet[aero].Live == 0)
								{
								Q_Bullet[aero].TrailStart = Q_Bullet[aero].WorldPos;
								DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 3, QAEFF29, 30, 255, 255, 255, 0);
								}
							else DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 3, QAEFF29, 90, 255, 255, 255, 0);

							//##### Render Main Sprite
							Q_Bullet[aero].Lvert[0][0].X = Q_Bullet[aero].WorldPos.X;
							Q_Bullet[aero].Lvert[0][0].Y = Q_Bullet[aero].WorldPos.Y;
							Q_Bullet[aero].Lvert[0][0].Z = Q_Bullet[aero].WorldPos.Z;
							Q_Bullet[aero].Lvert[0][0].r = 255;
							Q_Bullet[aero].Lvert[0][0].g = 255;
							Q_Bullet[aero].Lvert[0][0].b = 255;
							Q_Bullet[aero].Lvert[0][0].a = 90;

							geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[0][0], 1, QAEFF28, GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF, 0.2f);
							}break;

						case 2:
							{
							if(Q_Bullet[aero].Live == 0)
								{
								Q_Bullet[aero].TrailStart = Q_Bullet[aero].WorldPos;
								DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 5, QAEFF29, 50, 255, 255, 255, 0);
								}
							else DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 5, QAEFF29, 135, 255, 255, 255, 0);

							//##### Render Main Sprite
							Q_Bullet[aero].Lvert[0][0].X = Q_Bullet[aero].WorldPos.X;
							Q_Bullet[aero].Lvert[0][0].Y = Q_Bullet[aero].WorldPos.Y;
							Q_Bullet[aero].Lvert[0][0].Z = Q_Bullet[aero].WorldPos.Z;
							Q_Bullet[aero].Lvert[0][0].r = 255;
							Q_Bullet[aero].Lvert[0][0].g = 255;
							Q_Bullet[aero].Lvert[0][0].b = 255;
							Q_Bullet[aero].Lvert[0][0].a = 135;

							geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[0][0], 1, QAEFF28, GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF, 0.35f);
							}break;

						case 3:
							{
							if(Q_Bullet[aero].Live == 0)
								{
								Q_Bullet[aero].TrailStart = Q_Bullet[aero].WorldPos;
								DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 10, QAEFF29, 100, 255, 255, 255, 0);
								}
							else DrawLaser(World, &Q_Bullet[aero].TrailEnd, &Q_Bullet[aero].TrailStart, &player.ViewXForm.Translation, 10, QAEFF29, 200, 255, 255, 255, 0);

							//##### Render Main Sprite
							Q_Bullet[aero].Lvert[0][0].X = Q_Bullet[aero].WorldPos.X;
							Q_Bullet[aero].Lvert[0][0].Y = Q_Bullet[aero].WorldPos.Y;
							Q_Bullet[aero].Lvert[0][0].Z = Q_Bullet[aero].WorldPos.Z;
							Q_Bullet[aero].Lvert[0][0].r = 255;
							Q_Bullet[aero].Lvert[0][0].g = 255;
							Q_Bullet[aero].Lvert[0][0].b = 255;
							Q_Bullet[aero].Lvert[0][0].a = 200;

							geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[0][0], 1, QAEFF28, GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF, 0.5f);
							}break;
						}
					}


				Q_Bullet[aero].WorldPos = Q_Bullet[aero].NewPos;

				//Spin Bullet
				Q_Bullet[aero].Zrot += Q_Bullet[aero].ZSpin*TimeScale;

				geXForm3d_SetZRotation(&rotmat, Q_Bullet[aero].Zrot);
				geXForm3d_Multiply(&Q_Bullet[aero].AlignMatrix, &rotmat, &Q_Bullet[aero].AlignMatrix);

				Q_Bullet[aero].AlignMatrix.Translation = Q_Bullet[aero].WorldPos;

				Q_Bullet[aero].Pos = Q_Bullet[aero].AlignMatrix.Translation;

				geXForm3d_GetUp(&Q_Bullet[aero].AlignMatrix, &Q_Bullet[aero].VecUp);
				geXForm3d_GetLeft(&Q_Bullet[aero].AlignMatrix, &Q_Bullet[aero].VecLeft);
				geXForm3d_GetIn(&Q_Bullet[aero].AlignMatrix, &Q_Bullet[aero].VecIn);


				//##### Jink Damage single vapor
				if(Q_Bullet[aero].JDamageLVL == 3 || Q_Bullet[aero].BulletPWR > 45.5)
					{
					ColourSTART.r = 255;
					ColourSTART.g = 255;
					ColourSTART.b = 255;
					ColourSTART.a = 055;
					ColourEND.r = 255;
					ColourEND.g = 255;
					ColourEND.b = 255;
					ColourEND.a = 0;
					if(Q_VaporTrail[Q_Bullet[aero].VaporID1].NomPoints <= 998) Q_AddTrailPNT(Q_Bullet[aero].VaporID1, Q_Bullet[aero].Pos, ColourSTART, ColourEND, Wind, 0);
					}


				//+---=VAPOR TRAIL=---+
				if(Q_Bullet[aero].JDamageLVL == 4)
					{
					ColourSTART.r = 255;
					ColourSTART.g = 255;
					ColourSTART.b = 255;
					ColourSTART.a = 45;
					ColourEND.r = 255;
					ColourEND.g = 255;
					ColourEND.b = 255;
					ColourEND.a = 0;

					TempVec1 = Q_Bullet[aero].Pos;
					TempVec2 = Q_Bullet[aero].Pos;

					TempVec1.X += ((((float)rand() / 32767)-0.5)*2 + 1);
					TempVec1.Y += ((((float)rand() / 32767)-0.5)*2 + 1);
					TempVec1.Z += ((((float)rand() / 32767)-0.5)*2 + 1);

					geVec3d_Subtract(&TempVec1, &TempVec2, &TempVec2);
					
					if(Q_VaporTrail[Q_Bullet[aero].VaporID1].NomPoints <= 998) Q_AddTrailPNT(Q_Bullet[aero].VaporID1, Q_Bullet[aero].Pos, ColourSTART, ColourEND, TempVec2, 0);


					ColourSTART.r = 255;
					ColourSTART.g = 255;
					ColourSTART.b = 255;
					ColourSTART.a = 45;
					ColourEND.r = 255;
					ColourEND.g = 255;
					ColourEND.b = 255;
					ColourEND.a = 0;

					TempVec1 = Q_Bullet[aero].Pos;
					TempVec2 = Q_Bullet[aero].Pos;

					TempVec1.X += ((((float)rand() / 32767)-0.5)*2 + 1);
					TempVec1.Y += ((((float)rand() / 32767)-0.5)*2 + 1);
					TempVec1.Z += ((((float)rand() / 32767)-0.5)*2 + 1);

					geVec3d_Subtract(&TempVec1, &TempVec2, &TempVec2);
					
					if(Q_VaporTrail[Q_Bullet[aero].VaporID1].NomPoints <= 998) Q_AddTrailPNT(Q_Bullet[aero].VaporID2, Q_Bullet[aero].Pos, ColourSTART, ColourEND, TempVec2, 0);


					ColourSTART.r = 255;
					ColourSTART.g = 255;
					ColourSTART.b = 255;
					ColourSTART.a = 45;
					ColourEND.r = 255;
					ColourEND.g = 255;
					ColourEND.b = 255;
					ColourEND.a = 0;

					TempVec1 = Q_Bullet[aero].Pos;
					TempVec2 = Q_Bullet[aero].Pos;

					TempVec1.X += ((((float)rand() / 32767)-0.5)*2 + 1);
					TempVec1.Y += ((((float)rand() / 32767)-0.5)*2 + 1);
					TempVec1.Z += ((((float)rand() / 32767)-0.5)*2 + 1);

					geVec3d_Subtract(&TempVec1, &TempVec2, &TempVec2);
					
					if(Q_VaporTrail[Q_Bullet[aero].VaporID1].NomPoints <= 998) Q_AddTrailPNT(Q_Bullet[aero].VaporID3, Q_Bullet[aero].Pos, ColourSTART, ColourEND, TempVec2, 0);

					//ROCKET DRIVE

					TempVec1 = Q_Bullet[aero].Pos;
					TempVec2 = Q_Bullet[aero].Pos;

					geVec3d_MA(&TempVec2, -90, &Q_Bullet[aero].TrajVec, &TempVec2);	//1.1

					Q_Bullet[aero].RDriveMATCNT++;
					if(Q_Bullet[aero].RDriveMATCNT < 0) Q_Bullet[aero].RDriveMATCNT = 0;
					if(Q_Bullet[aero].RDriveMATCNT > 9) Q_Bullet[aero].RDriveMATCNT = 0;

					DrawLaser(World, &TempVec2, &TempVec1, &player.ViewXForm.Translation, 20, Rocket[Q_Bullet[aero].RDriveMATCNT], 255, 255, 255, 255, 0);

					TempVec1 = Q_Bullet[aero].TrajVec;
					geVec3d_Inverse(&TempVec1);

					jet=0;
					while(jet < 3)
						{
						//#### Smoke Blast
						Q_Cloud[NomCloud].CloudType = 10;
						Q_Cloud[NomCloud].CloudPos = Q_Bullet[aero].Pos;
						Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*80)+175;
						Q_Cloud[NomCloud].CloudScale = ((float)rand() / 32767)*0.35;	//0.33;
						Q_Cloud[NomCloud].CloudTraVec = TempVec1;
						Q_Cloud[NomCloud].CloudTraVec.Y += 0.35;
						Q_Cloud[NomCloud].CloudSpeed = (((float)rand() / 32767)*0.03) + 0.5;
						Q_Cloud[NomCloud].CloudMatCNT = 0;
						Q_Cloud[NomCloud].CloudLive = 1;

						NomCloud++;
						if(NomCloud > 4999) NomCloud = 0;
						jet++;
						}
					}


				//DRAW BULLET

				Q_Bullet[aero].Type = GE_GOURAUD_POLY;
				Q_Bullet[aero].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
				Q_Bullet[aero].ScaleBIT = 1.0f;

				Q_Bullet[aero].Scale = 0.5;

				//Compensate for pivot
				geVec3d_MA(&Q_Bullet[aero].Pos, -Q_Bullet[aero].Scale*2, &Q_Bullet[aero].VecIn, &Q_Bullet[aero].Pos);	//1.1

				//##Back Verts##
						//BACK VERT1
				geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale/1.105, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertB1);	//1.1

						//BACK VERT2
				geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale/6, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertB2);

				geVec3d_MA(&Q_Bullet[aero].VertB2, -Q_Bullet[aero].Scale*0.89, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertB2);

				geVec3d_MA(&Q_Bullet[aero].Pos, -Q_Bullet[aero].Scale, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertB3);

						//BACK VERT4
				geVec3d_MA(&Q_Bullet[aero].VertB3, Q_Bullet[aero].Scale/1.62, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertB4);	//1.75

						//BACK VERT3
				geVec3d_MA(&Q_Bullet[aero].VertB3, -Q_Bullet[aero].Scale/1.62, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertB3);

						//BACK VERT5
				geVec3d_MA(&Q_Bullet[aero].VertB2, (Q_Bullet[aero].Scale*2)*0.89, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertB5);


				//OTF FIX
				geVec3d_Subtract(&Q_Bullet[aero].VertB3, &Q_Bullet[aero].Pos, &Q_Bullet[aero].VecSTR);
				geVec3d_MA(&Q_Bullet[aero].VertB3, -0.23, &Q_Bullet[aero].VecSTR, &Q_Bullet[aero].VertB3);	//0.2106
				geVec3d_Subtract(&Q_Bullet[aero].VertB4, &Q_Bullet[aero].Pos, &Q_Bullet[aero].VecSTR);
				geVec3d_MA(&Q_Bullet[aero].VertB4, -0.23, &Q_Bullet[aero].VecSTR, &Q_Bullet[aero].VertB4);


				//##Front Verts##
						//FRONT VERT1
				geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale*4, &Q_Bullet[aero].VecIn, &Q_Bullet[aero].Pos);

				geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale/1.105, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertF1);	//1.1

						//FRONT VERT2
				geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale/6, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertF2);

				geVec3d_MA(&Q_Bullet[aero].VertF2, -Q_Bullet[aero].Scale*0.89, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertF2);

				geVec3d_MA(&Q_Bullet[aero].Pos, -Q_Bullet[aero].Scale, &Q_Bullet[aero].VecUp, &Q_Bullet[aero].VertF3);

						//FRONT VERT4
				geVec3d_MA(&Q_Bullet[aero].VertF3, Q_Bullet[aero].Scale/1.62, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertF4);	//1.75

						//FRONT VERT3
				geVec3d_MA(&Q_Bullet[aero].VertF3, -Q_Bullet[aero].Scale/1.62, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertF3);

						//FRONT VERT5
				geVec3d_MA(&Q_Bullet[aero].VertF2, (Q_Bullet[aero].Scale*2)*0.89, &Q_Bullet[aero].VecLeft, &Q_Bullet[aero].VertF5);


				geVec3d_Subtract(&Q_Bullet[aero].VertF3, &Q_Bullet[aero].Pos, &Q_Bullet[aero].VecSTR);
				geVec3d_MA(&Q_Bullet[aero].VertF3, -0.23, &Q_Bullet[aero].VecSTR, &Q_Bullet[aero].VertF3);	//0.2106
				geVec3d_Subtract(&Q_Bullet[aero].VertF4, &Q_Bullet[aero].Pos, &Q_Bullet[aero].VecSTR);
				geVec3d_MA(&Q_Bullet[aero].VertF4, -0.23, &Q_Bullet[aero].VecSTR, &Q_Bullet[aero].VertF4);


				//##Front Point##
						//FRONT POINT
				geVec3d_MA(&Q_Bullet[aero].Pos, Q_Bullet[aero].Scale*2.67, &Q_Bullet[aero].VecIn, &Q_Bullet[aero].VertFP);


				a=0;
				while( a <= 12 )
					{
					b=0;
					while( b <= 3 )
						{
						Q_Bullet[aero].Lvert[a][b].a = 255;
						Q_Bullet[aero].Lvert[a][b].b = 80;
						Q_Bullet[aero].Lvert[a][b].g = 160;
						Q_Bullet[aero].Lvert[a][b].r = 160;
						b++;
						}
					a++;
					}

				a=3;
				while( a <= 7 )
					{
					b=0;
					while( b <= 1 )
						{
						Q_Bullet[aero].Lvert[a][b].a = 255;
						Q_Bullet[aero].Lvert[a][b].b = 20;
						Q_Bullet[aero].Lvert[a][b].g = 90;
						Q_Bullet[aero].Lvert[a][b].r = 90;
						b++;
						}
					a++;
					}


					//## Back Tris ##

					Q_Bullet[aero].Lvert[0][0].u = 0;
					Q_Bullet[aero].Lvert[0][0].v = 1;
					Q_Bullet[aero].Lvert[0][0].X = Q_Bullet[aero].VertB1.X;
					Q_Bullet[aero].Lvert[0][0].Y = Q_Bullet[aero].VertB1.Y;
					Q_Bullet[aero].Lvert[0][0].Z = Q_Bullet[aero].VertB1.Z;
					Q_Bullet[aero].Lvert[0][1].u = 1;
					Q_Bullet[aero].Lvert[0][1].v = 1;
					Q_Bullet[aero].Lvert[0][1].X = Q_Bullet[aero].VertB2.X;
					Q_Bullet[aero].Lvert[0][1].Y = Q_Bullet[aero].VertB2.Y;
					Q_Bullet[aero].Lvert[0][1].Z = Q_Bullet[aero].VertB2.Z;
					Q_Bullet[aero].Lvert[0][2].u = 1;
					Q_Bullet[aero].Lvert[0][2].v = 0;
					Q_Bullet[aero].Lvert[0][2].X = Q_Bullet[aero].VertB3.X;
					Q_Bullet[aero].Lvert[0][2].Y = Q_Bullet[aero].VertB3.Y;
					Q_Bullet[aero].Lvert[0][2].Z = Q_Bullet[aero].VertB3.Z;


					Q_Bullet[aero].Lvert[1][0].u = 0;
					Q_Bullet[aero].Lvert[1][0].v = 1;
					Q_Bullet[aero].Lvert[1][0].X = Q_Bullet[aero].VertB3.X;
					Q_Bullet[aero].Lvert[1][0].Y = Q_Bullet[aero].VertB3.Y;
					Q_Bullet[aero].Lvert[1][0].Z = Q_Bullet[aero].VertB3.Z;
					Q_Bullet[aero].Lvert[1][1].u = 1;
					Q_Bullet[aero].Lvert[1][1].v = 1;
					Q_Bullet[aero].Lvert[1][1].X = Q_Bullet[aero].VertB4.X;
					Q_Bullet[aero].Lvert[1][1].Y = Q_Bullet[aero].VertB4.Y;
					Q_Bullet[aero].Lvert[1][1].Z = Q_Bullet[aero].VertB4.Z;
					Q_Bullet[aero].Lvert[1][2].u = 1;
					Q_Bullet[aero].Lvert[1][2].v = 0;
					Q_Bullet[aero].Lvert[1][2].X = Q_Bullet[aero].VertB1.X;
					Q_Bullet[aero].Lvert[1][2].Y = Q_Bullet[aero].VertB1.Y;
					Q_Bullet[aero].Lvert[1][2].Z = Q_Bullet[aero].VertB1.Z;


					Q_Bullet[aero].Lvert[2][0].u = 0;
					Q_Bullet[aero].Lvert[2][0].v = 1;
					Q_Bullet[aero].Lvert[2][0].X = Q_Bullet[aero].VertB4.X;
					Q_Bullet[aero].Lvert[2][0].Y = Q_Bullet[aero].VertB4.Y;
					Q_Bullet[aero].Lvert[2][0].Z = Q_Bullet[aero].VertB4.Z;
					Q_Bullet[aero].Lvert[2][1].u = 1;
					Q_Bullet[aero].Lvert[2][1].v = 1;
					Q_Bullet[aero].Lvert[2][1].X = Q_Bullet[aero].VertB5.X;
					Q_Bullet[aero].Lvert[2][1].Y = Q_Bullet[aero].VertB5.Y;
					Q_Bullet[aero].Lvert[2][1].Z = Q_Bullet[aero].VertB5.Z;
					Q_Bullet[aero].Lvert[2][2].u = 1;
					Q_Bullet[aero].Lvert[2][2].v = 0;
					Q_Bullet[aero].Lvert[2][2].X = Q_Bullet[aero].VertB1.X;
					Q_Bullet[aero].Lvert[2][2].Y = Q_Bullet[aero].VertB1.Y;
					Q_Bullet[aero].Lvert[2][2].Z = Q_Bullet[aero].VertB1.Z;


					//## Side Strips ##

					//Strip1
					Q_Bullet[aero].Lvert[3][0].u = 1;
					Q_Bullet[aero].Lvert[3][0].v = 0;
					Q_Bullet[aero].Lvert[3][0].X = Q_Bullet[aero].VertB1.X;
					Q_Bullet[aero].Lvert[3][0].Y = Q_Bullet[aero].VertB1.Y;
					Q_Bullet[aero].Lvert[3][0].Z = Q_Bullet[aero].VertB1.Z;
					Q_Bullet[aero].Lvert[3][1].u = 0;
					Q_Bullet[aero].Lvert[3][1].v = 0;
					Q_Bullet[aero].Lvert[3][1].X = Q_Bullet[aero].VertB2.X;
					Q_Bullet[aero].Lvert[3][1].Y = Q_Bullet[aero].VertB2.Y;
					Q_Bullet[aero].Lvert[3][1].Z = Q_Bullet[aero].VertB2.Z;
					Q_Bullet[aero].Lvert[3][2].u = 1;
					Q_Bullet[aero].Lvert[3][2].v = 1;
					Q_Bullet[aero].Lvert[3][2].X = Q_Bullet[aero].VertF2.X;
					Q_Bullet[aero].Lvert[3][2].Y = Q_Bullet[aero].VertF2.Y;
					Q_Bullet[aero].Lvert[3][2].Z = Q_Bullet[aero].VertF2.Z;
					Q_Bullet[aero].Lvert[3][3].u = 1;
					Q_Bullet[aero].Lvert[3][3].v = 1;
					Q_Bullet[aero].Lvert[3][3].X = Q_Bullet[aero].VertF1.X;
					Q_Bullet[aero].Lvert[3][3].Y = Q_Bullet[aero].VertF1.Y;
					Q_Bullet[aero].Lvert[3][3].Z = Q_Bullet[aero].VertF1.Z;


					//Strip2
					Q_Bullet[aero].Lvert[4][0].u = 1;
					Q_Bullet[aero].Lvert[4][0].v = 0;
					Q_Bullet[aero].Lvert[4][0].X = Q_Bullet[aero].VertB2.X;
					Q_Bullet[aero].Lvert[4][0].Y = Q_Bullet[aero].VertB2.Y;
					Q_Bullet[aero].Lvert[4][0].Z = Q_Bullet[aero].VertB2.Z;
					Q_Bullet[aero].Lvert[4][1].u = 0;
					Q_Bullet[aero].Lvert[4][1].v = 0;
					Q_Bullet[aero].Lvert[4][1].X = Q_Bullet[aero].VertB3.X;
					Q_Bullet[aero].Lvert[4][1].Y = Q_Bullet[aero].VertB3.Y;
					Q_Bullet[aero].Lvert[4][1].Z = Q_Bullet[aero].VertB3.Z;
					Q_Bullet[aero].Lvert[4][2].u = 1;
					Q_Bullet[aero].Lvert[4][2].v = 1;
					Q_Bullet[aero].Lvert[4][2].X = Q_Bullet[aero].VertF3.X;
					Q_Bullet[aero].Lvert[4][2].Y = Q_Bullet[aero].VertF3.Y;
					Q_Bullet[aero].Lvert[4][2].Z = Q_Bullet[aero].VertF3.Z;
					Q_Bullet[aero].Lvert[4][3].u = 1;
					Q_Bullet[aero].Lvert[4][3].v = 1;
					Q_Bullet[aero].Lvert[4][3].X = Q_Bullet[aero].VertF2.X;
					Q_Bullet[aero].Lvert[4][3].Y = Q_Bullet[aero].VertF2.Y;
					Q_Bullet[aero].Lvert[4][3].Z = Q_Bullet[aero].VertF2.Z;


					//Strip3
					Q_Bullet[aero].Lvert[5][0].u = 1;
					Q_Bullet[aero].Lvert[5][0].v = 0;
					Q_Bullet[aero].Lvert[5][0].X = Q_Bullet[aero].VertB3.X;
					Q_Bullet[aero].Lvert[5][0].Y = Q_Bullet[aero].VertB3.Y;
					Q_Bullet[aero].Lvert[5][0].Z = Q_Bullet[aero].VertB3.Z;
					Q_Bullet[aero].Lvert[5][1].u = 0;
					Q_Bullet[aero].Lvert[5][1].v = 0;
					Q_Bullet[aero].Lvert[5][1].X = Q_Bullet[aero].VertB4.X;
					Q_Bullet[aero].Lvert[5][1].Y = Q_Bullet[aero].VertB4.Y;
					Q_Bullet[aero].Lvert[5][1].Z = Q_Bullet[aero].VertB4.Z;
					Q_Bullet[aero].Lvert[5][2].u = 1;
					Q_Bullet[aero].Lvert[5][2].v = 1;
					Q_Bullet[aero].Lvert[5][2].X = Q_Bullet[aero].VertF4.X;
					Q_Bullet[aero].Lvert[5][2].Y = Q_Bullet[aero].VertF4.Y;
					Q_Bullet[aero].Lvert[5][2].Z = Q_Bullet[aero].VertF4.Z;
					Q_Bullet[aero].Lvert[5][3].u = 1;
					Q_Bullet[aero].Lvert[5][3].v = 1;
					Q_Bullet[aero].Lvert[5][3].X = Q_Bullet[aero].VertF3.X;
					Q_Bullet[aero].Lvert[5][3].Y = Q_Bullet[aero].VertF3.Y;
					Q_Bullet[aero].Lvert[5][3].Z = Q_Bullet[aero].VertF3.Z;


					//Strip4
					Q_Bullet[aero].Lvert[6][0].u = 0;
					Q_Bullet[aero].Lvert[6][0].v = 0;
					Q_Bullet[aero].Lvert[6][0].X = Q_Bullet[aero].VertB4.X;
					Q_Bullet[aero].Lvert[6][0].Y = Q_Bullet[aero].VertB4.Y;
					Q_Bullet[aero].Lvert[6][0].Z = Q_Bullet[aero].VertB4.Z;
					Q_Bullet[aero].Lvert[6][1].u = 1;
					Q_Bullet[aero].Lvert[6][1].v = 0;
					Q_Bullet[aero].Lvert[6][1].X = Q_Bullet[aero].VertB5.X;
					Q_Bullet[aero].Lvert[6][1].Y = Q_Bullet[aero].VertB5.Y;
					Q_Bullet[aero].Lvert[6][1].Z = Q_Bullet[aero].VertB5.Z;
					Q_Bullet[aero].Lvert[6][2].u = 1;
					Q_Bullet[aero].Lvert[6][2].v = 1;
					Q_Bullet[aero].Lvert[6][2].X = Q_Bullet[aero].VertF5.X;
					Q_Bullet[aero].Lvert[6][2].Y = Q_Bullet[aero].VertF5.Y;
					Q_Bullet[aero].Lvert[6][2].Z = Q_Bullet[aero].VertF5.Z;
					Q_Bullet[aero].Lvert[6][3].u = 1;
					Q_Bullet[aero].Lvert[6][3].v = 1;
					Q_Bullet[aero].Lvert[6][3].X = Q_Bullet[aero].VertF4.X;
					Q_Bullet[aero].Lvert[6][3].Y = Q_Bullet[aero].VertF4.Y;
					Q_Bullet[aero].Lvert[6][3].Z = Q_Bullet[aero].VertF4.Z;


					//Strip5
					Q_Bullet[aero].Lvert[7][0].u = 0;
					Q_Bullet[aero].Lvert[7][0].v = 0;
					Q_Bullet[aero].Lvert[7][0].X = Q_Bullet[aero].VertB5.X;
					Q_Bullet[aero].Lvert[7][0].Y = Q_Bullet[aero].VertB5.Y;
					Q_Bullet[aero].Lvert[7][0].Z = Q_Bullet[aero].VertB5.Z;
					Q_Bullet[aero].Lvert[7][1].u = 1;
					Q_Bullet[aero].Lvert[7][1].v = 0;
					Q_Bullet[aero].Lvert[7][1].X = Q_Bullet[aero].VertB1.X;
					Q_Bullet[aero].Lvert[7][1].Y = Q_Bullet[aero].VertB1.Y;
					Q_Bullet[aero].Lvert[7][1].Z = Q_Bullet[aero].VertB1.Z;
					Q_Bullet[aero].Lvert[7][2].u = 1;
					Q_Bullet[aero].Lvert[7][2].v = 1;
					Q_Bullet[aero].Lvert[7][2].X = Q_Bullet[aero].VertF1.X;
					Q_Bullet[aero].Lvert[7][2].Y = Q_Bullet[aero].VertF1.Y;
					Q_Bullet[aero].Lvert[7][2].Z = Q_Bullet[aero].VertF1.Z;
					Q_Bullet[aero].Lvert[7][3].u = 1;
					Q_Bullet[aero].Lvert[7][3].v = 1;
					Q_Bullet[aero].Lvert[7][3].X = Q_Bullet[aero].VertF5.X;
					Q_Bullet[aero].Lvert[7][3].Y = Q_Bullet[aero].VertF5.Y;
					Q_Bullet[aero].Lvert[7][3].Z = Q_Bullet[aero].VertF5.Z;


					//## Front Tris ##

					Q_Bullet[aero].Lvert[8][0].u = 0;
					Q_Bullet[aero].Lvert[8][0].v = 1;
					Q_Bullet[aero].Lvert[8][0].X = Q_Bullet[aero].VertF1.X;
					Q_Bullet[aero].Lvert[8][0].Y = Q_Bullet[aero].VertF1.Y;
					Q_Bullet[aero].Lvert[8][0].Z = Q_Bullet[aero].VertF1.Z;
					Q_Bullet[aero].Lvert[8][1].u = 1;
					Q_Bullet[aero].Lvert[8][1].v = 1;
					Q_Bullet[aero].Lvert[8][1].X = Q_Bullet[aero].VertF2.X;
					Q_Bullet[aero].Lvert[8][1].Y = Q_Bullet[aero].VertF2.Y;
					Q_Bullet[aero].Lvert[8][1].Z = Q_Bullet[aero].VertF2.Z;
					Q_Bullet[aero].Lvert[8][2].u = 1;
					Q_Bullet[aero].Lvert[8][2].v = 0;
					Q_Bullet[aero].Lvert[8][2].X = Q_Bullet[aero].VertFP.X;
					Q_Bullet[aero].Lvert[8][2].Y = Q_Bullet[aero].VertFP.Y;
					Q_Bullet[aero].Lvert[8][2].Z = Q_Bullet[aero].VertFP.Z;


					Q_Bullet[aero].Lvert[9][0].u = 0;
					Q_Bullet[aero].Lvert[9][0].v = 1;
					Q_Bullet[aero].Lvert[9][0].X = Q_Bullet[aero].VertF2.X;
					Q_Bullet[aero].Lvert[9][0].Y = Q_Bullet[aero].VertF2.Y;
					Q_Bullet[aero].Lvert[9][0].Z = Q_Bullet[aero].VertF2.Z;
					Q_Bullet[aero].Lvert[9][1].u = 1;
					Q_Bullet[aero].Lvert[9][1].v = 1;
					Q_Bullet[aero].Lvert[9][1].X = Q_Bullet[aero].VertF3.X;
					Q_Bullet[aero].Lvert[9][1].Y = Q_Bullet[aero].VertF3.Y;
					Q_Bullet[aero].Lvert[9][1].Z = Q_Bullet[aero].VertF3.Z;
					Q_Bullet[aero].Lvert[9][2].u = 1;
					Q_Bullet[aero].Lvert[9][2].v = 0;
					Q_Bullet[aero].Lvert[9][2].X = Q_Bullet[aero].VertFP.X;
					Q_Bullet[aero].Lvert[9][2].Y = Q_Bullet[aero].VertFP.Y;
					Q_Bullet[aero].Lvert[9][2].Z = Q_Bullet[aero].VertFP.Z;


					Q_Bullet[aero].Lvert[10][0].u = 0;
					Q_Bullet[aero].Lvert[10][0].v = 1;
					Q_Bullet[aero].Lvert[10][0].X = Q_Bullet[aero].VertF3.X;
					Q_Bullet[aero].Lvert[10][0].Y = Q_Bullet[aero].VertF3.Y;
					Q_Bullet[aero].Lvert[10][0].Z = Q_Bullet[aero].VertF3.Z;
					Q_Bullet[aero].Lvert[10][1].u = 1;
					Q_Bullet[aero].Lvert[10][1].v = 1;
					Q_Bullet[aero].Lvert[10][1].X = Q_Bullet[aero].VertF4.X;
					Q_Bullet[aero].Lvert[10][1].Y = Q_Bullet[aero].VertF4.Y;
					Q_Bullet[aero].Lvert[10][1].Z = Q_Bullet[aero].VertF4.Z;
					Q_Bullet[aero].Lvert[10][2].u = 1;
					Q_Bullet[aero].Lvert[10][2].v = 0;
					Q_Bullet[aero].Lvert[10][2].X = Q_Bullet[aero].VertFP.X;
					Q_Bullet[aero].Lvert[10][2].Y = Q_Bullet[aero].VertFP.Y;
					Q_Bullet[aero].Lvert[10][2].Z = Q_Bullet[aero].VertFP.Z;


					Q_Bullet[aero].Lvert[11][0].u = 0;
					Q_Bullet[aero].Lvert[11][0].v = 1;
					Q_Bullet[aero].Lvert[11][0].X = Q_Bullet[aero].VertF4.X;
					Q_Bullet[aero].Lvert[11][0].Y = Q_Bullet[aero].VertF4.Y;
					Q_Bullet[aero].Lvert[11][0].Z = Q_Bullet[aero].VertF4.Z;
					Q_Bullet[aero].Lvert[11][1].u = 1;
					Q_Bullet[aero].Lvert[11][1].v = 1;
					Q_Bullet[aero].Lvert[11][1].X = Q_Bullet[aero].VertF5.X;
					Q_Bullet[aero].Lvert[11][1].Y = Q_Bullet[aero].VertF5.Y;
					Q_Bullet[aero].Lvert[11][1].Z = Q_Bullet[aero].VertF5.Z;
					Q_Bullet[aero].Lvert[11][2].u = 1;
					Q_Bullet[aero].Lvert[11][2].v = 0;
					Q_Bullet[aero].Lvert[11][2].X = Q_Bullet[aero].VertFP.X;
					Q_Bullet[aero].Lvert[11][2].Y = Q_Bullet[aero].VertFP.Y;
					Q_Bullet[aero].Lvert[11][2].Z = Q_Bullet[aero].VertFP.Z;


					Q_Bullet[aero].Lvert[12][0].u = 0;
					Q_Bullet[aero].Lvert[12][0].v = 1;
					Q_Bullet[aero].Lvert[12][0].X = Q_Bullet[aero].VertF5.X;
					Q_Bullet[aero].Lvert[12][0].Y = Q_Bullet[aero].VertF5.Y;
					Q_Bullet[aero].Lvert[12][0].Z = Q_Bullet[aero].VertF5.Z;
					Q_Bullet[aero].Lvert[12][1].u = 1;
					Q_Bullet[aero].Lvert[12][1].v = 1;
					Q_Bullet[aero].Lvert[12][1].X = Q_Bullet[aero].VertF1.X;
					Q_Bullet[aero].Lvert[12][1].Y = Q_Bullet[aero].VertF1.Y;
					Q_Bullet[aero].Lvert[12][1].Z = Q_Bullet[aero].VertF1.Z;
					Q_Bullet[aero].Lvert[12][2].u = 1;
					Q_Bullet[aero].Lvert[12][2].v = 0;
					Q_Bullet[aero].Lvert[12][2].X = Q_Bullet[aero].VertFP.X;
					Q_Bullet[aero].Lvert[12][2].Y = Q_Bullet[aero].VertFP.Y;
					Q_Bullet[aero].Lvert[12][2].Z = Q_Bullet[aero].VertFP.Z;



					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[0][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[1][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[2][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);

					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[3][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[4][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[5][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[6][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[7][0], 4, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);

					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[8][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[9][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[10][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[11][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
					geWorld_AddPolyOnce(World, &Q_Bullet[aero].Lvert[12][0], 3, NULL, Q_Bullet[aero].Type, Q_Bullet[aero].RenderFlags, Q_Bullet[aero].ScaleBIT);
				}
			aero++;
			}
		}
	}


	//########  - 3D Blood System -  ########//

	if(NomBlood > 0)
		{
		helly = 0;
		while(helly < NomBlood)
			{
			if(BBlood[helly].Live == 1)
				{
				BBlood[helly].Scale = 6;		//2.5

				BBlood[helly].TraVec.Y -= BBlood[helly].Gravity;	//- TimeScale
																	//\/ TimeScale
				geVec3d_MA(&BBlood[helly].Pos, BBlood[helly].Speed, &BBlood[helly].TraVec, &BBlood[helly].Pos);
							
				BBlood[helly].AlpFade -= (((float)rand() / 32767)*20 + 10) *TimeScale;

				if(BBlood[helly].Pos.Y < -250)
					{
					BBlood[helly].Live = 0;
					BBlood[helly].Pos.Y = -255;

					//### Array Reorder
					K = helly;
					while(K < NomBlood - 1)
						{
						BBlood[K] = BBlood[K+1];
						K++;
						}

					NomBlood--;
					}


				if(BBlood[helly].SmokeTrail == 1 && BBlood[helly].CloudTimer == 3)
					{
					BBlood[helly].CloudTimer = 0;
					Q_Cloud[NomCloud].CloudType = 1;

					//Q_Cloud[NomCloud].CloudBitmap = CloudBlood;

					Q_Cloud[NomCloud].CloudPos = BBlood[helly].Pos;

					Q_Cloud[NomCloud].CloudPos.X += (((float)rand() / 32767)-0.5)*0.5;
					Q_Cloud[NomCloud].CloudPos.Y += (((float)rand() / 32767)-0.5)*0.5;
					Q_Cloud[NomCloud].CloudPos.Z += (((float)rand() / 32767)-0.5)*0.5;

					Q_Cloud[NomCloud].CloudAlpha = (((float)rand() / 32767)*55)+50;
					Q_Cloud[NomCloud].CloudScale = (((float)rand() / 32767)*0.015)+0.005;

					geVec3d_Clear(&Q_Cloud[NomCloud].CloudTraVec);

					Q_Cloud[NomCloud].CloudTraVec.X += (((float)rand() / 32767)-0.5)*0.1;
					Q_Cloud[NomCloud].CloudTraVec.Y += (((float)rand() / 32767)-0.5)*0.1;
					Q_Cloud[NomCloud].CloudTraVec.Z += (((float)rand() / 32767)-0.5)*0.1;

					Q_Cloud[NomCloud].CloudSpeed = ((((float)rand() / 32767)-0.5)*0.3)+0.1;
	
					Q_Cloud[NomCloud].CloudLive = 1;

					NomCloud++;
					if(NomCloud > 4999) NomCloud = 0;
					}
				else BBlood[helly].CloudTimer++;



				BBlood[helly].Type = GE_GOURAUD_POLY;
				BBlood[helly].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
				BBlood[helly].ScaleBIT = 1.0f;


				geVec3d_Subtract(&player.ViewXForm.Translation, &BBlood[helly].Pos, &BBlood[helly].CameraVector);

				geVec3d_CrossProduct(&BBlood[helly].CameraVector, &BBlood[helly].TraVec, &BBlood[helly].VecUp);

				geVec3d_Normalize(&BBlood[helly].VecUp);
				BBlood[helly].VecSTR = BBlood[helly].TraVec;
				geVec3d_Normalize(&BBlood[helly].TraVec);


				geVec3d_MA(&BBlood[helly].Pos, -BBlood[helly].Scale/16, &BBlood[helly].VecUp, &BBlood[helly].VertF1);
				geVec3d_MA(&BBlood[helly].VertF1, BBlood[helly].Scale/8, &BBlood[helly].VecUp, &BBlood[helly].VertF2);

				geVec3d_MA(&BBlood[helly].VertF2, -BBlood[helly].Scale/8, &BBlood[helly].TraVec, &BBlood[helly].VertM1);
				geVec3d_MA(&BBlood[helly].VertM1, BBlood[helly].Scale/16, &BBlood[helly].VecUp, &BBlood[helly].VertM1);
				geVec3d_MA(&BBlood[helly].VertM1, -BBlood[helly].Scale/4, &BBlood[helly].VecUp, &BBlood[helly].VertM2);

				geVec3d_MA(&BBlood[helly].VertM1, -BBlood[helly].Scale/4, &BBlood[helly].TraVec, &BBlood[helly].VertM4);
				geVec3d_MA(&BBlood[helly].VertM2, -BBlood[helly].Scale/4, &BBlood[helly].TraVec, &BBlood[helly].VertM3);

				BBlood[helly].GravSTR = BBlood[helly].Gravity;

				if(BBlood[helly].Bounce == 5)
					{
					BBlood[helly].TraVec.Y += (BBlood[helly].Gravity*TimeScale)*BBlood[helly].TraVec.Y;
					geVec3d_MA(&BBlood[helly].Pos, -(BBlood[helly].Speed*TimeScale)*4, &BBlood[helly].TraVec, &BBlood[helly].VertB1);
					}
				else geVec3d_MA(&BBlood[helly].Pos, -BBlood[helly].Scale*2, &BBlood[helly].TraVec, &BBlood[helly].VertB1);

				BBlood[helly].Gravity = BBlood[helly].GravSTR;
				BBlood[helly].TraVec = BBlood[helly].VecSTR;


				if(BBlood[helly].EffectType == 1)
					{
					a=0;
					while( a <= 2 )
						{
						b=0;
						while( b <= 3 )
							{
							BBlood[helly].Lvert[a][b].a = BBlood[helly].AlpFade/1.75;	//210
							BBlood[helly].Lvert[a][b].b = 65;
							BBlood[helly].Lvert[a][b].g = 65;
							BBlood[helly].Lvert[a][b].r = 65;
							b++;
							}
						a++;
						}
					}
				else
					{
					a=0;
					while( a <= 2 )
						{
						b=0;
						while( b <= 3 )
							{
							BBlood[helly].Lvert[a][b].a = BBlood[helly].AlpFade;	//210
							BBlood[helly].Lvert[a][b].b = 0;
							BBlood[helly].Lvert[a][b].g = 0;
							BBlood[helly].Lvert[a][b].r = 210;
							b++;
							}
						a++;
						}
					}

				//## FRONT ##

				BBlood[helly].Lvert[0][0].u = 0;
				BBlood[helly].Lvert[0][0].v = 1;
				BBlood[helly].Lvert[0][0].X = BBlood[helly].VertF1.X;
				BBlood[helly].Lvert[0][0].Y = BBlood[helly].VertF1.Y;
				BBlood[helly].Lvert[0][0].Z = BBlood[helly].VertF1.Z;
				BBlood[helly].Lvert[0][1].u = 1;
				BBlood[helly].Lvert[0][1].v = 1;
				BBlood[helly].Lvert[0][1].X = BBlood[helly].VertF2.X;
				BBlood[helly].Lvert[0][1].Y = BBlood[helly].VertF2.Y;
				BBlood[helly].Lvert[0][1].Z = BBlood[helly].VertF2.Z;
				BBlood[helly].Lvert[0][2].u = 1;
				BBlood[helly].Lvert[0][2].v = 0;
				BBlood[helly].Lvert[0][2].X = BBlood[helly].VertM1.X;
				BBlood[helly].Lvert[0][2].Y = BBlood[helly].VertM1.Y;
				BBlood[helly].Lvert[0][2].Z = BBlood[helly].VertM1.Z;
				BBlood[helly].Lvert[0][3].u = 0;
				BBlood[helly].Lvert[0][3].v = 0;
				BBlood[helly].Lvert[0][3].X = BBlood[helly].VertM2.X;
				BBlood[helly].Lvert[0][3].Y = BBlood[helly].VertM2.Y;
				BBlood[helly].Lvert[0][3].Z = BBlood[helly].VertM2.Z;

				//## MIDDLE ##

				BBlood[helly].Lvert[1][0].u = 0;
				BBlood[helly].Lvert[1][0].v = 1;
				BBlood[helly].Lvert[1][0].X = BBlood[helly].VertM1.X;
				BBlood[helly].Lvert[1][0].Y = BBlood[helly].VertM1.Y;
				BBlood[helly].Lvert[1][0].Z = BBlood[helly].VertM1.Z;
				BBlood[helly].Lvert[1][1].u = 0;
				BBlood[helly].Lvert[1][1].v = 0;
				BBlood[helly].Lvert[1][1].X = BBlood[helly].VertM2.X;
				BBlood[helly].Lvert[1][1].Y = BBlood[helly].VertM2.Y;
				BBlood[helly].Lvert[1][1].Z = BBlood[helly].VertM2.Z;
				BBlood[helly].Lvert[1][2].u = 1;
				BBlood[helly].Lvert[1][2].v = 0;
				BBlood[helly].Lvert[1][2].X = BBlood[helly].VertM3.X;
				BBlood[helly].Lvert[1][2].Y = BBlood[helly].VertM3.Y;
				BBlood[helly].Lvert[1][2].Z = BBlood[helly].VertM3.Z;
				BBlood[helly].Lvert[1][3].u = 1;
				BBlood[helly].Lvert[1][3].v = 1;
				BBlood[helly].Lvert[1][3].X = BBlood[helly].VertM4.X;
				BBlood[helly].Lvert[1][3].Y = BBlood[helly].VertM4.Y;
				BBlood[helly].Lvert[1][3].Z = BBlood[helly].VertM4.Z;

				//## TAIL ##

				BBlood[helly].Lvert[2][0].u = 0;
				BBlood[helly].Lvert[2][0].v = 0;
				BBlood[helly].Lvert[2][0].X = BBlood[helly].VertM3.X;
				BBlood[helly].Lvert[2][0].Y = BBlood[helly].VertM3.Y;
				BBlood[helly].Lvert[2][0].Z = BBlood[helly].VertM3.Z;
				BBlood[helly].Lvert[2][1].u = 0;
				BBlood[helly].Lvert[2][1].v = 1;
				BBlood[helly].Lvert[2][1].X = BBlood[helly].VertM4.X;
				BBlood[helly].Lvert[2][1].Y = BBlood[helly].VertM4.Y;
				BBlood[helly].Lvert[2][1].Z = BBlood[helly].VertM4.Z;
				BBlood[helly].Lvert[2][2].u = 1;
				BBlood[helly].Lvert[2][2].v = 0.5;
				BBlood[helly].Lvert[2][2].X = BBlood[helly].VertB1.X;
				BBlood[helly].Lvert[2][2].Y = BBlood[helly].VertB1.Y;
				BBlood[helly].Lvert[2][2].Z = BBlood[helly].VertB1.Z;


				if(BBlood[helly].EffectType == 1)
					{
					geWorld_AddPolyOnce(World, &BBlood[helly].Lvert[0][0], 4, Spark, BBlood[helly].Type, BBlood[helly].RenderFlags, BBlood[helly].ScaleBIT);
					geWorld_AddPolyOnce(World, &BBlood[helly].Lvert[1][0], 4, Sparkmid, BBlood[helly].Type, BBlood[helly].RenderFlags, BBlood[helly].ScaleBIT);
					geWorld_AddPolyOnce(World, &BBlood[helly].Lvert[2][0], 3, Sparktail, BBlood[helly].Type, BBlood[helly].RenderFlags, BBlood[helly].ScaleBIT);
					}
				}
				helly++;
			}
		}


	//#####--- Scanner ---#####//		//Create Scanner Struct? Pros - Cons ?

	if(player.Scan == 1)
		{
		//### Scanner UP / Down
		if(player.ScanUP == 0)
			{
			if(player.ScanInit == 1)
				{
				if(player.ScanBitHeight + 30 <= 0) player.ScanBitHeight += 30;
				else
					{
					player.ScanBitHeight = 0;

					if(player.ScanBitAlpha + 3 <= 40) player.ScanBitAlpha += 3;
					else
						{
						player.ScanBitAlpha = 40;
						//player.ScanInit = 0;
						}

					if(player.ScanBoneAlpha + 10 <= 200) player.ScanBoneAlpha += 10;
					else
						{
						player.ScanBoneAlpha = 255;
						player.ScanInit = 0;
						}
					}
				}


			/*SCRAM = 0;
			while(SCRAM < 8)
				{
				TempFloat1 = (((float)rand() / 32767) * 4);
				if(TempFloat1 > 0 && TempFloat1 < 3)
					{
					ColourSTART.r = 150;
					ColourSTART.g = 255;
					ColourSTART.b = 150;
					ColourSTART.a = 20;
					ColourEND.r = 50;
					ColourEND.g = 255;
					ColourEND.b = 50;
					ColourEND.a = 0;
					}
				else
					{
					ColourSTART.r = 0;
					ColourSTART.g = 0;
					ColourSTART.b = 0;
					ColourSTART.a = 20;
					ColourEND.r = 0;
					ColourEND.g = 0;
					ColourEND.b = 0;
					ColourEND.a = 0;
					}

				TempFloat1 = (((float)rand() / 32767) * 3.5);
				if(TempFloat1 > 0 && TempFloat1 <= 1) ScanVec[SCRAM].X += (((float)rand() / 32767) - 0.5) * 20;
				if(TempFloat1 > 1 && TempFloat1 <= 2) ScanVec[SCRAM].Y += (((float)rand() / 32767) - 0.5) * 20;
				if(TempFloat1 > 2 && TempFloat1 <= 3) ScanVec[SCRAM].Z += (((float)rand() / 32767) - 0.5) * 20;
				if(TempFloat1 > 3 && TempFloat1 <= 3.5)
					{
					if(SCRAM >= NomAI)
						{
						geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &player.TempXForm1);
						ScanVec[SCRAM].X = player.TempXForm1.Translation.X;
						ScanVec[SCRAM].Y = player.TempXForm1.Translation.Y;
						ScanVec[SCRAM].Z = player.TempXForm1.Translation.Z;
						Q_VaporTrail[SCRAM].NomPoints = 0;
						geVec3d_Subtract(&ScanVec[SCRAM], &player.TempXForm1.Translation, &TestVec6);
						}
					else
						{
						geActor_GetBoneTransform(Forge[SCRAM].Avatar.Actor, "BIP01 HEAD", &Forge[SCRAM].TempXForm1);
						ScanVec[SCRAM].X = Forge[SCRAM].TempXForm1.Translation.X;
						ScanVec[SCRAM].Y = Forge[SCRAM].TempXForm1.Translation.Y;
						ScanVec[SCRAM].Z = Forge[SCRAM].TempXForm1.Translation.Z;
						Q_VaporTrail[SCRAM].NomPoints = 0;
						//geVec3d_Subtract(&ScanVec[SCRAM], &Forge[SCRAM].TempXForm1.Translation, &TestVec6);
						geVec3d_Subtract(&playact.ActorXform.Translation, &ScanVec[SCRAM], &TestVec6);
						}
					}

				if(Q_VaporTrail[SCRAM].NomPoints <= 998) Q_AddTrailPNT(SCRAM, ScanVec[SCRAM], ColourSTART, ColourEND, TestVec6, 0);
				else Q_VaporTrail[SCRAM].NomPoints = 0;
				SCRAM++;
				}*/

			player.Q_Jink.Live = 1;
			player.Q_Jink.ON = 2;
			player.Q_Jink.Init = 0;
			player.Q_Jink.Limb = "BIP01 HEAD";
			player.Q_Jink.FogON = 1;

			TimeScaleALTER = 0.1;
			}
		else
			{	//SCAN - UP^^
			if(player.ScanBitAlpha - 10 >= 20) player.ScanBitAlpha -= 10;
			else player.ScanBitAlpha = 20;

			if(player.ScanBoneAlpha - 20 >= 0) player.ScanBoneAlpha -= 20;
			else player.ScanBoneAlpha = 0;

			if(player.ScanBitHeight - 30 >= -600) player.ScanBitHeight -= 30;
			else
				{
				player.ScanBitHeight = -600;
				player.ScanUP = 0;
				player.ScanInit = 1;
				player.Scan = 0;
				}

			TimeScaleALTER = 1;
			}


		//### Actor Bone Outlines		//Required here is a test for actors in view or range
		aero=0;
		while(aero < NomAI)
			{
			if(Forge[aero].LIVE == 1)
				{
				//## Level Factors
				if(Forge[aero].LEVEL > player.LEVEL)
					{
					ScannerLevelDiff = Forge[aero].LEVEL - player.LEVEL;
					if(ScannerLevelDiff > 250) ScannerLevelFactor = 1;
					else ScannerLevelFactor = ((ScannerLevelDiff / 500) / 2) + 0.5;
					}
				else
					{
					ScannerLevelDiff = player.LEVEL - Forge[aero].LEVEL;
					if(ScannerLevelDiff > 500) ScannerLevelFactor = 0;
					else ScannerLevelFactor = 0.5 - ((ScannerLevelDiff / 500) / 2);
					}

				//### Draw the Bone Boxes
				helly=0;
				while(helly<21)
					{
					geActor_GetBoneBoundingBox(Forge[aero].Avatar.Actor, BoneDef[helly], &Corner, &DX, &DY, &DZ);				

					TempFloat1 = (((float)rand() / 32767) * 5);
					if(TempFloat1 > 0 && TempFloat1 <= 1)
						{
						DrawOrientedBoundBox(World, &Corner, &DX, &DY, &DZ);
						}

					helly++;
					}


				//### InfoBox
				if(player.ScanInit == 0)
					{
					if(player.ScanUP == 0)
						{
						if(player.ScanBoxAlpha + 51 <= 255) player.ScanBoxAlpha += 51;
						else player.ScanBoxAlpha = 255;

						if(player.ScanBoxScale + 0.06 <= 0.3) player.ScanBoxScale += 0.06;
						else player.ScanBoxScale = 0.3;
						}
					else
						{
						if(player.ScanBoxAlpha - 51 >= 255) player.ScanBoxAlpha -= 51;
						else player.ScanBoxAlpha = 0;

						if(player.ScanBoxScale - 0.06 >= 0) player.ScanBoxScale -= 0.06;
						else player.ScanBoxScale = 0;
						}

					player.ScanBoxVec.X = Forge[aero].Avatar.ActorXform.Translation.X;
					player.ScanBoxVec.Y = Forge[aero].Avatar.ActorXform.Translation.Y + 130;
					player.ScanBoxVec.Z = Forge[aero].Avatar.ActorXform.Translation.Z;

					geXForm3d_GetLeft(&player.ViewXForm, &player.Left);
					geVec3d_MA(&player.ScanBoxVec, -20, &player.Left, &player.ScanBoxVec);
					
					Q_BulletHit[0].HitFlash.LVert.a = player.ScanBoxAlpha;
					Q_BulletHit[0].HitFlash.LVert.r = 256 * ScannerLevelFactor;
					Q_BulletHit[0].HitFlash.LVert.g = 256 * (1-ScannerLevelFactor);
					Q_BulletHit[0].HitFlash.LVert.b = 0;
					Q_BulletHit[0].HitFlash.LVert.X = player.ScanBoxVec.X;
					Q_BulletHit[0].HitFlash.LVert.Y = player.ScanBoxVec.Y;
					Q_BulletHit[0].HitFlash.LVert.Z = player.ScanBoxVec.Z;

					Q_BulletHit[0].HitFlash.Type = GE_TEXTURED_POINT;
					Q_BulletHit[0].HitFlash.RenderFlags = GE_RENDER_DO_NOT_OCCLUDE_SELF;
					Q_BulletHit[0].HitFlash.Bitmap = ScanBox;
					Q_BulletHit[0].HitFlash.Scale = player.ScanBoxScale;

					if(player.ScanBoxAlpha > 0) geWorld_AddPolyOnce(World, &Q_BulletHit[0].HitFlash.LVert, 1, Q_BulletHit[0].HitFlash.Bitmap, Q_BulletHit[0].HitFlash.Type, Q_BulletHit[0].HitFlash.RenderFlags, Q_BulletHit[0].HitFlash.Scale);
					}
				}
			aero++;
			}
		}



	//########  - 3D Star BackPack Item -  ########//

	if(player.Backpack.Draw == 1)
		{
		geActor_GetBoneTransform(playact.Actor, "BIP01 SPINE3", &player.Backpack.PosMatrix);		//"BIP01 PELVIS"
		geXForm3d_GetLeft(&playact.ActorXform,&player.Backpack.Leftvec);
		geXForm3d_GetUp(&playact.ActorXform,&player.Backpack.Upvec);

		geVec3d_MA(&player.Backpack.PosMatrix.Translation, -3, &player.Backpack.Upvec, &player.Backpack.PosMatrix.Translation);

		player.Backpack.Vert1 = player.Backpack.PosMatrix.Translation;


		geVec3d_MA(&player.Backpack.Vert1, -5, &player.Backpack.Upvec, &player.Backpack.Vert1);
		geVec3d_MA(&player.Backpack.Vert1, 200, &player.Backpack.Leftvec, &player.Backpack.Vert1);
		geVec3d_MA(&player.Backpack.Vert1, -400, &player.Backpack.Leftvec, &player.Backpack.Vert2);
		geVec3d_MA(&player.Backpack.Vert2, 6, &player.Backpack.Upvec, &player.Backpack.Vert3);
		geVec3d_MA(&player.Backpack.Vert1, 6, &player.Backpack.Upvec, &player.Backpack.Vert4);


		player.Backpack.Lvert[0][0].a = 255;
		player.Backpack.Lvert[0][0].b = 255;
		player.Backpack.Lvert[0][0].g = 255;
		player.Backpack.Lvert[0][0].r = 255;
		player.Backpack.Lvert[0][0].u = 0;
		player.Backpack.Lvert[0][0].v = 0;
		player.Backpack.Lvert[0][0].X = player.Backpack.Vert1.X;
		player.Backpack.Lvert[0][0].Y = player.Backpack.Vert1.Y;
		player.Backpack.Lvert[0][0].Z = player.Backpack.Vert1.Z;
		player.Backpack.Lvert[0][1].a = 255;
		player.Backpack.Lvert[0][1].b = 255;
		player.Backpack.Lvert[0][1].g = 255;
		player.Backpack.Lvert[0][1].r = 255;
		player.Backpack.Lvert[0][1].u = 1;
		player.Backpack.Lvert[0][1].v = 0;
		player.Backpack.Lvert[0][1].X = player.Backpack.Vert2.X;
		player.Backpack.Lvert[0][1].Y = player.Backpack.Vert2.Y;
		player.Backpack.Lvert[0][1].Z = player.Backpack.Vert2.Z;
		player.Backpack.Lvert[0][2].a = 255;
		player.Backpack.Lvert[0][2].b = 255;
		player.Backpack.Lvert[0][2].g = 255;
		player.Backpack.Lvert[0][2].r = 255;
		player.Backpack.Lvert[0][2].u = 1;
		player.Backpack.Lvert[0][2].v = 1;
		player.Backpack.Lvert[0][2].X = player.Backpack.Vert3.X;
		player.Backpack.Lvert[0][2].Y = player.Backpack.Vert3.Y;
		player.Backpack.Lvert[0][2].Z = player.Backpack.Vert3.Z;
		player.Backpack.Lvert[0][3].a = 255;
		player.Backpack.Lvert[0][3].b = 255;
		player.Backpack.Lvert[0][3].g = 255;
		player.Backpack.Lvert[0][3].r = 255;
		player.Backpack.Lvert[0][3].u = 0;
		player.Backpack.Lvert[0][3].v = 1;
		player.Backpack.Lvert[0][3].X = player.Backpack.Vert4.X;
		player.Backpack.Lvert[0][3].Y = player.Backpack.Vert4.Y;
		player.Backpack.Lvert[0][3].Z = player.Backpack.Vert4.Z;

		geWorld_AddPolyOnce(World, &player.Backpack.Lvert[0][0], 4, special4[player.Backpack.Matcount], GE_TEXTURED_POLY, GE_RENDER_DEPTH_SORT_BF, 1.0f);
		player.Backpack.Lvert[0][0].X = player.Backpack.PosMatrix.Translation.X;
		player.Backpack.Lvert[0][0].Y = player.Backpack.PosMatrix.Translation.Y;
		player.Backpack.Lvert[0][0].Z = player.Backpack.PosMatrix.Translation.Z;
		geWorld_AddPolyOnce(World, &player.Backpack.Lvert[0][0], 1, special4[player.Backpack.Matcount], GE_TEXTURED_POINT, GE_RENDER_DEPTH_SORT_BF, 0.1f);


		if(player.Backpack.MatcountDir == 0)
			{
			if(player.Backpack.Matcount + 2 < 12) player.Backpack.Matcount += 2;
			else player.Backpack.MatcountDir = 1;
			}
		if(player.Backpack.MatcountDir == 1)
			{
			if(player.Backpack.Matcount - 2 > 0) player.Backpack.Matcount -= 2;
			else
				{
				player.Backpack.MatcountDir = 0;
				player.Backpack.Draw = 0;
				}
			}
		}


	//### Level Manipulation
	helly=0;
	while(helly < NomAI)
		{
		if(Forge[helly].LIVE == 1)
			{
			if(Forge[helly].LEVEL > 1000) Forge[helly].LEVELFactor = 1;
			else Forge[helly].LEVELFactor = (((float)Forge[helly].LEVEL + 1) / 1000);
			}
		helly++;
		}


	//######## ---[ QUANTUM ANGEL EFFECT MATRIX ]--- ########
	
	SCRAM=0;
	while(SCRAM < 7)
		{
		if(SCRAM == 0)	//ITEM HEAD ARMOUR
			{
			player.QA_EFF_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[0].ON;

			player.QA_EFF_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[0].Red;
			player.QA_EFF_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[0].Green;
			player.QA_EFF_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[0].Blue;
			player.QA_EFF_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[0].Alpha;

			player.QA_EFF_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[1].Red;
			player.QA_EFF_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[1].Green;
			player.QA_EFF_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[1].Blue;
			player.QA_EFF_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[1].Alpha;

			player.QA_EFF_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[2].Red;
			player.QA_EFF_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[2].Green;
			player.QA_EFF_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[2].Blue;
			player.QA_EFF_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[2].Alpha;

			player.QA_EFF_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[3].Red;
			player.QA_EFF_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[3].Green;
			player.QA_EFF_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[3].Blue;
			player.QA_EFF_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[3].Alpha;

			player.QA_EFF_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[4].Red;
			player.QA_EFF_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[4].Green;
			player.QA_EFF_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[4].Blue;
			player.QA_EFF_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[4].Alpha;

			player.QA_EFF_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[0].TYPE;
			player.QA_EFF_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].Effect[0].INT * player.JINK3_PowerFactor;
			}

		if(SCRAM == 1)	//ITEM UPPER ARMOUR
			{
			player.QA_EFF_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[0].ON;

			player.QA_EFF_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[0].Red;
			player.QA_EFF_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[0].Green;
			player.QA_EFF_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[0].Blue;
			player.QA_EFF_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[0].Alpha;

			player.QA_EFF_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[1].Red;
			player.QA_EFF_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[1].Green;
			player.QA_EFF_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[1].Blue;
			player.QA_EFF_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[1].Alpha;

			player.QA_EFF_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[2].Red;
			player.QA_EFF_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[2].Green;
			player.QA_EFF_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[2].Blue;
			player.QA_EFF_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[2].Alpha;

			player.QA_EFF_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[3].Red;
			player.QA_EFF_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[3].Green;
			player.QA_EFF_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[3].Blue;
			player.QA_EFF_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[3].Alpha;

			player.QA_EFF_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[4].Red;
			player.QA_EFF_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[4].Green;
			player.QA_EFF_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[4].Blue;
			player.QA_EFF_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[4].Alpha;

			player.QA_EFF_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[0].TYPE;
			player.QA_EFF_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].Effect[0].INT * player.JINK3_PowerFactor;
			}

		if(SCRAM == 2)	//ITEM LOWER ARMOUR
			{
			player.QA_EFF_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[0].ON;

			player.QA_EFF_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[0].Red;
			player.QA_EFF_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[0].Green;
			player.QA_EFF_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[0].Blue;
			player.QA_EFF_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[0].Alpha;

			player.QA_EFF_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[1].Red;
			player.QA_EFF_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[1].Green;
			player.QA_EFF_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[1].Blue;
			player.QA_EFF_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[1].Alpha;

			player.QA_EFF_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[2].Red;
			player.QA_EFF_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[2].Green;
			player.QA_EFF_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[2].Blue;
			player.QA_EFF_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[2].Alpha;

			player.QA_EFF_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[3].Red;
			player.QA_EFF_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[3].Green;
			player.QA_EFF_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[3].Blue;
			player.QA_EFF_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[3].Alpha;

			player.QA_EFF_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[4].Red;
			player.QA_EFF_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[4].Green;
			player.QA_EFF_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[4].Blue;
			player.QA_EFF_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[4].Alpha;

			player.QA_EFF_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[0].TYPE;
			player.QA_EFF_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].Effect[0].INT * player.JINK3_PowerFactor;
			}

		if(SCRAM == 3)	//SPELL SLOT 1
			{
			player.QA_EFF_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_SWITCH;
			if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].LIVE == 0) player.QA_EFF_SWITCH = 0;

			player.QA_EFF_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL00RED;
			player.QA_EFF_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL00GREEN;
			player.QA_EFF_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL00BLUE;
			player.QA_EFF_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL00ALPHA;

			player.QA_EFF_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL01RED;
			player.QA_EFF_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL01GREEN;
			player.QA_EFF_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL01BLUE;
			player.QA_EFF_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL01ALPHA;

			player.QA_EFF_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL02RED;
			player.QA_EFF_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL02GREEN;
			player.QA_EFF_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL02BLUE;
			player.QA_EFF_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL02ALPHA;

			player.QA_EFF_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL03RED;
			player.QA_EFF_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL03GREEN;
			player.QA_EFF_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL03BLUE;
			player.QA_EFF_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL03ALPHA;

			player.QA_EFF_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL04RED;
			player.QA_EFF_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL04GREEN;
			player.QA_EFF_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL04BLUE;
			player.QA_EFF_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_COL04ALPHA;

			player.QA_EFF_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_TYPE;
			player.QA_EFF_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[0].QA_EFFECT_INTENSITY * player.JINK3_PowerFactor;
			}

		if(SCRAM == 4)	//SPELL SLOT 2
			{
			player.QA_EFF_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_SWITCH;
			if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].LIVE == 0) player.QA_EFF_SWITCH = 0;

			player.QA_EFF_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL00RED;
			player.QA_EFF_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL00GREEN;
			player.QA_EFF_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL00BLUE;
			player.QA_EFF_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL00ALPHA;

			player.QA_EFF_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL01RED;
			player.QA_EFF_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL01GREEN;
			player.QA_EFF_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL01BLUE;
			player.QA_EFF_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL01ALPHA;

			player.QA_EFF_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL02RED;
			player.QA_EFF_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL02GREEN;
			player.QA_EFF_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL02BLUE;
			player.QA_EFF_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL02ALPHA;

			player.QA_EFF_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL03RED;
			player.QA_EFF_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL03GREEN;
			player.QA_EFF_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL03BLUE;
			player.QA_EFF_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL03ALPHA;

			player.QA_EFF_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL04RED;
			player.QA_EFF_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL04GREEN;
			player.QA_EFF_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL04BLUE;
			player.QA_EFF_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_COL04ALPHA;

			player.QA_EFF_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_TYPE;
			player.QA_EFF_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[1].QA_EFFECT_INTENSITY * player.JINK3_PowerFactor;
			}

		if(SCRAM == 5)	//SPELL SLOT 3
			{
			player.QA_EFF_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_SWITCH;
			if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].LIVE == 0) player.QA_EFF_SWITCH = 0;

			player.QA_EFF_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL00RED;
			player.QA_EFF_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL00GREEN;
			player.QA_EFF_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL00BLUE;
			player.QA_EFF_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL00ALPHA;

			player.QA_EFF_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL01RED;
			player.QA_EFF_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL01GREEN;
			player.QA_EFF_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL01BLUE;
			player.QA_EFF_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL01ALPHA;

			player.QA_EFF_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL02RED;
			player.QA_EFF_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL02GREEN;
			player.QA_EFF_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL02BLUE;
			player.QA_EFF_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL02ALPHA;

			player.QA_EFF_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL03RED;
			player.QA_EFF_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL03GREEN;
			player.QA_EFF_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL03BLUE;
			player.QA_EFF_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL03ALPHA;

			player.QA_EFF_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL04RED;
			player.QA_EFF_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL04GREEN;
			player.QA_EFF_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL04BLUE;
			player.QA_EFF_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_COL04ALPHA;

			player.QA_EFF_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_TYPE;
			player.QA_EFF_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[2].QA_EFFECT_INTENSITY * player.JINK3_PowerFactor;
			}

		if(SCRAM == 6)	//ITEM CURRENT WEAPON
			{
			player.QA_EFF_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].ON;

			player.QA_EFF_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].Red;
			player.QA_EFF_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].Green;
			player.QA_EFF_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].Blue;
			player.QA_EFF_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].Alpha;

			player.QA_EFF_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[1].Red;
			player.QA_EFF_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[1].Green;
			player.QA_EFF_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[1].Blue;
			player.QA_EFF_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[1].Alpha;

			player.QA_EFF_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[2].Red;
			player.QA_EFF_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[2].Green;
			player.QA_EFF_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[2].Blue;
			player.QA_EFF_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[2].Alpha;

			player.QA_EFF_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[3].Red;
			player.QA_EFF_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[3].Green;
			player.QA_EFF_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[3].Blue;
			player.QA_EFF_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[3].Alpha;

			player.QA_EFF_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[4].Red;
			player.QA_EFF_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[4].Green;
			player.QA_EFF_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[4].Blue;
			player.QA_EFF_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[4].Alpha;

			player.QA_EFF_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].TYPE;
			player.QA_EFF_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].Effect[0].INT * player.JINK3_PowerFactor;
			}

		if(player.QA_EFF_SWITCH == 1)
			{
			QAEFFcontrolPLAYER(player.QA_EFF_TYPE, player.QA_EFF_INTENSITY, player.QA_EFF_COL00RED, player.QA_EFF_COL00GREEN, player.QA_EFF_COL00BLUE, player.QA_EFF_COL00ALPHA);
			}

		SCRAM++;
		}


	helly=0;
	while(helly < NomAI)
		{
		if(Forge[helly].LIVE == 1)
			{
			SCRAM=0;
			while(SCRAM < 7)
				{
				if(SCRAM == 0)
					{
					Forge[helly].QA_EFF_SWITCH = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[0].ON;

					Forge[helly].QA_EFF_COL00RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[0].Red;
					Forge[helly].QA_EFF_COL00GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[0].Green;
					Forge[helly].QA_EFF_COL00BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[0].Blue;
					Forge[helly].QA_EFF_COL00ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[0].Alpha;

					Forge[helly].QA_EFF_COL01RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[1].Red;
					Forge[helly].QA_EFF_COL01GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[1].Green;
					Forge[helly].QA_EFF_COL01BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[1].Blue;
					Forge[helly].QA_EFF_COL01ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[1].Alpha;

					Forge[helly].QA_EFF_COL02RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[2].Red;
					Forge[helly].QA_EFF_COL02GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[2].Green;
					Forge[helly].QA_EFF_COL02BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[2].Blue;
					Forge[helly].QA_EFF_COL02ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[2].Alpha;

					Forge[helly].QA_EFF_COL03RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[3].Red;
					Forge[helly].QA_EFF_COL03GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[3].Green;
					Forge[helly].QA_EFF_COL03BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[3].Blue;
					Forge[helly].QA_EFF_COL03ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[3].Alpha;

					Forge[helly].QA_EFF_COL04RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[4].Red;
					Forge[helly].QA_EFF_COL04GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[4].Green;
					Forge[helly].QA_EFF_COL04BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[4].Blue;
					Forge[helly].QA_EFF_COL04ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[4].Alpha;

					Forge[helly].QA_EFF_TYPE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[0].TYPE;
					Forge[helly].QA_EFF_INTENSITY = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrHEADARMOUR].Effect[0].INT * Forge[helly].JINK3_PowerFactor;
					geActor_GetBoneTransform(Forge[helly].Avatar.Actor, "BIP01 HEAD", &Forge[helly].QA_EFF_BONEMATRIX);
					}

				if(SCRAM == 1)
					{
					Forge[helly].QA_EFF_SWITCH = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[0].ON;

					Forge[helly].QA_EFF_COL00RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[0].Red;
					Forge[helly].QA_EFF_COL00GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[0].Green;
					Forge[helly].QA_EFF_COL00BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[0].Blue;
					Forge[helly].QA_EFF_COL00ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[0].Alpha;

					Forge[helly].QA_EFF_COL01RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[1].Red;
					Forge[helly].QA_EFF_COL01GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[1].Green;
					Forge[helly].QA_EFF_COL01BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[1].Blue;
					Forge[helly].QA_EFF_COL01ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[1].Alpha;

					Forge[helly].QA_EFF_COL02RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[2].Red;
					Forge[helly].QA_EFF_COL02GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[2].Green;
					Forge[helly].QA_EFF_COL02BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[2].Blue;
					Forge[helly].QA_EFF_COL02ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[2].Alpha;

					Forge[helly].QA_EFF_COL03RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[3].Red;
					Forge[helly].QA_EFF_COL03GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[3].Green;
					Forge[helly].QA_EFF_COL03BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[3].Blue;
					Forge[helly].QA_EFF_COL03ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[3].Alpha;

					Forge[helly].QA_EFF_COL04RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[4].Red;
					Forge[helly].QA_EFF_COL04GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[4].Green;
					Forge[helly].QA_EFF_COL04BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[4].Blue;
					Forge[helly].QA_EFF_COL04ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[4].Alpha;

					Forge[helly].QA_EFF_TYPE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[0].TYPE;
					Forge[helly].QA_EFF_INTENSITY = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrUPPERARMOUR].Effect[0].INT * Forge[helly].JINK3_PowerFactor;
					geActor_GetBoneTransform(Forge[helly].Avatar.Actor, "BIP01 L FOREARM", &Forge[helly].QA_EFF_BONEMATRIX);
					geActor_GetBoneTransform(Forge[helly].Avatar.Actor, "BIP01 R FOREARM", &Forge[helly].QA_EFF_BONEMATRIX01);
					}

				if(SCRAM == 2)
					{
					Forge[helly].QA_EFF_SWITCH = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[0].ON;

					Forge[helly].QA_EFF_COL00RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[0].Red;
					Forge[helly].QA_EFF_COL00GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[0].Green;
					Forge[helly].QA_EFF_COL00BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[0].Blue;
					Forge[helly].QA_EFF_COL00ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[0].Alpha;

					Forge[helly].QA_EFF_COL01RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[1].Red;
					Forge[helly].QA_EFF_COL01GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[1].Green;
					Forge[helly].QA_EFF_COL01BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[1].Blue;
					Forge[helly].QA_EFF_COL01ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[1].Alpha;

					Forge[helly].QA_EFF_COL02RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[2].Red;
					Forge[helly].QA_EFF_COL02GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[2].Green;
					Forge[helly].QA_EFF_COL02BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[2].Blue;
					Forge[helly].QA_EFF_COL02ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[2].Alpha;

					Forge[helly].QA_EFF_COL03RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[3].Red;
					Forge[helly].QA_EFF_COL03GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[3].Green;
					Forge[helly].QA_EFF_COL03BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[3].Blue;
					Forge[helly].QA_EFF_COL03ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[3].Alpha;

					Forge[helly].QA_EFF_COL04RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[4].Red;
					Forge[helly].QA_EFF_COL04GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[4].Green;
					Forge[helly].QA_EFF_COL04BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[4].Blue;
					Forge[helly].QA_EFF_COL04ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[4].Alpha;

					Forge[helly].QA_EFF_TYPE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[0].TYPE;
					Forge[helly].QA_EFF_INTENSITY = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrLOWERARMOUR].Effect[0].INT * Forge[helly].JINK3_PowerFactor;
					geActor_GetBoneTransform(Forge[helly].Avatar.Actor, "BIP01", &Forge[helly].QA_EFF_BONEMATRIX);
					}

				if(SCRAM == 3)	//SPELL SLOT 1
					{
					Forge[helly].QA_EFF_SWITCH = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_SWITCH;
					if(Forge[helly].CharDATA.SpellSLOT[0].LIVE == 0) Forge[helly].QA_EFF_SWITCH = 0;

					Forge[helly].QA_EFF_COL00RED = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL00RED;
					Forge[helly].QA_EFF_COL00GREEN = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL00GREEN;
					Forge[helly].QA_EFF_COL00BLUE = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL00BLUE;
					Forge[helly].QA_EFF_COL00ALPHA = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL00ALPHA;

					Forge[helly].QA_EFF_COL01RED = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL01RED;
					Forge[helly].QA_EFF_COL01GREEN = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL01GREEN;
					Forge[helly].QA_EFF_COL01BLUE = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL01BLUE;
					Forge[helly].QA_EFF_COL01ALPHA = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL01ALPHA;

					Forge[helly].QA_EFF_COL02RED = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL02RED;
					Forge[helly].QA_EFF_COL02GREEN = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL02GREEN;
					Forge[helly].QA_EFF_COL02BLUE = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL02BLUE;
					Forge[helly].QA_EFF_COL02ALPHA = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL02ALPHA;

					Forge[helly].QA_EFF_COL03RED = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL03RED;
					Forge[helly].QA_EFF_COL03GREEN = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL03GREEN;
					Forge[helly].QA_EFF_COL03BLUE = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL03BLUE;
					Forge[helly].QA_EFF_COL03ALPHA = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL03ALPHA;

					Forge[helly].QA_EFF_COL04RED = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL04RED;
					Forge[helly].QA_EFF_COL04GREEN = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL04GREEN;
					Forge[helly].QA_EFF_COL04BLUE = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL04BLUE;
					Forge[helly].QA_EFF_COL04ALPHA = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_COL04ALPHA;

					Forge[helly].QA_EFF_TYPE = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_TYPE;
					Forge[helly].QA_EFF_INTENSITY = Forge[helly].CharDATA.SpellSLOT[0].QA_EFFECT_INTENSITY * Forge[helly].JINK3_PowerFactor;
					}

				if(SCRAM == 4)	//SPELL SLOT 2
					{
					Forge[helly].QA_EFF_SWITCH = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_SWITCH;
					if(Forge[helly].CharDATA.SpellSLOT[1].LIVE == 0) Forge[helly].QA_EFF_SWITCH = 0;

					Forge[helly].QA_EFF_COL00RED = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL00RED;
					Forge[helly].QA_EFF_COL00GREEN = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL00GREEN;
					Forge[helly].QA_EFF_COL00BLUE = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL00BLUE;
					Forge[helly].QA_EFF_COL00ALPHA = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL00ALPHA;

					Forge[helly].QA_EFF_COL01RED = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL01RED;
					Forge[helly].QA_EFF_COL01GREEN = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL01GREEN;
					Forge[helly].QA_EFF_COL01BLUE = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL01BLUE;
					Forge[helly].QA_EFF_COL01ALPHA = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL01ALPHA;

					Forge[helly].QA_EFF_COL02RED = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL02RED;
					Forge[helly].QA_EFF_COL02GREEN = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL02GREEN;
					Forge[helly].QA_EFF_COL02BLUE = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL02BLUE;
					Forge[helly].QA_EFF_COL02ALPHA = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL02ALPHA;

					Forge[helly].QA_EFF_COL03RED = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL03RED;
					Forge[helly].QA_EFF_COL03GREEN = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL03GREEN;
					Forge[helly].QA_EFF_COL03BLUE = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL03BLUE;
					Forge[helly].QA_EFF_COL03ALPHA = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL03ALPHA;

					Forge[helly].QA_EFF_COL04RED = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL04RED;
					Forge[helly].QA_EFF_COL04GREEN = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL04GREEN;
					Forge[helly].QA_EFF_COL04BLUE = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL04BLUE;
					Forge[helly].QA_EFF_COL04ALPHA = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_COL04ALPHA;

					Forge[helly].QA_EFF_TYPE = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_TYPE;
					Forge[helly].QA_EFF_INTENSITY = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_INTENSITY * Forge[helly].JINK3_PowerFactor;
					}

				if(SCRAM == 5)	//SPELL SLOT 3
					{
					Forge[helly].QA_EFF_SWITCH = Forge[helly].CharDATA.SpellSLOT[1].QA_EFFECT_SWITCH;
					if(Forge[helly].CharDATA.SpellSLOT[1].LIVE == 0) Forge[helly].QA_EFF_SWITCH = 0;

					Forge[helly].QA_EFF_COL00RED = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL00RED;
					Forge[helly].QA_EFF_COL00GREEN = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL00GREEN;
					Forge[helly].QA_EFF_COL00BLUE = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL00BLUE;
					Forge[helly].QA_EFF_COL00ALPHA = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL00ALPHA;

					Forge[helly].QA_EFF_COL01RED = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL01RED;
					Forge[helly].QA_EFF_COL01GREEN = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL01GREEN;
					Forge[helly].QA_EFF_COL01BLUE = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL01BLUE;
					Forge[helly].QA_EFF_COL01ALPHA = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL01ALPHA;

					Forge[helly].QA_EFF_COL02RED = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL02RED;
					Forge[helly].QA_EFF_COL02GREEN = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL02GREEN;
					Forge[helly].QA_EFF_COL02BLUE = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL02BLUE;
					Forge[helly].QA_EFF_COL02ALPHA = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL02ALPHA;

					Forge[helly].QA_EFF_COL03RED = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL03RED;
					Forge[helly].QA_EFF_COL03GREEN = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL03GREEN;
					Forge[helly].QA_EFF_COL03BLUE = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL03BLUE;
					Forge[helly].QA_EFF_COL03ALPHA = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL03ALPHA;

					Forge[helly].QA_EFF_COL04RED = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL04RED;
					Forge[helly].QA_EFF_COL04GREEN = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL04GREEN;
					Forge[helly].QA_EFF_COL04BLUE = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL04BLUE;
					Forge[helly].QA_EFF_COL04ALPHA = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_COL04ALPHA;

					Forge[helly].QA_EFF_TYPE = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_TYPE;
					Forge[helly].QA_EFF_INTENSITY = Forge[helly].CharDATA.SpellSLOT[2].QA_EFFECT_INTENSITY * Forge[helly].JINK3_PowerFactor;
					}

				if(SCRAM == 6)
					{
					Forge[helly].QA_EFF_SWITCH = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[0].ON;

					Forge[helly].QA_EFF_COL00RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[0].Red;
					Forge[helly].QA_EFF_COL00GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[0].Green;
					Forge[helly].QA_EFF_COL00BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[0].Blue;
					Forge[helly].QA_EFF_COL00ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[0].Alpha;

					Forge[helly].QA_EFF_COL01RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[1].Red;
					Forge[helly].QA_EFF_COL01GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[1].Green;
					Forge[helly].QA_EFF_COL01BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[1].Blue;
					Forge[helly].QA_EFF_COL01ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[1].Alpha;

					Forge[helly].QA_EFF_COL02RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[2].Red;
					Forge[helly].QA_EFF_COL02GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[2].Green;
					Forge[helly].QA_EFF_COL02BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[2].Blue;
					Forge[helly].QA_EFF_COL02ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[2].Alpha;

					Forge[helly].QA_EFF_COL03RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[3].Red;
					Forge[helly].QA_EFF_COL03GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[3].Green;
					Forge[helly].QA_EFF_COL03BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[3].Blue;
					Forge[helly].QA_EFF_COL03ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[3].Alpha;

					Forge[helly].QA_EFF_COL04RED = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[4].Red;
					Forge[helly].QA_EFF_COL04GREEN = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[4].Green;
					Forge[helly].QA_EFF_COL04BLUE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[4].Blue;
					Forge[helly].QA_EFF_COL04ALPHA = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[4].Alpha;

					Forge[helly].QA_EFF_TYPE = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[0].TYPE;
					Forge[helly].QA_EFF_INTENSITY = Forge[helly].CharDATA.ItemDATA[Forge[helly].CharDATA.CurrWEAPON].Effect[0].INT * Forge[helly].JINK3_PowerFactor;
					geActor_GetBoneTransform(Forge[helly].Avatar.Actor, "BIP01", &Forge[helly].QA_EFF_BONEMATRIX);
					}

				if(Forge[helly].QA_EFF_SWITCH == 1)
					{
					QAEFFcontrolAI(helly, Forge[helly].QA_EFF_TYPE, Forge[helly].QA_EFF_INTENSITY, Forge[helly].QA_EFF_COL00RED, Forge[helly].QA_EFF_COL00GREEN, Forge[helly].QA_EFF_COL00BLUE, Forge[helly].QA_EFF_COL00ALPHA);
					}

				SCRAM++;
				}
			}
		helly++;
		}


	//########  - Player Shield Control -  ########//

	if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].Class == 2)
		{
		if(player.Cleric.ShieldOn == 1)
			{
			if(player.HB_Energy > 0)
				{
				if(player.Cleric.ShieldAlpha + (15 * TimeScale) < 100) player.Cleric.ShieldAlpha += (15 * TimeScale);
				else player.Cleric.ShieldAlpha = 100;

				geActor_SetLightingOptions(player.Shield.Actor,GE_FALSE,&goup,230,230,230,220,220,220,GE_FALSE,0,NULL,GE_FALSE);

				//### Check for avatars within shield
				jet=0;
				while(jet < NomAI /*&& player.Cleric.ShieldCNT > 1*/ && NetworkOption != 1)
					{
					if(Forge[jet].LIVE == 1)
						{
						if(Forge[jet].Team != player.Team)
							{
							TESTPosS = Forge[jet].Avatar.ActorXform.Translation;
							TESTPosS.Y += 60;
							TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &player.Shield.ActorXform.Translation);

							geVec3d_Subtract(&TESTPosS, &player.Shield.ActorXform.Translation, &TESTPosE);

							if(TESTShieldDIST < (65 * player.Cleric.ShieldScale))
								{
								TESTLength = geVec3d_Length(&TESTPosE);
								geVec3d_Normalize(&TESTPosE);
								Forge[jet].MoveReactVec = TESTPosE;
								Forge[jet].MoveReactSpeed = 65 * player.Cleric.ShieldScale - TESTLength;
								Forge[jet].HitShield = 1;
								}
							}
						}
					jet++;
					}


				//### Check for NNBOTS Within shield
				jet=0;
				while(jet < NomNNBots && NetworkOption != 1)
					{
					if(Q_NNBot[jet].LIVE == 1)
						{
						TESTShieldDIST = geVec3d_DistanceBetween(&Q_NNBot[jet].Pos, &player.Shield.ActorXform.Translation);

						geVec3d_Subtract(&Q_NNBot[jet].Pos, &player.Shield.ActorXform.Translation, &TESTPosE);

						if(TESTShieldDIST < (65 * player.Cleric.ShieldScale))
							{
							TESTLength = geVec3d_Length(&TESTPosE);
							geVec3d_Normalize(&TESTPosE);
							Q_NNBot[jet].TraVec = TESTPosE;
							Q_NNBot[jet].Direction = 0;
							Q_NNBot[jet].Speed = 65 * player.Cleric.ShieldScale - TESTLength;
							}
						}

					jet++;
					}
				}
			else
				{
				if(player.Cleric.ShieldAlpha - (2 * TimeScale) > 15) player.Cleric.ShieldAlpha -= (2 * TimeScale);
				else
					{
					player.Cleric.ShieldAlpha = 15;

					player.Cleric.ShieldOn = 0;

					if(NetworkOption == 2) player.EnergySWITCHOFF = 1;
					if(NetworkOption == 1) player.EnergySWITCHOFF = 0;
					player.attposecnt = 0;
					player.Aposestate = 0;
					player.blendamount[85] = 0;
					player.attackon = 0;
					player.EnergyInitialise = 0;
					player.EnergyCounter = 0;

					geSound3D_GetConfig(World, &player.ViewXForm, &player.ViewXForm.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
						//'Jink'
					geSound_PlaySoundDef(SoundSys, S_BJink, Volume, Pan, S_TimeScale, GE_FALSE);
					}

				geActor_SetLightingOptions(player.Shield.Actor,GE_FALSE,&goup,255,50,50,255,50,50,GE_FALSE,0,NULL,GE_FALSE);
				}

			if(player.Cleric.ShieldGROW == 0)
				{
				if((player.Cleric.ShieldScale + (((0.1 + (((float)rand() / 32767) * 0.15)) * TimeScale) * (1 + ((10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000)) * (10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000))))) < (1 + ((10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000)) * (10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000))))) && (player.Cleric.ShieldGROW == 0)) player.Cleric.ShieldScale += (((0.1 + (((float)rand() / 32767) * 0.15)) * TimeScale) * (1 + ((10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000)) * (10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000)))));
				else
					{
					player.Cleric.ShieldScale = (1 + ((10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000)) * (10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000))));

					if(player.Cleric.ShieldCNT < 2)
						{
						player.Cleric.ShieldCNT++;
						player.Cleric.ShieldAlpha = 20;
						player.Cleric.ShieldScale = ((float)rand() / 32767) * (1 + ((10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000)) * (10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000))));
						}
					else player.Cleric.ShieldGROW = 1;
					}
				}
			else
				{
				player.Cleric.ShieldScale = (1 + ((10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000)) * (10 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].CLSClericSKILL[7].Potency/5000))));
				player.Cleric.ShieldScale += ((((float)rand() / 32767) - 0.5) * 0.1);
				}
			}
		else
			{
			if(player.Cleric.ShieldAlpha - (27 * TimeScale) >= 0) player.Cleric.ShieldAlpha += (27 * TimeScale);
			else player.Cleric.ShieldAlpha = 0;

			if(player.Cleric.ShieldScale - (0.5 * TimeScale) >= 0) player.Cleric.ShieldScale -= (0.5 * TimeScale);
			else
				{
				player.Cleric.ShieldScale = 0;
				player.Cleric.ShieldGROW = 0;
				}
			}

		if(player.Cleric.ShieldAlpha > 0)
			{
			//### Set Shield Position
			player.Shield.ActorXform.Translation = playact.ActorXform.Translation;
			player.Shield.ActorXform.Translation.Y += 60;

			//### Set Shield Alpha
			geActor_SetAlpha(player.Shield.Actor, player.Cleric.ShieldAlpha);

			//### Set Shield Scale
			geActor_SetScale(player.Shield.Actor, player.Cleric.ShieldScale,player.Cleric.ShieldScale,player.Cleric.ShieldScale);

			//### Shield Material Counters
			
			if(player.Cleric.ShieldCNT > 1)
				{
				if(player.Cleric.ShieldMATCNT + 1 < 11) player.Cleric.ShieldMATCNT++;
				else player.Cleric.ShieldMATCNT = 1;
				geActor_GetMaterial(player.Shield.Actor, player.Cleric.ShieldMATCNT, &player.Cleric.SBitmap, &player.Cleric.SBitmapRed, &player.Cleric.SBitmapGreen, &player.Cleric.SBitmapBlue);
				geActor_SetMaterial(player.Shield.Actor, 0, player.Cleric.SBitmap, player.Cleric.SBitmapRed, player.Cleric.SBitmapGreen, player.Cleric.SBitmapBlue);
				}

			//### Clear Shield Pose
			geActor_ClearPose(player.Shield.Actor, &player.Shield.ActorXform);
			}
		else player.Shield.ActorXform.Translation = Origon;
		}
	

	//########  - Avatar Shield Control -  ########//

	SCRAM = 0;
	while(SCRAM < NomAI)
		{
		if(Forge[SCRAM].LIVE == 1)
			{
			if(Forge[SCRAM].CharDATA.Class == 2)
				{
				if(Forge[SCRAM].Cleric.ShieldOn == 1)
					{
					if(Forge[SCRAM].HB_Energy > 0)
						{
						if(Forge[SCRAM].Cleric.ShieldAlpha + (15 * TimeScale) < 100) Forge[SCRAM].Cleric.ShieldAlpha += (15 * TimeScale);
						else Forge[SCRAM].Cleric.ShieldAlpha = 100;

						geActor_SetLightingOptions(Forge[SCRAM].Shield.Actor,GE_FALSE,&goup,230,230,230,220,220,220,GE_FALSE,0,NULL,GE_FALSE);

						//### Check for player within shield
						if((player.Team != Forge[SCRAM].Team && NetworkOption != 1) /*&& (Forge[SCRAM].Cleric.ShieldCNT > 1)*/)
							{
							TESTPosS = playact.ActorXform.Translation;
							TESTPosS.Y += 60;
							TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

							geVec3d_Subtract(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation, &TESTPosE);

							if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
								{
								TESTLength = geVec3d_Length(&TESTPosE);
								geVec3d_Normalize(&TESTPosE);
								player.MoveReactVec = TESTPosE;
								player.MoveReactSpeed = 65 * Forge[SCRAM].Cleric.ShieldScale - TESTLength;
								player.HitShield = 1;
								}
							}

						//### Check for avatars within shield
						jet=0;
						while(jet < NomAI /*&& Forge[SCRAM].Cleric.ShieldCNT > 1*/ && NetworkOption != 1)
							{
							if(Forge[jet].LIVE == 1)
								{
								if(Forge[jet].Team != Forge[SCRAM].Team)
									{
									TESTPosS = Forge[jet].Avatar.ActorXform.Translation;
									TESTPosS.Y += 60;
									TESTShieldDIST = geVec3d_DistanceBetween(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation);

									geVec3d_Subtract(&TESTPosS, &Forge[SCRAM].Shield.ActorXform.Translation, &TESTPosE);

									if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
										{
										TESTLength = geVec3d_Length(&TESTPosE);
										geVec3d_Normalize(&TESTPosE);
										Forge[jet].MoveReactVec = TESTPosE;
										Forge[jet].MoveReactSpeed = 65 * Forge[SCRAM].Cleric.ShieldScale - TESTLength;
										Forge[jet].HitShield = 1;
										}
									}
								}
							jet++;
							}


						//### Check for NNBOTS Within shield
						jet=0;
						while(jet < NomNNBots && NetworkOption != 1)
							{
							if(Q_NNBot[jet].LIVE == 1)
								{
								TESTShieldDIST = geVec3d_DistanceBetween(&Q_NNBot[jet].Pos, &Forge[SCRAM].Shield.ActorXform.Translation);

								geVec3d_Subtract(&Q_NNBot[jet].Pos, &Forge[SCRAM].Shield.ActorXform.Translation, &TESTPosE);

								if(TESTShieldDIST < (65 * Forge[SCRAM].Cleric.ShieldScale))
									{
									TESTLength = geVec3d_Length(&TESTPosE);
									geVec3d_Normalize(&TESTPosE);
									Q_NNBot[jet].TraVec = TESTPosE;
									Q_NNBot[jet].Direction = 0;
									Q_NNBot[jet].Speed = 65 * Forge[SCRAM].Cleric.ShieldScale - TESTLength;
									}
								}

							jet++;
							}
						}
					else
						{
						if(Forge[SCRAM].Cleric.ShieldAlpha - (2 * TimeScale) > 15) Forge[SCRAM].Cleric.ShieldAlpha -= (2 * TimeScale);
						else
							{
							Forge[SCRAM].Cleric.ShieldAlpha = 15;

							Forge[AIcount].Cleric.ShieldOn = 0;

							if(NetworkOption == 2) Forge[AIcount].EnergySWITCHOFF = 1;
							if(NetworkOption == 1) Forge[AIcount].EnergySWITCHOFF = 0;
							Forge[AIcount].attposecnt = 0;
							Forge[AIcount].Aposestate = 0;
							Forge[AIcount].blendamount[85] = 0;
							Forge[AIcount].attackon = 0;
							Forge[AIcount].EnergyInitialise = 0;
							Forge[AIcount].EnergyCounter = 0;

							geSound3D_GetConfig(World, &player.ViewXForm, &Forge[AIcount].AttPos.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
								//'Jink'
							geSound_PlaySoundDef(SoundSys, S_BJink, Volume, Pan, S_TimeScale, GE_FALSE);
							}


						geActor_SetLightingOptions(Forge[SCRAM].Shield.Actor,GE_FALSE,&goup,255,70,70,220,60,60,GE_FALSE,0,NULL,GE_FALSE);
						}

					if(Forge[SCRAM].Cleric.ShieldGROW == 0)
						{
						if((Forge[SCRAM].Cleric.ShieldScale + (((0.1 + (((float)rand() / 32767) * 0.15)) * TimeScale) * (1 + ((10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000)) * (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000))))) < (1 + ((10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000)) * (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000))))) && (Forge[SCRAM].Cleric.ShieldGROW == 0)) Forge[SCRAM].Cleric.ShieldScale += (((0.1 + (((float)rand() / 32767) * 0.15)) * TimeScale) * (1 + ((10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000)) * (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000)))));
						else
							{
							Forge[SCRAM].Cleric.ShieldScale = (1 + ((10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000)) * (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000))));

							if(Forge[SCRAM].Cleric.ShieldCNT < 2)
								{
								Forge[SCRAM].Cleric.ShieldCNT++;
								Forge[SCRAM].Cleric.ShieldAlpha = 20;
								Forge[SCRAM].Cleric.ShieldScale = ((float)rand() / 32767) * (1 + ((10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000)) * (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000))));
								}
							else Forge[SCRAM].Cleric.ShieldGROW = 1;
							}
						}
					else
						{
						Forge[SCRAM].Cleric.ShieldScale = (1 + ((10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000)) * (10 * (Forge[SCRAM].CharDATA.CLSClericSKILL[7].Potency/5000))));
						Forge[SCRAM].Cleric.ShieldScale += ((((float)rand() / 32767) - 0.5) * 0.1);
						}
					}
				else
					{
					if(Forge[SCRAM].Cleric.ShieldAlpha - (27 * TimeScale) >= 0) Forge[SCRAM].Cleric.ShieldAlpha += (27 * TimeScale);
					else Forge[SCRAM].Cleric.ShieldAlpha = 0;

					if(Forge[SCRAM].Cleric.ShieldScale - (0.5 * TimeScale) >= 0) Forge[SCRAM].Cleric.ShieldScale -= (0.5 * TimeScale);
					else
						{
						Forge[SCRAM].Cleric.ShieldScale = 0;
						Forge[SCRAM].Cleric.ShieldGROW = 0;
						}
					}

				if(Forge[SCRAM].Cleric.ShieldAlpha > 0)
					{
					//### Set Shield Position
					Forge[SCRAM].Shield.ActorXform.Translation = Forge[SCRAM].Avatar.ActorXform.Translation;
					Forge[SCRAM].Shield.ActorXform.Translation.Y += 60;

					//### Set Shield Alpha
					geActor_SetAlpha(Forge[SCRAM].Shield.Actor, Forge[SCRAM].Cleric.ShieldAlpha);

					//### Set Shield Scale
					geActor_SetScale(Forge[SCRAM].Shield.Actor, Forge[SCRAM].Cleric.ShieldScale,Forge[SCRAM].Cleric.ShieldScale,Forge[SCRAM].Cleric.ShieldScale);

					//### Shield Material Counters
					if(Forge[SCRAM].Cleric.ShieldCNT > 1)
						{
						if(Forge[SCRAM].Cleric.ShieldMATCNT + 1 < 11) Forge[SCRAM].Cleric.ShieldMATCNT++;
						else Forge[SCRAM].Cleric.ShieldMATCNT = 1;
						geActor_GetMaterial(Forge[SCRAM].Shield.Actor, Forge[SCRAM].Cleric.ShieldMATCNT, &Forge[SCRAM].Cleric.SBitmap, &Forge[SCRAM].Cleric.SBitmapRed, &Forge[SCRAM].Cleric.SBitmapGreen, &Forge[SCRAM].Cleric.SBitmapBlue);
						geActor_SetMaterial(Forge[SCRAM].Shield.Actor, 0, Forge[SCRAM].Cleric.SBitmap, Forge[SCRAM].Cleric.SBitmapRed, Forge[SCRAM].Cleric.SBitmapGreen, Forge[SCRAM].Cleric.SBitmapBlue);
						}

					//### Clear Shield Pose
					geActor_ClearPose(Forge[SCRAM].Shield.Actor, &Forge[SCRAM].Shield.ActorXform);
					}
				else Forge[SCRAM].Shield.ActorXform.Translation = Origon;
				}
			}

		SCRAM++;
		}


	//########  - NET EFFECTS CONTROL -  #########
	SCRAM = 0;
	while(SCRAM < NomNetEffectControl)
		{
		if(Q_NetEffectControl[SCRAM].Active == 1)
			{
			Q_NetEffectControl[SCRAM].Active = 0;

			switch(Q_NetEffectControl[SCRAM].Type)
				{
				case 0:
					{
					jet=0;
					while((jet < (((Q_NetEffectControl[SCRAM].EffIntensity/5000) * 145) + 20)) && (NomPntSprite < 24998))
						{
						Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
						Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
						Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
						Q_PntSprite[NomPntSprite].PartType = 8;

						Q_PntSprite[NomPntSprite].IR = 255;
						Q_PntSprite[NomPntSprite].IG = 225;
						Q_PntSprite[NomPntSprite].IB = 225;

						Q_PntSprite[NomPntSprite].Alpha = 100;
						Q_PntSprite[NomPntSprite].Speed = (0.2 + (6 * (Q_NetEffectControl[SCRAM].EffIntensity/5000)));
						Q_PntSprite[NomPntSprite].Pos = Q_NetEffectControl[SCRAM].Pos;

						Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
						Q_PntSprite[NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
						Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

						Q_PntSprite[NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*15;
						Q_PntSprite[NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*15;
						Q_PntSprite[NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*15;

						Q_PntSprite[NomPntSprite].Live = 1;

						NomPntSprite++;
						jet++;
						}
					} break;

				case 1:
					{
					jet=0;
					while((jet < ((Q_NetEffectControl[SCRAM].EffIntensity * 100) + 20)) && (NomPntSprite < 24998))
						{
						Q_PntSprite[NomPntSprite].Type = GE_TEXTURED_POINT;
						Q_PntSprite[NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
						Q_PntSprite[NomPntSprite].Scale = 0.135f;		//0.025f//0.002f
						Q_PntSprite[NomPntSprite].PartType = 8;

						Q_PntSprite[NomPntSprite].IR = 255;
						Q_PntSprite[NomPntSprite].IG = 225;
						Q_PntSprite[NomPntSprite].IB = 225;

						Q_PntSprite[NomPntSprite].Alpha = 100;
						Q_PntSprite[NomPntSprite].Speed = (0.3 + (6 * Q_NetEffectControl[SCRAM].EffIntensity));

						Q_PntSprite[NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
						Q_PntSprite[NomPntSprite].TraVec.Y = ((float)rand() / 32767);
						Q_PntSprite[NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

						geVec3d_Normalize(&Q_PntSprite[NomPntSprite].TraVec);

						if(Q_NetEffectControl[SCRAM].ActorID == player.NetUPDATE.ServerCONTROLID)
							{ geVec3d_MA(&player.Shield.ActorXform.Translation, (65 * player.Cleric.ShieldScale), &Q_PntSprite[NomPntSprite].TraVec, &Q_PntSprite[NomPntSprite].Pos); }
						else
							{
							if(Q_NetEffectControl[SCRAM].ActorID == 250)
								{ geVec3d_MA(&Forge[Netplayer[0].LocalCONTROLID].Shield.ActorXform.Translation, (65 * Forge[Netplayer[0].LocalCONTROLID].Cleric.ShieldScale), &Q_PntSprite[NomPntSprite].TraVec, &Q_PntSprite[NomPntSprite].Pos); }
							else
								{ geVec3d_MA(&Forge[Q_NetEffectControl[SCRAM].ActorID].Shield.ActorXform.Translation, (65 * Forge[Q_NetEffectControl[SCRAM].ActorID].Cleric.ShieldScale), &Q_PntSprite[NomPntSprite].TraVec, &Q_PntSprite[NomPntSprite].Pos); }
							}

						Q_PntSprite[NomPntSprite].TraVec.X = 0;
						Q_PntSprite[NomPntSprite].TraVec.Y = -1;
						Q_PntSprite[NomPntSprite].TraVec.Z = 0;

						Q_PntSprite[NomPntSprite].ActorID = 250;

						Q_PntSprite[NomPntSprite].Live = 1;

						NomPntSprite++;
						jet++;
						}
					} break;
				}
			}

		SCRAM++;
		}


	//########  - Avatar Graphics Control -  ########//
	if(CharSelect == 1)
		{
		if(player.BackPBmpCnt < 38) player.BackPBmpCnt = 38;

		//### Player Scrolling Bitmaps
		if(player.BackPBmpCnt < 46)
			{
			geActor_GetMaterial(playact.Actor, player.BackPBmpCnt, &player.BackPBitmap, &player.BackPRed, &player.BackPGreen, &player.BackPBlue);
			geActor_SetMaterial(playact.Actor, 27, player.BackPBitmap, player.BackPRed, player.BackPGreen, player.BackPBlue);
			}

								//  \/----- Orig 46
		if(player.BackPBmpCnt + 1 < 80) player.BackPBmpCnt++;
		else player.BackPBmpCnt = 38;
		}


	//########  - Avatar Position Control -  ########//
	player.oldAPC = player.newAPC;
	player.newAPC = playact.ActorXform.Translation;
	geVec3d_Subtract(&player.newAPC, &player.oldAPC, &player.INvectorAPC);
	geVec3d_Normalize(&player.INvectorAPC);

	jet = 0;
	while(jet < NomAI)
		{
		if(Forge[jet].LIVE == 1)
			{
			Forge[jet].oldAPC = Forge[jet].newAPC;
			Forge[jet].newAPC = Forge[jet].Avatar.ActorXform.Translation;
			geVec3d_Subtract(&Forge[jet].newAPC, &Forge[jet].oldAPC, &Forge[jet].INvectorAPC);
			geVec3d_Normalize(&Forge[jet].INvectorAPC);
			}
		jet++;
		}


	//########  - Avatar ENERGY Control -  ########//
	if(NetworkOption != 1)
		{
		if(player.JinkSpecialON == 0 && player.HB_Dead == 0)
			{
			if( TIME > player.HB_EnergyTimer + 45 )
				{
				player.HB_Energy += ((0.03 + (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Intelligence / 3000)) / (1 + (player.JINK3_PowerFactor / 50))) * TimeScale;
				if(player.HB_Energy > player.HB_MaxEnergy) player.HB_Energy = player.HB_MaxEnergy;
				}
			}
		else player.HB_EnergyTimer = TIME;


		jet = 0;
		while(jet < NomAI)
			{
			if(Forge[jet].LIVE == 1)
				{
				if(Forge[jet].JinkSpecialON == 0 && Forge[jet].HB_Dead == 0)
					{
					if( TIME > Forge[jet].HB_EnergyTimer + 45 )
						{
						Forge[jet].HB_Energy += ((0.03 + (Forge[jet].CharDATA.BodySKILL.Intelligence / 3000)) / (1 + (Forge[jet].JINK3_PowerFactor / 50))) * TimeScale;
						if(Forge[jet].HB_Energy > Forge[jet].HB_MaxEnergy) Forge[jet].HB_Energy = Forge[jet].HB_MaxEnergy;
						}
					}
				else Forge[jet].HB_EnergyTimer = TIME;
				}
			jet++;
			}
		}


	//########  - Avatar POWER Control -  ########//
	if(NetworkOption != 1)
		{
		if(player.Mposestate != 16)
			{
			Q_DeactivateItems();

			player.JINK3_PowerFactor -= ((0.08 / (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level + player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.JINKINC3intensity) / 10) + 1))) * TimeScale;
			if(player.JINK3_PowerFactor < 1) player.JINK3_PowerFactor = 1;

			Q_ActivateItems();
			}

		jet = 0;
		while(jet < NomAI)
			{
			if(Forge[jet].LIVE == 1)
				{
				if(Forge[jet].Mposestate != 16)
					{
					Q_DeactivateItemsAI(jet);

					Forge[jet].JINK3_PowerFactor -= ((0.08 / (((Forge[jet].CharDATA.Level + Forge[jet].CharDATA.BodySKILL.JINKINC3intensity) / 10) + 1))) * TimeScale;
					if(Forge[jet].JINK3_PowerFactor < 1) Forge[jet].JINK3_PowerFactor = 1;

					Q_ActivateItemsAI(jet);
					}
				}
			jet++;
			}
		}


	//########  - Avatar WEAPON BOOST Control -  ########//
	if(NetworkOption != 1)
		{
		if(player.Mposestate != 16)
			{
			player.JINK3_WeaponFactor -= (((3 / (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].Level + player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.JINKINC3intensity) / 10) + 1)) / 100)) * TimeScale;
			if(player.JINK3_WeaponFactor < 1) player.JINK3_WeaponFactor = 1;
			}

		jet = 0;
		while(jet < NomAI)
			{
			if(Forge[jet].LIVE == 1)
				{
				if(Forge[jet].Mposestate != 16)
					{
					Forge[jet].JINK3_WeaponFactor -= (((3 / (((Forge[jet].CharDATA.Level + Forge[jet].CharDATA.BodySKILL.JINKINC3intensity) / 10) + 1)) / 100)) * TimeScale;
					if(Forge[jet].JINK3_WeaponFactor < 1) Forge[jet].JINK3_WeaponFactor = 1;
					}
				}
			jet++;
			}
		}


	//########  - MELEE DAMAGE CONTROL -  ########//

	//###- Reset Melee Damage (player) -###
	if(TIME > player.HB_DmgSTORETimer + (45 * (1-(player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower/500))))
		{
		if(player.HB_DmgSTORE - (((25 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution/500))) * TimeScale) >= 0) player.HB_DmgSTORE -= (((25 * (player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Constitution/500))) * TimeScale);
		else player.HB_DmgSTORE = 0;
		}

	jet = 0;
	while(jet < NomAI)
		{
		if(Forge[jet].LIVE == 1)
			{
			//###- Reset Melee Damage (AI) -###
			if(TIME > Forge[jet].HB_DmgSTORETimer + (45 * (1-(Forge[jet].CharDATA.BodySKILL.DefPower/500))))
				{
				if(Forge[jet].HB_DmgSTORE - (((25 * (Forge[jet].CharDATA.BodySKILL.Constitution/500))) * TimeScale) >= 0) Forge[jet].HB_DmgSTORE -= (((25 * (Forge[jet].CharDATA.BodySKILL.Constitution/500))) * TimeScale);
				else Forge[jet].HB_DmgSTORE = 0;
				}
			}
		jet++;
		}


	//########  - IMPACT DAMAGE CONTROL -  ########//

	//###- Reset Impact Damage (player) -###
	if(TIME > player.BulletHitCntTimer + 15) player.BulletHitCnt = 0;

	//###- Regenerate Armour (player) -###
	if(TIME > player.BulletHitCntTimer + 40)
		{
		if(player.HB_Armour + (((float)(player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].ArmourREGEN / 5000) * 20) + ((player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].ArmourREGEN / 5000) * 20) + ((player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].ArmourREGEN / 5000) * 20) * TimeScale) <= player.HB_MaxArmour) player.HB_Armour += (((float)(player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrHEADARMOUR].ArmourREGEN / 5000) * 20) + ((player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrUPPERARMOUR].ArmourREGEN / 5000) * 20) + ((player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrLOWERARMOUR].ArmourREGEN / 5000) * 20) * TimeScale);
		else player.HB_Armour = player.HB_MaxArmour;
		}


	jet = 0;
	while(jet < NomAI)
		{
		if(Forge[jet].LIVE == 1)
			{
			//###- Reset Impact Damage (AI) -###
			if(TIME > Forge[jet].BulletHitCntTimer + 15) Forge[jet].BulletHitCnt = 0;

			//###- Regenerate Armour (AI) -###
			if(TIME > Forge[jet].BulletHitCntTimer + 40)
				{
				if(Forge[jet].HB_Armour + (((float)(Forge[jet].CharDATA.ItemDATA[Forge[jet].CharDATA.CurrHEADARMOUR].ArmourREGEN / 5000) * 20) + ((Forge[jet].CharDATA.ItemDATA[Forge[jet].CharDATA.CurrUPPERARMOUR].ArmourREGEN / 5000) * 20) + ((Forge[jet].CharDATA.ItemDATA[Forge[jet].CharDATA.CurrLOWERARMOUR].ArmourREGEN / 5000) * 20) * TimeScale) <= Forge[jet].HB_MaxArmour) Forge[jet].HB_Armour += (((float)(Forge[jet].CharDATA.ItemDATA[Forge[jet].CharDATA.CurrHEADARMOUR].ArmourREGEN / 5000) * 20) + ((Forge[jet].CharDATA.ItemDATA[Forge[jet].CharDATA.CurrUPPERARMOUR].ArmourREGEN / 5000) * 20) + ((Forge[jet].CharDATA.ItemDATA[Forge[jet].CharDATA.CurrLOWERARMOUR].ArmourREGEN / 5000) * 20) * TimeScale);
				else Forge[jet].HB_Armour = Forge[jet].HB_MaxArmour;
				}
			}
		jet++;
		}


	//########  - POWER BANK DAMAGE CONTROL -  ########//

	if(NetworkOption != 1)
		{
		//###- Reset Block Damage (player) -###
		if(TIME > player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.PBTIMER + (200 - ((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower)) / 2 )
			{
			if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK + (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower / 10) <= (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower + (float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Dexterity) * 2) + 100))
				player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK += (((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower / 10) * TimeScale);
			else player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK = ((((float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.DefPower + (float)player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Dexterity) * 2) + 100);
			}

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK < 0) player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.POWERBANK = 0;

		jet = 0;
		while(jet < NomAI)
			{
			if(Forge[jet].LIVE == 1)
				{
				//###- Reset Block Damage (AI) -###
				if(TIME > Forge[jet].CharDATA.BodySKILL.PBTIMER + (200 - ((float)Forge[jet].CharDATA.BodySKILL.DefPower)) / 2 )
					{
					if(Forge[jet].CharDATA.BodySKILL.POWERBANK + (((float)Forge[jet].CharDATA.BodySKILL.DefPower / 10) <= (((float)Forge[jet].CharDATA.BodySKILL.DefPower + (float)Forge[jet].CharDATA.BodySKILL.Dexterity) * 2) + 100))
						Forge[jet].CharDATA.BodySKILL.POWERBANK += (((float)Forge[jet].CharDATA.BodySKILL.DefPower / 10) * TimeScale);
					else Forge[jet].CharDATA.BodySKILL.POWERBANK = ((((float)Forge[jet].CharDATA.BodySKILL.DefPower + (float)Forge[jet].CharDATA.BodySKILL.Dexterity) * 2) + 100);

					if(Forge[jet].CharDATA.BodySKILL.POWERBANK < 0) Forge[jet].CharDATA.BodySKILL.POWERBANK = 0;
					}
				}
			jet++;
			}
		}


	/*if(KEY_DOWN(VK_F1))
		{
		player.Vehicle.Const_MiddleCOGDISTX -= 1;
		}

	if(KEY_DOWN(VK_F2))
		{
		player.Vehicle.Const_MiddleCOGDISTX += 1;
		}*/

	/*if(KEY_DOWN(VK_F3))
		{
		player.Vehicle.Const_MiddleCOGDISTY -= 1;
		}

	if(KEY_DOWN(VK_F4))
		{
		player.Vehicle.Const_MiddleCOGDISTY += 1;
		}

	if(KEY_DOWN(VK_F5))
		{
		player.Vehicle.Const_MiddleCOGDISTZ -= 1;
		}

	if(KEY_DOWN(VK_F6))
		{
		player.Vehicle.Const_MiddleCOGDISTZ += 1;
		}*/

	/*if(KEY_DOWN(0x31))
		{
		player.Vehicle.AttachTempROTX -= 1;
		}

	if(KEY_DOWN(0x32))
		{
		player.Vehicle.AttachTempROTX += 1;
		}*/

	if(KEY_DOWN(0x33))
		{
		player.Vehicle.AttachTempROTY -= 1;
		}

	if(KEY_DOWN(0x34))
		{
		player.Vehicle.AttachTempROTY += 1;
		}

	if(KEY_DOWN(0x35))
		{
		player.Vehicle.AttachTempROTZ -= 1;
		}

	if(KEY_DOWN(0x36))
		{
		player.Vehicle.AttachTempROTZ += 1;
		}


	//########  - Jinks -  ########//

	if(player.Q_Jink.Live == 1)
		{
		if(player.Q_Jink.ON > 0)
			{
			if(player.Q_Jink.Init == 0)
				{
				player.Q_Jink.Init = 1;

				//player.Q_Jink.Expandro.StartFade = 255;
				//player.Q_Jink.Expandro.Radius = 0;
				//player.Q_Jink.Expandro.MaterialCNT = 0;

				player.Q_Jink.SpinValue = 0;
				player.Q_Jink.SpinValueINC = -0.001;
				}

			geActor_GetBoneTransform(playact.Actor, player.Q_Jink.Limb, &player.Q_Jink.RoTMatrix);

			if(player.Q_Jink.FogON == 1)
				{
				if(player.Q_Jink.JFogExist == 0)
					{
					Fogo = geWorld_AddFog(World);
					player.Q_Jink.JFogExist = 1;
					player.Q_Jink.Light = geWorld_AddLight(World);

					if(player.Q_Jink.ON == 1)
						{
						player.Q_Jink.LightColor.r = 0;
						player.Q_Jink.LightColor.g = 0;
						player.Q_Jink.LightColor.b = 0;
						player.Q_Jink.LightColor.a = 255;
						}
					else
						{
						player.Q_Jink.LightColor.r = -255;
						player.Q_Jink.LightColor.g = -255;
						player.Q_Jink.LightColor.b = -255;
						player.Q_Jink.LightColor.a = 255;
						}
					}

				if(player.Q_Jink.ON == 1)
					{
					if(player.Q_Jink.JFogSize < 200) player.Q_Jink.JFogSize += 10;
					if(player.Q_Jink.JFogLight < 100) player.Q_Jink.JFogLight += 20;
					if(player.Q_Jink.JFogVLight > -2980) player.Q_Jink.JFogVLight -= 200;	//100 - 20
					}
				else
					{
					if(player.Q_Jink.JFogSize < 20000) player.Q_Jink.JFogSize += 50;
					if(player.Q_Jink.JFogLight < 500) player.Q_Jink.JFogLight += 20;
					if(player.Q_Jink.JFogVLight < 2980) player.Q_Jink.JFogVLight += 200;	//100 - 20
					}

				geXForm3d_GetUp(&playact.ActorXform,&player.Q_Jink.JFogIn);
				geVec3d_Inverse(&player.Q_Jink.JFogIn);
				geXForm3d_GetLeft(&playact.ActorXform,&player.Q_Jink.JFogLeft);

				player.Q_Jink.JFogPos = playact.ActorXform.Translation;
				player.Q_Jink.JFogPos.Y += 60;

				geVec3d_MA(&player.Q_Jink.JFogPos, 0, &player.Q_Jink.JFogIn, &player.Q_Jink.JFogFront);
				geFog_SetAttributes(Fogo, &player.Q_Jink.JFogFront, &fontcol, player.Q_Jink.JFogLight, player.Q_Jink.JFogVLight, player.Q_Jink.JFogSize);
				geWorld_SetLightAttributes(World, player.Q_Jink.Light, &player.Q_Jink.RoTMatrix.Translation, &player.Q_Jink.LightColor, player.Q_Jink.JFogLight*20, GE_TRUE);
				}

			
			if(player.Q_Jink.Expandro.StartFade >= 0)
				{
				helly = 0;
				while(helly < 2)
					{
					//geActor_GetBoneTransform(playact.Actor, "BIP01 HEAD", &player.Q_Jink.RoTMatrix);
					//player.Q_Jink.RoTMatrix = playact.ActorXform;
					//player.Q_Jink.RoTMatrix.Translation = Origin;

					geXForm3d_SetIdentity(&player.Q_Jink.RoTMatrix);
					geXForm3d_SetIdentity(&player.Q_Jink.RoTMatrix2);

					//geXForm3d_RotateZ(&player.Q_Jink.RoTMatrix, player.Q_Jink.SpinValue);
					//geXForm3d_Multiply(&player.Q_Jink.RoTMatrix, &player.Q_Jink.RoTMatrix2, &player.Q_Jink.RoTMatrix);

					player.Q_Jink.SpinValue -= player.Q_Jink.SpinValueINC;
					player.Q_Jink.SpinValueINC -= 0.0025;

					geXForm3d_SetZRotation(&player.Q_Jink.RoTMatrix2, 0.79);
					geXForm3d_Multiply(&player.Q_Jink.RoTMatrix, &player.Q_Jink.RoTMatrix2, &player.Q_Jink.RoTMatrix);
					geXForm3d_RotateY(&player.Q_Jink.RoTMatrix, player.Angles.Y + player.Q_Jink.SpinValue);

					//geXForm3d_SetZRotation(&player.Q_Jink.RoTMatrix2, 1.2);
					//geXForm3d_Multiply(&player.Q_Jink.RoTMatrix2, &player.Q_Jink.RoTMatrix, &player.Q_Jink.RoTMatrix);
					//geXForm3d_RotateY(&player.Q_Jink.RoTMatrix, ((((float)rand() / 32767) * 0.2)-0.1));
					//geXForm3d_RotateZ(&player.Q_Jink.RoTMatrix, 1.2);
					geXForm3d_GetIn(&player.Q_Jink.RoTMatrix, &player.Q_Jink.Expandro1.Leftvec);
					//geVec3d_Inverse(&player.Q_Jink.Expandro1.Leftvec);
					//geXForm3d_GetLeft(&player.Q_Jink.RoTMatrix,&player.Q_Jink.Expandro1.Leftvec);
					geXForm3d_GetUp(&player.Q_Jink.RoTMatrix, &player.Q_Jink.Expandro1.Upvec);

					//player.Q_Jink.RoTMatrix = playact.ActorXform;
					//player.Q_Jink.RoTMatrix.Translation = Origin;

					geXForm3d_SetIdentity(&player.Q_Jink.RoTMatrix);
					geXForm3d_SetIdentity(&player.Q_Jink.RoTMatrix2);

					//geXForm3d_RotateZ(&player.Q_Jink.RoTMatrix, player.Q_Jink.SpinValue2);
					//geXForm3d_Multiply(&player.Q_Jink.RoTMatrix, &player.Q_Jink.RoTMatrix2, &player.Q_Jink.RoTMatrix);

					//player.Q_Jink.SpinValue2 += player.Q_Jink.SpinValueINC2;
					//player.Q_Jink.SpinValueINC2 += 0.1;

					geXForm3d_SetZRotation(&player.Q_Jink.RoTMatrix2, -0.79);	//1.2
					geXForm3d_Multiply(&player.Q_Jink.RoTMatrix, &player.Q_Jink.RoTMatrix2, &player.Q_Jink.RoTMatrix);
					geXForm3d_RotateY(&player.Q_Jink.RoTMatrix, player.Angles.Y - player.Q_Jink.SpinValue);

					//geXForm3d_SetZRotation(&player.Q_Jink.RoTMatrix2, -1.2);
					//geXForm3d_Multiply(&player.Q_Jink.RoTMatrix2, &player.Q_Jink.RoTMatrix, &player.Q_Jink.RoTMatrix);
					//geXForm3d_RotateY(&player.Q_Jink.RoTMatrix, ((((float)rand() / 32767) * 0.2)-0.1));
					//geXForm3d_RotateZ(&player.Q_Jink.RoTMatrix, -1.2);
					geXForm3d_GetIn(&player.Q_Jink.RoTMatrix, &player.Q_Jink.Expandro2.Leftvec);
					//geVec3d_Inverse(&player.Q_Jink.Expandro2.Leftvec);
					//geXForm3d_GetLeft(&player.Q_Jink.RoTMatrix,&player.Q_Jink.Expandro2.Leftvec);
					geXForm3d_GetUp(&player.Q_Jink.RoTMatrix, &player.Q_Jink.Expandro2.Upvec);
				

					//NON PLAYER AVATAR
					//geActor_GetBoneTransform(Forge[player.Q_Jink.AvatarID].Avatar.Actor, "BIP01 HEAD", &player.Q_Jink.RoTMatrix);
					//geXForm3d_GetUp(&player.Q_Jink.RoTMatrix,&player.Q_Jink.Expandro.Leftvec);
					//geXForm3d_GetLeft(&player.Q_Jink.RoTMatrix,&player.Q_Jink.Expandro.Forvec);
					//geXForm3d_GetIn(&player.Q_Jink.RoTMatrix,&player.Q_Jink.Expandro.Upvec);


					player.Q_Jink.Expandro.Vert1 = playact.ActorXform.Translation;

					//NON PLAYER AVATAR
					//player.Q_Jink.Expandro.Vert1 = Forge[player.Q_Jink.AvatarID].Avatar.ActorXform.Translation;

					player.Q_Jink.Expandro.Vert1.Y += 60;

					if(helly == 0)
						{
						geVec3d_MA(&player.Q_Jink.Expandro.Vert1, player.Q_Jink.Expandro.Radius, &player.Q_Jink.Expandro1.Upvec, &player.Q_Jink.Expandro.Vert1);
												//Distance to the Left of the player
						geVec3d_MA(&player.Q_Jink.Expandro.Vert1, player.Q_Jink.Expandro.Radius, &player.Q_Jink.Expandro1.Leftvec, &player.Q_Jink.Expandro.Vert1);

										//Distance to the Right of the player from the left
						geVec3d_MA(&player.Q_Jink.Expandro.Vert1, -player.Q_Jink.Expandro.Radius * 2, &player.Q_Jink.Expandro1.Leftvec, &player.Q_Jink.Expandro.Vert2);

										//Distance to the Top of the player
						geVec3d_MA(&player.Q_Jink.Expandro.Vert2, -player.Q_Jink.Expandro.Radius * 2, &player.Q_Jink.Expandro1.Upvec, &player.Q_Jink.Expandro.Vert3);

										//Distance to the Top of the player
						geVec3d_MA(&player.Q_Jink.Expandro.Vert1, -player.Q_Jink.Expandro.Radius * 2, &player.Q_Jink.Expandro1.Upvec, &player.Q_Jink.Expandro.Vert4);
						}
					else
						{
						geVec3d_MA(&player.Q_Jink.Expandro.Vert1, player.Q_Jink.Expandro.Radius, &player.Q_Jink.Expandro2.Upvec, &player.Q_Jink.Expandro.Vert1);
												//Distance to the Left of the player
						geVec3d_MA(&player.Q_Jink.Expandro.Vert1, player.Q_Jink.Expandro.Radius, &player.Q_Jink.Expandro2.Leftvec, &player.Q_Jink.Expandro.Vert1);

										//Distance to the Right of the player from the left
						geVec3d_MA(&player.Q_Jink.Expandro.Vert1, -player.Q_Jink.Expandro.Radius * 2, &player.Q_Jink.Expandro2.Leftvec, &player.Q_Jink.Expandro.Vert2);

										//Distance to the Top of the player
						geVec3d_MA(&player.Q_Jink.Expandro.Vert2, -player.Q_Jink.Expandro.Radius * 2, &player.Q_Jink.Expandro2.Upvec, &player.Q_Jink.Expandro.Vert3);

										//Distance to the Top of the player
						geVec3d_MA(&player.Q_Jink.Expandro.Vert1, -player.Q_Jink.Expandro.Radius * 2, &player.Q_Jink.Expandro2.Upvec, &player.Q_Jink.Expandro.Vert4);
						}

					player.Q_Jink.Expandro.Lvert[0].a = player.Q_Jink.Expandro.StartFade;
					player.Q_Jink.Expandro.Lvert[0].b = 255;
					player.Q_Jink.Expandro.Lvert[0].g = 255;
					player.Q_Jink.Expandro.Lvert[0].r = 255;
					player.Q_Jink.Expandro.Lvert[0].u = 0;
					player.Q_Jink.Expandro.Lvert[0].v = 0;
					player.Q_Jink.Expandro.Lvert[0].X = player.Q_Jink.Expandro.Vert1.X;
					player.Q_Jink.Expandro.Lvert[0].Y = player.Q_Jink.Expandro.Vert1.Y;
					player.Q_Jink.Expandro.Lvert[0].Z = player.Q_Jink.Expandro.Vert1.Z;
					player.Q_Jink.Expandro.Lvert[1].a = player.Q_Jink.Expandro.StartFade;
					player.Q_Jink.Expandro.Lvert[1].b = 255;
					player.Q_Jink.Expandro.Lvert[1].g = 255;
					player.Q_Jink.Expandro.Lvert[1].r = 255;
					player.Q_Jink.Expandro.Lvert[1].u = 1;
					player.Q_Jink.Expandro.Lvert[1].v = 0;
					player.Q_Jink.Expandro.Lvert[1].X = player.Q_Jink.Expandro.Vert2.X;
					player.Q_Jink.Expandro.Lvert[1].Y = player.Q_Jink.Expandro.Vert2.Y;
					player.Q_Jink.Expandro.Lvert[1].Z = player.Q_Jink.Expandro.Vert2.Z;
					player.Q_Jink.Expandro.Lvert[2].a = player.Q_Jink.Expandro.StartFade;
					player.Q_Jink.Expandro.Lvert[2].b = 255;
					player.Q_Jink.Expandro.Lvert[2].g = 255;
					player.Q_Jink.Expandro.Lvert[2].r = 255;
					player.Q_Jink.Expandro.Lvert[2].u = 1;
					player.Q_Jink.Expandro.Lvert[2].v = 1;
					player.Q_Jink.Expandro.Lvert[2].X = player.Q_Jink.Expandro.Vert3.X;
					player.Q_Jink.Expandro.Lvert[2].Y = player.Q_Jink.Expandro.Vert3.Y;
					player.Q_Jink.Expandro.Lvert[2].Z = player.Q_Jink.Expandro.Vert3.Z;
					player.Q_Jink.Expandro.Lvert[3].a = player.Q_Jink.Expandro.StartFade;
					player.Q_Jink.Expandro.Lvert[3].b = 255;
					player.Q_Jink.Expandro.Lvert[3].g = 255;
					player.Q_Jink.Expandro.Lvert[3].r = 255;
					player.Q_Jink.Expandro.Lvert[3].u = 0;
					player.Q_Jink.Expandro.Lvert[3].v = 1;
					player.Q_Jink.Expandro.Lvert[3].X = player.Q_Jink.Expandro.Vert4.X;
					player.Q_Jink.Expandro.Lvert[3].Y = player.Q_Jink.Expandro.Vert4.Y;
					player.Q_Jink.Expandro.Lvert[3].Z = player.Q_Jink.Expandro.Vert4.Z;

						
					//if(player.Q_Jink.Expandro.Radius < 80) player.Q_Jink.Expandro.Radius += (80/10) * TimeScale;	//15	//30
					//if(player.Q_Jink.Expandro.StartFade > 0) player.Q_Jink.Expandro.StartFade -= 12 * TimeScale;	//20
					//else player.Q_Jink.Expandro.StartFade = 0;

					if(player.Q_Jink.Expandro.Radius < 50) player.Q_Jink.Expandro.Radius += (50/10) * TimeScale;	//15	//30
					if(player.Q_Jink.Expandro.StartFade > 0) player.Q_Jink.Expandro.StartFade -= 12 * TimeScale;	//20
					else player.Q_Jink.Expandro.StartFade = 0;
					
					player.Q_Jink.Expandro.MaterialCNT = ((1 - ( player.Q_Jink.Expandro.Radius / 50 )) * 15 );
					if(player.Q_Jink.Expandro.MaterialCNT > 15) player.Q_Jink.Expandro.MaterialCNT = 15;
					if(player.Q_Jink.Expandro.MaterialCNT < 0) player.Q_Jink.Expandro.MaterialCNT = 0;

					//FROZEN
					if(player.Q_Jink.Expandro.StartFade > 0) geWorld_AddPolyOnce(World, &player.Q_Jink.Expandro.Lvert[0], 4, JEnergy[player.Q_Jink.Expandro.MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);//player.Q_Jink.Expandro.Radius/170);
					//player.Q_Jink.Expandro.Lvert[0].a /= 3;
					//geWorld_AddPolyOnce(World, &player.Q_Jink.Expandro.Lvert[0], 1, JEnergy[player.Q_Jink.Expandro.MaterialCNT], GE_TEXTURED_POINT, GE_RENDER_DO_NOT_OCCLUDE_SELF, player.Q_Jink.Expandro.Radius/150);

					helly++;
					}
				}
			}
		else
			{
			player.Q_Jink.Init = 0;

			if(player.Q_Jink.JFogVLight < 0)
				{
				if(player.Q_Jink.JFogSize > 0) player.Q_Jink.JFogSize -= 10;

				if(player.Q_Jink.JFogLight > 0) player.Q_Jink.JFogLight -= 20;

				if(player.Q_Jink.JFogVLight < 0) player.Q_Jink.JFogVLight += 300;	//3000


				geXForm3d_GetUp(&playact.ActorXform,&player.Q_Jink.JFogIn);

				geVec3d_Inverse(&player.Q_Jink.JFogIn);

				geXForm3d_GetLeft(&playact.ActorXform,&player.Q_Jink.JFogLeft);

				player.Q_Jink.JFogPos = playact.ActorXform.Translation;
				player.Q_Jink.JFogPos.Y += 60;

				geVec3d_MA(&player.Q_Jink.JFogPos, 0, &player.Q_Jink.JFogIn, &player.Q_Jink.JFogFront);

				geFog_SetAttributes(Fogo, &player.Q_Jink.JFogFront, &fontcol, player.Q_Jink.JFogLight, player.Q_Jink.JFogVLight, player.Q_Jink.JFogSize);
				
				//player.Q_Jink.Expandro.StartFade = 255;
				//player.Q_Jink.Expandro.Radius = 0;
				}
			else
				{
				player.Q_Jink.JFogSize = 0;
				player.Q_Jink.JFogLight = 0;
				player.Q_Jink.JFogVLight = 0;

				if(player.Q_Jink.JFogExist == 1)
					{
					geWorld_RemoveFog(World, Fogo);
					geWorld_RemoveLight(World, player.Q_Jink.Light);
					player.Q_Jink.JFogExist = 0;
					player.Q_Jink.Live = 0;
					}
				}
			}
		}


	//########  - TIME CONTROL -  ########//

	if(TimeHole != 0)
		{
		if(TimeInit == 0)
			{
			player.STRAngles = player.Angles;
			TimeInit = 1;

			geSound3D_GetConfig(World, &player.ViewXForm,&player.RFistPos.Translation,600.0f,2.0f,&Volume,&Pan,&Frequency);
			geSound_PlaySoundDef(SoundSys, S_MatStart, Volume, Pan, S_TimeScale, GE_FALSE);
			}

		TimeScale = (TimeFactor/1000)*TimeScaleREAL;

		if(!(KEY_DOWN(0x58) && (player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].ScopeTYPE > 0)))
			{
			player.camrotdist = ( 90 + ( 55 * ( 1 - TimeScale ) ) );
			player.WeaponZoomFACT = ( ( /*1 -*/ TimeScale ) * -15 );	//-5	//-3
			}


		if(TimeHoleDir == 0)
			{
			TimeFactor -= 334*TimeScaleREAL;	//250 V_Good
			if(TimeFactor < 1)
				{
				TimeFactor = 1;
				TimeHoleDir = 1;
				}
			}

		if(TimeHoleDir == 1)
			{
			if(TimeHole == 1) TimeFactor *= 1+(0.25*TimeScaleREAL);	//1.35
			if(TimeHole == 2) TimeFactor *= 1+(0.8*TimeScaleREAL);
			if(TimeHole == 3) TimeFactor *= 1+(TimeScaleREAL);
			if(TimeHole == 4) TimeFactor *= 1+(0.1*TimeScaleREAL);
			if(TimeHole == 5)
				{
				if(player.attackon == 1) TimeFactor = 750*TimeScaleREAL;
				else TimeFactor *= 1+(0.25*TimeScaleREAL);
				}

			if(TimeScale >= (0.4*TimeScaleREAL) && TimeHole != 5)
				{
				if(TimeRotate == 0)	TimeReset = 1;
				}


			if(TimeScale >= (0.7*TimeScaleREAL) && TimeHole != 5)
				{
				//geSound3D_GetConfig(World, &player.ViewXForm,&player.RFistPos.Translation,600.0f,2.0f,&Volume,&Pan,&Frequency);
				//geSound_PlaySoundDef(SoundSys, S_MatEnd, Volume, Pan, S_TimeScale, GE_FALSE);
				}


			if(TimeScale > (1*TimeScaleREAL))
				{
				TimeScale = (1*TimeScaleREAL);
				TimeFactor = 1000;
				TimeHoleDir = 0;
				TimeHole = 0;
				TimeInit = 0;
				TimeRotate = 0;
				JinkTime = 0;
				if(!(KEY_DOWN(0x58) && (player.CDATA->CharDATA[player.CDATA->CurrCHAR].ItemDATA[player.CDATA->CharDATA[player.CDATA->CurrCHAR].CurrWEAPON].ScopeTYPE > 0)))
					{
					player.camrotdist = 140;
					player.WeaponZoomFACT = 0;
					}
				}
			}

		//#####---  Set Sound Timescale  ---#####
		S_TimeScale = TimeScale;
		if(FRLON == 1) S_TimeScale *= FRLresult / FRLtarget;
		S_TimeScale = ((S_TimeScale / 2) + 0.5);
		}
	else
		{
		if(TimeReset == 1 && TimePlayerLock == 0)
			{
			if(!(((player.STRAngles.Y - player.Angles.Y) < 0.08) && ((player.STRAngles.Y - player.Angles.Y) > -0.08)))
				{
				if(player.Angles.Y > player.STRAngles.Y)
					{
					player.Angles.Y += (player.STRAngles.Y - player.Angles.Y)/3;
					}

				if(player.Angles.Y < player.STRAngles.Y)
					{
					player.Angles.Y += (player.STRAngles.Y - player.Angles.Y)/3;
					}
				}
			else
				{
				player.Angles.Y = player.STRAngles.Y;
				TimeReset = 0;
				}
			}

		//#####---  Set Timescale  ---#####
		TimeScale = TimeScaleREAL;

		S_TimeScale = 1;
		if(FRLON == 1) S_TimeScale *= FRLresult / FRLtarget;
		S_TimeScale = ((S_TimeScale / 2) + 0.5);
		}


		//########  - CLERIC SUB-SYSTEMS -  ########//


	//########  - CLERIC SPELL SYSTEM -  ########//

	if(NetworkOption != 1)
		{
		if(NomSpell > 0)
			{
			aero = 0;
			while(aero < NomSpell)
				{
				if(Q_ClericSpell[aero].Live == 1)
					{
					helly=0;
					while(helly < Q_ClericSpell[aero].NumSpheres)
						{
						//Rotate GOOD
						//geXForm3d_SetXRotation(&rotmat, 0.05);
						//geXForm3d_Multiply(&Q_ClericSpell[aero].SphereMatrix, &rotmat, &Q_ClericSpell[aero].SphereMatrix);

						//geXForm3d_SetYRotation(&rotmat, (float)helly/15);
						//geXForm3d_Multiply(&Q_ClericSpell[aero].SphereMatrix, &rotmat, &Q_ClericSpell[aero].SphereMatrix);
						

						//Rotate
						//geXForm3d_SetXRotation(&rotmat, 0.01);	//0.01 X
						//geXForm3d_Multiply(&Q_ClericSpell[aero].SphereMatrix, &rotmat, &Q_ClericSpell[aero].SphereMatrix);

						if((Q_ClericSpell[aero].NumSpheres == 1) || ((helly == 0) && (Q_ClericSpell[aero].Absorbed > 0)))
							{
							//geXForm3d_SetZRotation(&rotmat, 0.09);
							//geXForm3d_Multiply(&Q_ClericSpell[aero].SphereMatrix, &rotmat, &Q_ClericSpell[aero].SphereMatrix);
							Q_ClericSpell[aero].Sphere[helly].Vert1 = Q_ClericSpell[aero].Sphere[0].Pos;

							geXForm3d_SetXRotation(&rotmat, 0.05);
							geXForm3d_Multiply(&Q_ClericSpell[aero].SphereMatrix, &rotmat, &Q_ClericSpell[aero].SphereMatrix);
							}
						else
							{
							geXForm3d_SetZRotation(&rotmat, (float)helly/2);
							geXForm3d_Multiply(&Q_ClericSpell[aero].SphereMatrix, &rotmat, &Q_ClericSpell[aero].SphereMatrix);
							Q_ClericSpell[aero].Sphere[helly].Vert1 = Q_ClericSpell[aero].LightPos;
							}

						geXForm3d_GetIn(&Q_ClericSpell[aero].SphereMatrix, &Q_ClericSpell[aero].Sphere[helly].Leftvec);
						geXForm3d_GetUp(&Q_ClericSpell[aero].SphereMatrix, &Q_ClericSpell[aero].Sphere[helly].Upvec);

						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert1, Q_ClericSpell[aero].Sphere[helly].Radius, &Q_ClericSpell[aero].Sphere[helly].Upvec, &Q_ClericSpell[aero].Sphere[helly].Vert1);
										//Distance to the Left of the player
						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert1, Q_ClericSpell[aero].Sphere[helly].Radius, &Q_ClericSpell[aero].Sphere[helly].Leftvec, &Q_ClericSpell[aero].Sphere[helly].Vert1);

										//Distance to the Right of the player from the left
						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert1, -Q_ClericSpell[aero].Sphere[helly].Radius * 2, &Q_ClericSpell[aero].Sphere[helly].Leftvec, &Q_ClericSpell[aero].Sphere[helly].Vert2);

										//Distance to the Top of the player
						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert2, -Q_ClericSpell[aero].Sphere[helly].Radius * 2, &Q_ClericSpell[aero].Sphere[helly].Upvec, &Q_ClericSpell[aero].Sphere[helly].Vert3);

										//Distance to the Top of the player
						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert1, -Q_ClericSpell[aero].Sphere[helly].Radius * 2, &Q_ClericSpell[aero].Sphere[helly].Upvec, &Q_ClericSpell[aero].Sphere[helly].Vert4);

						Q_ClericSpell[aero].Sphere[helly].Lvert[0].a = Q_ClericSpell[aero].Sphere[helly].StartFade;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].b = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].g = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].r = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].u = 0;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].v = 0;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].X = Q_ClericSpell[aero].Sphere[helly].Vert1.X;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].Y = Q_ClericSpell[aero].Sphere[helly].Vert1.Y;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].Z = Q_ClericSpell[aero].Sphere[helly].Vert1.Z;

						Q_ClericSpell[aero].Sphere[helly].Lvert[1].a = Q_ClericSpell[aero].Sphere[helly].StartFade;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].b = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].g = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].r = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].u = 1;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].v = 0;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].X = Q_ClericSpell[aero].Sphere[helly].Vert2.X;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].Y = Q_ClericSpell[aero].Sphere[helly].Vert2.Y;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].Z = Q_ClericSpell[aero].Sphere[helly].Vert2.Z;

						Q_ClericSpell[aero].Sphere[helly].Lvert[2].a = Q_ClericSpell[aero].Sphere[helly].StartFade;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].b = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].g = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].r = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].u = 1;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].v = 1;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].X = Q_ClericSpell[aero].Sphere[helly].Vert3.X;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].Y = Q_ClericSpell[aero].Sphere[helly].Vert3.Y;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].Z = Q_ClericSpell[aero].Sphere[helly].Vert3.Z;

						Q_ClericSpell[aero].Sphere[helly].Lvert[3].a = Q_ClericSpell[aero].Sphere[helly].StartFade;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].b = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].g = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].r = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].u = 0;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].v = 1;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].X = Q_ClericSpell[aero].Sphere[helly].Vert4.X;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].Y = Q_ClericSpell[aero].Sphere[helly].Vert4.Y;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].Z = Q_ClericSpell[aero].Sphere[helly].Vert4.Z;

						geWorld_AddPolyOnce(World, &Q_ClericSpell[aero].Sphere[helly].Lvert[0], 4, HealSphere, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
						
						if(Q_ClericSpell[aero].Sphere[helly].Radius < Q_ClericSpell[aero].Sphere[helly].MaxRadius) Q_ClericSpell[aero].Sphere[helly].Radius += ((Q_ClericSpell[aero].Sphere[helly].MaxRadius / (Q_ClericSpell[aero].Sphere[helly].Radius + 3)  ) / 3 ) * TimeScale;
						//}
					//else
						//{
						//if(Q_ClericSpell[aero].Sphere[helly].Fade - (10*TimeScale) >= 0) Q_ClericSpell[aero].Sphere[helly].Fade -= 10*TimeScale;
						//else
						//	{
						//	Q_ClericSpell[aero].Sphere[helly].Radius = 301;
						//	Q_MeleeHit[aero].Live = 0;
						//	geWorld_RemoveLight(World, Q_MeleeHit[aero].Light);
						//	}
						//if(Q_ClericSpell[aero].Sphere[helly].Fade >= 0)
						//	{
						//	Q_ClericSpell[aero].Sphere[helly].Lvert[0].a = Q_ClericSpell[aero].Sphere[helly].Fade;
						//	Q_ClericSpell[aero].Sphere[helly].Lvert[1].a = Q_ClericSpell[aero].Sphere[helly].Fade;
						//	Q_ClericSpell[aero].Sphere[helly].Lvert[2].a = Q_ClericSpell[aero].Sphere[helly].Fade;
						//	Q_ClericSpell[aero].Sphere[helly].Lvert[3].a = Q_ClericSpell[aero].Sphere[helly].Fade;
						//	if(Q_MeleeHit[aero].BlockHit == 0) geWorld_AddPolyOnce(World, &Q_ClericSpell[aero].Sphere[helly].Lvert[0], 4, Pulsar[Q_ClericSpell[aero].Sphere[helly].MaterialCNT], GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_SELF, Q_ClericSpell[aero].Sphere[helly].Scale);
						//	else geWorld_AddPolyOnce(World, &Q_ClericSpell[aero].Sphere[helly].Lvert[0], 4, expandro1, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, Q_ClericSpell[aero].Sphere[helly].Scale);
						//	}
						//}
					

						helly++;
						}

					if(Q_ClericSpell[aero].Released == 1 && Q_ClericSpell[aero].Absorbed == 0)
						{
						if(Q_ClericSpell[aero].HealTarget == 250)
							{
							Q_ClericSpell[aero].TargetVec = playact.ActorXform.Translation;
							Q_ClericSpell[aero].TargetVec.Y += 65;
							}
						else
							{
							Q_ClericSpell[aero].TargetVec = Forge[Q_ClericSpell[aero].HealTarget].Avatar.ActorXform.Translation;
							Q_ClericSpell[aero].TargetVec.Y += 65;
							}

						geVec3d_Subtract(&Q_ClericSpell[aero].TargetVec, &Q_ClericSpell[aero].LightPos, &Q_ClericSpell[aero].TargetVec);
						Q_ClericSpell[aero].LightSpeed = ( geVec3d_Length(&Q_ClericSpell[aero].TargetVec) / 5 ) + 8;

						if(geVec3d_Length(&Q_ClericSpell[aero].TargetVec) < 20)
							{
							Q_ClericSpell[aero].Absorbed = 1;
							Q_ClericSpell[aero].LightPow = 200;
							}

						geVec3d_Normalize(&Q_ClericSpell[aero].TargetVec);
						geVec3d_MA(&Q_ClericSpell[aero].LightPos, Q_ClericSpell[aero].LightSpeed * TimeScale, &Q_ClericSpell[aero].TargetVec, &Q_ClericSpell[aero].LightPos);
						}

					if(Q_ClericSpell[aero].Absorbed == 1)
						{
						if(Q_ClericSpell[aero].HealTarget == 250)
							{
							Q_ClericSpell[aero].TargetVec = playact.ActorXform.Translation;
							Q_ClericSpell[aero].TargetVec.Y += 65;
							}
						else
							{
							Q_ClericSpell[aero].TargetVec = Forge[Q_ClericSpell[aero].HealTarget].Avatar.ActorXform.Translation;
							Q_ClericSpell[aero].TargetVec.Y += 65;
							}

						Q_ClericSpell[aero].LightPos = Q_ClericSpell[aero].TargetVec;

						if(Q_ClericSpell[aero].LightPow < 700)
							{
							Q_ClericSpell[aero].LightPow += 200;
							
							//##### Insert Effect Here
							}
						else
							{
							Q_ClericSpell[aero].Absorbed = 2;
							
							//##### ACTIVATE SPELL

							if(Q_ClericSpell[aero].ActorID == 250)
								{

								if(Q_ClericSpell[aero].HealTarget == 250)
									{
									Q_DeactivateItems();

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].LIVE = 1;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_TYPE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_INTENSITY;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_SWITCH;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_IntBoost = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_IntBoost;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_EnergyEff = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_EnergyEff;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Height = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Height;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Weight = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Weight;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Strength = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Strength;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Quickness = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Quickness;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Dexterity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Dexterity;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Constitution = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Constitution;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_AggPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_AggPower;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_DefPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_DefPower;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_RArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RArmStr;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_LArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LArmStr;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_RLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RLegStr;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_LLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LLegStr;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_RArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RArmSnap;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_LArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LArmSnap;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_RLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RLegSnap;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_LLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LLegSnap;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_WEPAccuracy = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPAccuracy;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_WEPDrawSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPDrawSPD;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_WEPReloadSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPReloadSPD;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_WEPRecoilHR = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPRecoilHR;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_JINKmovespeed = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_JINKmovespeed;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_JINKpower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_JINKpower;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_JINK3intensity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_JINK3intensity;

									player.SLOTINC++;
									if(player.SLOTINC > 2) player.SLOTINC = 0;

									//### Write out CHARDATA
									WriteNEWCharacterData(player.CDATA);

									Q_ActivateItems();

									jet=0;
									while(jet < NETNomNetplayer)
										{
										Netplayer[jet].UpdateCHAR = 3;
										jet++;
										}
									}
								else
									{
									Q_DeactivateItemsAI(Q_ClericSpell[aero].HealTarget);

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].LIVE = 1;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_TYPE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_INTENSITY;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_SWITCH;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_IntBoost = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_IntBoost;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_EnergyEff = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_EnergyEff;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Height = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Height;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Weight = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Weight;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Strength = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Strength;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Quickness = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Quickness;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Dexterity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Dexterity;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Constitution = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Constitution;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_AggPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_AggPower;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_DefPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_DefPower;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RArmStr;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LArmStr;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RLegStr;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LLegStr;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RArmSnap;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LArmSnap;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RLegSnap;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LLegSnap;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPAccuracy = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPAccuracy;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPDrawSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPDrawSPD;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPReloadSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPReloadSPD;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPRecoilHR = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPRecoilHR;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINKmovespeed = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_JINKmovespeed;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINKpower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_JINKpower;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINK3intensity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_JINK3intensity;


									if(Forge[Q_ClericSpell[aero].HealTarget].NETPLAYERFLAG == 0)
										{
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].LIVE = 1;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_TYPE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_TYPE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_INTENSITY = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_INTENSITY;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_SWITCH = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_SWITCH;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL00ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL01ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL02ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL03ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04RED = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04GREEN = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04BLUE = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04ALPHA = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_EFFECT_COL04ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_IntBoost = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_IntBoost;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_EnergyEff = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_EnergyEff;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Height = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Height;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Weight = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Weight;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Strength = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Strength;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Quickness = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Quickness;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Dexterity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Dexterity;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Constitution = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_Constitution;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_AggPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_AggPower;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_DefPower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_DefPower;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RArmStr;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LArmStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LArmStr;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RLegStr;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LLegStr = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LLegStr;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RArmSnap;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LArmSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LArmSnap;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_RLegSnap;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LLegSnap = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_LLegSnap;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPAccuracy = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPAccuracy;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPDrawSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPDrawSPD;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPReloadSPD = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPReloadSPD;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPRecoilHR = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_WEPRecoilHR;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINKmovespeed = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_JINKmovespeed;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINKpower = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_JINKpower;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINK3intensity = player.CDATA->CharDATA[player.CDATA->CurrCHAR].Spells[player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellContainerID[player.Cleric.SpellPNTR]].QA_SPELLINC_JINK3intensity;
										}

									Forge[Q_ClericSpell[aero].HealTarget].SLOTINC++;
									if(Forge[Q_ClericSpell[aero].HealTarget].SLOTINC > 2) Forge[Q_ClericSpell[aero].HealTarget].SLOTINC = 0;


									Q_ActivateItemsAI(Q_ClericSpell[aero].HealTarget);

									jet=0;
									while(jet < NETNomNetplayer)
										{
										Netplayer[jet].UpdateCHAR = 3;
										jet++;
										}
									}
								}//END ACTORID == 250
							else
								{
								if(Q_ClericSpell[aero].HealTarget == 250)
									{
									Q_DeactivateItems();

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].LIVE = 1;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_TYPE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_TYPE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_INTENSITY = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_INTENSITY;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_SWITCH = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_SWITCH;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL00RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL00GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL00BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL00ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL01RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL01GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL01BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL01ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL02RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL02GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL02BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL02ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL03RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL03GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL03BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL03ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL04RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04RED;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL04GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04GREEN;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL04BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04BLUE;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_EFFECT_COL04ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04ALPHA;

									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_IntBoost = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_IntBoost;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_EnergyEff = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_EnergyEff;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Height = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Height;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Weight = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Weight;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Strength = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Strength;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Quickness = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Quickness;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Dexterity = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Dexterity;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_Constitution = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Constitution;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_AggPower = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_AggPower;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_DefPower = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_DefPower;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_RArmStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RArmStr;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_LArmStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LArmStr;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_RLegStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RLegStr;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_LLegStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LLegStr;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_RArmSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RArmSnap;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_LArmSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LArmSnap;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_RLegSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RLegSnap;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_LLegSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LLegSnap;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_WEPAccuracy = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPAccuracy;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_WEPDrawSPD = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPDrawSPD;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_WEPReloadSPD = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPReloadSPD;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_WEPRecoilHR = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPRecoilHR;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_JINKmovespeed = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_JINKmovespeed;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_JINKpower = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_JINKpower;
									player.CDATA->CharDATA[player.CDATA->CurrCHAR].SpellSLOT[player.SLOTINC].QA_SPELLINC_JINK3intensity = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_JINK3intensity;

									player.SLOTINC++;
									if(player.SLOTINC > 2) player.SLOTINC = 0;

									//### Write out CHARDATA
									WriteNEWCharacterData(player.CDATA);

									Q_ActivateItems();

									jet=0;
									while(jet < NETNomNetplayer)
										{
										Netplayer[jet].UpdateCHAR = 3;
										jet++;
										}
									}
								else
									{
									Q_DeactivateItemsAI(Q_ClericSpell[aero].HealTarget);

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].LIVE = 1;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_TYPE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_TYPE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_INTENSITY = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_INTENSITY;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_SWITCH = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_SWITCH;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04RED;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04GREEN;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04BLUE;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04ALPHA;

									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_IntBoost = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_IntBoost;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_EnergyEff = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_EnergyEff;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Height = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Height;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Weight = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Weight;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Strength = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Strength;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Quickness = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Quickness;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Dexterity = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Dexterity;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Constitution = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Constitution;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_AggPower = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_AggPower;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_DefPower = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_DefPower;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RArmStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RArmStr;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LArmStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LArmStr;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RLegStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RLegStr;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LLegStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LLegStr;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RArmSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RArmSnap;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LArmSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LArmSnap;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RLegSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RLegSnap;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LLegSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LLegSnap;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPAccuracy = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPAccuracy;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPDrawSPD = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPDrawSPD;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPReloadSPD = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPReloadSPD;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPRecoilHR = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPRecoilHR;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINKmovespeed = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_JINKmovespeed;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINKpower = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_JINKpower;
									Forge[Q_ClericSpell[aero].HealTarget].CharDATA.SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINK3intensity = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_JINK3intensity;


									if(Forge[Q_ClericSpell[aero].HealTarget].NETPLAYERFLAG == 0)
										{
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].LIVE = 1;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_TYPE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_TYPE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_INTENSITY = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_INTENSITY;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_SWITCH = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_SWITCH;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL00ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL00ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL01ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL01ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL02ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL02ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL03ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL03ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04RED = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04RED;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04GREEN = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04GREEN;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04BLUE = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04BLUE;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_EFFECT_COL04ALPHA = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_EFFECT_COL04ALPHA;

										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_IntBoost = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_IntBoost;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_EnergyEff = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_EnergyEff;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Height = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Height;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Weight = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Weight;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Strength = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Strength;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Quickness = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Quickness;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Dexterity = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Dexterity;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_Constitution = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_Constitution;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_AggPower = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_AggPower;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_DefPower = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_DefPower;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RArmStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RArmStr;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LArmStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LArmStr;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RLegStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RLegStr;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LLegStr = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LLegStr;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RArmSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RArmSnap;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LArmSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LArmSnap;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_RLegSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_RLegSnap;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_LLegSnap = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_LLegSnap;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPAccuracy = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPAccuracy;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPDrawSPD = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPDrawSPD;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPReloadSPD = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPReloadSPD;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_WEPRecoilHR = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_WEPRecoilHR;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINKmovespeed = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_JINKmovespeed;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINKpower = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_JINKpower;
										player.CDATA->CharDATA[player.CDATA->AVATARDATA[Forge[Q_ClericSpell[aero].HealTarget].AVDATID].CDATID].SpellSLOT[Forge[Q_ClericSpell[aero].HealTarget].SLOTINC].QA_SPELLINC_JINK3intensity = Forge[Q_ClericSpell[aero].ActorID].CharDATA.Spells[Forge[Q_ClericSpell[aero].ActorID].CharDATA.SpellContainerID[Forge[Q_ClericSpell[aero].ActorID].Cleric.SpellPNTR]].QA_SPELLINC_JINK3intensity;
										}

									Forge[Q_ClericSpell[aero].HealTarget].SLOTINC++;
									if(Forge[Q_ClericSpell[aero].HealTarget].SLOTINC > 2) Forge[Q_ClericSpell[aero].HealTarget].SLOTINC = 0;


									Q_ActivateItemsAI(Q_ClericSpell[aero].HealTarget);

									jet=0;
									while(jet < NETNomNetplayer)
										{
										Netplayer[jet].UpdateCHAR = 3;
										jet++;
										}
									}
								}//END ACTORID != 250

							}
						}

					if(Q_ClericSpell[aero].Absorbed == 2)
						{
						if(Q_ClericSpell[aero].ActorID == 250)
							{
							Q_ClericSpell[aero].TargetVec = playact.ActorXform.Translation;
							Q_ClericSpell[aero].TargetVec.Y += 65;
							geVec3d_Subtract(&Q_ClericSpell[aero].TargetVec, &Q_ClericSpell[aero].LightPos, &Q_ClericSpell[aero].TargetVec);
							Q_ClericSpell[aero].LightSpeed = ( geVec3d_Length(&Q_ClericSpell[aero].TargetVec) / 5 ) + 8;
							}
						else
							{
							Q_ClericSpell[aero].TargetVec = Forge[Q_ClericSpell[aero].ActorID].Avatar.ActorXform.Translation;
							Q_ClericSpell[aero].TargetVec.Y += 65;
							geVec3d_Subtract(&Q_ClericSpell[aero].TargetVec, &Q_ClericSpell[aero].LightPos, &Q_ClericSpell[aero].TargetVec);
							Q_ClericSpell[aero].LightSpeed = ( geVec3d_Length(&Q_ClericSpell[aero].TargetVec) / 5 ) + 8;
							}

						if(geVec3d_Length(&Q_ClericSpell[aero].TargetVec) < 20)
							{
							Q_ClericSpell[aero].Absorbed = 3;
							Q_ClericSpell[aero].LightPow = 200;
							if(Q_ClericSpell[aero].LightON == 1) geWorld_RemoveLight(World, Q_ClericSpell[aero].Light);
							Q_ClericSpell[aero].LightInit = 0;
							Q_ClericSpell[aero].LightON = 0;
							Q_ClericSpell[aero].NumSpheres = 1;
							}

						geVec3d_Normalize(&Q_ClericSpell[aero].TargetVec);
						geVec3d_MA(&Q_ClericSpell[aero].LightPos, Q_ClericSpell[aero].LightSpeed * TimeScale, &Q_ClericSpell[aero].TargetVec, &Q_ClericSpell[aero].LightPos);
						}

					if(Q_ClericSpell[aero].NumSpheres == 1)
						{
						if(Q_ClericSpell[aero].Sphere[0].StartFade - 5 > 25) Q_ClericSpell[aero].Sphere[0].StartFade -= 5;
						else Q_ClericSpell[aero].Sphere[0].StartFade = 25;

						//#### INCREMENT TIMER
						Q_ClericSpell[aero].TimerCNT -= TimeScale;

						if(Q_ClericSpell[aero].TimerCNT <= 0)
							{
							Q_ClericSpell[aero].Live = 0;

							//### Array Reorder
							K = aero;
							while(K < NomSpell - 1)
								{
								Q_ClericSpell[K] = Q_ClericSpell[K+1];
								K++;
								}

							NomSpell--;
							}
						}
					else
						{
						if(Q_ClericSpell[aero].Sphere[0].StartFade < 125) Q_ClericSpell[aero].Sphere[0].StartFade += 10;
						if(Q_ClericSpell[aero].Sphere[1].StartFade < 125) Q_ClericSpell[aero].Sphere[1].StartFade += 10;
						if(Q_ClericSpell[aero].Sphere[2].StartFade < 125) Q_ClericSpell[aero].Sphere[2].StartFade += 10;
						if(Q_ClericSpell[aero].Sphere[3].StartFade < 125) Q_ClericSpell[aero].Sphere[3].StartFade += 10;
						}

					if(Q_ClericSpell[aero].Absorbed > 0)
						{
						if(Q_ClericSpell[aero].HealTarget == 250)
							{
							Q_ClericSpell[aero].Sphere[0].Pos = playact.ActorXform.Translation;
							Q_ClericSpell[aero].Sphere[0].Pos.Y += 65;
							}
						else
							{
							Q_ClericSpell[aero].Sphere[0].Pos = Forge[Q_ClericSpell[aero].HealTarget].Avatar.ActorXform.Translation;
							Q_ClericSpell[aero].Sphere[0].Pos.Y += 65;
							}
						}

					if(Q_ClericSpell[aero].LightON == 1) geWorld_SetLightAttributes(World, Q_ClericSpell[aero].Light, &Q_ClericSpell[aero].LightPos, &Q_ClericSpell[aero].LightColor, 200, GE_TRUE);
						

					if(KEY_DOWN(VK_F5))
						{
						if(Q_ClericSpell[aero].LightON == 1) geWorld_RemoveLight(World, Q_ClericSpell[aero].Light);
						Q_ClericSpell[aero].LightInit = 0;
						Q_ClericSpell[aero].Live = 0;
						Q_ClericSpell[aero].Absorbed = 0;

						//### Energy Array Reorder
						K = aero;
						while(K < NomSpell - 1)
							{
							Q_ClericSpell[K] = Q_ClericSpell[K+1];
							K++;
							}

						NomSpell--;
						}

					}

				aero++;
				}
			}
		}
	else	//###### Phantom Cleric Spells
		{
		if(NomSpell > 0)
			{
			aero = 0;
			while(aero < NomSpell)
				{
				if(Q_ClericSpell[aero].Live == 1)
					{
					if(Q_ClericSpell[aero].LightON == 0)
						{
						Q_ClericSpell[aero].Light = geWorld_AddLight(World);
						Q_ClericSpell[aero].LightColor.r = 255;
						Q_ClericSpell[aero].LightColor.g = 255;
						Q_ClericSpell[aero].LightColor.b = 255;
						Q_ClericSpell[aero].LightON = 1;
						}

					helly=0;
					while(helly < Q_ClericSpell[aero].NumSpheres)
						{
						if((Q_ClericSpell[aero].NumSpheres == 1) || ((helly == 0) && (Q_ClericSpell[aero].Absorbed > 0)))
							{
							Q_ClericSpell[aero].Sphere[helly].Vert1 = Q_ClericSpell[aero].Sphere[0].Pos;
							}
						else
							{
							Q_ClericSpell[aero].Sphere[helly].Vert1 = Q_ClericSpell[aero].LightPos;
							}

						if(Q_ClericSpell[aero].NumSpheres == 1)
							{
							Q_ClericSpell[aero].Upvec = Q_ClericSpell[aero].Sphere[0].Upvec;
							Q_ClericSpell[aero].Leftvec = Q_ClericSpell[aero].Sphere[0].Leftvec;
							Q_ClericSpell[aero].Radius = Q_ClericSpell[aero].Sphere[0].Radius;
							Q_ClericSpell[aero].StartFade = Q_ClericSpell[aero].Sphere[0].StartFade;
							}
						else
							{
							Q_ClericSpell[aero].Upvec = Q_ClericSpell[aero].Sphere[helly].Upvec;
							Q_ClericSpell[aero].Leftvec = Q_ClericSpell[aero].Sphere[helly].Leftvec;
							Q_ClericSpell[aero].Radius = Q_ClericSpell[aero].Sphere[1].Radius;
							Q_ClericSpell[aero].StartFade = Q_ClericSpell[aero].Sphere[1].StartFade;
							}

						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert1, Q_ClericSpell[aero].Radius, &Q_ClericSpell[aero].Upvec, &Q_ClericSpell[aero].Sphere[helly].Vert1);
										//Distance to the Left of the player
						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert1, Q_ClericSpell[aero].Radius, &Q_ClericSpell[aero].Leftvec, &Q_ClericSpell[aero].Sphere[helly].Vert1);

										//Distance to the Right of the player from the left
						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert1, -Q_ClericSpell[aero].Radius * 2, &Q_ClericSpell[aero].Leftvec, &Q_ClericSpell[aero].Sphere[helly].Vert2);

										//Distance to the Top of the player
						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert2, -Q_ClericSpell[aero].Radius * 2, &Q_ClericSpell[aero].Upvec, &Q_ClericSpell[aero].Sphere[helly].Vert3);

										//Distance to the Top of the player
						geVec3d_MA(&Q_ClericSpell[aero].Sphere[helly].Vert1, -Q_ClericSpell[aero].Radius * 2, &Q_ClericSpell[aero].Upvec, &Q_ClericSpell[aero].Sphere[helly].Vert4);

						Q_ClericSpell[aero].Sphere[helly].Lvert[0].a = Q_ClericSpell[aero].StartFade;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].b = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].g = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].r = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].u = 0;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].v = 0;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].X = Q_ClericSpell[aero].Sphere[helly].Vert1.X;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].Y = Q_ClericSpell[aero].Sphere[helly].Vert1.Y;
						Q_ClericSpell[aero].Sphere[helly].Lvert[0].Z = Q_ClericSpell[aero].Sphere[helly].Vert1.Z;

						Q_ClericSpell[aero].Sphere[helly].Lvert[1].a = Q_ClericSpell[aero].StartFade;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].b = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].g = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].r = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].u = 1;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].v = 0;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].X = Q_ClericSpell[aero].Sphere[helly].Vert2.X;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].Y = Q_ClericSpell[aero].Sphere[helly].Vert2.Y;
						Q_ClericSpell[aero].Sphere[helly].Lvert[1].Z = Q_ClericSpell[aero].Sphere[helly].Vert2.Z;

						Q_ClericSpell[aero].Sphere[helly].Lvert[2].a = Q_ClericSpell[aero].StartFade;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].b = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].g = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].r = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].u = 1;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].v = 1;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].X = Q_ClericSpell[aero].Sphere[helly].Vert3.X;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].Y = Q_ClericSpell[aero].Sphere[helly].Vert3.Y;
						Q_ClericSpell[aero].Sphere[helly].Lvert[2].Z = Q_ClericSpell[aero].Sphere[helly].Vert3.Z;

						Q_ClericSpell[aero].Sphere[helly].Lvert[3].a = Q_ClericSpell[aero].StartFade;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].b = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].g = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].r = 255;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].u = 0;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].v = 1;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].X = Q_ClericSpell[aero].Sphere[helly].Vert4.X;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].Y = Q_ClericSpell[aero].Sphere[helly].Vert4.Y;
						Q_ClericSpell[aero].Sphere[helly].Lvert[3].Z = Q_ClericSpell[aero].Sphere[helly].Vert4.Z;

						geWorld_AddPolyOnce(World, &Q_ClericSpell[aero].Sphere[helly].Lvert[0], 4, HealSphere, GE_TEXTURED_POLY, GE_RENDER_DO_NOT_OCCLUDE_OTHERS, 1.0f);
	
						helly++;
						}

					if(Q_ClericSpell[aero].Absorbed > 0)
						{
						if(Q_ClericSpell[aero].HealTarget == 250)
							{
							Q_ClericSpell[aero].Sphere[0].Pos = playact.ActorXform.Translation;
							Q_ClericSpell[aero].Sphere[0].Pos.Y += 65;
							}
						else
							{
							Q_ClericSpell[aero].Sphere[0].Pos = Forge[Q_ClericSpell[aero].HealTarget].Avatar.ActorXform.Translation;
							Q_ClericSpell[aero].Sphere[0].Pos.Y += 65;
							}
						}

					if(Q_ClericSpell[aero].NumSpheres == 1)
						{
						Q_ClericSpell[aero].LightPow = 200;
						if(Q_ClericSpell[aero].LightON == 1) geWorld_RemoveLight(World, Q_ClericSpell[aero].Light);
						Q_ClericSpell[aero].LightInit = 0;
						Q_ClericSpell[aero].LightON = 0;
						}

					if(Q_ClericSpell[aero].LightON == 1) geWorld_SetLightAttributes(World, Q_ClericSpell[aero].Light, &Q_ClericSpell[aero].LightPos, &Q_ClericSpell[aero].LightColor, 200, GE_TRUE);
					}

				aero++;
				}
			}
		}


	//#####- PLAYER WIND WAKE -#####
	if(player.WindWake == 1)
		{
		Q_WindWake[250].MAINALPHA += 15*TimeScale;
		if((Q_WindWake[250].MAINALPHA > Q_WindWake[250].AlphaMAX) && Q_WindWake[250].AlphaMAX != 0) Q_WindWake[250].MAINALPHA = Q_WindWake[250].AlphaMAX;
		}
	else
		{
		Q_WindWake[250].MAINALPHA -= 6*TimeScale;	//15
		if(Q_WindWake[250].MAINALPHA < 0) Q_WindWake[250].MAINALPHA = 0;
		}


	if(Q_WindWake[250].MAINALPHA > 0)
		{
		//#### Default Values for standard JUMP
		Q_WindWake[250].Pos = playact.ActorXform.Translation;
		Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 72.5;
		Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 143;
		Q_WindWake[250].AlphaMAX = 45;

		//### Change Scale and center point depending on attack type
		if(player.Aposestate == 24)	//Jump Kick
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 65;	//82.5
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 125;
			Q_WindWake[250].AlphaMAX = 35;
			}

		if(player.Aposestate == 22)	//Leap Spin Kick
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 82.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 160;
			Q_WindWake[250].AlphaMAX = 40;
			}

		if(player.Aposestate == 76) // JSRush UP
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 87.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 115;
			Q_WindWake[250].AlphaMAX = 50;
			}

		if(player.Aposestate == 74)	//JSRush Punch
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 82.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 140;
			Q_WindWake[250].AlphaMAX = 40;
			}

		if(player.Aposestate == 73)	//JSRUSH
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 82.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 150;
			Q_WindWake[250].AlphaMAX = 90;
			}

		if(player.Aposestate == 61)	//Twist Kick
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 82.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 150;
			Q_WindWake[250].AlphaMAX = 40;
			}

		if(player.Aposestate == 65)	//Rush Elbow
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 57.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 105;
			Q_WindWake[250].AlphaMAX = 80;
			}

		if(player.Aposestate == 84)	//Overhead Pinwheel
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 67.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 115;
			Q_WindWake[250].AlphaMAX = 65;
			}

		if(player.Aposestate == 81)	//Spin Out Left
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 82.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 140;
			Q_WindWake[250].AlphaMAX = 40;
			}

		if(player.Mposestate == 26)	//Roll Forward
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 52.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 100;
			Q_WindWake[250].AlphaMAX = 30;
			}

		if(player.Mposestate == 28)	//Roll Left
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 52.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 100;
			Q_WindWake[250].AlphaMAX = 25;
			}

		if(player.Mposestate == 29)	//Roll Right
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 52.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 100;
			Q_WindWake[250].AlphaMAX = 25;
			}

		if(player.Mposestate == 8)	//BackFlip
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 60;	//82.5
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 145;
			Q_WindWake[250].AlphaMAX = 45;
			}

		if(player.Mposestate == 23)	//Cartwheel Left
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 82.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 145;
			Q_WindWake[250].AlphaMAX = 30;
			}

		if(player.Mposestate == 24)	//Cartwheel Right
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 82.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 145;
			Q_WindWake[250].AlphaMAX = 30;
			}

		if(player.Mposestate == 15)	//Air Rush Forward
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 82.5;
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 125;
			Q_WindWake[250].AlphaMAX = 65;
			}

		if(player.Vehicle.JINKrush == 1)	//Vehicle JSRush
			{
			Q_WindWake[250].Pos = playact.ActorXform.Translation;
			Q_WindWake[250].Pos.Y += (75 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 60;	//82.5
			Q_WindWake[250].Scale = (100 * (((player.CDATA->CharDATA[player.CDATA->CurrCHAR].BodySKILL.Height/100)-0.5)*1)) + 145;
			Q_WindWake[250].AlphaMAX = 45;
			}

		//#### Revert to WindWake Memory
		if(player.WindWake == 0)
			{
			Q_WindWake[250].Pos = Q_WindWake[250].MeMPos;	//82.5
			Q_WindWake[250].Scale = Q_WindWake[250].MeMScale;
			Q_WindWake[250].AlphaMAX = Q_WindWake[250].MeMAlphaMAX;
			}

		if((player.INvectorAPC.X == 0 && player.INvectorAPC.Y == 0 && player.INvectorAPC.Z == 0) || (player.INvectorAPC.X < 0.025 && player.INvectorAPC.Y < 0.025 && player.INvectorAPC.Z < 0.025)) player.INvectorAPC = Q_WindWake[250].MeMINvectorAPC;


		//##### Calculate Direction Vectors
		geXForm3d_SetYRotation(&RotateMatrix, PI/2);
		geXForm3d_Rotate(&RotateMatrix, &player.INvectorAPC, &player.LEFTvectorAPC);
		player.LEFTvectorAPC.Y = 0;
		geVec3d_Normalize(&player.LEFTvectorAPC);

		geVec3d_CrossProduct(&player.LEFTvectorAPC, &player.INvectorAPC, &player.UPvectorAPC);
		geVec3d_Normalize(&player.UPvectorAPC);

		if(player.INvectorAPC.Y != 1)
			{
			Q_WindWake[250].VecIn = player.INvectorAPC;
			Q_WindWake[250].VecUp = player.UPvectorAPC;
			Q_WindWake[250].VecLeft = player.LEFTvectorAPC;
			}
		else
			{
			geXForm3d_GetUp(&playact.ActorXform, &Q_WindWake[250].VecUp);
			geVec3d_Inverse(&Q_WindWake[250].VecUp);
			geXForm3d_GetLeft(&playact.ActorXform, &Q_WindWake[250].VecLeft);
			Q_WindWake[250].VecIn.X = 0;
			Q_WindWake[250].VecIn.Y = 1;
			Q_WindWake[250].VecIn.Z = 0;
			}

		geVec3d_MA(&Q_WindWake[250].Pos, 45, &Q_WindWake[250].VecIn, &Q_WindWake[250].Pos);
		Q_WindWake[250].STRPos = Q_WindWake[250].Pos;

		Q_WindWake[250].Type = GE_TEXTURED_POLY;
		Q_WindWake[250].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
		Q_WindWake[250].ScaleBIT = 1.0f;
		//END INIT

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE == 0)
			{
			Q_WindWake[250].MaterialCNT++;
			if(Q_WindWake[250].MaterialCNT < 124) Q_WindWake[250].MaterialCNT = 124;
			if(Q_WindWake[250].MaterialCNT > 136) Q_WindWake[250].MaterialCNT = 124;
			}

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE == 1)
			{
			Q_WindWake[250].MaterialCNT++;
			if(Q_WindWake[250].MaterialCNT < 82) Q_WindWake[250].MaterialCNT = 82;
			if(Q_WindWake[250].MaterialCNT > 96) Q_WindWake[250].MaterialCNT = 82;
			}

		//####### Store WindWake Memory
		if(player.WindWake == 1)
			{
			Q_WindWake[250].MeMPos = Q_WindWake[250].Pos;
			Q_WindWake[250].MeMScale = Q_WindWake[250].Scale;
			Q_WindWake[250].MeMAlphaMAX = Q_WindWake[250].AlphaMAX;

			Q_WindWake[250].MeMINvectorAPC = player.INvectorAPC;

			Q_WindWake[250].MeMJinkSpecialON = player.JinkSpecialON;
			}


			//### FRONT VERT
		Q_WindWake[250].VertFNT = Q_WindWake[250].STRPos;


			//### Shift Back for second ring					//15
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/20, &Q_WindWake[250].VecIn, &Q_WindWake[250].Pos);


			//##### RING TWO
					//TOP VERT1
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/8, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM1);

					//TOP VERT15
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/9, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM15);
		geVec3d_MA(&Q_WindWake[250].VertM15, -Q_WindWake[250].Scale/14.75, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM15);

					//TOP VERT2
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/11.5, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM2);
		geVec3d_MA(&Q_WindWake[250].VertM2, -Q_WindWake[250].Scale/11.5, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM2);

					//TOP VERT25
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/14.75, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM25);
		geVec3d_MA(&Q_WindWake[250].VertM25, -Q_WindWake[250].Scale/9, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM25);

					//TOP VERT3
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/8, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM3);

					//TOP VERT35
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/14.75, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM35);
		geVec3d_MA(&Q_WindWake[250].VertM35, -Q_WindWake[250].Scale/9, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM35);

					//TOP VERT4
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/11.5, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM4);
		geVec3d_MA(&Q_WindWake[250].VertM4, -Q_WindWake[250].Scale/11.5, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM4);

					//TOP VERT45
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/9, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM45);
		geVec3d_MA(&Q_WindWake[250].VertM45, -Q_WindWake[250].Scale/14.75, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM45);

					//TOP VERT5
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/8, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM5);

					//TOP VERT55
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/9, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM55);
		geVec3d_MA(&Q_WindWake[250].VertM55, Q_WindWake[250].Scale/14.75, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM55);

					//TOP VERT6
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/11.5, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM6);
		geVec3d_MA(&Q_WindWake[250].VertM6, Q_WindWake[250].Scale/11.5, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM6);

					//TOP VERT65
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/14.75, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM65);
		geVec3d_MA(&Q_WindWake[250].VertM65, Q_WindWake[250].Scale/9, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM65);

					//TOP VERT7
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/8, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM7);

					//TOP VERT75
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/14.75, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM75);
		geVec3d_MA(&Q_WindWake[250].VertM75, Q_WindWake[250].Scale/9, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM75);

					//TOP VERT8
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/11.5, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM8);
		geVec3d_MA(&Q_WindWake[250].VertM8, Q_WindWake[250].Scale/11.5, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM8);

					//TOP VERT85
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/9, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertM85);
		geVec3d_MA(&Q_WindWake[250].VertM85, Q_WindWake[250].Scale/14.75, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertM85);



			//### Shift Back for first ring					//4   11
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/5, &Q_WindWake[250].VecIn, &Q_WindWake[250].Pos);
		geVec3d_MA(&Q_WindWake[250].STRPos, -Q_WindWake[250].Scale/5, &Q_WindWake[250].VecIn, &Q_WindWake[250].STRPos);
		
		
			//##### RING ONE
					//TOP VERT1
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/3, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT1);

					//TOP VERT15
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/3.15, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT15);
		geVec3d_MA(&Q_WindWake[250].VertT15, -Q_WindWake[250].Scale/11, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT15);

					//TOP VERT2
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/4, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT2);
		geVec3d_MA(&Q_WindWake[250].VertT2, -Q_WindWake[250].Scale/4, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT2);

					//TOP VERT25
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/11, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT25);
		geVec3d_MA(&Q_WindWake[250].VertT25, -Q_WindWake[250].Scale/3.15, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT25);

					//TOP VERT3
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/3, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT3);

					//TOP VERT35
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/11, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT35);
		geVec3d_MA(&Q_WindWake[250].VertT35, -Q_WindWake[250].Scale/3.15, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT35);

					//TOP VERT4
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/4, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT4);
		geVec3d_MA(&Q_WindWake[250].VertT4, -Q_WindWake[250].Scale/4, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT4);

					//TOP VERT45
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/3.15, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT45);
		geVec3d_MA(&Q_WindWake[250].VertT45, -Q_WindWake[250].Scale/11, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT45);

					//TOP VERT5
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/3, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT5);

					//TOP VERT55
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/3.15, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT55);
		geVec3d_MA(&Q_WindWake[250].VertT55, Q_WindWake[250].Scale/11, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT55);

					//TOP VERT6
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/4, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT6);
		geVec3d_MA(&Q_WindWake[250].VertT6, Q_WindWake[250].Scale/4, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT6);

					//TOP VERT65
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/11, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT65);
		geVec3d_MA(&Q_WindWake[250].VertT65, Q_WindWake[250].Scale/3.15, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT65);

					//TOP VERT7
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/3, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT7);

					//TOP VERT75
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/11, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT75);
		geVec3d_MA(&Q_WindWake[250].VertT75, Q_WindWake[250].Scale/3.15, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT75);

					//TOP VERT8
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/4, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT8);
		geVec3d_MA(&Q_WindWake[250].VertT8, Q_WindWake[250].Scale/4, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT8);

					//TOP VERT85
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/3.15, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertT85);
		geVec3d_MA(&Q_WindWake[250].VertT85, Q_WindWake[250].Scale/11, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertT85);


			//### Shift Back for second ring				// 3 <- V GOOD         3.5	4.5
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/3.35, &Q_WindWake[250].VecIn, &Q_WindWake[250].Pos);


			//##### RING TWO
					//TOP VERT1
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/2.7, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB1);

					//TOP VERT15
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/3, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB15);
		geVec3d_MA(&Q_WindWake[250].VertB15, -Q_WindWake[250].Scale/8.2, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB15);

					//TOP VERT2
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/3.5, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB2);
		geVec3d_MA(&Q_WindWake[250].VertB2, -Q_WindWake[250].Scale/3.5, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB2);

					//TOP VERT25
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/8.2, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB25);
		geVec3d_MA(&Q_WindWake[250].VertB25, -Q_WindWake[250].Scale/3, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB25);

					//TOP VERT3
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/2.7, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB3);

					//TOP VERT35
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/8.2, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB35);
		geVec3d_MA(&Q_WindWake[250].VertB35, -Q_WindWake[250].Scale/3, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB35);

					//TOP VERT4
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/3.5, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB4);
		geVec3d_MA(&Q_WindWake[250].VertB4, -Q_WindWake[250].Scale/3.5, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB4);

					//TOP VERT45
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/3, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB45);
		geVec3d_MA(&Q_WindWake[250].VertB45, -Q_WindWake[250].Scale/8.2, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB45);

					//TOP VERT5
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/2.7, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB5);

					//TOP VERT55
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/3, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB55);
		geVec3d_MA(&Q_WindWake[250].VertB55, Q_WindWake[250].Scale/8.2, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB55);

					//TOP VERT6
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/3.5, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB6);
		geVec3d_MA(&Q_WindWake[250].VertB6, Q_WindWake[250].Scale/3.5, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB6);

					//TOP VERT65
		geVec3d_MA(&Q_WindWake[250].Pos, -Q_WindWake[250].Scale/8.2, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB65);
		geVec3d_MA(&Q_WindWake[250].VertB65, Q_WindWake[250].Scale/3, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB65);

					//TOP VERT7
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/2.7, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB7);

					//TOP VERT75
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/8.2, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB75);
		geVec3d_MA(&Q_WindWake[250].VertB75, Q_WindWake[250].Scale/3, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB75);

					//TOP VERT8
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/3.5, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB8);
		geVec3d_MA(&Q_WindWake[250].VertB8, Q_WindWake[250].Scale/3.5, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB8);

					//TOP VERT85
		geVec3d_MA(&Q_WindWake[250].Pos, Q_WindWake[250].Scale/3, &Q_WindWake[250].VecUp, &Q_WindWake[250].VertB85);
		geVec3d_MA(&Q_WindWake[250].VertB85, Q_WindWake[250].Scale/8.2, &Q_WindWake[250].VecLeft, &Q_WindWake[250].VertB85);


				a=0;
				while( a <= 47 )
					{
					b=0;
					while( b <= 3 )
						{
						if(player.WindWake == 1)
							{
							if(player.JinkSpecialON < 1)
								{
								Q_WindWake[250].Lvert[a][b].a = Q_WindWake[250].MAINALPHA;
								Q_WindWake[250].Lvert[a][b].b = 255;
								Q_WindWake[250].Lvert[a][b].g = 255;
								Q_WindWake[250].Lvert[a][b].r = 255;
								}
							else
								{
								Q_WindWake[250].Lvert[a][b].a = Q_WindWake[250].MAINALPHA;
								Q_WindWake[250].Lvert[a][b].b = player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkBLUE;
								Q_WindWake[250].Lvert[a][b].g = player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkGREEN;
								Q_WindWake[250].Lvert[a][b].r = player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkRED;
								}
							}
						else
							{
							if(Q_WindWake[250].MeMJinkSpecialON < 1)
								{
								Q_WindWake[250].Lvert[a][b].a = Q_WindWake[250].MAINALPHA;
								Q_WindWake[250].Lvert[a][b].b = 255;
								Q_WindWake[250].Lvert[a][b].g = 255;
								Q_WindWake[250].Lvert[a][b].r = 255;
								}
							else
								{
								Q_WindWake[250].Lvert[a][b].a = Q_WindWake[250].MAINALPHA;
								Q_WindWake[250].Lvert[a][b].b = player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkBLUE;
								Q_WindWake[250].Lvert[a][b].g = player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkGREEN;
								Q_WindWake[250].Lvert[a][b].r = player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkRED;
								}
							}
						b++;
						}
					a++;
					}


					//##### - FRONT CUP

					Q_WindWake[250].Lvert[0][0].u = 0.5;
					Q_WindWake[250].Lvert[0][0].v = 0;
					Q_WindWake[250].Lvert[0][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[0][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[0][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[0][1].u = 1;
					Q_WindWake[250].Lvert[0][1].v = 1;
					Q_WindWake[250].Lvert[0][1].X = Q_WindWake[250].VertM15.X;
					Q_WindWake[250].Lvert[0][1].Y = Q_WindWake[250].VertM15.Y;
					Q_WindWake[250].Lvert[0][1].Z = Q_WindWake[250].VertM15.Z;

					
					Q_WindWake[250].Lvert[0][2].u = 0;
					Q_WindWake[250].Lvert[0][2].v = 1;
					Q_WindWake[250].Lvert[0][2].X = Q_WindWake[250].VertM1.X;
					Q_WindWake[250].Lvert[0][2].Y = Q_WindWake[250].VertM1.Y;
					Q_WindWake[250].Lvert[0][2].Z = Q_WindWake[250].VertM1.Z;


					Q_WindWake[250].Lvert[1][0].u = 0.5;
					Q_WindWake[250].Lvert[1][0].v = 0;
					Q_WindWake[250].Lvert[1][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[1][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[1][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[1][1].u = 1;
					Q_WindWake[250].Lvert[1][1].v = 1;
					Q_WindWake[250].Lvert[1][1].X = Q_WindWake[250].VertM25.X;
					Q_WindWake[250].Lvert[1][1].Y = Q_WindWake[250].VertM25.Y;
					Q_WindWake[250].Lvert[1][1].Z = Q_WindWake[250].VertM25.Z;

							
					Q_WindWake[250].Lvert[1][2].u = 0;
					Q_WindWake[250].Lvert[1][2].v = 1;
					Q_WindWake[250].Lvert[1][2].X = Q_WindWake[250].VertM2.X;
					Q_WindWake[250].Lvert[1][2].Y = Q_WindWake[250].VertM2.Y;
					Q_WindWake[250].Lvert[1][2].Z = Q_WindWake[250].VertM2.Z;


					Q_WindWake[250].Lvert[2][0].u = 0.5;
					Q_WindWake[250].Lvert[2][0].v = 0;
					Q_WindWake[250].Lvert[2][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[2][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[2][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[2][1].u = 1;
					Q_WindWake[250].Lvert[2][1].v = 1;
					Q_WindWake[250].Lvert[2][1].X = Q_WindWake[250].VertM35.X;
					Q_WindWake[250].Lvert[2][1].Y = Q_WindWake[250].VertM35.Y;
					Q_WindWake[250].Lvert[2][1].Z = Q_WindWake[250].VertM35.Z;

							
					Q_WindWake[250].Lvert[2][2].u = 0;
					Q_WindWake[250].Lvert[2][2].v = 1;
					Q_WindWake[250].Lvert[2][2].X = Q_WindWake[250].VertM3.X;
					Q_WindWake[250].Lvert[2][2].Y = Q_WindWake[250].VertM3.Y;
					Q_WindWake[250].Lvert[2][2].Z = Q_WindWake[250].VertM3.Z;


					Q_WindWake[250].Lvert[3][0].u = 0.5;
					Q_WindWake[250].Lvert[3][0].v = 0;
					Q_WindWake[250].Lvert[3][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[3][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[3][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[3][1].u = 1;
					Q_WindWake[250].Lvert[3][1].v = 1;
					Q_WindWake[250].Lvert[3][1].X = Q_WindWake[250].VertM45.X;
					Q_WindWake[250].Lvert[3][1].Y = Q_WindWake[250].VertM45.Y;
					Q_WindWake[250].Lvert[3][1].Z = Q_WindWake[250].VertM45.Z;

							
					Q_WindWake[250].Lvert[3][2].u = 0;
					Q_WindWake[250].Lvert[3][2].v = 1;
					Q_WindWake[250].Lvert[3][2].X = Q_WindWake[250].VertM4.X;
					Q_WindWake[250].Lvert[3][2].Y = Q_WindWake[250].VertM4.Y;
					Q_WindWake[250].Lvert[3][2].Z = Q_WindWake[250].VertM4.Z;


					Q_WindWake[250].Lvert[4][0].u = 0.5;
					Q_WindWake[250].Lvert[4][0].v = 0;
					Q_WindWake[250].Lvert[4][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[4][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[4][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[4][1].u = 1;
					Q_WindWake[250].Lvert[4][1].v = 1;
					Q_WindWake[250].Lvert[4][1].X = Q_WindWake[250].VertM55.X;
					Q_WindWake[250].Lvert[4][1].Y = Q_WindWake[250].VertM55.Y;
					Q_WindWake[250].Lvert[4][1].Z = Q_WindWake[250].VertM55.Z;

							
					Q_WindWake[250].Lvert[4][2].u = 0;
					Q_WindWake[250].Lvert[4][2].v = 1;
					Q_WindWake[250].Lvert[4][2].X = Q_WindWake[250].VertM5.X;
					Q_WindWake[250].Lvert[4][2].Y = Q_WindWake[250].VertM5.Y;
					Q_WindWake[250].Lvert[4][2].Z = Q_WindWake[250].VertM5.Z;


					Q_WindWake[250].Lvert[5][0].u = 0.5;
					Q_WindWake[250].Lvert[5][0].v = 0;
					Q_WindWake[250].Lvert[5][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[5][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[5][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[5][1].u = 1;
					Q_WindWake[250].Lvert[5][1].v = 1;
					Q_WindWake[250].Lvert[5][1].X = Q_WindWake[250].VertM65.X;
					Q_WindWake[250].Lvert[5][1].Y = Q_WindWake[250].VertM65.Y;
					Q_WindWake[250].Lvert[5][1].Z = Q_WindWake[250].VertM65.Z;

							
					Q_WindWake[250].Lvert[5][2].u = 0;
					Q_WindWake[250].Lvert[5][2].v = 1;
					Q_WindWake[250].Lvert[5][2].X = Q_WindWake[250].VertM6.X;
					Q_WindWake[250].Lvert[5][2].Y = Q_WindWake[250].VertM6.Y;
					Q_WindWake[250].Lvert[5][2].Z = Q_WindWake[250].VertM6.Z;


					Q_WindWake[250].Lvert[6][0].u = 0.5;
					Q_WindWake[250].Lvert[6][0].v = 0;
					Q_WindWake[250].Lvert[6][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[6][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[6][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[6][1].u = 1;
					Q_WindWake[250].Lvert[6][1].v = 1;
					Q_WindWake[250].Lvert[6][1].X = Q_WindWake[250].VertM75.X;
					Q_WindWake[250].Lvert[6][1].Y = Q_WindWake[250].VertM75.Y;
					Q_WindWake[250].Lvert[6][1].Z = Q_WindWake[250].VertM75.Z;

							
					Q_WindWake[250].Lvert[6][2].u = 0;
					Q_WindWake[250].Lvert[6][2].v = 1;
					Q_WindWake[250].Lvert[6][2].X = Q_WindWake[250].VertM7.X;
					Q_WindWake[250].Lvert[6][2].Y = Q_WindWake[250].VertM7.Y;
					Q_WindWake[250].Lvert[6][2].Z = Q_WindWake[250].VertM7.Z;


					Q_WindWake[250].Lvert[7][0].u = 0.5;
					Q_WindWake[250].Lvert[7][0].v = 0;
					Q_WindWake[250].Lvert[7][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[7][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[7][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[7][1].u = 1;
					Q_WindWake[250].Lvert[7][1].v = 1;
					Q_WindWake[250].Lvert[7][1].X = Q_WindWake[250].VertM85.X;
					Q_WindWake[250].Lvert[7][1].Y = Q_WindWake[250].VertM85.Y;
					Q_WindWake[250].Lvert[7][1].Z = Q_WindWake[250].VertM85.Z;

							
					Q_WindWake[250].Lvert[7][2].u = 0;
					Q_WindWake[250].Lvert[7][2].v = 1;
					Q_WindWake[250].Lvert[7][2].X = Q_WindWake[250].VertM8.X;
					Q_WindWake[250].Lvert[7][2].Y = Q_WindWake[250].VertM8.Y;
					Q_WindWake[250].Lvert[7][2].Z = Q_WindWake[250].VertM8.Z;


					Q_WindWake[250].Lvert[8][0].u = 0.5;
					Q_WindWake[250].Lvert[8][0].v = 0;
					Q_WindWake[250].Lvert[8][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[8][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[8][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[8][1].u = 1;
					Q_WindWake[250].Lvert[8][1].v = 1;
					Q_WindWake[250].Lvert[8][1].X = Q_WindWake[250].VertM2.X;
					Q_WindWake[250].Lvert[8][1].Y = Q_WindWake[250].VertM2.Y;
					Q_WindWake[250].Lvert[8][1].Z = Q_WindWake[250].VertM2.Z;

					
					Q_WindWake[250].Lvert[8][2].u = 0;
					Q_WindWake[250].Lvert[8][2].v = 1;
					Q_WindWake[250].Lvert[8][2].X = Q_WindWake[250].VertM15.X;
					Q_WindWake[250].Lvert[8][2].Y = Q_WindWake[250].VertM15.Y;
					Q_WindWake[250].Lvert[8][2].Z = Q_WindWake[250].VertM15.Z;


					Q_WindWake[250].Lvert[9][0].u = 0.5;
					Q_WindWake[250].Lvert[9][0].v = 0;
					Q_WindWake[250].Lvert[9][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[9][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[9][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[9][1].u = 1;
					Q_WindWake[250].Lvert[9][1].v = 1;
					Q_WindWake[250].Lvert[9][1].X = Q_WindWake[250].VertM3.X;
					Q_WindWake[250].Lvert[9][1].Y = Q_WindWake[250].VertM3.Y;
					Q_WindWake[250].Lvert[9][1].Z = Q_WindWake[250].VertM3.Z;

							
					Q_WindWake[250].Lvert[9][2].u = 0;
					Q_WindWake[250].Lvert[9][2].v = 1;
					Q_WindWake[250].Lvert[9][2].X = Q_WindWake[250].VertM25.X;
					Q_WindWake[250].Lvert[9][2].Y = Q_WindWake[250].VertM25.Y;
					Q_WindWake[250].Lvert[9][2].Z = Q_WindWake[250].VertM25.Z;


					Q_WindWake[250].Lvert[10][0].u = 0.5;
					Q_WindWake[250].Lvert[10][0].v = 0;
					Q_WindWake[250].Lvert[10][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[10][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[10][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[10][1].u = 1;
					Q_WindWake[250].Lvert[10][1].v = 1;
					Q_WindWake[250].Lvert[10][1].X = Q_WindWake[250].VertM4.X;
					Q_WindWake[250].Lvert[10][1].Y = Q_WindWake[250].VertM4.Y;
					Q_WindWake[250].Lvert[10][1].Z = Q_WindWake[250].VertM4.Z;

							
					Q_WindWake[250].Lvert[10][2].u = 0;
					Q_WindWake[250].Lvert[10][2].v = 1;
					Q_WindWake[250].Lvert[10][2].X = Q_WindWake[250].VertM35.X;
					Q_WindWake[250].Lvert[10][2].Y = Q_WindWake[250].VertM35.Y;
					Q_WindWake[250].Lvert[10][2].Z = Q_WindWake[250].VertM35.Z;


					Q_WindWake[250].Lvert[11][0].u = 0.5;
					Q_WindWake[250].Lvert[11][0].v = 0;
					Q_WindWake[250].Lvert[11][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[11][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[11][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[11][1].u = 1;
					Q_WindWake[250].Lvert[11][1].v = 1;
					Q_WindWake[250].Lvert[11][1].X = Q_WindWake[250].VertM5.X;
					Q_WindWake[250].Lvert[11][1].Y = Q_WindWake[250].VertM5.Y;
					Q_WindWake[250].Lvert[11][1].Z = Q_WindWake[250].VertM5.Z;

							
					Q_WindWake[250].Lvert[11][2].u = 0;
					Q_WindWake[250].Lvert[11][2].v = 1;
					Q_WindWake[250].Lvert[11][2].X = Q_WindWake[250].VertM45.X;
					Q_WindWake[250].Lvert[11][2].Y = Q_WindWake[250].VertM45.Y;
					Q_WindWake[250].Lvert[11][2].Z = Q_WindWake[250].VertM45.Z;


					Q_WindWake[250].Lvert[12][0].u = 0.5;
					Q_WindWake[250].Lvert[12][0].v = 0;
					Q_WindWake[250].Lvert[12][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[12][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[12][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[12][1].u = 1;
					Q_WindWake[250].Lvert[12][1].v = 1;
					Q_WindWake[250].Lvert[12][1].X = Q_WindWake[250].VertM6.X;
					Q_WindWake[250].Lvert[12][1].Y = Q_WindWake[250].VertM6.Y;
					Q_WindWake[250].Lvert[12][1].Z = Q_WindWake[250].VertM6.Z;

							
					Q_WindWake[250].Lvert[12][2].u = 0;
					Q_WindWake[250].Lvert[12][2].v = 1;
					Q_WindWake[250].Lvert[12][2].X = Q_WindWake[250].VertM55.X;
					Q_WindWake[250].Lvert[12][2].Y = Q_WindWake[250].VertM55.Y;
					Q_WindWake[250].Lvert[12][2].Z = Q_WindWake[250].VertM55.Z;


					Q_WindWake[250].Lvert[13][0].u = 0.5;
					Q_WindWake[250].Lvert[13][0].v = 0;
					Q_WindWake[250].Lvert[13][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[13][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[13][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[13][1].u = 1;
					Q_WindWake[250].Lvert[13][1].v = 1;
					Q_WindWake[250].Lvert[13][1].X = Q_WindWake[250].VertM7.X;
					Q_WindWake[250].Lvert[13][1].Y = Q_WindWake[250].VertM7.Y;
					Q_WindWake[250].Lvert[13][1].Z = Q_WindWake[250].VertM7.Z;

							
					Q_WindWake[250].Lvert[13][2].u = 0;
					Q_WindWake[250].Lvert[13][2].v = 1;
					Q_WindWake[250].Lvert[13][2].X = Q_WindWake[250].VertM65.X;
					Q_WindWake[250].Lvert[13][2].Y = Q_WindWake[250].VertM65.Y;
					Q_WindWake[250].Lvert[13][2].Z = Q_WindWake[250].VertM65.Z;


					Q_WindWake[250].Lvert[14][0].u = 0.5;
					Q_WindWake[250].Lvert[14][0].v = 0;
					Q_WindWake[250].Lvert[14][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[14][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[14][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[14][1].u = 1;
					Q_WindWake[250].Lvert[14][1].v = 1;
					Q_WindWake[250].Lvert[14][1].X = Q_WindWake[250].VertM8.X;
					Q_WindWake[250].Lvert[14][1].Y = Q_WindWake[250].VertM8.Y;
					Q_WindWake[250].Lvert[14][1].Z = Q_WindWake[250].VertM8.Z;

							
					Q_WindWake[250].Lvert[14][2].u = 0;
					Q_WindWake[250].Lvert[14][2].v = 1;
					Q_WindWake[250].Lvert[14][2].X = Q_WindWake[250].VertM75.X;
					Q_WindWake[250].Lvert[14][2].Y = Q_WindWake[250].VertM75.Y;
					Q_WindWake[250].Lvert[14][2].Z = Q_WindWake[250].VertM75.Z;


					Q_WindWake[250].Lvert[15][0].u = 0.5;
					Q_WindWake[250].Lvert[15][0].v = 0;
					Q_WindWake[250].Lvert[15][0].X = Q_WindWake[250].VertFNT.X;
					Q_WindWake[250].Lvert[15][0].Y = Q_WindWake[250].VertFNT.Y;
					Q_WindWake[250].Lvert[15][0].Z = Q_WindWake[250].VertFNT.Z;

							
					Q_WindWake[250].Lvert[15][1].u = 1;
					Q_WindWake[250].Lvert[15][1].v = 1;
					Q_WindWake[250].Lvert[15][1].X = Q_WindWake[250].VertM1.X;
					Q_WindWake[250].Lvert[15][1].Y = Q_WindWake[250].VertM1.Y;
					Q_WindWake[250].Lvert[15][1].Z = Q_WindWake[250].VertM1.Z;

							
					Q_WindWake[250].Lvert[15][2].u = 0;
					Q_WindWake[250].Lvert[15][2].v = 1;
					Q_WindWake[250].Lvert[15][2].X = Q_WindWake[250].VertM85.X;
					Q_WindWake[250].Lvert[15][2].Y = Q_WindWake[250].VertM85.Y;
					Q_WindWake[250].Lvert[15][2].Z = Q_WindWake[250].VertM85.Z;


					//##### - SOLID RING ONE

					Q_WindWake[250].Lvert[16][0].u = 0;
					Q_WindWake[250].Lvert[16][0].v = 0;
					Q_WindWake[250].Lvert[16][0].X = Q_WindWake[250].VertM1.X;
					Q_WindWake[250].Lvert[16][0].Y = Q_WindWake[250].VertM1.Y;
					Q_WindWake[250].Lvert[16][0].Z = Q_WindWake[250].VertM1.Z;

					
					Q_WindWake[250].Lvert[16][1].u = 1;
					Q_WindWake[250].Lvert[16][1].v = 0;
					Q_WindWake[250].Lvert[16][1].X = Q_WindWake[250].VertM15.X;
					Q_WindWake[250].Lvert[16][1].Y = Q_WindWake[250].VertM15.Y;
					Q_WindWake[250].Lvert[16][1].Z = Q_WindWake[250].VertM15.Z;

							
					Q_WindWake[250].Lvert[16][2].u = 1;
					Q_WindWake[250].Lvert[16][2].v = 1;
					Q_WindWake[250].Lvert[16][2].X = Q_WindWake[250].VertT15.X;
					Q_WindWake[250].Lvert[16][2].Y = Q_WindWake[250].VertT15.Y;
					Q_WindWake[250].Lvert[16][2].Z = Q_WindWake[250].VertT15.Z;


					Q_WindWake[250].Lvert[16][3].u = 0;
					Q_WindWake[250].Lvert[16][3].v = 1;
					Q_WindWake[250].Lvert[16][3].X = Q_WindWake[250].VertT1.X;
					Q_WindWake[250].Lvert[16][3].Y = Q_WindWake[250].VertT1.Y;
					Q_WindWake[250].Lvert[16][3].Z = Q_WindWake[250].VertT1.Z;


					Q_WindWake[250].Lvert[17][0].u = 0;
					Q_WindWake[250].Lvert[17][0].v = 0;
					Q_WindWake[250].Lvert[17][0].X = Q_WindWake[250].VertM15.X;
					Q_WindWake[250].Lvert[17][0].Y = Q_WindWake[250].VertM15.Y;
					Q_WindWake[250].Lvert[17][0].Z = Q_WindWake[250].VertM15.Z;

							
					Q_WindWake[250].Lvert[17][1].u = 1;
					Q_WindWake[250].Lvert[17][1].v = 0;
					Q_WindWake[250].Lvert[17][1].X = Q_WindWake[250].VertM2.X;
					Q_WindWake[250].Lvert[17][1].Y = Q_WindWake[250].VertM2.Y;
					Q_WindWake[250].Lvert[17][1].Z = Q_WindWake[250].VertM2.Z;

							
					Q_WindWake[250].Lvert[17][2].u = 1;
					Q_WindWake[250].Lvert[17][2].v = 1;
					Q_WindWake[250].Lvert[17][2].X = Q_WindWake[250].VertT2.X;
					Q_WindWake[250].Lvert[17][2].Y = Q_WindWake[250].VertT2.Y;
					Q_WindWake[250].Lvert[17][2].Z = Q_WindWake[250].VertT2.Z;


					Q_WindWake[250].Lvert[17][3].u = 0;
					Q_WindWake[250].Lvert[17][3].v = 1;
					Q_WindWake[250].Lvert[17][3].X = Q_WindWake[250].VertT15.X;
					Q_WindWake[250].Lvert[17][3].Y = Q_WindWake[250].VertT15.Y;
					Q_WindWake[250].Lvert[17][3].Z = Q_WindWake[250].VertT15.Z;



					Q_WindWake[250].Lvert[18][0].u = 0;
					Q_WindWake[250].Lvert[18][0].v = 0;
					Q_WindWake[250].Lvert[18][0].X = Q_WindWake[250].VertM2.X;
					Q_WindWake[250].Lvert[18][0].Y = Q_WindWake[250].VertM2.Y;
					Q_WindWake[250].Lvert[18][0].Z = Q_WindWake[250].VertM2.Z;

							
					Q_WindWake[250].Lvert[18][1].u = 1;
					Q_WindWake[250].Lvert[18][1].v = 0;
					Q_WindWake[250].Lvert[18][1].X = Q_WindWake[250].VertM25.X;
					Q_WindWake[250].Lvert[18][1].Y = Q_WindWake[250].VertM25.Y;
					Q_WindWake[250].Lvert[18][1].Z = Q_WindWake[250].VertM25.Z;

							
					Q_WindWake[250].Lvert[18][2].u = 1;
					Q_WindWake[250].Lvert[18][2].v = 1;
					Q_WindWake[250].Lvert[18][2].X = Q_WindWake[250].VertT25.X;
					Q_WindWake[250].Lvert[18][2].Y = Q_WindWake[250].VertT25.Y;
					Q_WindWake[250].Lvert[18][2].Z = Q_WindWake[250].VertT25.Z;


					Q_WindWake[250].Lvert[18][3].u = 0;
					Q_WindWake[250].Lvert[18][3].v = 1;
					Q_WindWake[250].Lvert[18][3].X = Q_WindWake[250].VertT2.X;
					Q_WindWake[250].Lvert[18][3].Y = Q_WindWake[250].VertT2.Y;
					Q_WindWake[250].Lvert[18][3].Z = Q_WindWake[250].VertT2.Z;



					Q_WindWake[250].Lvert[19][0].u = 0;
					Q_WindWake[250].Lvert[19][0].v = 0;
					Q_WindWake[250].Lvert[19][0].X = Q_WindWake[250].VertM25.X;
					Q_WindWake[250].Lvert[19][0].Y = Q_WindWake[250].VertM25.Y;
					Q_WindWake[250].Lvert[19][0].Z = Q_WindWake[250].VertM25.Z;

							
					Q_WindWake[250].Lvert[19][1].u = 1;
					Q_WindWake[250].Lvert[19][1].v = 0;
					Q_WindWake[250].Lvert[19][1].X = Q_WindWake[250].VertM3.X;
					Q_WindWake[250].Lvert[19][1].Y = Q_WindWake[250].VertM3.Y;
					Q_WindWake[250].Lvert[19][1].Z = Q_WindWake[250].VertM3.Z;

							
					Q_WindWake[250].Lvert[19][2].u = 1;
					Q_WindWake[250].Lvert[19][2].v = 1;
					Q_WindWake[250].Lvert[19][2].X = Q_WindWake[250].VertT3.X;
					Q_WindWake[250].Lvert[19][2].Y = Q_WindWake[250].VertT3.Y;
					Q_WindWake[250].Lvert[19][2].Z = Q_WindWake[250].VertT3.Z;


					Q_WindWake[250].Lvert[19][3].u = 0;
					Q_WindWake[250].Lvert[19][3].v = 1;
					Q_WindWake[250].Lvert[19][3].X = Q_WindWake[250].VertT25.X;
					Q_WindWake[250].Lvert[19][3].Y = Q_WindWake[250].VertT25.Y;
					Q_WindWake[250].Lvert[19][3].Z = Q_WindWake[250].VertT25.Z;


					Q_WindWake[250].Lvert[20][0].u = 0;
					Q_WindWake[250].Lvert[20][0].v = 0;
					Q_WindWake[250].Lvert[20][0].X = Q_WindWake[250].VertM3.X;
					Q_WindWake[250].Lvert[20][0].Y = Q_WindWake[250].VertM3.Y;
					Q_WindWake[250].Lvert[20][0].Z = Q_WindWake[250].VertM3.Z;

							
					Q_WindWake[250].Lvert[20][1].u = 1;
					Q_WindWake[250].Lvert[20][1].v = 0;
					Q_WindWake[250].Lvert[20][1].X = Q_WindWake[250].VertM35.X;
					Q_WindWake[250].Lvert[20][1].Y = Q_WindWake[250].VertM35.Y;
					Q_WindWake[250].Lvert[20][1].Z = Q_WindWake[250].VertM35.Z;

							
					Q_WindWake[250].Lvert[20][2].u = 1;
					Q_WindWake[250].Lvert[20][2].v = 1;
					Q_WindWake[250].Lvert[20][2].X = Q_WindWake[250].VertT35.X;
					Q_WindWake[250].Lvert[20][2].Y = Q_WindWake[250].VertT35.Y;
					Q_WindWake[250].Lvert[20][2].Z = Q_WindWake[250].VertT35.Z;


					Q_WindWake[250].Lvert[20][3].u = 0;
					Q_WindWake[250].Lvert[20][3].v = 1;
					Q_WindWake[250].Lvert[20][3].X = Q_WindWake[250].VertT3.X;
					Q_WindWake[250].Lvert[20][3].Y = Q_WindWake[250].VertT3.Y;
					Q_WindWake[250].Lvert[20][3].Z = Q_WindWake[250].VertT3.Z;


					Q_WindWake[250].Lvert[21][0].u = 0;
					Q_WindWake[250].Lvert[21][0].v = 0;
					Q_WindWake[250].Lvert[21][0].X = Q_WindWake[250].VertM35.X;
					Q_WindWake[250].Lvert[21][0].Y = Q_WindWake[250].VertM35.Y;
					Q_WindWake[250].Lvert[21][0].Z = Q_WindWake[250].VertM35.Z;

							
					Q_WindWake[250].Lvert[21][1].u = 1;
					Q_WindWake[250].Lvert[21][1].v = 0;
					Q_WindWake[250].Lvert[21][1].X = Q_WindWake[250].VertM4.X;
					Q_WindWake[250].Lvert[21][1].Y = Q_WindWake[250].VertM4.Y;
					Q_WindWake[250].Lvert[21][1].Z = Q_WindWake[250].VertM4.Z;

							
					Q_WindWake[250].Lvert[21][2].u = 1;
					Q_WindWake[250].Lvert[21][2].v = 1;
					Q_WindWake[250].Lvert[21][2].X = Q_WindWake[250].VertT4.X;
					Q_WindWake[250].Lvert[21][2].Y = Q_WindWake[250].VertT4.Y;
					Q_WindWake[250].Lvert[21][2].Z = Q_WindWake[250].VertT4.Z;


					Q_WindWake[250].Lvert[21][3].u = 0;
					Q_WindWake[250].Lvert[21][3].v = 1;
					Q_WindWake[250].Lvert[21][3].X = Q_WindWake[250].VertT35.X;
					Q_WindWake[250].Lvert[21][3].Y = Q_WindWake[250].VertT35.Y;
					Q_WindWake[250].Lvert[21][3].Z = Q_WindWake[250].VertT35.Z;


					Q_WindWake[250].Lvert[22][0].u = 0;
					Q_WindWake[250].Lvert[22][0].v = 0;
					Q_WindWake[250].Lvert[22][0].X = Q_WindWake[250].VertM4.X;
					Q_WindWake[250].Lvert[22][0].Y = Q_WindWake[250].VertM4.Y;
					Q_WindWake[250].Lvert[22][0].Z = Q_WindWake[250].VertM4.Z;

							
					Q_WindWake[250].Lvert[22][1].u = 1;
					Q_WindWake[250].Lvert[22][1].v = 0;
					Q_WindWake[250].Lvert[22][1].X = Q_WindWake[250].VertM45.X;
					Q_WindWake[250].Lvert[22][1].Y = Q_WindWake[250].VertM45.Y;
					Q_WindWake[250].Lvert[22][1].Z = Q_WindWake[250].VertM45.Z;

							
					Q_WindWake[250].Lvert[22][2].u = 1;
					Q_WindWake[250].Lvert[22][2].v = 1;
					Q_WindWake[250].Lvert[22][2].X = Q_WindWake[250].VertT45.X;
					Q_WindWake[250].Lvert[22][2].Y = Q_WindWake[250].VertT45.Y;
					Q_WindWake[250].Lvert[22][2].Z = Q_WindWake[250].VertT45.Z;


					Q_WindWake[250].Lvert[22][3].u = 0;
					Q_WindWake[250].Lvert[22][3].v = 1;
					Q_WindWake[250].Lvert[22][3].X = Q_WindWake[250].VertT4.X;
					Q_WindWake[250].Lvert[22][3].Y = Q_WindWake[250].VertT4.Y;
					Q_WindWake[250].Lvert[22][3].Z = Q_WindWake[250].VertT4.Z;



					Q_WindWake[250].Lvert[23][0].u = 0;
					Q_WindWake[250].Lvert[23][0].v = 0;
					Q_WindWake[250].Lvert[23][0].X = Q_WindWake[250].VertM45.X;
					Q_WindWake[250].Lvert[23][0].Y = Q_WindWake[250].VertM45.Y;
					Q_WindWake[250].Lvert[23][0].Z = Q_WindWake[250].VertM45.Z;

							
					Q_WindWake[250].Lvert[23][1].u = 1;
					Q_WindWake[250].Lvert[23][1].v = 0;
					Q_WindWake[250].Lvert[23][1].X = Q_WindWake[250].VertM5.X;
					Q_WindWake[250].Lvert[23][1].Y = Q_WindWake[250].VertM5.Y;
					Q_WindWake[250].Lvert[23][1].Z = Q_WindWake[250].VertM5.Z;

							
					Q_WindWake[250].Lvert[23][2].u = 1;
					Q_WindWake[250].Lvert[23][2].v = 1;
					Q_WindWake[250].Lvert[23][2].X = Q_WindWake[250].VertT5.X;
					Q_WindWake[250].Lvert[23][2].Y = Q_WindWake[250].VertT5.Y;
					Q_WindWake[250].Lvert[23][2].Z = Q_WindWake[250].VertT5.Z;


					Q_WindWake[250].Lvert[23][3].u = 0;
					Q_WindWake[250].Lvert[23][3].v = 1;
					Q_WindWake[250].Lvert[23][3].X = Q_WindWake[250].VertT45.X;
					Q_WindWake[250].Lvert[23][3].Y = Q_WindWake[250].VertT45.Y;
					Q_WindWake[250].Lvert[23][3].Z = Q_WindWake[250].VertT45.Z;


					Q_WindWake[250].Lvert[24][0].u = 0;
					Q_WindWake[250].Lvert[24][0].v = 0;
					Q_WindWake[250].Lvert[24][0].X = Q_WindWake[250].VertM5.X;
					Q_WindWake[250].Lvert[24][0].Y = Q_WindWake[250].VertM5.Y;
					Q_WindWake[250].Lvert[24][0].Z = Q_WindWake[250].VertM5.Z;

					
					Q_WindWake[250].Lvert[24][1].u = 1;
					Q_WindWake[250].Lvert[24][1].v = 0;
					Q_WindWake[250].Lvert[24][1].X = Q_WindWake[250].VertM55.X;
					Q_WindWake[250].Lvert[24][1].Y = Q_WindWake[250].VertM55.Y;
					Q_WindWake[250].Lvert[24][1].Z = Q_WindWake[250].VertM55.Z;

							
					Q_WindWake[250].Lvert[24][2].u = 1;
					Q_WindWake[250].Lvert[24][2].v = 1;
					Q_WindWake[250].Lvert[24][2].X = Q_WindWake[250].VertT55.X;
					Q_WindWake[250].Lvert[24][2].Y = Q_WindWake[250].VertT55.Y;
					Q_WindWake[250].Lvert[24][2].Z = Q_WindWake[250].VertT55.Z;


					Q_WindWake[250].Lvert[24][3].u = 0;
					Q_WindWake[250].Lvert[24][3].v = 1;
					Q_WindWake[250].Lvert[24][3].X = Q_WindWake[250].VertT5.X;
					Q_WindWake[250].Lvert[24][3].Y = Q_WindWake[250].VertT5.Y;
					Q_WindWake[250].Lvert[24][3].Z = Q_WindWake[250].VertT5.Z;


					Q_WindWake[250].Lvert[25][0].u = 0;
					Q_WindWake[250].Lvert[25][0].v = 0;
					Q_WindWake[250].Lvert[25][0].X = Q_WindWake[250].VertM55.X;
					Q_WindWake[250].Lvert[25][0].Y = Q_WindWake[250].VertM55.Y;
					Q_WindWake[250].Lvert[25][0].Z = Q_WindWake[250].VertM55.Z;

							
					Q_WindWake[250].Lvert[25][1].u = 1;
					Q_WindWake[250].Lvert[25][1].v = 0;
					Q_WindWake[250].Lvert[25][1].X = Q_WindWake[250].VertM6.X;
					Q_WindWake[250].Lvert[25][1].Y = Q_WindWake[250].VertM6.Y;
					Q_WindWake[250].Lvert[25][1].Z = Q_WindWake[250].VertM6.Z;

							
					Q_WindWake[250].Lvert[25][2].u = 1;
					Q_WindWake[250].Lvert[25][2].v = 1;
					Q_WindWake[250].Lvert[25][2].X = Q_WindWake[250].VertT6.X;
					Q_WindWake[250].Lvert[25][2].Y = Q_WindWake[250].VertT6.Y;
					Q_WindWake[250].Lvert[25][2].Z = Q_WindWake[250].VertT6.Z;


					Q_WindWake[250].Lvert[25][3].u = 0;
					Q_WindWake[250].Lvert[25][3].v = 1;
					Q_WindWake[250].Lvert[25][3].X = Q_WindWake[250].VertT55.X;
					Q_WindWake[250].Lvert[25][3].Y = Q_WindWake[250].VertT55.Y;
					Q_WindWake[250].Lvert[25][3].Z = Q_WindWake[250].VertT55.Z;


					Q_WindWake[250].Lvert[26][0].u = 0;
					Q_WindWake[250].Lvert[26][0].v = 0;
					Q_WindWake[250].Lvert[26][0].X = Q_WindWake[250].VertM6.X;
					Q_WindWake[250].Lvert[26][0].Y = Q_WindWake[250].VertM6.Y;
					Q_WindWake[250].Lvert[26][0].Z = Q_WindWake[250].VertM6.Z;

							
					Q_WindWake[250].Lvert[26][1].u = 1;
					Q_WindWake[250].Lvert[26][1].v = 0;
					Q_WindWake[250].Lvert[26][1].X = Q_WindWake[250].VertM65.X;
					Q_WindWake[250].Lvert[26][1].Y = Q_WindWake[250].VertM65.Y;
					Q_WindWake[250].Lvert[26][1].Z = Q_WindWake[250].VertM65.Z;

							
					Q_WindWake[250].Lvert[26][2].u = 1;
					Q_WindWake[250].Lvert[26][2].v = 1;
					Q_WindWake[250].Lvert[26][2].X = Q_WindWake[250].VertT65.X;
					Q_WindWake[250].Lvert[26][2].Y = Q_WindWake[250].VertT65.Y;
					Q_WindWake[250].Lvert[26][2].Z = Q_WindWake[250].VertT65.Z;


					Q_WindWake[250].Lvert[26][3].u = 0;
					Q_WindWake[250].Lvert[26][3].v = 1;
					Q_WindWake[250].Lvert[26][3].X = Q_WindWake[250].VertT6.X;
					Q_WindWake[250].Lvert[26][3].Y = Q_WindWake[250].VertT6.Y;
					Q_WindWake[250].Lvert[26][3].Z = Q_WindWake[250].VertT6.Z;


					Q_WindWake[250].Lvert[27][0].u = 0;
					Q_WindWake[250].Lvert[27][0].v = 0;
					Q_WindWake[250].Lvert[27][0].X = Q_WindWake[250].VertM65.X;
					Q_WindWake[250].Lvert[27][0].Y = Q_WindWake[250].VertM65.Y;
					Q_WindWake[250].Lvert[27][0].Z = Q_WindWake[250].VertM65.Z;

							
					Q_WindWake[250].Lvert[27][1].u = 1;
					Q_WindWake[250].Lvert[27][1].v = 0;
					Q_WindWake[250].Lvert[27][1].X = Q_WindWake[250].VertM7.X;
					Q_WindWake[250].Lvert[27][1].Y = Q_WindWake[250].VertM7.Y;
					Q_WindWake[250].Lvert[27][1].Z = Q_WindWake[250].VertM7.Z;

							
					Q_WindWake[250].Lvert[27][2].u = 1;
					Q_WindWake[250].Lvert[27][2].v = 1;
					Q_WindWake[250].Lvert[27][2].X = Q_WindWake[250].VertT7.X;
					Q_WindWake[250].Lvert[27][2].Y = Q_WindWake[250].VertT7.Y;
					Q_WindWake[250].Lvert[27][2].Z = Q_WindWake[250].VertT7.Z;


					Q_WindWake[250].Lvert[27][3].u = 0;
					Q_WindWake[250].Lvert[27][3].v = 1;
					Q_WindWake[250].Lvert[27][3].X = Q_WindWake[250].VertT65.X;
					Q_WindWake[250].Lvert[27][3].Y = Q_WindWake[250].VertT65.Y;
					Q_WindWake[250].Lvert[27][3].Z = Q_WindWake[250].VertT65.Z;


					Q_WindWake[250].Lvert[28][0].u = 0;
					Q_WindWake[250].Lvert[28][0].v = 0;
					Q_WindWake[250].Lvert[28][0].X = Q_WindWake[250].VertM7.X;
					Q_WindWake[250].Lvert[28][0].Y = Q_WindWake[250].VertM7.Y;
					Q_WindWake[250].Lvert[28][0].Z = Q_WindWake[250].VertM7.Z;

							
					Q_WindWake[250].Lvert[28][1].u = 1;
					Q_WindWake[250].Lvert[28][1].v = 0;
					Q_WindWake[250].Lvert[28][1].X = Q_WindWake[250].VertM75.X;
					Q_WindWake[250].Lvert[28][1].Y = Q_WindWake[250].VertM75.Y;
					Q_WindWake[250].Lvert[28][1].Z = Q_WindWake[250].VertM75.Z;

							
					Q_WindWake[250].Lvert[28][2].u = 1;
					Q_WindWake[250].Lvert[28][2].v = 1;
					Q_WindWake[250].Lvert[28][2].X = Q_WindWake[250].VertT75.X;
					Q_WindWake[250].Lvert[28][2].Y = Q_WindWake[250].VertT75.Y;
					Q_WindWake[250].Lvert[28][2].Z = Q_WindWake[250].VertT75.Z;


					Q_WindWake[250].Lvert[28][3].u = 0;
					Q_WindWake[250].Lvert[28][3].v = 1;
					Q_WindWake[250].Lvert[28][3].X = Q_WindWake[250].VertT7.X;
					Q_WindWake[250].Lvert[28][3].Y = Q_WindWake[250].VertT7.Y;
					Q_WindWake[250].Lvert[28][3].Z = Q_WindWake[250].VertT7.Z;


					Q_WindWake[250].Lvert[29][0].u = 0;
					Q_WindWake[250].Lvert[29][0].v = 0;
					Q_WindWake[250].Lvert[29][0].X = Q_WindWake[250].VertM75.X;
					Q_WindWake[250].Lvert[29][0].Y = Q_WindWake[250].VertM75.Y;
					Q_WindWake[250].Lvert[29][0].Z = Q_WindWake[250].VertM75.Z;

							
					Q_WindWake[250].Lvert[29][1].u = 1;
					Q_WindWake[250].Lvert[29][1].v = 0;
					Q_WindWake[250].Lvert[29][1].X = Q_WindWake[250].VertM8.X;
					Q_WindWake[250].Lvert[29][1].Y = Q_WindWake[250].VertM8.Y;
					Q_WindWake[250].Lvert[29][1].Z = Q_WindWake[250].VertM8.Z;

							
					Q_WindWake[250].Lvert[29][2].u = 1;
					Q_WindWake[250].Lvert[29][2].v = 1;
					Q_WindWake[250].Lvert[29][2].X = Q_WindWake[250].VertT8.X;
					Q_WindWake[250].Lvert[29][2].Y = Q_WindWake[250].VertT8.Y;
					Q_WindWake[250].Lvert[29][2].Z = Q_WindWake[250].VertT8.Z;


					Q_WindWake[250].Lvert[29][3].u = 0;
					Q_WindWake[250].Lvert[29][3].v = 1;
					Q_WindWake[250].Lvert[29][3].X = Q_WindWake[250].VertT75.X;
					Q_WindWake[250].Lvert[29][3].Y = Q_WindWake[250].VertT75.Y;
					Q_WindWake[250].Lvert[29][3].Z = Q_WindWake[250].VertT75.Z;


					Q_WindWake[250].Lvert[30][0].u = 0;
					Q_WindWake[250].Lvert[30][0].v = 0;
					Q_WindWake[250].Lvert[30][0].X = Q_WindWake[250].VertM8.X;
					Q_WindWake[250].Lvert[30][0].Y = Q_WindWake[250].VertM8.Y;
					Q_WindWake[250].Lvert[30][0].Z = Q_WindWake[250].VertM8.Z;

							
					Q_WindWake[250].Lvert[30][1].u = 1;
					Q_WindWake[250].Lvert[30][1].v = 0;
					Q_WindWake[250].Lvert[30][1].X = Q_WindWake[250].VertM85.X;
					Q_WindWake[250].Lvert[30][1].Y = Q_WindWake[250].VertM85.Y;
					Q_WindWake[250].Lvert[30][1].Z = Q_WindWake[250].VertM85.Z;

							
					Q_WindWake[250].Lvert[30][2].u = 1;
					Q_WindWake[250].Lvert[30][2].v = 1;
					Q_WindWake[250].Lvert[30][2].X = Q_WindWake[250].VertT85.X;
					Q_WindWake[250].Lvert[30][2].Y = Q_WindWake[250].VertT85.Y;
					Q_WindWake[250].Lvert[30][2].Z = Q_WindWake[250].VertT85.Z;


					Q_WindWake[250].Lvert[30][3].u = 0;
					Q_WindWake[250].Lvert[30][3].v = 1;
					Q_WindWake[250].Lvert[30][3].X = Q_WindWake[250].VertT8.X;
					Q_WindWake[250].Lvert[30][3].Y = Q_WindWake[250].VertT8.Y;
					Q_WindWake[250].Lvert[30][3].Z = Q_WindWake[250].VertT8.Z;


					Q_WindWake[250].Lvert[31][0].u = 0;
					Q_WindWake[250].Lvert[31][0].v = 0;
					Q_WindWake[250].Lvert[31][0].X = Q_WindWake[250].VertM85.X;
					Q_WindWake[250].Lvert[31][0].Y = Q_WindWake[250].VertM85.Y;
					Q_WindWake[250].Lvert[31][0].Z = Q_WindWake[250].VertM85.Z;

							
					Q_WindWake[250].Lvert[31][1].u = 1;
					Q_WindWake[250].Lvert[31][1].v = 0;
					Q_WindWake[250].Lvert[31][1].X = Q_WindWake[250].VertM1.X;
					Q_WindWake[250].Lvert[31][1].Y = Q_WindWake[250].VertM1.Y;
					Q_WindWake[250].Lvert[31][1].Z = Q_WindWake[250].VertM1.Z;

							
					Q_WindWake[250].Lvert[31][2].u = 1;
					Q_WindWake[250].Lvert[31][2].v = 1;
					Q_WindWake[250].Lvert[31][2].X = Q_WindWake[250].VertT1.X;
					Q_WindWake[250].Lvert[31][2].Y = Q_WindWake[250].VertT1.Y;
					Q_WindWake[250].Lvert[31][2].Z = Q_WindWake[250].VertT1.Z;


					Q_WindWake[250].Lvert[31][3].u = 0;
					Q_WindWake[250].Lvert[31][3].v = 1;
					Q_WindWake[250].Lvert[31][3].X = Q_WindWake[250].VertT85.X;
					Q_WindWake[250].Lvert[31][3].Y = Q_WindWake[250].VertT85.Y;
					Q_WindWake[250].Lvert[31][3].Z = Q_WindWake[250].VertT85.Z;


					//##### - SOLID RING TWO

					Q_WindWake[250].Lvert[32][0].u = 0;
					Q_WindWake[250].Lvert[32][0].v = 0;
					Q_WindWake[250].Lvert[32][0].X = Q_WindWake[250].VertT1.X;
					Q_WindWake[250].Lvert[32][0].Y = Q_WindWake[250].VertT1.Y;
					Q_WindWake[250].Lvert[32][0].Z = Q_WindWake[250].VertT1.Z;

					
					Q_WindWake[250].Lvert[32][1].u = 1;
					Q_WindWake[250].Lvert[32][1].v = 0;
					Q_WindWake[250].Lvert[32][1].X = Q_WindWake[250].VertT15.X;
					Q_WindWake[250].Lvert[32][1].Y = Q_WindWake[250].VertT15.Y;
					Q_WindWake[250].Lvert[32][1].Z = Q_WindWake[250].VertT15.Z;

							
					Q_WindWake[250].Lvert[32][2].u = 1;
					Q_WindWake[250].Lvert[32][2].v = 1;
					Q_WindWake[250].Lvert[32][2].X = Q_WindWake[250].VertB15.X;
					Q_WindWake[250].Lvert[32][2].Y = Q_WindWake[250].VertB15.Y;
					Q_WindWake[250].Lvert[32][2].Z = Q_WindWake[250].VertB15.Z;


					Q_WindWake[250].Lvert[32][3].u = 0;
					Q_WindWake[250].Lvert[32][3].v = 1;
					Q_WindWake[250].Lvert[32][3].X = Q_WindWake[250].VertB1.X;
					Q_WindWake[250].Lvert[32][3].Y = Q_WindWake[250].VertB1.Y;
					Q_WindWake[250].Lvert[32][3].Z = Q_WindWake[250].VertB1.Z;


					Q_WindWake[250].Lvert[33][0].u = 0;
					Q_WindWake[250].Lvert[33][0].v = 0;
					Q_WindWake[250].Lvert[33][0].X = Q_WindWake[250].VertT15.X;
					Q_WindWake[250].Lvert[33][0].Y = Q_WindWake[250].VertT15.Y;
					Q_WindWake[250].Lvert[33][0].Z = Q_WindWake[250].VertT15.Z;

							
					Q_WindWake[250].Lvert[33][1].u = 1;
					Q_WindWake[250].Lvert[33][1].v = 0;
					Q_WindWake[250].Lvert[33][1].X = Q_WindWake[250].VertT2.X;
					Q_WindWake[250].Lvert[33][1].Y = Q_WindWake[250].VertT2.Y;
					Q_WindWake[250].Lvert[33][1].Z = Q_WindWake[250].VertT2.Z;

							
					Q_WindWake[250].Lvert[33][2].u = 1;
					Q_WindWake[250].Lvert[33][2].v = 1;
					Q_WindWake[250].Lvert[33][2].X = Q_WindWake[250].VertB2.X;
					Q_WindWake[250].Lvert[33][2].Y = Q_WindWake[250].VertB2.Y;
					Q_WindWake[250].Lvert[33][2].Z = Q_WindWake[250].VertB2.Z;


					Q_WindWake[250].Lvert[33][3].u = 0;
					Q_WindWake[250].Lvert[33][3].v = 1;
					Q_WindWake[250].Lvert[33][3].X = Q_WindWake[250].VertB15.X;
					Q_WindWake[250].Lvert[33][3].Y = Q_WindWake[250].VertB15.Y;
					Q_WindWake[250].Lvert[33][3].Z = Q_WindWake[250].VertB15.Z;


					Q_WindWake[250].Lvert[34][0].u = 0;
					Q_WindWake[250].Lvert[34][0].v = 0;
					Q_WindWake[250].Lvert[34][0].X = Q_WindWake[250].VertT2.X;
					Q_WindWake[250].Lvert[34][0].Y = Q_WindWake[250].VertT2.Y;
					Q_WindWake[250].Lvert[34][0].Z = Q_WindWake[250].VertT2.Z;

							
					Q_WindWake[250].Lvert[34][1].u = 1;
					Q_WindWake[250].Lvert[34][1].v = 0;
					Q_WindWake[250].Lvert[34][1].X = Q_WindWake[250].VertT25.X;
					Q_WindWake[250].Lvert[34][1].Y = Q_WindWake[250].VertT25.Y;
					Q_WindWake[250].Lvert[34][1].Z = Q_WindWake[250].VertT25.Z;

							
					Q_WindWake[250].Lvert[34][2].u = 1;
					Q_WindWake[250].Lvert[34][2].v = 1;
					Q_WindWake[250].Lvert[34][2].X = Q_WindWake[250].VertB25.X;
					Q_WindWake[250].Lvert[34][2].Y = Q_WindWake[250].VertB25.Y;
					Q_WindWake[250].Lvert[34][2].Z = Q_WindWake[250].VertB25.Z;


					Q_WindWake[250].Lvert[34][3].u = 0;
					Q_WindWake[250].Lvert[34][3].v = 1;
					Q_WindWake[250].Lvert[34][3].X = Q_WindWake[250].VertB2.X;
					Q_WindWake[250].Lvert[34][3].Y = Q_WindWake[250].VertB2.Y;
					Q_WindWake[250].Lvert[34][3].Z = Q_WindWake[250].VertB2.Z;



					Q_WindWake[250].Lvert[35][0].u = 0;
					Q_WindWake[250].Lvert[35][0].v = 0;
					Q_WindWake[250].Lvert[35][0].X = Q_WindWake[250].VertT25.X;
					Q_WindWake[250].Lvert[35][0].Y = Q_WindWake[250].VertT25.Y;
					Q_WindWake[250].Lvert[35][0].Z = Q_WindWake[250].VertT25.Z;

							
					Q_WindWake[250].Lvert[35][1].u = 1;
					Q_WindWake[250].Lvert[35][1].v = 0;
					Q_WindWake[250].Lvert[35][1].X = Q_WindWake[250].VertT3.X;
					Q_WindWake[250].Lvert[35][1].Y = Q_WindWake[250].VertT3.Y;
					Q_WindWake[250].Lvert[35][1].Z = Q_WindWake[250].VertT3.Z;

							
					Q_WindWake[250].Lvert[35][2].u = 1;
					Q_WindWake[250].Lvert[35][2].v = 1;
					Q_WindWake[250].Lvert[35][2].X = Q_WindWake[250].VertB3.X;
					Q_WindWake[250].Lvert[35][2].Y = Q_WindWake[250].VertB3.Y;
					Q_WindWake[250].Lvert[35][2].Z = Q_WindWake[250].VertB3.Z;


					Q_WindWake[250].Lvert[35][3].u = 0;
					Q_WindWake[250].Lvert[35][3].v = 1;
					Q_WindWake[250].Lvert[35][3].X = Q_WindWake[250].VertB25.X;
					Q_WindWake[250].Lvert[35][3].Y = Q_WindWake[250].VertB25.Y;
					Q_WindWake[250].Lvert[35][3].Z = Q_WindWake[250].VertB25.Z;


					Q_WindWake[250].Lvert[36][0].u = 0;
					Q_WindWake[250].Lvert[36][0].v = 0;
					Q_WindWake[250].Lvert[36][0].X = Q_WindWake[250].VertT3.X;
					Q_WindWake[250].Lvert[36][0].Y = Q_WindWake[250].VertT3.Y;
					Q_WindWake[250].Lvert[36][0].Z = Q_WindWake[250].VertT3.Z;

							
					Q_WindWake[250].Lvert[36][1].u = 1;
					Q_WindWake[250].Lvert[36][1].v = 0;
					Q_WindWake[250].Lvert[36][1].X = Q_WindWake[250].VertT35.X;
					Q_WindWake[250].Lvert[36][1].Y = Q_WindWake[250].VertT35.Y;
					Q_WindWake[250].Lvert[36][1].Z = Q_WindWake[250].VertT35.Z;

							
					Q_WindWake[250].Lvert[36][2].u = 1;
					Q_WindWake[250].Lvert[36][2].v = 1;
					Q_WindWake[250].Lvert[36][2].X = Q_WindWake[250].VertB35.X;
					Q_WindWake[250].Lvert[36][2].Y = Q_WindWake[250].VertB35.Y;
					Q_WindWake[250].Lvert[36][2].Z = Q_WindWake[250].VertB35.Z;


					Q_WindWake[250].Lvert[36][3].u = 0;
					Q_WindWake[250].Lvert[36][3].v = 1;
					Q_WindWake[250].Lvert[36][3].X = Q_WindWake[250].VertB3.X;
					Q_WindWake[250].Lvert[36][3].Y = Q_WindWake[250].VertB3.Y;
					Q_WindWake[250].Lvert[36][3].Z = Q_WindWake[250].VertB3.Z;


					Q_WindWake[250].Lvert[37][0].u = 0;
					Q_WindWake[250].Lvert[37][0].v = 0;
					Q_WindWake[250].Lvert[37][0].X = Q_WindWake[250].VertT35.X;
					Q_WindWake[250].Lvert[37][0].Y = Q_WindWake[250].VertT35.Y;
					Q_WindWake[250].Lvert[37][0].Z = Q_WindWake[250].VertT35.Z;

							
					Q_WindWake[250].Lvert[37][1].u = 1;
					Q_WindWake[250].Lvert[37][1].v = 0;
					Q_WindWake[250].Lvert[37][1].X = Q_WindWake[250].VertT4.X;
					Q_WindWake[250].Lvert[37][1].Y = Q_WindWake[250].VertT4.Y;
					Q_WindWake[250].Lvert[37][1].Z = Q_WindWake[250].VertT4.Z;

							
					Q_WindWake[250].Lvert[37][2].u = 1;
					Q_WindWake[250].Lvert[37][2].v = 1;
					Q_WindWake[250].Lvert[37][2].X = Q_WindWake[250].VertB4.X;
					Q_WindWake[250].Lvert[37][2].Y = Q_WindWake[250].VertB4.Y;
					Q_WindWake[250].Lvert[37][2].Z = Q_WindWake[250].VertB4.Z;


					Q_WindWake[250].Lvert[37][3].u = 0;
					Q_WindWake[250].Lvert[37][3].v = 1;
					Q_WindWake[250].Lvert[37][3].X = Q_WindWake[250].VertB35.X;
					Q_WindWake[250].Lvert[37][3].Y = Q_WindWake[250].VertB35.Y;
					Q_WindWake[250].Lvert[37][3].Z = Q_WindWake[250].VertB35.Z;


					Q_WindWake[250].Lvert[38][0].u = 0;
					Q_WindWake[250].Lvert[38][0].v = 0;
					Q_WindWake[250].Lvert[38][0].X = Q_WindWake[250].VertT4.X;
					Q_WindWake[250].Lvert[38][0].Y = Q_WindWake[250].VertT4.Y;
					Q_WindWake[250].Lvert[38][0].Z = Q_WindWake[250].VertT4.Z;

							
					Q_WindWake[250].Lvert[38][1].u = 1;
					Q_WindWake[250].Lvert[38][1].v = 0;
					Q_WindWake[250].Lvert[38][1].X = Q_WindWake[250].VertT45.X;
					Q_WindWake[250].Lvert[38][1].Y = Q_WindWake[250].VertT45.Y;
					Q_WindWake[250].Lvert[38][1].Z = Q_WindWake[250].VertT45.Z;

							
					Q_WindWake[250].Lvert[38][2].u = 1;
					Q_WindWake[250].Lvert[38][2].v = 1;
					Q_WindWake[250].Lvert[38][2].X = Q_WindWake[250].VertB45.X;
					Q_WindWake[250].Lvert[38][2].Y = Q_WindWake[250].VertB45.Y;
					Q_WindWake[250].Lvert[38][2].Z = Q_WindWake[250].VertB45.Z;


					Q_WindWake[250].Lvert[38][3].u = 0;
					Q_WindWake[250].Lvert[38][3].v = 1;
					Q_WindWake[250].Lvert[38][3].X = Q_WindWake[250].VertB4.X;
					Q_WindWake[250].Lvert[38][3].Y = Q_WindWake[250].VertB4.Y;
					Q_WindWake[250].Lvert[38][3].Z = Q_WindWake[250].VertB4.Z;


					Q_WindWake[250].Lvert[39][0].u = 0;
					Q_WindWake[250].Lvert[39][0].v = 0;
					Q_WindWake[250].Lvert[39][0].X = Q_WindWake[250].VertT45.X;
					Q_WindWake[250].Lvert[39][0].Y = Q_WindWake[250].VertT45.Y;
					Q_WindWake[250].Lvert[39][0].Z = Q_WindWake[250].VertT45.Z;

							
					Q_WindWake[250].Lvert[39][1].u = 1;
					Q_WindWake[250].Lvert[39][1].v = 0;
					Q_WindWake[250].Lvert[39][1].X = Q_WindWake[250].VertT5.X;
					Q_WindWake[250].Lvert[39][1].Y = Q_WindWake[250].VertT5.Y;
					Q_WindWake[250].Lvert[39][1].Z = Q_WindWake[250].VertT5.Z;

							
					Q_WindWake[250].Lvert[39][2].u = 1;
					Q_WindWake[250].Lvert[39][2].v = 1;
					Q_WindWake[250].Lvert[39][2].X = Q_WindWake[250].VertB5.X;
					Q_WindWake[250].Lvert[39][2].Y = Q_WindWake[250].VertB5.Y;
					Q_WindWake[250].Lvert[39][2].Z = Q_WindWake[250].VertB5.Z;


					Q_WindWake[250].Lvert[39][3].u = 0;
					Q_WindWake[250].Lvert[39][3].v = 1;
					Q_WindWake[250].Lvert[39][3].X = Q_WindWake[250].VertB45.X;
					Q_WindWake[250].Lvert[39][3].Y = Q_WindWake[250].VertB45.Y;
					Q_WindWake[250].Lvert[39][3].Z = Q_WindWake[250].VertB45.Z;


					Q_WindWake[250].Lvert[40][0].u = 0;
					Q_WindWake[250].Lvert[40][0].v = 0;
					Q_WindWake[250].Lvert[40][0].X = Q_WindWake[250].VertT5.X;
					Q_WindWake[250].Lvert[40][0].Y = Q_WindWake[250].VertT5.Y;
					Q_WindWake[250].Lvert[40][0].Z = Q_WindWake[250].VertT5.Z;

					
					Q_WindWake[250].Lvert[40][1].u = 1;
					Q_WindWake[250].Lvert[40][1].v = 0;
					Q_WindWake[250].Lvert[40][1].X = Q_WindWake[250].VertT55.X;
					Q_WindWake[250].Lvert[40][1].Y = Q_WindWake[250].VertT55.Y;
					Q_WindWake[250].Lvert[40][1].Z = Q_WindWake[250].VertT55.Z;

							
					Q_WindWake[250].Lvert[40][2].u = 1;
					Q_WindWake[250].Lvert[40][2].v = 1;
					Q_WindWake[250].Lvert[40][2].X = Q_WindWake[250].VertB55.X;
					Q_WindWake[250].Lvert[40][2].Y = Q_WindWake[250].VertB55.Y;
					Q_WindWake[250].Lvert[40][2].Z = Q_WindWake[250].VertB55.Z;


					Q_WindWake[250].Lvert[40][3].u = 0;
					Q_WindWake[250].Lvert[40][3].v = 1;
					Q_WindWake[250].Lvert[40][3].X = Q_WindWake[250].VertB5.X;
					Q_WindWake[250].Lvert[40][3].Y = Q_WindWake[250].VertB5.Y;
					Q_WindWake[250].Lvert[40][3].Z = Q_WindWake[250].VertB5.Z;


					Q_WindWake[250].Lvert[41][0].u = 0;
					Q_WindWake[250].Lvert[41][0].v = 0;
					Q_WindWake[250].Lvert[41][0].X = Q_WindWake[250].VertT55.X;
					Q_WindWake[250].Lvert[41][0].Y = Q_WindWake[250].VertT55.Y;
					Q_WindWake[250].Lvert[41][0].Z = Q_WindWake[250].VertT55.Z;

							
					Q_WindWake[250].Lvert[41][1].u = 1;
					Q_WindWake[250].Lvert[41][1].v = 0;
					Q_WindWake[250].Lvert[41][1].X = Q_WindWake[250].VertT6.X;
					Q_WindWake[250].Lvert[41][1].Y = Q_WindWake[250].VertT6.Y;
					Q_WindWake[250].Lvert[41][1].Z = Q_WindWake[250].VertT6.Z;

							
					Q_WindWake[250].Lvert[41][2].u = 1;
					Q_WindWake[250].Lvert[41][2].v = 1;
					Q_WindWake[250].Lvert[41][2].X = Q_WindWake[250].VertB6.X;
					Q_WindWake[250].Lvert[41][2].Y = Q_WindWake[250].VertB6.Y;
					Q_WindWake[250].Lvert[41][2].Z = Q_WindWake[250].VertB6.Z;


					Q_WindWake[250].Lvert[41][3].u = 0;
					Q_WindWake[250].Lvert[41][3].v = 1;
					Q_WindWake[250].Lvert[41][3].X = Q_WindWake[250].VertB55.X;
					Q_WindWake[250].Lvert[41][3].Y = Q_WindWake[250].VertB55.Y;
					Q_WindWake[250].Lvert[41][3].Z = Q_WindWake[250].VertB55.Z;


					Q_WindWake[250].Lvert[42][0].u = 0;
					Q_WindWake[250].Lvert[42][0].v = 0;
					Q_WindWake[250].Lvert[42][0].X = Q_WindWake[250].VertT6.X;
					Q_WindWake[250].Lvert[42][0].Y = Q_WindWake[250].VertT6.Y;
					Q_WindWake[250].Lvert[42][0].Z = Q_WindWake[250].VertT6.Z;

							
					Q_WindWake[250].Lvert[42][1].u = 1;
					Q_WindWake[250].Lvert[42][1].v = 0;
					Q_WindWake[250].Lvert[42][1].X = Q_WindWake[250].VertT65.X;
					Q_WindWake[250].Lvert[42][1].Y = Q_WindWake[250].VertT65.Y;
					Q_WindWake[250].Lvert[42][1].Z = Q_WindWake[250].VertT65.Z;

							
					Q_WindWake[250].Lvert[42][2].u = 1;
					Q_WindWake[250].Lvert[42][2].v = 1;
					Q_WindWake[250].Lvert[42][2].X = Q_WindWake[250].VertB65.X;
					Q_WindWake[250].Lvert[42][2].Y = Q_WindWake[250].VertB65.Y;
					Q_WindWake[250].Lvert[42][2].Z = Q_WindWake[250].VertB65.Z;


					Q_WindWake[250].Lvert[42][3].u = 0;
					Q_WindWake[250].Lvert[42][3].v = 1;
					Q_WindWake[250].Lvert[42][3].X = Q_WindWake[250].VertB6.X;
					Q_WindWake[250].Lvert[42][3].Y = Q_WindWake[250].VertB6.Y;
					Q_WindWake[250].Lvert[42][3].Z = Q_WindWake[250].VertB6.Z;


					Q_WindWake[250].Lvert[43][0].u = 0;
					Q_WindWake[250].Lvert[43][0].v = 0;
					Q_WindWake[250].Lvert[43][0].X = Q_WindWake[250].VertT65.X;
					Q_WindWake[250].Lvert[43][0].Y = Q_WindWake[250].VertT65.Y;
					Q_WindWake[250].Lvert[43][0].Z = Q_WindWake[250].VertT65.Z;

							
					Q_WindWake[250].Lvert[43][1].u = 1;
					Q_WindWake[250].Lvert[43][1].v = 0;
					Q_WindWake[250].Lvert[43][1].X = Q_WindWake[250].VertT7.X;
					Q_WindWake[250].Lvert[43][1].Y = Q_WindWake[250].VertT7.Y;
					Q_WindWake[250].Lvert[43][1].Z = Q_WindWake[250].VertT7.Z;

							
					Q_WindWake[250].Lvert[43][2].u = 1;
					Q_WindWake[250].Lvert[43][2].v = 1;
					Q_WindWake[250].Lvert[43][2].X = Q_WindWake[250].VertB7.X;
					Q_WindWake[250].Lvert[43][2].Y = Q_WindWake[250].VertB7.Y;
					Q_WindWake[250].Lvert[43][2].Z = Q_WindWake[250].VertB7.Z;


					Q_WindWake[250].Lvert[43][3].u = 0;
					Q_WindWake[250].Lvert[43][3].v = 1;
					Q_WindWake[250].Lvert[43][3].X = Q_WindWake[250].VertB65.X;
					Q_WindWake[250].Lvert[43][3].Y = Q_WindWake[250].VertB65.Y;
					Q_WindWake[250].Lvert[43][3].Z = Q_WindWake[250].VertB65.Z;


					Q_WindWake[250].Lvert[44][0].u = 0;
					Q_WindWake[250].Lvert[44][0].v = 0;
					Q_WindWake[250].Lvert[44][0].X = Q_WindWake[250].VertT7.X;
					Q_WindWake[250].Lvert[44][0].Y = Q_WindWake[250].VertT7.Y;
					Q_WindWake[250].Lvert[44][0].Z = Q_WindWake[250].VertT7.Z;

							
					Q_WindWake[250].Lvert[44][1].u = 1;
					Q_WindWake[250].Lvert[44][1].v = 0;
					Q_WindWake[250].Lvert[44][1].X = Q_WindWake[250].VertT75.X;
					Q_WindWake[250].Lvert[44][1].Y = Q_WindWake[250].VertT75.Y;
					Q_WindWake[250].Lvert[44][1].Z = Q_WindWake[250].VertT75.Z;

							
					Q_WindWake[250].Lvert[44][2].u = 1;
					Q_WindWake[250].Lvert[44][2].v = 1;
					Q_WindWake[250].Lvert[44][2].X = Q_WindWake[250].VertB75.X;
					Q_WindWake[250].Lvert[44][2].Y = Q_WindWake[250].VertB75.Y;
					Q_WindWake[250].Lvert[44][2].Z = Q_WindWake[250].VertB75.Z;


					Q_WindWake[250].Lvert[44][3].u = 0;
					Q_WindWake[250].Lvert[44][3].v = 1;
					Q_WindWake[250].Lvert[44][3].X = Q_WindWake[250].VertB7.X;
					Q_WindWake[250].Lvert[44][3].Y = Q_WindWake[250].VertB7.Y;
					Q_WindWake[250].Lvert[44][3].Z = Q_WindWake[250].VertB7.Z;


					Q_WindWake[250].Lvert[45][0].u = 0;
					Q_WindWake[250].Lvert[45][0].v = 0;
					Q_WindWake[250].Lvert[45][0].X = Q_WindWake[250].VertT75.X;
					Q_WindWake[250].Lvert[45][0].Y = Q_WindWake[250].VertT75.Y;
					Q_WindWake[250].Lvert[45][0].Z = Q_WindWake[250].VertT75.Z;

							
					Q_WindWake[250].Lvert[45][1].u = 1;
					Q_WindWake[250].Lvert[45][1].v = 0;
					Q_WindWake[250].Lvert[45][1].X = Q_WindWake[250].VertT8.X;
					Q_WindWake[250].Lvert[45][1].Y = Q_WindWake[250].VertT8.Y;
					Q_WindWake[250].Lvert[45][1].Z = Q_WindWake[250].VertT8.Z;

							
					Q_WindWake[250].Lvert[45][2].u = 1;
					Q_WindWake[250].Lvert[45][2].v = 1;
					Q_WindWake[250].Lvert[45][2].X = Q_WindWake[250].VertB8.X;
					Q_WindWake[250].Lvert[45][2].Y = Q_WindWake[250].VertB8.Y;
					Q_WindWake[250].Lvert[45][2].Z = Q_WindWake[250].VertB8.Z;


					Q_WindWake[250].Lvert[45][3].u = 0;
					Q_WindWake[250].Lvert[45][3].v = 1;
					Q_WindWake[250].Lvert[45][3].X = Q_WindWake[250].VertB75.X;
					Q_WindWake[250].Lvert[45][3].Y = Q_WindWake[250].VertB75.Y;
					Q_WindWake[250].Lvert[45][3].Z = Q_WindWake[250].VertB75.Z;


					Q_WindWake[250].Lvert[46][0].u = 0;
					Q_WindWake[250].Lvert[46][0].v = 0;
					Q_WindWake[250].Lvert[46][0].X = Q_WindWake[250].VertT8.X;
					Q_WindWake[250].Lvert[46][0].Y = Q_WindWake[250].VertT8.Y;
					Q_WindWake[250].Lvert[46][0].Z = Q_WindWake[250].VertT8.Z;

							
					Q_WindWake[250].Lvert[46][1].u = 1;
					Q_WindWake[250].Lvert[46][1].v = 0;
					Q_WindWake[250].Lvert[46][1].X = Q_WindWake[250].VertT85.X;
					Q_WindWake[250].Lvert[46][1].Y = Q_WindWake[250].VertT85.Y;
					Q_WindWake[250].Lvert[46][1].Z = Q_WindWake[250].VertT85.Z;


					Q_WindWake[250].Lvert[46][2].u = 1;
					Q_WindWake[250].Lvert[46][2].v = 1;
					Q_WindWake[250].Lvert[46][2].X = Q_WindWake[250].VertB85.X;
					Q_WindWake[250].Lvert[46][2].Y = Q_WindWake[250].VertB85.Y;
					Q_WindWake[250].Lvert[46][2].Z = Q_WindWake[250].VertB85.Z;


					Q_WindWake[250].Lvert[46][3].u = 0;
					Q_WindWake[250].Lvert[46][3].v = 1;
					Q_WindWake[250].Lvert[46][3].X = Q_WindWake[250].VertB8.X;
					Q_WindWake[250].Lvert[46][3].Y = Q_WindWake[250].VertB8.Y;
					Q_WindWake[250].Lvert[46][3].Z = Q_WindWake[250].VertB8.Z;


					Q_WindWake[250].Lvert[47][0].u = 0;
					Q_WindWake[250].Lvert[47][0].v = 0;
					Q_WindWake[250].Lvert[47][0].X = Q_WindWake[250].VertT85.X;
					Q_WindWake[250].Lvert[47][0].Y = Q_WindWake[250].VertT85.Y;
					Q_WindWake[250].Lvert[47][0].Z = Q_WindWake[250].VertT85.Z;


					Q_WindWake[250].Lvert[47][1].u = 1;
					Q_WindWake[250].Lvert[47][1].v = 0;
					Q_WindWake[250].Lvert[47][1].X = Q_WindWake[250].VertT1.X;
					Q_WindWake[250].Lvert[47][1].Y = Q_WindWake[250].VertT1.Y;
					Q_WindWake[250].Lvert[47][1].Z = Q_WindWake[250].VertT1.Z;


					Q_WindWake[250].Lvert[47][2].u = 1;
					Q_WindWake[250].Lvert[47][2].v = 1;
					Q_WindWake[250].Lvert[47][2].X = Q_WindWake[250].VertB1.X;
					Q_WindWake[250].Lvert[47][2].Y = Q_WindWake[250].VertB1.Y;
					Q_WindWake[250].Lvert[47][2].Z = Q_WindWake[250].VertB1.Z;


					Q_WindWake[250].Lvert[47][3].u = 0;
					Q_WindWake[250].Lvert[47][3].v = 1;
					Q_WindWake[250].Lvert[47][3].X = Q_WindWake[250].VertB85.X;
					Q_WindWake[250].Lvert[47][3].Y = Q_WindWake[250].VertB85.Y;
					Q_WindWake[250].Lvert[47][3].Z = Q_WindWake[250].VertB85.Z;



		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE == 0)
			{
			i = 0;
			while(i <= 15)
				{
				geWorld_AddPolyOnce(World, &Q_WindWake[250].Lvert[i][0], 3, Water[Q_WindWake[250].MaterialCNT], Q_WindWake[250].Type, Q_WindWake[250].RenderFlags, 1.0f);
				i++;
				}

			i = 16;
			while(i <= 47)
				{
				geWorld_AddPolyOnce(World, &Q_WindWake[250].Lvert[i][0], 4, Water[Q_WindWake[250].MaterialCNT], Q_WindWake[250].Type, Q_WindWake[250].RenderFlags, 1.0f);
				i++;
				}
			}

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE == 1)
			{
			i = 0;
			while(i <= 15)
				{
				geWorld_AddPolyOnce(World, &Q_WindWake[250].Lvert[i][0], 3, fire[Q_WindWake[250].MaterialCNT], Q_WindWake[250].Type, Q_WindWake[250].RenderFlags, 1.0f);
				i++;
				}

			i = 16;
			while(i <= 47)
				{
				geWorld_AddPolyOnce(World, &Q_WindWake[250].Lvert[i][0], 4, fire[Q_WindWake[250].MaterialCNT], Q_WindWake[250].Type, Q_WindWake[250].RenderFlags, 1.0f);
				i++;
				}
			}


		//###### Initialise one Textured Tri Effect - WindWake Ring Trail - Static
		player.Q_TexTriEffect[player.NomTriEffect].Live = 1;
		player.Q_TexTriEffect[player.NomTriEffect].PosB = Q_WindWake[250].Pos;
		player.Q_TexTriEffect[player.NomTriEffect].Pos = player.Q_TexTriEffect[player.NomTriEffect].STRPos;

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE == 0)
			{ player.Q_TexTriEffect[player.NomTriEffect].EffectType = 1; }

		if(player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE == 1)
			{ player.Q_TexTriEffect[player.NomTriEffect].EffectType = 4; }

		//#### Set Back facing verts
		if(player.NomTriEffect != 0)
			{
			//#### Set front verts
			player.Q_TexTriEffect[player.NomTriEffect].VertT1 = Q_WindWake[250].VertB1;
			player.Q_TexTriEffect[player.NomTriEffect].VertT15 = Q_WindWake[250].VertB15;
			player.Q_TexTriEffect[player.NomTriEffect].VertT2 = Q_WindWake[250].VertB2;
			player.Q_TexTriEffect[player.NomTriEffect].VertT25 = Q_WindWake[250].VertB25;
			player.Q_TexTriEffect[player.NomTriEffect].VertT3 = Q_WindWake[250].VertB3;
			player.Q_TexTriEffect[player.NomTriEffect].VertT35 = Q_WindWake[250].VertB35;
			player.Q_TexTriEffect[player.NomTriEffect].VertT4 = Q_WindWake[250].VertB4;
			player.Q_TexTriEffect[player.NomTriEffect].VertT45 = Q_WindWake[250].VertB45;
			player.Q_TexTriEffect[player.NomTriEffect].VertT5 = Q_WindWake[250].VertB5;
			player.Q_TexTriEffect[player.NomTriEffect].VertT55 = Q_WindWake[250].VertB55;
			player.Q_TexTriEffect[player.NomTriEffect].VertT6 = Q_WindWake[250].VertB6;
			player.Q_TexTriEffect[player.NomTriEffect].VertT65 = Q_WindWake[250].VertB65;
			player.Q_TexTriEffect[player.NomTriEffect].VertT7 = Q_WindWake[250].VertB7;
			player.Q_TexTriEffect[player.NomTriEffect].VertT75 = Q_WindWake[250].VertB75;
			player.Q_TexTriEffect[player.NomTriEffect].VertT8 = Q_WindWake[250].VertB8;
			player.Q_TexTriEffect[player.NomTriEffect].VertT85 = Q_WindWake[250].VertB85;

			player.Q_TexTriEffect[player.NomTriEffect].VertB1 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT1;
			player.Q_TexTriEffect[player.NomTriEffect].VertB15 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT15;
			player.Q_TexTriEffect[player.NomTriEffect].VertB2 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT2;
			player.Q_TexTriEffect[player.NomTriEffect].VertB25 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT25;
			player.Q_TexTriEffect[player.NomTriEffect].VertB3 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT3;
			player.Q_TexTriEffect[player.NomTriEffect].VertB35 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT35;
			player.Q_TexTriEffect[player.NomTriEffect].VertB4 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT4;
			player.Q_TexTriEffect[player.NomTriEffect].VertB45 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT45;
			player.Q_TexTriEffect[player.NomTriEffect].VertB5 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT5;
			player.Q_TexTriEffect[player.NomTriEffect].VertB55 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT55;
			player.Q_TexTriEffect[player.NomTriEffect].VertB6 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT6;
			player.Q_TexTriEffect[player.NomTriEffect].VertB65 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT65;
			player.Q_TexTriEffect[player.NomTriEffect].VertB7 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT7;
			player.Q_TexTriEffect[player.NomTriEffect].VertB75 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT75;
			player.Q_TexTriEffect[player.NomTriEffect].VertB8 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT8;
			player.Q_TexTriEffect[player.NomTriEffect].VertB85 = player.Q_TexTriEffect[player.NomTriEffect-1].VertT85;
			}
		else
			{
			//#### Set front verts
			player.Q_TexTriEffect[player.NomTriEffect].VertT1 = Q_WindWake[250].VertT1;
			player.Q_TexTriEffect[player.NomTriEffect].VertT15 = Q_WindWake[250].VertT15;
			player.Q_TexTriEffect[player.NomTriEffect].VertT2 = Q_WindWake[250].VertT2;
			player.Q_TexTriEffect[player.NomTriEffect].VertT25 = Q_WindWake[250].VertT25;
			player.Q_TexTriEffect[player.NomTriEffect].VertT3 = Q_WindWake[250].VertT3;
			player.Q_TexTriEffect[player.NomTriEffect].VertT35 = Q_WindWake[250].VertT35;
			player.Q_TexTriEffect[player.NomTriEffect].VertT4 = Q_WindWake[250].VertT4;
			player.Q_TexTriEffect[player.NomTriEffect].VertT45 = Q_WindWake[250].VertT45;
			player.Q_TexTriEffect[player.NomTriEffect].VertT5 = Q_WindWake[250].VertT5;
			player.Q_TexTriEffect[player.NomTriEffect].VertT55 = Q_WindWake[250].VertT55;
			player.Q_TexTriEffect[player.NomTriEffect].VertT6 = Q_WindWake[250].VertT6;
			player.Q_TexTriEffect[player.NomTriEffect].VertT65 = Q_WindWake[250].VertT65;
			player.Q_TexTriEffect[player.NomTriEffect].VertT7 = Q_WindWake[250].VertT7;
			player.Q_TexTriEffect[player.NomTriEffect].VertT75 = Q_WindWake[250].VertT75;
			player.Q_TexTriEffect[player.NomTriEffect].VertT8 = Q_WindWake[250].VertT8;
			player.Q_TexTriEffect[player.NomTriEffect].VertT85 = Q_WindWake[250].VertT85;

			player.Q_TexTriEffect[player.NomTriEffect].VertB1 = Q_WindWake[250].VertB1;
			player.Q_TexTriEffect[player.NomTriEffect].VertB15 = Q_WindWake[250].VertB15;
			player.Q_TexTriEffect[player.NomTriEffect].VertB2 = Q_WindWake[250].VertB2;
			player.Q_TexTriEffect[player.NomTriEffect].VertB25 = Q_WindWake[250].VertB25;
			player.Q_TexTriEffect[player.NomTriEffect].VertB3 = Q_WindWake[250].VertB3;
			player.Q_TexTriEffect[player.NomTriEffect].VertB35 = Q_WindWake[250].VertB35;
			player.Q_TexTriEffect[player.NomTriEffect].VertB4 = Q_WindWake[250].VertB4;
			player.Q_TexTriEffect[player.NomTriEffect].VertB45 = Q_WindWake[250].VertB45;
			player.Q_TexTriEffect[player.NomTriEffect].VertB5 = Q_WindWake[250].VertB5;
			player.Q_TexTriEffect[player.NomTriEffect].VertB55 = Q_WindWake[250].VertB55;
			player.Q_TexTriEffect[player.NomTriEffect].VertB6 = Q_WindWake[250].VertB6;
			player.Q_TexTriEffect[player.NomTriEffect].VertB65 = Q_WindWake[250].VertB65;
			player.Q_TexTriEffect[player.NomTriEffect].VertB7 = Q_WindWake[250].VertB7;
			player.Q_TexTriEffect[player.NomTriEffect].VertB75 = Q_WindWake[250].VertB75;
			player.Q_TexTriEffect[player.NomTriEffect].VertB8 = Q_WindWake[250].VertB8;
			player.Q_TexTriEffect[player.NomTriEffect].VertB85 = Q_WindWake[250].VertB85;
			}


		player.Q_TexTriEffect[player.NomTriEffect].VecIn = Q_WindWake[250].VecIn;
		player.Q_TexTriEffect[player.NomTriEffect].VecUp = Q_WindWake[250].VecUp;
		player.Q_TexTriEffect[player.NomTriEffect].VecLeft = Q_WindWake[250].VecLeft;

		player.Q_TexTriEffect[player.NomTriEffect].MaterialCNT = Q_WindWake[250].MaterialCNT;

		if(player.JinkSpecialON < 1)
			{
			player.Q_TexTriEffect[player.NomTriEffect].Red = 255;
			player.Q_TexTriEffect[player.NomTriEffect].Green = 255;
			player.Q_TexTriEffect[player.NomTriEffect].Blue = 255;
			player.Q_TexTriEffect[player.NomTriEffect].Alpha = Q_WindWake[250].MAINALPHA;
			}
		else
			{
			//player.Q_TexTriEffect[player.NomTriEffect].Alpha = Q_WindWake[250].MAINALPHA/2;
			player.Q_TexTriEffect[player.NomTriEffect].Alpha = Q_WindWake[250].MAINALPHA;
			player.Q_TexTriEffect[player.NomTriEffect].Red = player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkRED;	//135
			player.Q_TexTriEffect[player.NomTriEffect].Green = player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkGREEN;
			player.Q_TexTriEffect[player.NomTriEffect].Blue = player.CDATA->CharDATA[player.CDATA->CurrCHAR].AngelEFFECTS.JinkBLUE;
			}

		player.Q_TexTriEffect[player.NomTriEffect].LengthDist = 3;
		player.Q_TexTriEffect[player.NomTriEffect].ExpandDist = 0.01;

		player.Q_TexTriEffect[player.NomTriEffect].PolyType = GE_TEXTURED_POLY;
		player.Q_TexTriEffect[player.NomTriEffect].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
		player.Q_TexTriEffect[player.NomTriEffect].ScaleBIT = 1.0f;

		if(player.NomTriEffect == 0)
			{
			TriEffectUt = 0.1;
			TriEffectUb = 0;
			}
		else
			{
			TriEffectUt += 0.1;
			TriEffectUb += 0.1;
			if(TriEffectUt > 1)
				{
				TriEffectUt = 0.1;
				TriEffectUb = 0;
				}
			}

		player.Q_TexTriEffect[player.NomTriEffect].Ut = TriEffectUt;
		player.Q_TexTriEffect[player.NomTriEffect].Ub = TriEffectUb;

		player.NomTriEffect++;
		if(player.NomTriEffect > 299) player.NomTriEffect = 0;
		}



	//#####- AI WIND WAKE -#####
	aero = 0;
	while(aero < NomAI)
		{
		if(Forge[aero].LIVE == 1)
			{
			if(Forge[aero].WindWake == 1)
				{
				Q_WindWake[aero].MAINALPHA += 15*TimeScale;
				if((Q_WindWake[aero].MAINALPHA > Q_WindWake[aero].AlphaMAX) && Q_WindWake[aero].AlphaMAX != 0) Q_WindWake[aero].MAINALPHA = Q_WindWake[aero].AlphaMAX;
				}
			else
				{
				Q_WindWake[aero].MAINALPHA -= 6*TimeScale; //15
				if(Q_WindWake[aero].MAINALPHA < 0) Q_WindWake[aero].MAINALPHA = 0;
				}


			if(Q_WindWake[aero].MAINALPHA > 0)
				{
				//#### Default Values for standard JUMP
				Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
				Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 72.5;
				Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 143;
				Q_WindWake[aero].AlphaMAX = 45;

				//### Change Scale and center point depending on attack type
				if(Forge[aero].Aposestate == 24)	//Jump Kick
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 65;	//82.5
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 125;
					Q_WindWake[aero].AlphaMAX = 35;
					}

				if(Forge[aero].Aposestate == 22)	//Leap Spin Kick
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 82.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 160;
					Q_WindWake[aero].AlphaMAX = 40;
					}

				if(Forge[aero].Aposestate == 76) // JSRush UP
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 87.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 115;
					Q_WindWake[aero].AlphaMAX = 50;
					}

				if(Forge[aero].Aposestate == 74)	//JSRush Punch
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 82.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 140;
					Q_WindWake[aero].AlphaMAX = 40;
					}

				if(Forge[aero].Aposestate == 73)	//JSRUSH
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 82.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 150;
					Q_WindWake[aero].AlphaMAX = 90;
					}

				if(Forge[aero].Aposestate == 61)	//Twist Kick
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 82.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 150;
					Q_WindWake[aero].AlphaMAX = 40;
					}

				if(Forge[aero].Aposestate == 65)	//Rush Elbow
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 57.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 105;
					Q_WindWake[aero].AlphaMAX = 80;
					}

				if(Forge[aero].Aposestate == 84)	//Overhead Pinwheel
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 67.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 115;
					Q_WindWake[aero].AlphaMAX = 65;
					}

				if(Forge[aero].Aposestate == 81)	//Spin Out Left
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 82.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 140;
					Q_WindWake[aero].AlphaMAX = 40;
					}

				if(Forge[aero].Mposestate == 26)	//Roll Forward
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 52.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 100;
					Q_WindWake[aero].AlphaMAX = 30;
					}

				if(Forge[aero].Mposestate == 28)	//Roll Left
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 52.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 100;
					Q_WindWake[aero].AlphaMAX = 25;
					}

				if(Forge[aero].Mposestate == 29)	//Roll Right
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 52.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 100;
					Q_WindWake[aero].AlphaMAX = 25;
					}

				if(Forge[aero].Mposestate == 8)	//BackFlip
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 60;	//82.5
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 145;
					Q_WindWake[aero].AlphaMAX = 45;
					}

				if(Forge[aero].Mposestate == 23)	//Cartwheel Left
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 82.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 145;
					Q_WindWake[aero].AlphaMAX = 30;
					}

				if(Forge[aero].Mposestate == 24)	//Cartwheel Right
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 82.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 145;
					Q_WindWake[aero].AlphaMAX = 30;
					}

				if(Forge[aero].Mposestate == 15)	//Air Rush Forward
					{
					Q_WindWake[aero].Pos = Forge[aero].Avatar.ActorXform.Translation;
					Q_WindWake[aero].Pos.Y += (75 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 82.5;
					Q_WindWake[aero].Scale = (100 * (((Forge[aero].CharDATA.BodySKILL.Height/100)-0.5)*1)) + 125;
					Q_WindWake[aero].AlphaMAX = 65;
					}

				//#### Revert to WindWake Memory
				if(Forge[aero].WindWake == 0)
					{
					Q_WindWake[aero].Pos = Q_WindWake[aero].MeMPos;
					Q_WindWake[aero].Scale = Q_WindWake[aero].MeMScale;
					Q_WindWake[aero].AlphaMAX = Q_WindWake[aero].MeMAlphaMAX;
					}

				if(Forge[aero].INvectorAPC.X == 0 && Forge[aero].INvectorAPC.Y == 0 && Forge[aero].INvectorAPC.Z == 0) Forge[aero].INvectorAPC = Q_WindWake[aero].MeMINvectorAPC;


				//##### Calculate Direction Vectors
				geXForm3d_SetYRotation(&RotateMatrix, PI/2);
				geXForm3d_Rotate(&RotateMatrix, &Forge[aero].INvectorAPC, &Forge[aero].LEFTvectorAPC);
				geVec3d_Normalize(&Forge[aero].LEFTvectorAPC);
				Forge[aero].LEFTvectorAPC.Y = 0;

				geVec3d_CrossProduct(&Forge[aero].LEFTvectorAPC, &Forge[aero].INvectorAPC, &Forge[aero].UPvectorAPC);
				geVec3d_Normalize(&Forge[aero].UPvectorAPC);

				if(Forge[aero].INvectorAPC.Y != 1)
					{
					Q_WindWake[aero].VecIn = Forge[aero].INvectorAPC;
					Q_WindWake[aero].VecUp = Forge[aero].UPvectorAPC;
					Q_WindWake[aero].VecLeft = Forge[aero].LEFTvectorAPC;
					}
				else
					{
					geXForm3d_GetUp(&Forge[aero].Avatar.ActorXform, &Q_WindWake[aero].VecUp);
					geVec3d_Inverse(&Q_WindWake[aero].VecUp);
					geXForm3d_GetLeft(&Forge[aero].Avatar.ActorXform, &Q_WindWake[aero].VecLeft);
					Q_WindWake[aero].VecIn.X = 0;
					Q_WindWake[aero].VecIn.Y = 1;
					Q_WindWake[aero].VecIn.Z = 0;
					}

				geVec3d_MA(&Q_WindWake[aero].Pos, 45, &Q_WindWake[aero].VecIn, &Q_WindWake[aero].Pos);
				Q_WindWake[aero].STRPos = Q_WindWake[aero].Pos;

				Q_WindWake[aero].Type = GE_TEXTURED_POLY;
				Q_WindWake[aero].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
				Q_WindWake[aero].ScaleBIT = 1.0f;
				//END INIT

				if(Forge[aero].CharDATA.AngelEFFECTS.JinkTYPE == 0)
					{
					Q_WindWake[aero].MaterialCNT++;
					if(Q_WindWake[aero].MaterialCNT < 124) Q_WindWake[aero].MaterialCNT = 124;
					if(Q_WindWake[aero].MaterialCNT > 136) Q_WindWake[aero].MaterialCNT = 124;
					}

				if(Forge[aero].CharDATA.AngelEFFECTS.JinkTYPE == 1)
					{
					Q_WindWake[aero].MaterialCNT++;
					if(Q_WindWake[aero].MaterialCNT < 82) Q_WindWake[aero].MaterialCNT = 82;
					if(Q_WindWake[aero].MaterialCNT > 96) Q_WindWake[aero].MaterialCNT = 82;
					}


				//####### Store WindWake Memory
				if(Forge[aero].WindWake == 1)
					{
					Q_WindWake[aero].MeMPos = Q_WindWake[aero].Pos;
					Q_WindWake[aero].MeMScale = Q_WindWake[aero].Scale;
					Q_WindWake[aero].MeMAlphaMAX = Q_WindWake[aero].AlphaMAX;

					Q_WindWake[aero].MeMINvectorAPC = Forge[aero].INvectorAPC;

					Q_WindWake[aero].MeMJinkSpecialON = Forge[aero].JinkSpecialON;
					}


					//### FRONT VERT
				Q_WindWake[aero].VertFNT = Q_WindWake[aero].STRPos;


					//### Shift Back for second ring					//15
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/20, &Q_WindWake[aero].VecIn, &Q_WindWake[aero].Pos);


					//##### RING TWO
							//TOP VERT1
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/8, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM1);

							//TOP VERT15
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/9, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM15);
				geVec3d_MA(&Q_WindWake[aero].VertM15, -Q_WindWake[aero].Scale/14.75, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM15);

							//TOP VERT2
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/11.5, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM2);
				geVec3d_MA(&Q_WindWake[aero].VertM2, -Q_WindWake[aero].Scale/11.5, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM2);

							//TOP VERT25
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/14.75, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM25);
				geVec3d_MA(&Q_WindWake[aero].VertM25, -Q_WindWake[aero].Scale/9, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM25);

							//TOP VERT3
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/8, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM3);

							//TOP VERT35
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/14.75, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM35);
				geVec3d_MA(&Q_WindWake[aero].VertM35, -Q_WindWake[aero].Scale/9, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM35);

							//TOP VERT4
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/11.5, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM4);
				geVec3d_MA(&Q_WindWake[aero].VertM4, -Q_WindWake[aero].Scale/11.5, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM4);

							//TOP VERT45
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/9, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM45);
				geVec3d_MA(&Q_WindWake[aero].VertM45, -Q_WindWake[aero].Scale/14.75, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM45);

							//TOP VERT5
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/8, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM5);

							//TOP VERT55
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/9, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM55);
				geVec3d_MA(&Q_WindWake[aero].VertM55, Q_WindWake[aero].Scale/14.75, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM55);

							//TOP VERT6
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/11.5, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM6);
				geVec3d_MA(&Q_WindWake[aero].VertM6, Q_WindWake[aero].Scale/11.5, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM6);

							//TOP VERT65
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/14.75, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM65);
				geVec3d_MA(&Q_WindWake[aero].VertM65, Q_WindWake[aero].Scale/9, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM65);

							//TOP VERT7
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/8, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM7);

							//TOP VERT75
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/14.75, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM75);
				geVec3d_MA(&Q_WindWake[aero].VertM75, Q_WindWake[aero].Scale/9, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM75);

							//TOP VERT8
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/11.5, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM8);
				geVec3d_MA(&Q_WindWake[aero].VertM8, Q_WindWake[aero].Scale/11.5, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM8);

							//TOP VERT85
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/9, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertM85);
				geVec3d_MA(&Q_WindWake[aero].VertM85, Q_WindWake[aero].Scale/14.75, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertM85);



					//### Shift Back for first ring					//4   11
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/5, &Q_WindWake[aero].VecIn, &Q_WindWake[aero].Pos);
				geVec3d_MA(&Q_WindWake[aero].STRPos, -Q_WindWake[aero].Scale/5, &Q_WindWake[aero].VecIn, &Q_WindWake[aero].STRPos);
				
				
					//##### RING ONE
							//TOP VERT1
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT1);

							//TOP VERT15
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/3.15, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT15);
				geVec3d_MA(&Q_WindWake[aero].VertT15, -Q_WindWake[aero].Scale/11, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT15);

							//TOP VERT2
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/4, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT2);
				geVec3d_MA(&Q_WindWake[aero].VertT2, -Q_WindWake[aero].Scale/4, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT2);

							//TOP VERT25
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/11, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT25);
				geVec3d_MA(&Q_WindWake[aero].VertT25, -Q_WindWake[aero].Scale/3.15, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT25);

							//TOP VERT3
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT3);

							//TOP VERT35
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/11, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT35);
				geVec3d_MA(&Q_WindWake[aero].VertT35, -Q_WindWake[aero].Scale/3.15, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT35);

							//TOP VERT4
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/4, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT4);
				geVec3d_MA(&Q_WindWake[aero].VertT4, -Q_WindWake[aero].Scale/4, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT4);

							//TOP VERT45
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/3.15, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT45);
				geVec3d_MA(&Q_WindWake[aero].VertT45, -Q_WindWake[aero].Scale/11, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT45);

							//TOP VERT5
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT5);

							//TOP VERT55
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/3.15, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT55);
				geVec3d_MA(&Q_WindWake[aero].VertT55, Q_WindWake[aero].Scale/11, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT55);

							//TOP VERT6
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/4, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT6);
				geVec3d_MA(&Q_WindWake[aero].VertT6, Q_WindWake[aero].Scale/4, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT6);

							//TOP VERT65
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/11, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT65);
				geVec3d_MA(&Q_WindWake[aero].VertT65, Q_WindWake[aero].Scale/3.15, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT65);

							//TOP VERT7
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT7);

							//TOP VERT75
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/11, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT75);
				geVec3d_MA(&Q_WindWake[aero].VertT75, Q_WindWake[aero].Scale/3.15, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT75);

							//TOP VERT8
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/4, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT8);
				geVec3d_MA(&Q_WindWake[aero].VertT8, Q_WindWake[aero].Scale/4, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT8);

							//TOP VERT85
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/3.15, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertT85);
				geVec3d_MA(&Q_WindWake[aero].VertT85, Q_WindWake[aero].Scale/11, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertT85);


					//### Shift Back for second ring				// 3 <- V GOOD         3.5	4.5
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/3.35, &Q_WindWake[aero].VecIn, &Q_WindWake[aero].Pos);


					//##### RING TWO
							//TOP VERT1
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/2.7, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB1);

							//TOP VERT15
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB15);
				geVec3d_MA(&Q_WindWake[aero].VertB15, -Q_WindWake[aero].Scale/8.2, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB15);

							//TOP VERT2
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/3.5, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB2);
				geVec3d_MA(&Q_WindWake[aero].VertB2, -Q_WindWake[aero].Scale/3.5, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB2);

							//TOP VERT25
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/8.2, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB25);
				geVec3d_MA(&Q_WindWake[aero].VertB25, -Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB25);

							//TOP VERT3
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/2.7, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB3);

							//TOP VERT35
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/8.2, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB35);
				geVec3d_MA(&Q_WindWake[aero].VertB35, -Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB35);

							//TOP VERT4
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/3.5, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB4);
				geVec3d_MA(&Q_WindWake[aero].VertB4, -Q_WindWake[aero].Scale/3.5, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB4);

							//TOP VERT45
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB45);
				geVec3d_MA(&Q_WindWake[aero].VertB45, -Q_WindWake[aero].Scale/8.2, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB45);

							//TOP VERT5
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/2.7, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB5);

							//TOP VERT55
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB55);
				geVec3d_MA(&Q_WindWake[aero].VertB55, Q_WindWake[aero].Scale/8.2, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB55);

							//TOP VERT6
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/3.5, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB6);
				geVec3d_MA(&Q_WindWake[aero].VertB6, Q_WindWake[aero].Scale/3.5, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB6);

							//TOP VERT65
				geVec3d_MA(&Q_WindWake[aero].Pos, -Q_WindWake[aero].Scale/8.2, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB65);
				geVec3d_MA(&Q_WindWake[aero].VertB65, Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB65);

							//TOP VERT7
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/2.7, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB7);

							//TOP VERT75
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/8.2, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB75);
				geVec3d_MA(&Q_WindWake[aero].VertB75, Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB75);

							//TOP VERT8
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/3.5, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB8);
				geVec3d_MA(&Q_WindWake[aero].VertB8, Q_WindWake[aero].Scale/3.5, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB8);

							//TOP VERT85
				geVec3d_MA(&Q_WindWake[aero].Pos, Q_WindWake[aero].Scale/3, &Q_WindWake[aero].VecUp, &Q_WindWake[aero].VertB85);
				geVec3d_MA(&Q_WindWake[aero].VertB85, Q_WindWake[aero].Scale/8.2, &Q_WindWake[aero].VecLeft, &Q_WindWake[aero].VertB85);


						a=0;
						while( a <= 47 )
							{
							b=0;
							while( b <= 3 )
								{
								if(Forge[aero].WindWake == 1)
									{
									if(Forge[aero].JinkSpecialON < 1)
										{
										Q_WindWake[aero].Lvert[a][b].a = Q_WindWake[aero].MAINALPHA;
										Q_WindWake[aero].Lvert[a][b].b = 255;
										Q_WindWake[aero].Lvert[a][b].g = 255;
										Q_WindWake[aero].Lvert[a][b].r = 255;
										}
									else
										{
										Q_WindWake[aero].Lvert[a][b].a = Q_WindWake[aero].MAINALPHA;
										Q_WindWake[aero].Lvert[a][b].b = Forge[aero].CharDATA.AngelEFFECTS.JinkBLUE;	//135
										Q_WindWake[aero].Lvert[a][b].g = Forge[aero].CharDATA.AngelEFFECTS.JinkGREEN;
										Q_WindWake[aero].Lvert[a][b].r = Forge[aero].CharDATA.AngelEFFECTS.JinkRED;
										}
									}
								else
									{
									if(Q_WindWake[aero].MeMJinkSpecialON < 1)
										{
										Q_WindWake[aero].Lvert[a][b].a = Q_WindWake[aero].MAINALPHA;
										Q_WindWake[aero].Lvert[a][b].b = 255;
										Q_WindWake[aero].Lvert[a][b].g = 255;
										Q_WindWake[aero].Lvert[a][b].r = 255;
										}
									else
										{
										Q_WindWake[aero].Lvert[a][b].a = Q_WindWake[aero].MAINALPHA;
										Q_WindWake[aero].Lvert[a][b].b = Forge[aero].CharDATA.AngelEFFECTS.JinkBLUE;	//135
										Q_WindWake[aero].Lvert[a][b].g = Forge[aero].CharDATA.AngelEFFECTS.JinkGREEN;
										Q_WindWake[aero].Lvert[a][b].r = Forge[aero].CharDATA.AngelEFFECTS.JinkRED;
										}
									}
								b++;
								}
							a++;
							}


							//##### - FRONT CUP

							Q_WindWake[aero].Lvert[0][0].u = 0.5;
							Q_WindWake[aero].Lvert[0][0].v = 0;
							Q_WindWake[aero].Lvert[0][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[0][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[0][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[0][1].u = 1;
							Q_WindWake[aero].Lvert[0][1].v = 1;
							Q_WindWake[aero].Lvert[0][1].X = Q_WindWake[aero].VertM15.X;
							Q_WindWake[aero].Lvert[0][1].Y = Q_WindWake[aero].VertM15.Y;
							Q_WindWake[aero].Lvert[0][1].Z = Q_WindWake[aero].VertM15.Z;

							
							Q_WindWake[aero].Lvert[0][2].u = 0;
							Q_WindWake[aero].Lvert[0][2].v = 1;
							Q_WindWake[aero].Lvert[0][2].X = Q_WindWake[aero].VertM1.X;
							Q_WindWake[aero].Lvert[0][2].Y = Q_WindWake[aero].VertM1.Y;
							Q_WindWake[aero].Lvert[0][2].Z = Q_WindWake[aero].VertM1.Z;


							Q_WindWake[aero].Lvert[1][0].u = 0.5;
							Q_WindWake[aero].Lvert[1][0].v = 0;
							Q_WindWake[aero].Lvert[1][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[1][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[1][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[1][1].u = 1;
							Q_WindWake[aero].Lvert[1][1].v = 1;
							Q_WindWake[aero].Lvert[1][1].X = Q_WindWake[aero].VertM25.X;
							Q_WindWake[aero].Lvert[1][1].Y = Q_WindWake[aero].VertM25.Y;
							Q_WindWake[aero].Lvert[1][1].Z = Q_WindWake[aero].VertM25.Z;

									
							Q_WindWake[aero].Lvert[1][2].u = 0;
							Q_WindWake[aero].Lvert[1][2].v = 1;
							Q_WindWake[aero].Lvert[1][2].X = Q_WindWake[aero].VertM2.X;
							Q_WindWake[aero].Lvert[1][2].Y = Q_WindWake[aero].VertM2.Y;
							Q_WindWake[aero].Lvert[1][2].Z = Q_WindWake[aero].VertM2.Z;


							Q_WindWake[aero].Lvert[2][0].u = 0.5;
							Q_WindWake[aero].Lvert[2][0].v = 0;
							Q_WindWake[aero].Lvert[2][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[2][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[2][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[2][1].u = 1;
							Q_WindWake[aero].Lvert[2][1].v = 1;
							Q_WindWake[aero].Lvert[2][1].X = Q_WindWake[aero].VertM35.X;
							Q_WindWake[aero].Lvert[2][1].Y = Q_WindWake[aero].VertM35.Y;
							Q_WindWake[aero].Lvert[2][1].Z = Q_WindWake[aero].VertM35.Z;

									
							Q_WindWake[aero].Lvert[2][2].u = 0;
							Q_WindWake[aero].Lvert[2][2].v = 1;
							Q_WindWake[aero].Lvert[2][2].X = Q_WindWake[aero].VertM3.X;
							Q_WindWake[aero].Lvert[2][2].Y = Q_WindWake[aero].VertM3.Y;
							Q_WindWake[aero].Lvert[2][2].Z = Q_WindWake[aero].VertM3.Z;


							Q_WindWake[aero].Lvert[3][0].u = 0.5;
							Q_WindWake[aero].Lvert[3][0].v = 0;
							Q_WindWake[aero].Lvert[3][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[3][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[3][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[3][1].u = 1;
							Q_WindWake[aero].Lvert[3][1].v = 1;
							Q_WindWake[aero].Lvert[3][1].X = Q_WindWake[aero].VertM45.X;
							Q_WindWake[aero].Lvert[3][1].Y = Q_WindWake[aero].VertM45.Y;
							Q_WindWake[aero].Lvert[3][1].Z = Q_WindWake[aero].VertM45.Z;

									
							Q_WindWake[aero].Lvert[3][2].u = 0;
							Q_WindWake[aero].Lvert[3][2].v = 1;
							Q_WindWake[aero].Lvert[3][2].X = Q_WindWake[aero].VertM4.X;
							Q_WindWake[aero].Lvert[3][2].Y = Q_WindWake[aero].VertM4.Y;
							Q_WindWake[aero].Lvert[3][2].Z = Q_WindWake[aero].VertM4.Z;


							Q_WindWake[aero].Lvert[4][0].u = 0.5;
							Q_WindWake[aero].Lvert[4][0].v = 0;
							Q_WindWake[aero].Lvert[4][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[4][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[4][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[4][1].u = 1;
							Q_WindWake[aero].Lvert[4][1].v = 1;
							Q_WindWake[aero].Lvert[4][1].X = Q_WindWake[aero].VertM55.X;
							Q_WindWake[aero].Lvert[4][1].Y = Q_WindWake[aero].VertM55.Y;
							Q_WindWake[aero].Lvert[4][1].Z = Q_WindWake[aero].VertM55.Z;

									
							Q_WindWake[aero].Lvert[4][2].u = 0;
							Q_WindWake[aero].Lvert[4][2].v = 1;
							Q_WindWake[aero].Lvert[4][2].X = Q_WindWake[aero].VertM5.X;
							Q_WindWake[aero].Lvert[4][2].Y = Q_WindWake[aero].VertM5.Y;
							Q_WindWake[aero].Lvert[4][2].Z = Q_WindWake[aero].VertM5.Z;


							Q_WindWake[aero].Lvert[5][0].u = 0.5;
							Q_WindWake[aero].Lvert[5][0].v = 0;
							Q_WindWake[aero].Lvert[5][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[5][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[5][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[5][1].u = 1;
							Q_WindWake[aero].Lvert[5][1].v = 1;
							Q_WindWake[aero].Lvert[5][1].X = Q_WindWake[aero].VertM65.X;
							Q_WindWake[aero].Lvert[5][1].Y = Q_WindWake[aero].VertM65.Y;
							Q_WindWake[aero].Lvert[5][1].Z = Q_WindWake[aero].VertM65.Z;

									
							Q_WindWake[aero].Lvert[5][2].u = 0;
							Q_WindWake[aero].Lvert[5][2].v = 1;
							Q_WindWake[aero].Lvert[5][2].X = Q_WindWake[aero].VertM6.X;
							Q_WindWake[aero].Lvert[5][2].Y = Q_WindWake[aero].VertM6.Y;
							Q_WindWake[aero].Lvert[5][2].Z = Q_WindWake[aero].VertM6.Z;


							Q_WindWake[aero].Lvert[6][0].u = 0.5;
							Q_WindWake[aero].Lvert[6][0].v = 0;
							Q_WindWake[aero].Lvert[6][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[6][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[6][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[6][1].u = 1;
							Q_WindWake[aero].Lvert[6][1].v = 1;
							Q_WindWake[aero].Lvert[6][1].X = Q_WindWake[aero].VertM75.X;
							Q_WindWake[aero].Lvert[6][1].Y = Q_WindWake[aero].VertM75.Y;
							Q_WindWake[aero].Lvert[6][1].Z = Q_WindWake[aero].VertM75.Z;

									
							Q_WindWake[aero].Lvert[6][2].u = 0;
							Q_WindWake[aero].Lvert[6][2].v = 1;
							Q_WindWake[aero].Lvert[6][2].X = Q_WindWake[aero].VertM7.X;
							Q_WindWake[aero].Lvert[6][2].Y = Q_WindWake[aero].VertM7.Y;
							Q_WindWake[aero].Lvert[6][2].Z = Q_WindWake[aero].VertM7.Z;


							Q_WindWake[aero].Lvert[7][0].u = 0.5;
							Q_WindWake[aero].Lvert[7][0].v = 0;
							Q_WindWake[aero].Lvert[7][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[7][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[7][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[7][1].u = 1;
							Q_WindWake[aero].Lvert[7][1].v = 1;
							Q_WindWake[aero].Lvert[7][1].X = Q_WindWake[aero].VertM85.X;
							Q_WindWake[aero].Lvert[7][1].Y = Q_WindWake[aero].VertM85.Y;
							Q_WindWake[aero].Lvert[7][1].Z = Q_WindWake[aero].VertM85.Z;

									
							Q_WindWake[aero].Lvert[7][2].u = 0;
							Q_WindWake[aero].Lvert[7][2].v = 1;
							Q_WindWake[aero].Lvert[7][2].X = Q_WindWake[aero].VertM8.X;
							Q_WindWake[aero].Lvert[7][2].Y = Q_WindWake[aero].VertM8.Y;
							Q_WindWake[aero].Lvert[7][2].Z = Q_WindWake[aero].VertM8.Z;


							Q_WindWake[aero].Lvert[8][0].u = 0.5;
							Q_WindWake[aero].Lvert[8][0].v = 0;
							Q_WindWake[aero].Lvert[8][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[8][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[8][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[8][1].u = 1;
							Q_WindWake[aero].Lvert[8][1].v = 1;
							Q_WindWake[aero].Lvert[8][1].X = Q_WindWake[aero].VertM2.X;
							Q_WindWake[aero].Lvert[8][1].Y = Q_WindWake[aero].VertM2.Y;
							Q_WindWake[aero].Lvert[8][1].Z = Q_WindWake[aero].VertM2.Z;

							
							Q_WindWake[aero].Lvert[8][2].u = 0;
							Q_WindWake[aero].Lvert[8][2].v = 1;
							Q_WindWake[aero].Lvert[8][2].X = Q_WindWake[aero].VertM15.X;
							Q_WindWake[aero].Lvert[8][2].Y = Q_WindWake[aero].VertM15.Y;
							Q_WindWake[aero].Lvert[8][2].Z = Q_WindWake[aero].VertM15.Z;


							Q_WindWake[aero].Lvert[9][0].u = 0.5;
							Q_WindWake[aero].Lvert[9][0].v = 0;
							Q_WindWake[aero].Lvert[9][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[9][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[9][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[9][1].u = 1;
							Q_WindWake[aero].Lvert[9][1].v = 1;
							Q_WindWake[aero].Lvert[9][1].X = Q_WindWake[aero].VertM3.X;
							Q_WindWake[aero].Lvert[9][1].Y = Q_WindWake[aero].VertM3.Y;
							Q_WindWake[aero].Lvert[9][1].Z = Q_WindWake[aero].VertM3.Z;

									
							Q_WindWake[aero].Lvert[9][2].u = 0;
							Q_WindWake[aero].Lvert[9][2].v = 1;
							Q_WindWake[aero].Lvert[9][2].X = Q_WindWake[aero].VertM25.X;
							Q_WindWake[aero].Lvert[9][2].Y = Q_WindWake[aero].VertM25.Y;
							Q_WindWake[aero].Lvert[9][2].Z = Q_WindWake[aero].VertM25.Z;


							Q_WindWake[aero].Lvert[10][0].u = 0.5;
							Q_WindWake[aero].Lvert[10][0].v = 0;
							Q_WindWake[aero].Lvert[10][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[10][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[10][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[10][1].u = 1;
							Q_WindWake[aero].Lvert[10][1].v = 1;
							Q_WindWake[aero].Lvert[10][1].X = Q_WindWake[aero].VertM4.X;
							Q_WindWake[aero].Lvert[10][1].Y = Q_WindWake[aero].VertM4.Y;
							Q_WindWake[aero].Lvert[10][1].Z = Q_WindWake[aero].VertM4.Z;

									
							Q_WindWake[aero].Lvert[10][2].u = 0;
							Q_WindWake[aero].Lvert[10][2].v = 1;
							Q_WindWake[aero].Lvert[10][2].X = Q_WindWake[aero].VertM35.X;
							Q_WindWake[aero].Lvert[10][2].Y = Q_WindWake[aero].VertM35.Y;
							Q_WindWake[aero].Lvert[10][2].Z = Q_WindWake[aero].VertM35.Z;


							Q_WindWake[aero].Lvert[11][0].u = 0.5;
							Q_WindWake[aero].Lvert[11][0].v = 0;
							Q_WindWake[aero].Lvert[11][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[11][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[11][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[11][1].u = 1;
							Q_WindWake[aero].Lvert[11][1].v = 1;
							Q_WindWake[aero].Lvert[11][1].X = Q_WindWake[aero].VertM5.X;
							Q_WindWake[aero].Lvert[11][1].Y = Q_WindWake[aero].VertM5.Y;
							Q_WindWake[aero].Lvert[11][1].Z = Q_WindWake[aero].VertM5.Z;

									
							Q_WindWake[aero].Lvert[11][2].u = 0;
							Q_WindWake[aero].Lvert[11][2].v = 1;
							Q_WindWake[aero].Lvert[11][2].X = Q_WindWake[aero].VertM45.X;
							Q_WindWake[aero].Lvert[11][2].Y = Q_WindWake[aero].VertM45.Y;
							Q_WindWake[aero].Lvert[11][2].Z = Q_WindWake[aero].VertM45.Z;


							Q_WindWake[aero].Lvert[12][0].u = 0.5;
							Q_WindWake[aero].Lvert[12][0].v = 0;
							Q_WindWake[aero].Lvert[12][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[12][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[12][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[12][1].u = 1;
							Q_WindWake[aero].Lvert[12][1].v = 1;
							Q_WindWake[aero].Lvert[12][1].X = Q_WindWake[aero].VertM6.X;
							Q_WindWake[aero].Lvert[12][1].Y = Q_WindWake[aero].VertM6.Y;
							Q_WindWake[aero].Lvert[12][1].Z = Q_WindWake[aero].VertM6.Z;

									
							Q_WindWake[aero].Lvert[12][2].u = 0;
							Q_WindWake[aero].Lvert[12][2].v = 1;
							Q_WindWake[aero].Lvert[12][2].X = Q_WindWake[aero].VertM55.X;
							Q_WindWake[aero].Lvert[12][2].Y = Q_WindWake[aero].VertM55.Y;
							Q_WindWake[aero].Lvert[12][2].Z = Q_WindWake[aero].VertM55.Z;


							Q_WindWake[aero].Lvert[13][0].u = 0.5;
							Q_WindWake[aero].Lvert[13][0].v = 0;
							Q_WindWake[aero].Lvert[13][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[13][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[13][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[13][1].u = 1;
							Q_WindWake[aero].Lvert[13][1].v = 1;
							Q_WindWake[aero].Lvert[13][1].X = Q_WindWake[aero].VertM7.X;
							Q_WindWake[aero].Lvert[13][1].Y = Q_WindWake[aero].VertM7.Y;
							Q_WindWake[aero].Lvert[13][1].Z = Q_WindWake[aero].VertM7.Z;

									
							Q_WindWake[aero].Lvert[13][2].u = 0;
							Q_WindWake[aero].Lvert[13][2].v = 1;
							Q_WindWake[aero].Lvert[13][2].X = Q_WindWake[aero].VertM65.X;
							Q_WindWake[aero].Lvert[13][2].Y = Q_WindWake[aero].VertM65.Y;
							Q_WindWake[aero].Lvert[13][2].Z = Q_WindWake[aero].VertM65.Z;


							Q_WindWake[aero].Lvert[14][0].u = 0.5;
							Q_WindWake[aero].Lvert[14][0].v = 0;
							Q_WindWake[aero].Lvert[14][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[14][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[14][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[14][1].u = 1;
							Q_WindWake[aero].Lvert[14][1].v = 1;
							Q_WindWake[aero].Lvert[14][1].X = Q_WindWake[aero].VertM8.X;
							Q_WindWake[aero].Lvert[14][1].Y = Q_WindWake[aero].VertM8.Y;
							Q_WindWake[aero].Lvert[14][1].Z = Q_WindWake[aero].VertM8.Z;

									
							Q_WindWake[aero].Lvert[14][2].u = 0;
							Q_WindWake[aero].Lvert[14][2].v = 1;
							Q_WindWake[aero].Lvert[14][2].X = Q_WindWake[aero].VertM75.X;
							Q_WindWake[aero].Lvert[14][2].Y = Q_WindWake[aero].VertM75.Y;
							Q_WindWake[aero].Lvert[14][2].Z = Q_WindWake[aero].VertM75.Z;


							Q_WindWake[aero].Lvert[15][0].u = 0.5;
							Q_WindWake[aero].Lvert[15][0].v = 0;
							Q_WindWake[aero].Lvert[15][0].X = Q_WindWake[aero].VertFNT.X;
							Q_WindWake[aero].Lvert[15][0].Y = Q_WindWake[aero].VertFNT.Y;
							Q_WindWake[aero].Lvert[15][0].Z = Q_WindWake[aero].VertFNT.Z;

									
							Q_WindWake[aero].Lvert[15][1].u = 1;
							Q_WindWake[aero].Lvert[15][1].v = 1;
							Q_WindWake[aero].Lvert[15][1].X = Q_WindWake[aero].VertM1.X;
							Q_WindWake[aero].Lvert[15][1].Y = Q_WindWake[aero].VertM1.Y;
							Q_WindWake[aero].Lvert[15][1].Z = Q_WindWake[aero].VertM1.Z;

									
							Q_WindWake[aero].Lvert[15][2].u = 0;
							Q_WindWake[aero].Lvert[15][2].v = 1;
							Q_WindWake[aero].Lvert[15][2].X = Q_WindWake[aero].VertM85.X;
							Q_WindWake[aero].Lvert[15][2].Y = Q_WindWake[aero].VertM85.Y;
							Q_WindWake[aero].Lvert[15][2].Z = Q_WindWake[aero].VertM85.Z;


							//##### - SOLID RING ONE

							Q_WindWake[aero].Lvert[16][0].u = 0;
							Q_WindWake[aero].Lvert[16][0].v = 0;
							Q_WindWake[aero].Lvert[16][0].X = Q_WindWake[aero].VertM1.X;
							Q_WindWake[aero].Lvert[16][0].Y = Q_WindWake[aero].VertM1.Y;
							Q_WindWake[aero].Lvert[16][0].Z = Q_WindWake[aero].VertM1.Z;

							
							Q_WindWake[aero].Lvert[16][1].u = 1;
							Q_WindWake[aero].Lvert[16][1].v = 0;
							Q_WindWake[aero].Lvert[16][1].X = Q_WindWake[aero].VertM15.X;
							Q_WindWake[aero].Lvert[16][1].Y = Q_WindWake[aero].VertM15.Y;
							Q_WindWake[aero].Lvert[16][1].Z = Q_WindWake[aero].VertM15.Z;

									
							Q_WindWake[aero].Lvert[16][2].u = 1;
							Q_WindWake[aero].Lvert[16][2].v = 1;
							Q_WindWake[aero].Lvert[16][2].X = Q_WindWake[aero].VertT15.X;
							Q_WindWake[aero].Lvert[16][2].Y = Q_WindWake[aero].VertT15.Y;
							Q_WindWake[aero].Lvert[16][2].Z = Q_WindWake[aero].VertT15.Z;


							Q_WindWake[aero].Lvert[16][3].u = 0;
							Q_WindWake[aero].Lvert[16][3].v = 1;
							Q_WindWake[aero].Lvert[16][3].X = Q_WindWake[aero].VertT1.X;
							Q_WindWake[aero].Lvert[16][3].Y = Q_WindWake[aero].VertT1.Y;
							Q_WindWake[aero].Lvert[16][3].Z = Q_WindWake[aero].VertT1.Z;


							Q_WindWake[aero].Lvert[17][0].u = 0;
							Q_WindWake[aero].Lvert[17][0].v = 0;
							Q_WindWake[aero].Lvert[17][0].X = Q_WindWake[aero].VertM15.X;
							Q_WindWake[aero].Lvert[17][0].Y = Q_WindWake[aero].VertM15.Y;
							Q_WindWake[aero].Lvert[17][0].Z = Q_WindWake[aero].VertM15.Z;

									
							Q_WindWake[aero].Lvert[17][1].u = 1;
							Q_WindWake[aero].Lvert[17][1].v = 0;
							Q_WindWake[aero].Lvert[17][1].X = Q_WindWake[aero].VertM2.X;
							Q_WindWake[aero].Lvert[17][1].Y = Q_WindWake[aero].VertM2.Y;
							Q_WindWake[aero].Lvert[17][1].Z = Q_WindWake[aero].VertM2.Z;

									
							Q_WindWake[aero].Lvert[17][2].u = 1;
							Q_WindWake[aero].Lvert[17][2].v = 1;
							Q_WindWake[aero].Lvert[17][2].X = Q_WindWake[aero].VertT2.X;
							Q_WindWake[aero].Lvert[17][2].Y = Q_WindWake[aero].VertT2.Y;
							Q_WindWake[aero].Lvert[17][2].Z = Q_WindWake[aero].VertT2.Z;


							Q_WindWake[aero].Lvert[17][3].u = 0;
							Q_WindWake[aero].Lvert[17][3].v = 1;
							Q_WindWake[aero].Lvert[17][3].X = Q_WindWake[aero].VertT15.X;
							Q_WindWake[aero].Lvert[17][3].Y = Q_WindWake[aero].VertT15.Y;
							Q_WindWake[aero].Lvert[17][3].Z = Q_WindWake[aero].VertT15.Z;



							Q_WindWake[aero].Lvert[18][0].u = 0;
							Q_WindWake[aero].Lvert[18][0].v = 0;
							Q_WindWake[aero].Lvert[18][0].X = Q_WindWake[aero].VertM2.X;
							Q_WindWake[aero].Lvert[18][0].Y = Q_WindWake[aero].VertM2.Y;
							Q_WindWake[aero].Lvert[18][0].Z = Q_WindWake[aero].VertM2.Z;

									
							Q_WindWake[aero].Lvert[18][1].u = 1;
							Q_WindWake[aero].Lvert[18][1].v = 0;
							Q_WindWake[aero].Lvert[18][1].X = Q_WindWake[aero].VertM25.X;
							Q_WindWake[aero].Lvert[18][1].Y = Q_WindWake[aero].VertM25.Y;
							Q_WindWake[aero].Lvert[18][1].Z = Q_WindWake[aero].VertM25.Z;

									
							Q_WindWake[aero].Lvert[18][2].u = 1;
							Q_WindWake[aero].Lvert[18][2].v = 1;
							Q_WindWake[aero].Lvert[18][2].X = Q_WindWake[aero].VertT25.X;
							Q_WindWake[aero].Lvert[18][2].Y = Q_WindWake[aero].VertT25.Y;
							Q_WindWake[aero].Lvert[18][2].Z = Q_WindWake[aero].VertT25.Z;


							Q_WindWake[aero].Lvert[18][3].u = 0;
							Q_WindWake[aero].Lvert[18][3].v = 1;
							Q_WindWake[aero].Lvert[18][3].X = Q_WindWake[aero].VertT2.X;
							Q_WindWake[aero].Lvert[18][3].Y = Q_WindWake[aero].VertT2.Y;
							Q_WindWake[aero].Lvert[18][3].Z = Q_WindWake[aero].VertT2.Z;



							Q_WindWake[aero].Lvert[19][0].u = 0;
							Q_WindWake[aero].Lvert[19][0].v = 0;
							Q_WindWake[aero].Lvert[19][0].X = Q_WindWake[aero].VertM25.X;
							Q_WindWake[aero].Lvert[19][0].Y = Q_WindWake[aero].VertM25.Y;
							Q_WindWake[aero].Lvert[19][0].Z = Q_WindWake[aero].VertM25.Z;

									
							Q_WindWake[aero].Lvert[19][1].u = 1;
							Q_WindWake[aero].Lvert[19][1].v = 0;
							Q_WindWake[aero].Lvert[19][1].X = Q_WindWake[aero].VertM3.X;
							Q_WindWake[aero].Lvert[19][1].Y = Q_WindWake[aero].VertM3.Y;
							Q_WindWake[aero].Lvert[19][1].Z = Q_WindWake[aero].VertM3.Z;

									
							Q_WindWake[aero].Lvert[19][2].u = 1;
							Q_WindWake[aero].Lvert[19][2].v = 1;
							Q_WindWake[aero].Lvert[19][2].X = Q_WindWake[aero].VertT3.X;
							Q_WindWake[aero].Lvert[19][2].Y = Q_WindWake[aero].VertT3.Y;
							Q_WindWake[aero].Lvert[19][2].Z = Q_WindWake[aero].VertT3.Z;


							Q_WindWake[aero].Lvert[19][3].u = 0;
							Q_WindWake[aero].Lvert[19][3].v = 1;
							Q_WindWake[aero].Lvert[19][3].X = Q_WindWake[aero].VertT25.X;
							Q_WindWake[aero].Lvert[19][3].Y = Q_WindWake[aero].VertT25.Y;
							Q_WindWake[aero].Lvert[19][3].Z = Q_WindWake[aero].VertT25.Z;


							Q_WindWake[aero].Lvert[20][0].u = 0;
							Q_WindWake[aero].Lvert[20][0].v = 0;
							Q_WindWake[aero].Lvert[20][0].X = Q_WindWake[aero].VertM3.X;
							Q_WindWake[aero].Lvert[20][0].Y = Q_WindWake[aero].VertM3.Y;
							Q_WindWake[aero].Lvert[20][0].Z = Q_WindWake[aero].VertM3.Z;

									
							Q_WindWake[aero].Lvert[20][1].u = 1;
							Q_WindWake[aero].Lvert[20][1].v = 0;
							Q_WindWake[aero].Lvert[20][1].X = Q_WindWake[aero].VertM35.X;
							Q_WindWake[aero].Lvert[20][1].Y = Q_WindWake[aero].VertM35.Y;
							Q_WindWake[aero].Lvert[20][1].Z = Q_WindWake[aero].VertM35.Z;

									
							Q_WindWake[aero].Lvert[20][2].u = 1;
							Q_WindWake[aero].Lvert[20][2].v = 1;
							Q_WindWake[aero].Lvert[20][2].X = Q_WindWake[aero].VertT35.X;
							Q_WindWake[aero].Lvert[20][2].Y = Q_WindWake[aero].VertT35.Y;
							Q_WindWake[aero].Lvert[20][2].Z = Q_WindWake[aero].VertT35.Z;


							Q_WindWake[aero].Lvert[20][3].u = 0;
							Q_WindWake[aero].Lvert[20][3].v = 1;
							Q_WindWake[aero].Lvert[20][3].X = Q_WindWake[aero].VertT3.X;
							Q_WindWake[aero].Lvert[20][3].Y = Q_WindWake[aero].VertT3.Y;
							Q_WindWake[aero].Lvert[20][3].Z = Q_WindWake[aero].VertT3.Z;


							Q_WindWake[aero].Lvert[21][0].u = 0;
							Q_WindWake[aero].Lvert[21][0].v = 0;
							Q_WindWake[aero].Lvert[21][0].X = Q_WindWake[aero].VertM35.X;
							Q_WindWake[aero].Lvert[21][0].Y = Q_WindWake[aero].VertM35.Y;
							Q_WindWake[aero].Lvert[21][0].Z = Q_WindWake[aero].VertM35.Z;

									
							Q_WindWake[aero].Lvert[21][1].u = 1;
							Q_WindWake[aero].Lvert[21][1].v = 0;
							Q_WindWake[aero].Lvert[21][1].X = Q_WindWake[aero].VertM4.X;
							Q_WindWake[aero].Lvert[21][1].Y = Q_WindWake[aero].VertM4.Y;
							Q_WindWake[aero].Lvert[21][1].Z = Q_WindWake[aero].VertM4.Z;

									
							Q_WindWake[aero].Lvert[21][2].u = 1;
							Q_WindWake[aero].Lvert[21][2].v = 1;
							Q_WindWake[aero].Lvert[21][2].X = Q_WindWake[aero].VertT4.X;
							Q_WindWake[aero].Lvert[21][2].Y = Q_WindWake[aero].VertT4.Y;
							Q_WindWake[aero].Lvert[21][2].Z = Q_WindWake[aero].VertT4.Z;


							Q_WindWake[aero].Lvert[21][3].u = 0;
							Q_WindWake[aero].Lvert[21][3].v = 1;
							Q_WindWake[aero].Lvert[21][3].X = Q_WindWake[aero].VertT35.X;
							Q_WindWake[aero].Lvert[21][3].Y = Q_WindWake[aero].VertT35.Y;
							Q_WindWake[aero].Lvert[21][3].Z = Q_WindWake[aero].VertT35.Z;


							Q_WindWake[aero].Lvert[22][0].u = 0;
							Q_WindWake[aero].Lvert[22][0].v = 0;
							Q_WindWake[aero].Lvert[22][0].X = Q_WindWake[aero].VertM4.X;
							Q_WindWake[aero].Lvert[22][0].Y = Q_WindWake[aero].VertM4.Y;
							Q_WindWake[aero].Lvert[22][0].Z = Q_WindWake[aero].VertM4.Z;

									
							Q_WindWake[aero].Lvert[22][1].u = 1;
							Q_WindWake[aero].Lvert[22][1].v = 0;
							Q_WindWake[aero].Lvert[22][1].X = Q_WindWake[aero].VertM45.X;
							Q_WindWake[aero].Lvert[22][1].Y = Q_WindWake[aero].VertM45.Y;
							Q_WindWake[aero].Lvert[22][1].Z = Q_WindWake[aero].VertM45.Z;

									
							Q_WindWake[aero].Lvert[22][2].u = 1;
							Q_WindWake[aero].Lvert[22][2].v = 1;
							Q_WindWake[aero].Lvert[22][2].X = Q_WindWake[aero].VertT45.X;
							Q_WindWake[aero].Lvert[22][2].Y = Q_WindWake[aero].VertT45.Y;
							Q_WindWake[aero].Lvert[22][2].Z = Q_WindWake[aero].VertT45.Z;


							Q_WindWake[aero].Lvert[22][3].u = 0;
							Q_WindWake[aero].Lvert[22][3].v = 1;
							Q_WindWake[aero].Lvert[22][3].X = Q_WindWake[aero].VertT4.X;
							Q_WindWake[aero].Lvert[22][3].Y = Q_WindWake[aero].VertT4.Y;
							Q_WindWake[aero].Lvert[22][3].Z = Q_WindWake[aero].VertT4.Z;



							Q_WindWake[aero].Lvert[23][0].u = 0;
							Q_WindWake[aero].Lvert[23][0].v = 0;
							Q_WindWake[aero].Lvert[23][0].X = Q_WindWake[aero].VertM45.X;
							Q_WindWake[aero].Lvert[23][0].Y = Q_WindWake[aero].VertM45.Y;
							Q_WindWake[aero].Lvert[23][0].Z = Q_WindWake[aero].VertM45.Z;

									
							Q_WindWake[aero].Lvert[23][1].u = 1;
							Q_WindWake[aero].Lvert[23][1].v = 0;
							Q_WindWake[aero].Lvert[23][1].X = Q_WindWake[aero].VertM5.X;
							Q_WindWake[aero].Lvert[23][1].Y = Q_WindWake[aero].VertM5.Y;
							Q_WindWake[aero].Lvert[23][1].Z = Q_WindWake[aero].VertM5.Z;

									
							Q_WindWake[aero].Lvert[23][2].u = 1;
							Q_WindWake[aero].Lvert[23][2].v = 1;
							Q_WindWake[aero].Lvert[23][2].X = Q_WindWake[aero].VertT5.X;
							Q_WindWake[aero].Lvert[23][2].Y = Q_WindWake[aero].VertT5.Y;
							Q_WindWake[aero].Lvert[23][2].Z = Q_WindWake[aero].VertT5.Z;


							Q_WindWake[aero].Lvert[23][3].u = 0;
							Q_WindWake[aero].Lvert[23][3].v = 1;
							Q_WindWake[aero].Lvert[23][3].X = Q_WindWake[aero].VertT45.X;
							Q_WindWake[aero].Lvert[23][3].Y = Q_WindWake[aero].VertT45.Y;
							Q_WindWake[aero].Lvert[23][3].Z = Q_WindWake[aero].VertT45.Z;


							Q_WindWake[aero].Lvert[24][0].u = 0;
							Q_WindWake[aero].Lvert[24][0].v = 0;
							Q_WindWake[aero].Lvert[24][0].X = Q_WindWake[aero].VertM5.X;
							Q_WindWake[aero].Lvert[24][0].Y = Q_WindWake[aero].VertM5.Y;
							Q_WindWake[aero].Lvert[24][0].Z = Q_WindWake[aero].VertM5.Z;

							
							Q_WindWake[aero].Lvert[24][1].u = 1;
							Q_WindWake[aero].Lvert[24][1].v = 0;
							Q_WindWake[aero].Lvert[24][1].X = Q_WindWake[aero].VertM55.X;
							Q_WindWake[aero].Lvert[24][1].Y = Q_WindWake[aero].VertM55.Y;
							Q_WindWake[aero].Lvert[24][1].Z = Q_WindWake[aero].VertM55.Z;

									
							Q_WindWake[aero].Lvert[24][2].u = 1;
							Q_WindWake[aero].Lvert[24][2].v = 1;
							Q_WindWake[aero].Lvert[24][2].X = Q_WindWake[aero].VertT55.X;
							Q_WindWake[aero].Lvert[24][2].Y = Q_WindWake[aero].VertT55.Y;
							Q_WindWake[aero].Lvert[24][2].Z = Q_WindWake[aero].VertT55.Z;


							Q_WindWake[aero].Lvert[24][3].u = 0;
							Q_WindWake[aero].Lvert[24][3].v = 1;
							Q_WindWake[aero].Lvert[24][3].X = Q_WindWake[aero].VertT5.X;
							Q_WindWake[aero].Lvert[24][3].Y = Q_WindWake[aero].VertT5.Y;
							Q_WindWake[aero].Lvert[24][3].Z = Q_WindWake[aero].VertT5.Z;


							Q_WindWake[aero].Lvert[25][0].u = 0;
							Q_WindWake[aero].Lvert[25][0].v = 0;
							Q_WindWake[aero].Lvert[25][0].X = Q_WindWake[aero].VertM55.X;
							Q_WindWake[aero].Lvert[25][0].Y = Q_WindWake[aero].VertM55.Y;
							Q_WindWake[aero].Lvert[25][0].Z = Q_WindWake[aero].VertM55.Z;

									
							Q_WindWake[aero].Lvert[25][1].u = 1;
							Q_WindWake[aero].Lvert[25][1].v = 0;
							Q_WindWake[aero].Lvert[25][1].X = Q_WindWake[aero].VertM6.X;
							Q_WindWake[aero].Lvert[25][1].Y = Q_WindWake[aero].VertM6.Y;
							Q_WindWake[aero].Lvert[25][1].Z = Q_WindWake[aero].VertM6.Z;

									
							Q_WindWake[aero].Lvert[25][2].u = 1;
							Q_WindWake[aero].Lvert[25][2].v = 1;
							Q_WindWake[aero].Lvert[25][2].X = Q_WindWake[aero].VertT6.X;
							Q_WindWake[aero].Lvert[25][2].Y = Q_WindWake[aero].VertT6.Y;
							Q_WindWake[aero].Lvert[25][2].Z = Q_WindWake[aero].VertT6.Z;


							Q_WindWake[aero].Lvert[25][3].u = 0;
							Q_WindWake[aero].Lvert[25][3].v = 1;
							Q_WindWake[aero].Lvert[25][3].X = Q_WindWake[aero].VertT55.X;
							Q_WindWake[aero].Lvert[25][3].Y = Q_WindWake[aero].VertT55.Y;
							Q_WindWake[aero].Lvert[25][3].Z = Q_WindWake[aero].VertT55.Z;


							Q_WindWake[aero].Lvert[26][0].u = 0;
							Q_WindWake[aero].Lvert[26][0].v = 0;
							Q_WindWake[aero].Lvert[26][0].X = Q_WindWake[aero].VertM6.X;
							Q_WindWake[aero].Lvert[26][0].Y = Q_WindWake[aero].VertM6.Y;
							Q_WindWake[aero].Lvert[26][0].Z = Q_WindWake[aero].VertM6.Z;

									
							Q_WindWake[aero].Lvert[26][1].u = 1;
							Q_WindWake[aero].Lvert[26][1].v = 0;
							Q_WindWake[aero].Lvert[26][1].X = Q_WindWake[aero].VertM65.X;
							Q_WindWake[aero].Lvert[26][1].Y = Q_WindWake[aero].VertM65.Y;
							Q_WindWake[aero].Lvert[26][1].Z = Q_WindWake[aero].VertM65.Z;

									
							Q_WindWake[aero].Lvert[26][2].u = 1;
							Q_WindWake[aero].Lvert[26][2].v = 1;
							Q_WindWake[aero].Lvert[26][2].X = Q_WindWake[aero].VertT65.X;
							Q_WindWake[aero].Lvert[26][2].Y = Q_WindWake[aero].VertT65.Y;
							Q_WindWake[aero].Lvert[26][2].Z = Q_WindWake[aero].VertT65.Z;


							Q_WindWake[aero].Lvert[26][3].u = 0;
							Q_WindWake[aero].Lvert[26][3].v = 1;
							Q_WindWake[aero].Lvert[26][3].X = Q_WindWake[aero].VertT6.X;
							Q_WindWake[aero].Lvert[26][3].Y = Q_WindWake[aero].VertT6.Y;
							Q_WindWake[aero].Lvert[26][3].Z = Q_WindWake[aero].VertT6.Z;


							Q_WindWake[aero].Lvert[27][0].u = 0;
							Q_WindWake[aero].Lvert[27][0].v = 0;
							Q_WindWake[aero].Lvert[27][0].X = Q_WindWake[aero].VertM65.X;
							Q_WindWake[aero].Lvert[27][0].Y = Q_WindWake[aero].VertM65.Y;
							Q_WindWake[aero].Lvert[27][0].Z = Q_WindWake[aero].VertM65.Z;

									
							Q_WindWake[aero].Lvert[27][1].u = 1;
							Q_WindWake[aero].Lvert[27][1].v = 0;
							Q_WindWake[aero].Lvert[27][1].X = Q_WindWake[aero].VertM7.X;
							Q_WindWake[aero].Lvert[27][1].Y = Q_WindWake[aero].VertM7.Y;
							Q_WindWake[aero].Lvert[27][1].Z = Q_WindWake[aero].VertM7.Z;

									
							Q_WindWake[aero].Lvert[27][2].u = 1;
							Q_WindWake[aero].Lvert[27][2].v = 1;
							Q_WindWake[aero].Lvert[27][2].X = Q_WindWake[aero].VertT7.X;
							Q_WindWake[aero].Lvert[27][2].Y = Q_WindWake[aero].VertT7.Y;
							Q_WindWake[aero].Lvert[27][2].Z = Q_WindWake[aero].VertT7.Z;


							Q_WindWake[aero].Lvert[27][3].u = 0;
							Q_WindWake[aero].Lvert[27][3].v = 1;
							Q_WindWake[aero].Lvert[27][3].X = Q_WindWake[aero].VertT65.X;
							Q_WindWake[aero].Lvert[27][3].Y = Q_WindWake[aero].VertT65.Y;
							Q_WindWake[aero].Lvert[27][3].Z = Q_WindWake[aero].VertT65.Z;


							Q_WindWake[aero].Lvert[28][0].u = 0;
							Q_WindWake[aero].Lvert[28][0].v = 0;
							Q_WindWake[aero].Lvert[28][0].X = Q_WindWake[aero].VertM7.X;
							Q_WindWake[aero].Lvert[28][0].Y = Q_WindWake[aero].VertM7.Y;
							Q_WindWake[aero].Lvert[28][0].Z = Q_WindWake[aero].VertM7.Z;

									
							Q_WindWake[aero].Lvert[28][1].u = 1;
							Q_WindWake[aero].Lvert[28][1].v = 0;
							Q_WindWake[aero].Lvert[28][1].X = Q_WindWake[aero].VertM75.X;
							Q_WindWake[aero].Lvert[28][1].Y = Q_WindWake[aero].VertM75.Y;
							Q_WindWake[aero].Lvert[28][1].Z = Q_WindWake[aero].VertM75.Z;

									
							Q_WindWake[aero].Lvert[28][2].u = 1;
							Q_WindWake[aero].Lvert[28][2].v = 1;
							Q_WindWake[aero].Lvert[28][2].X = Q_WindWake[aero].VertT75.X;
							Q_WindWake[aero].Lvert[28][2].Y = Q_WindWake[aero].VertT75.Y;
							Q_WindWake[aero].Lvert[28][2].Z = Q_WindWake[aero].VertT75.Z;


							Q_WindWake[aero].Lvert[28][3].u = 0;
							Q_WindWake[aero].Lvert[28][3].v = 1;
							Q_WindWake[aero].Lvert[28][3].X = Q_WindWake[aero].VertT7.X;
							Q_WindWake[aero].Lvert[28][3].Y = Q_WindWake[aero].VertT7.Y;
							Q_WindWake[aero].Lvert[28][3].Z = Q_WindWake[aero].VertT7.Z;


							Q_WindWake[aero].Lvert[29][0].u = 0;
							Q_WindWake[aero].Lvert[29][0].v = 0;
							Q_WindWake[aero].Lvert[29][0].X = Q_WindWake[aero].VertM75.X;
							Q_WindWake[aero].Lvert[29][0].Y = Q_WindWake[aero].VertM75.Y;
							Q_WindWake[aero].Lvert[29][0].Z = Q_WindWake[aero].VertM75.Z;

									
							Q_WindWake[aero].Lvert[29][1].u = 1;
							Q_WindWake[aero].Lvert[29][1].v = 0;
							Q_WindWake[aero].Lvert[29][1].X = Q_WindWake[aero].VertM8.X;
							Q_WindWake[aero].Lvert[29][1].Y = Q_WindWake[aero].VertM8.Y;
							Q_WindWake[aero].Lvert[29][1].Z = Q_WindWake[aero].VertM8.Z;

									
							Q_WindWake[aero].Lvert[29][2].u = 1;
							Q_WindWake[aero].Lvert[29][2].v = 1;
							Q_WindWake[aero].Lvert[29][2].X = Q_WindWake[aero].VertT8.X;
							Q_WindWake[aero].Lvert[29][2].Y = Q_WindWake[aero].VertT8.Y;
							Q_WindWake[aero].Lvert[29][2].Z = Q_WindWake[aero].VertT8.Z;


							Q_WindWake[aero].Lvert[29][3].u = 0;
							Q_WindWake[aero].Lvert[29][3].v = 1;
							Q_WindWake[aero].Lvert[29][3].X = Q_WindWake[aero].VertT75.X;
							Q_WindWake[aero].Lvert[29][3].Y = Q_WindWake[aero].VertT75.Y;
							Q_WindWake[aero].Lvert[29][3].Z = Q_WindWake[aero].VertT75.Z;


							Q_WindWake[aero].Lvert[30][0].u = 0;
							Q_WindWake[aero].Lvert[30][0].v = 0;
							Q_WindWake[aero].Lvert[30][0].X = Q_WindWake[aero].VertM8.X;
							Q_WindWake[aero].Lvert[30][0].Y = Q_WindWake[aero].VertM8.Y;
							Q_WindWake[aero].Lvert[30][0].Z = Q_WindWake[aero].VertM8.Z;

									
							Q_WindWake[aero].Lvert[30][1].u = 1;
							Q_WindWake[aero].Lvert[30][1].v = 0;
							Q_WindWake[aero].Lvert[30][1].X = Q_WindWake[aero].VertM85.X;
							Q_WindWake[aero].Lvert[30][1].Y = Q_WindWake[aero].VertM85.Y;
							Q_WindWake[aero].Lvert[30][1].Z = Q_WindWake[aero].VertM85.Z;

									
							Q_WindWake[aero].Lvert[30][2].u = 1;
							Q_WindWake[aero].Lvert[30][2].v = 1;
							Q_WindWake[aero].Lvert[30][2].X = Q_WindWake[aero].VertT85.X;
							Q_WindWake[aero].Lvert[30][2].Y = Q_WindWake[aero].VertT85.Y;
							Q_WindWake[aero].Lvert[30][2].Z = Q_WindWake[aero].VertT85.Z;


							Q_WindWake[aero].Lvert[30][3].u = 0;
							Q_WindWake[aero].Lvert[30][3].v = 1;
							Q_WindWake[aero].Lvert[30][3].X = Q_WindWake[aero].VertT8.X;
							Q_WindWake[aero].Lvert[30][3].Y = Q_WindWake[aero].VertT8.Y;
							Q_WindWake[aero].Lvert[30][3].Z = Q_WindWake[aero].VertT8.Z;


							Q_WindWake[aero].Lvert[31][0].u = 0;
							Q_WindWake[aero].Lvert[31][0].v = 0;
							Q_WindWake[aero].Lvert[31][0].X = Q_WindWake[aero].VertM85.X;
							Q_WindWake[aero].Lvert[31][0].Y = Q_WindWake[aero].VertM85.Y;
							Q_WindWake[aero].Lvert[31][0].Z = Q_WindWake[aero].VertM85.Z;

									
							Q_WindWake[aero].Lvert[31][1].u = 1;
							Q_WindWake[aero].Lvert[31][1].v = 0;
							Q_WindWake[aero].Lvert[31][1].X = Q_WindWake[aero].VertM1.X;
							Q_WindWake[aero].Lvert[31][1].Y = Q_WindWake[aero].VertM1.Y;
							Q_WindWake[aero].Lvert[31][1].Z = Q_WindWake[aero].VertM1.Z;

									
							Q_WindWake[aero].Lvert[31][2].u = 1;
							Q_WindWake[aero].Lvert[31][2].v = 1;
							Q_WindWake[aero].Lvert[31][2].X = Q_WindWake[aero].VertT1.X;
							Q_WindWake[aero].Lvert[31][2].Y = Q_WindWake[aero].VertT1.Y;
							Q_WindWake[aero].Lvert[31][2].Z = Q_WindWake[aero].VertT1.Z;


							Q_WindWake[aero].Lvert[31][3].u = 0;
							Q_WindWake[aero].Lvert[31][3].v = 1;
							Q_WindWake[aero].Lvert[31][3].X = Q_WindWake[aero].VertT85.X;
							Q_WindWake[aero].Lvert[31][3].Y = Q_WindWake[aero].VertT85.Y;
							Q_WindWake[aero].Lvert[31][3].Z = Q_WindWake[aero].VertT85.Z;


							//##### - SOLID RING TWO

							Q_WindWake[aero].Lvert[32][0].u = 0;
							Q_WindWake[aero].Lvert[32][0].v = 0;
							Q_WindWake[aero].Lvert[32][0].X = Q_WindWake[aero].VertT1.X;
							Q_WindWake[aero].Lvert[32][0].Y = Q_WindWake[aero].VertT1.Y;
							Q_WindWake[aero].Lvert[32][0].Z = Q_WindWake[aero].VertT1.Z;

							
							Q_WindWake[aero].Lvert[32][1].u = 1;
							Q_WindWake[aero].Lvert[32][1].v = 0;
							Q_WindWake[aero].Lvert[32][1].X = Q_WindWake[aero].VertT15.X;
							Q_WindWake[aero].Lvert[32][1].Y = Q_WindWake[aero].VertT15.Y;
							Q_WindWake[aero].Lvert[32][1].Z = Q_WindWake[aero].VertT15.Z;

									
							Q_WindWake[aero].Lvert[32][2].u = 1;
							Q_WindWake[aero].Lvert[32][2].v = 1;
							Q_WindWake[aero].Lvert[32][2].X = Q_WindWake[aero].VertB15.X;
							Q_WindWake[aero].Lvert[32][2].Y = Q_WindWake[aero].VertB15.Y;
							Q_WindWake[aero].Lvert[32][2].Z = Q_WindWake[aero].VertB15.Z;


							Q_WindWake[aero].Lvert[32][3].u = 0;
							Q_WindWake[aero].Lvert[32][3].v = 1;
							Q_WindWake[aero].Lvert[32][3].X = Q_WindWake[aero].VertB1.X;
							Q_WindWake[aero].Lvert[32][3].Y = Q_WindWake[aero].VertB1.Y;
							Q_WindWake[aero].Lvert[32][3].Z = Q_WindWake[aero].VertB1.Z;


							Q_WindWake[aero].Lvert[33][0].u = 0;
							Q_WindWake[aero].Lvert[33][0].v = 0;
							Q_WindWake[aero].Lvert[33][0].X = Q_WindWake[aero].VertT15.X;
							Q_WindWake[aero].Lvert[33][0].Y = Q_WindWake[aero].VertT15.Y;
							Q_WindWake[aero].Lvert[33][0].Z = Q_WindWake[aero].VertT15.Z;

									
							Q_WindWake[aero].Lvert[33][1].u = 1;
							Q_WindWake[aero].Lvert[33][1].v = 0;
							Q_WindWake[aero].Lvert[33][1].X = Q_WindWake[aero].VertT2.X;
							Q_WindWake[aero].Lvert[33][1].Y = Q_WindWake[aero].VertT2.Y;
							Q_WindWake[aero].Lvert[33][1].Z = Q_WindWake[aero].VertT2.Z;

									
							Q_WindWake[aero].Lvert[33][2].u = 1;
							Q_WindWake[aero].Lvert[33][2].v = 1;
							Q_WindWake[aero].Lvert[33][2].X = Q_WindWake[aero].VertB2.X;
							Q_WindWake[aero].Lvert[33][2].Y = Q_WindWake[aero].VertB2.Y;
							Q_WindWake[aero].Lvert[33][2].Z = Q_WindWake[aero].VertB2.Z;


							Q_WindWake[aero].Lvert[33][3].u = 0;
							Q_WindWake[aero].Lvert[33][3].v = 1;
							Q_WindWake[aero].Lvert[33][3].X = Q_WindWake[aero].VertB15.X;
							Q_WindWake[aero].Lvert[33][3].Y = Q_WindWake[aero].VertB15.Y;
							Q_WindWake[aero].Lvert[33][3].Z = Q_WindWake[aero].VertB15.Z;


							Q_WindWake[aero].Lvert[34][0].u = 0;
							Q_WindWake[aero].Lvert[34][0].v = 0;
							Q_WindWake[aero].Lvert[34][0].X = Q_WindWake[aero].VertT2.X;
							Q_WindWake[aero].Lvert[34][0].Y = Q_WindWake[aero].VertT2.Y;
							Q_WindWake[aero].Lvert[34][0].Z = Q_WindWake[aero].VertT2.Z;

									
							Q_WindWake[aero].Lvert[34][1].u = 1;
							Q_WindWake[aero].Lvert[34][1].v = 0;
							Q_WindWake[aero].Lvert[34][1].X = Q_WindWake[aero].VertT25.X;
							Q_WindWake[aero].Lvert[34][1].Y = Q_WindWake[aero].VertT25.Y;
							Q_WindWake[aero].Lvert[34][1].Z = Q_WindWake[aero].VertT25.Z;

									
							Q_WindWake[aero].Lvert[34][2].u = 1;
							Q_WindWake[aero].Lvert[34][2].v = 1;
							Q_WindWake[aero].Lvert[34][2].X = Q_WindWake[aero].VertB25.X;
							Q_WindWake[aero].Lvert[34][2].Y = Q_WindWake[aero].VertB25.Y;
							Q_WindWake[aero].Lvert[34][2].Z = Q_WindWake[aero].VertB25.Z;


							Q_WindWake[aero].Lvert[34][3].u = 0;
							Q_WindWake[aero].Lvert[34][3].v = 1;
							Q_WindWake[aero].Lvert[34][3].X = Q_WindWake[aero].VertB2.X;
							Q_WindWake[aero].Lvert[34][3].Y = Q_WindWake[aero].VertB2.Y;
							Q_WindWake[aero].Lvert[34][3].Z = Q_WindWake[aero].VertB2.Z;



							Q_WindWake[aero].Lvert[35][0].u = 0;
							Q_WindWake[aero].Lvert[35][0].v = 0;
							Q_WindWake[aero].Lvert[35][0].X = Q_WindWake[aero].VertT25.X;
							Q_WindWake[aero].Lvert[35][0].Y = Q_WindWake[aero].VertT25.Y;
							Q_WindWake[aero].Lvert[35][0].Z = Q_WindWake[aero].VertT25.Z;

									
							Q_WindWake[aero].Lvert[35][1].u = 1;
							Q_WindWake[aero].Lvert[35][1].v = 0;
							Q_WindWake[aero].Lvert[35][1].X = Q_WindWake[aero].VertT3.X;
							Q_WindWake[aero].Lvert[35][1].Y = Q_WindWake[aero].VertT3.Y;
							Q_WindWake[aero].Lvert[35][1].Z = Q_WindWake[aero].VertT3.Z;

									
							Q_WindWake[aero].Lvert[35][2].u = 1;
							Q_WindWake[aero].Lvert[35][2].v = 1;
							Q_WindWake[aero].Lvert[35][2].X = Q_WindWake[aero].VertB3.X;
							Q_WindWake[aero].Lvert[35][2].Y = Q_WindWake[aero].VertB3.Y;
							Q_WindWake[aero].Lvert[35][2].Z = Q_WindWake[aero].VertB3.Z;


							Q_WindWake[aero].Lvert[35][3].u = 0;
							Q_WindWake[aero].Lvert[35][3].v = 1;
							Q_WindWake[aero].Lvert[35][3].X = Q_WindWake[aero].VertB25.X;
							Q_WindWake[aero].Lvert[35][3].Y = Q_WindWake[aero].VertB25.Y;
							Q_WindWake[aero].Lvert[35][3].Z = Q_WindWake[aero].VertB25.Z;


							Q_WindWake[aero].Lvert[36][0].u = 0;
							Q_WindWake[aero].Lvert[36][0].v = 0;
							Q_WindWake[aero].Lvert[36][0].X = Q_WindWake[aero].VertT3.X;
							Q_WindWake[aero].Lvert[36][0].Y = Q_WindWake[aero].VertT3.Y;
							Q_WindWake[aero].Lvert[36][0].Z = Q_WindWake[aero].VertT3.Z;

									
							Q_WindWake[aero].Lvert[36][1].u = 1;
							Q_WindWake[aero].Lvert[36][1].v = 0;
							Q_WindWake[aero].Lvert[36][1].X = Q_WindWake[aero].VertT35.X;
							Q_WindWake[aero].Lvert[36][1].Y = Q_WindWake[aero].VertT35.Y;
							Q_WindWake[aero].Lvert[36][1].Z = Q_WindWake[aero].VertT35.Z;

									
							Q_WindWake[aero].Lvert[36][2].u = 1;
							Q_WindWake[aero].Lvert[36][2].v = 1;
							Q_WindWake[aero].Lvert[36][2].X = Q_WindWake[aero].VertB35.X;
							Q_WindWake[aero].Lvert[36][2].Y = Q_WindWake[aero].VertB35.Y;
							Q_WindWake[aero].Lvert[36][2].Z = Q_WindWake[aero].VertB35.Z;


							Q_WindWake[aero].Lvert[36][3].u = 0;
							Q_WindWake[aero].Lvert[36][3].v = 1;
							Q_WindWake[aero].Lvert[36][3].X = Q_WindWake[aero].VertB3.X;
							Q_WindWake[aero].Lvert[36][3].Y = Q_WindWake[aero].VertB3.Y;
							Q_WindWake[aero].Lvert[36][3].Z = Q_WindWake[aero].VertB3.Z;


							Q_WindWake[aero].Lvert[37][0].u = 0;
							Q_WindWake[aero].Lvert[37][0].v = 0;
							Q_WindWake[aero].Lvert[37][0].X = Q_WindWake[aero].VertT35.X;
							Q_WindWake[aero].Lvert[37][0].Y = Q_WindWake[aero].VertT35.Y;
							Q_WindWake[aero].Lvert[37][0].Z = Q_WindWake[aero].VertT35.Z;

									
							Q_WindWake[aero].Lvert[37][1].u = 1;
							Q_WindWake[aero].Lvert[37][1].v = 0;
							Q_WindWake[aero].Lvert[37][1].X = Q_WindWake[aero].VertT4.X;
							Q_WindWake[aero].Lvert[37][1].Y = Q_WindWake[aero].VertT4.Y;
							Q_WindWake[aero].Lvert[37][1].Z = Q_WindWake[aero].VertT4.Z;

									
							Q_WindWake[aero].Lvert[37][2].u = 1;
							Q_WindWake[aero].Lvert[37][2].v = 1;
							Q_WindWake[aero].Lvert[37][2].X = Q_WindWake[aero].VertB4.X;
							Q_WindWake[aero].Lvert[37][2].Y = Q_WindWake[aero].VertB4.Y;
							Q_WindWake[aero].Lvert[37][2].Z = Q_WindWake[aero].VertB4.Z;


							Q_WindWake[aero].Lvert[37][3].u = 0;
							Q_WindWake[aero].Lvert[37][3].v = 1;
							Q_WindWake[aero].Lvert[37][3].X = Q_WindWake[aero].VertB35.X;
							Q_WindWake[aero].Lvert[37][3].Y = Q_WindWake[aero].VertB35.Y;
							Q_WindWake[aero].Lvert[37][3].Z = Q_WindWake[aero].VertB35.Z;


							Q_WindWake[aero].Lvert[38][0].u = 0;
							Q_WindWake[aero].Lvert[38][0].v = 0;
							Q_WindWake[aero].Lvert[38][0].X = Q_WindWake[aero].VertT4.X;
							Q_WindWake[aero].Lvert[38][0].Y = Q_WindWake[aero].VertT4.Y;
							Q_WindWake[aero].Lvert[38][0].Z = Q_WindWake[aero].VertT4.Z;

									
							Q_WindWake[aero].Lvert[38][1].u = 1;
							Q_WindWake[aero].Lvert[38][1].v = 0;
							Q_WindWake[aero].Lvert[38][1].X = Q_WindWake[aero].VertT45.X;
							Q_WindWake[aero].Lvert[38][1].Y = Q_WindWake[aero].VertT45.Y;
							Q_WindWake[aero].Lvert[38][1].Z = Q_WindWake[aero].VertT45.Z;

									
							Q_WindWake[aero].Lvert[38][2].u = 1;
							Q_WindWake[aero].Lvert[38][2].v = 1;
							Q_WindWake[aero].Lvert[38][2].X = Q_WindWake[aero].VertB45.X;
							Q_WindWake[aero].Lvert[38][2].Y = Q_WindWake[aero].VertB45.Y;
							Q_WindWake[aero].Lvert[38][2].Z = Q_WindWake[aero].VertB45.Z;


							Q_WindWake[aero].Lvert[38][3].u = 0;
							Q_WindWake[aero].Lvert[38][3].v = 1;
							Q_WindWake[aero].Lvert[38][3].X = Q_WindWake[aero].VertB4.X;
							Q_WindWake[aero].Lvert[38][3].Y = Q_WindWake[aero].VertB4.Y;
							Q_WindWake[aero].Lvert[38][3].Z = Q_WindWake[aero].VertB4.Z;


							Q_WindWake[aero].Lvert[39][0].u = 0;
							Q_WindWake[aero].Lvert[39][0].v = 0;
							Q_WindWake[aero].Lvert[39][0].X = Q_WindWake[aero].VertT45.X;
							Q_WindWake[aero].Lvert[39][0].Y = Q_WindWake[aero].VertT45.Y;
							Q_WindWake[aero].Lvert[39][0].Z = Q_WindWake[aero].VertT45.Z;

									
							Q_WindWake[aero].Lvert[39][1].u = 1;
							Q_WindWake[aero].Lvert[39][1].v = 0;
							Q_WindWake[aero].Lvert[39][1].X = Q_WindWake[aero].VertT5.X;
							Q_WindWake[aero].Lvert[39][1].Y = Q_WindWake[aero].VertT5.Y;
							Q_WindWake[aero].Lvert[39][1].Z = Q_WindWake[aero].VertT5.Z;

									
							Q_WindWake[aero].Lvert[39][2].u = 1;
							Q_WindWake[aero].Lvert[39][2].v = 1;
							Q_WindWake[aero].Lvert[39][2].X = Q_WindWake[aero].VertB5.X;
							Q_WindWake[aero].Lvert[39][2].Y = Q_WindWake[aero].VertB5.Y;
							Q_WindWake[aero].Lvert[39][2].Z = Q_WindWake[aero].VertB5.Z;


							Q_WindWake[aero].Lvert[39][3].u = 0;
							Q_WindWake[aero].Lvert[39][3].v = 1;
							Q_WindWake[aero].Lvert[39][3].X = Q_WindWake[aero].VertB45.X;
							Q_WindWake[aero].Lvert[39][3].Y = Q_WindWake[aero].VertB45.Y;
							Q_WindWake[aero].Lvert[39][3].Z = Q_WindWake[aero].VertB45.Z;


							Q_WindWake[aero].Lvert[40][0].u = 0;
							Q_WindWake[aero].Lvert[40][0].v = 0;
							Q_WindWake[aero].Lvert[40][0].X = Q_WindWake[aero].VertT5.X;
							Q_WindWake[aero].Lvert[40][0].Y = Q_WindWake[aero].VertT5.Y;
							Q_WindWake[aero].Lvert[40][0].Z = Q_WindWake[aero].VertT5.Z;

							
							Q_WindWake[aero].Lvert[40][1].u = 1;
							Q_WindWake[aero].Lvert[40][1].v = 0;
							Q_WindWake[aero].Lvert[40][1].X = Q_WindWake[aero].VertT55.X;
							Q_WindWake[aero].Lvert[40][1].Y = Q_WindWake[aero].VertT55.Y;
							Q_WindWake[aero].Lvert[40][1].Z = Q_WindWake[aero].VertT55.Z;

									
							Q_WindWake[aero].Lvert[40][2].u = 1;
							Q_WindWake[aero].Lvert[40][2].v = 1;
							Q_WindWake[aero].Lvert[40][2].X = Q_WindWake[aero].VertB55.X;
							Q_WindWake[aero].Lvert[40][2].Y = Q_WindWake[aero].VertB55.Y;
							Q_WindWake[aero].Lvert[40][2].Z = Q_WindWake[aero].VertB55.Z;


							Q_WindWake[aero].Lvert[40][3].u = 0;
							Q_WindWake[aero].Lvert[40][3].v = 1;
							Q_WindWake[aero].Lvert[40][3].X = Q_WindWake[aero].VertB5.X;
							Q_WindWake[aero].Lvert[40][3].Y = Q_WindWake[aero].VertB5.Y;
							Q_WindWake[aero].Lvert[40][3].Z = Q_WindWake[aero].VertB5.Z;


							Q_WindWake[aero].Lvert[41][0].u = 0;
							Q_WindWake[aero].Lvert[41][0].v = 0;
							Q_WindWake[aero].Lvert[41][0].X = Q_WindWake[aero].VertT55.X;
							Q_WindWake[aero].Lvert[41][0].Y = Q_WindWake[aero].VertT55.Y;
							Q_WindWake[aero].Lvert[41][0].Z = Q_WindWake[aero].VertT55.Z;

									
							Q_WindWake[aero].Lvert[41][1].u = 1;
							Q_WindWake[aero].Lvert[41][1].v = 0;
							Q_WindWake[aero].Lvert[41][1].X = Q_WindWake[aero].VertT6.X;
							Q_WindWake[aero].Lvert[41][1].Y = Q_WindWake[aero].VertT6.Y;
							Q_WindWake[aero].Lvert[41][1].Z = Q_WindWake[aero].VertT6.Z;

									
							Q_WindWake[aero].Lvert[41][2].u = 1;
							Q_WindWake[aero].Lvert[41][2].v = 1;
							Q_WindWake[aero].Lvert[41][2].X = Q_WindWake[aero].VertB6.X;
							Q_WindWake[aero].Lvert[41][2].Y = Q_WindWake[aero].VertB6.Y;
							Q_WindWake[aero].Lvert[41][2].Z = Q_WindWake[aero].VertB6.Z;


							Q_WindWake[aero].Lvert[41][3].u = 0;
							Q_WindWake[aero].Lvert[41][3].v = 1;
							Q_WindWake[aero].Lvert[41][3].X = Q_WindWake[aero].VertB55.X;
							Q_WindWake[aero].Lvert[41][3].Y = Q_WindWake[aero].VertB55.Y;
							Q_WindWake[aero].Lvert[41][3].Z = Q_WindWake[aero].VertB55.Z;


							Q_WindWake[aero].Lvert[42][0].u = 0;
							Q_WindWake[aero].Lvert[42][0].v = 0;
							Q_WindWake[aero].Lvert[42][0].X = Q_WindWake[aero].VertT6.X;
							Q_WindWake[aero].Lvert[42][0].Y = Q_WindWake[aero].VertT6.Y;
							Q_WindWake[aero].Lvert[42][0].Z = Q_WindWake[aero].VertT6.Z;

									
							Q_WindWake[aero].Lvert[42][1].u = 1;
							Q_WindWake[aero].Lvert[42][1].v = 0;
							Q_WindWake[aero].Lvert[42][1].X = Q_WindWake[aero].VertT65.X;
							Q_WindWake[aero].Lvert[42][1].Y = Q_WindWake[aero].VertT65.Y;
							Q_WindWake[aero].Lvert[42][1].Z = Q_WindWake[aero].VertT65.Z;

									
							Q_WindWake[aero].Lvert[42][2].u = 1;
							Q_WindWake[aero].Lvert[42][2].v = 1;
							Q_WindWake[aero].Lvert[42][2].X = Q_WindWake[aero].VertB65.X;
							Q_WindWake[aero].Lvert[42][2].Y = Q_WindWake[aero].VertB65.Y;
							Q_WindWake[aero].Lvert[42][2].Z = Q_WindWake[aero].VertB65.Z;


							Q_WindWake[aero].Lvert[42][3].u = 0;
							Q_WindWake[aero].Lvert[42][3].v = 1;
							Q_WindWake[aero].Lvert[42][3].X = Q_WindWake[aero].VertB6.X;
							Q_WindWake[aero].Lvert[42][3].Y = Q_WindWake[aero].VertB6.Y;
							Q_WindWake[aero].Lvert[42][3].Z = Q_WindWake[aero].VertB6.Z;


							Q_WindWake[aero].Lvert[43][0].u = 0;
							Q_WindWake[aero].Lvert[43][0].v = 0;
							Q_WindWake[aero].Lvert[43][0].X = Q_WindWake[aero].VertT65.X;
							Q_WindWake[aero].Lvert[43][0].Y = Q_WindWake[aero].VertT65.Y;
							Q_WindWake[aero].Lvert[43][0].Z = Q_WindWake[aero].VertT65.Z;

									
							Q_WindWake[aero].Lvert[43][1].u = 1;
							Q_WindWake[aero].Lvert[43][1].v = 0;
							Q_WindWake[aero].Lvert[43][1].X = Q_WindWake[aero].VertT7.X;
							Q_WindWake[aero].Lvert[43][1].Y = Q_WindWake[aero].VertT7.Y;
							Q_WindWake[aero].Lvert[43][1].Z = Q_WindWake[aero].VertT7.Z;

									
							Q_WindWake[aero].Lvert[43][2].u = 1;
							Q_WindWake[aero].Lvert[43][2].v = 1;
							Q_WindWake[aero].Lvert[43][2].X = Q_WindWake[aero].VertB7.X;
							Q_WindWake[aero].Lvert[43][2].Y = Q_WindWake[aero].VertB7.Y;
							Q_WindWake[aero].Lvert[43][2].Z = Q_WindWake[aero].VertB7.Z;


							Q_WindWake[aero].Lvert[43][3].u = 0;
							Q_WindWake[aero].Lvert[43][3].v = 1;
							Q_WindWake[aero].Lvert[43][3].X = Q_WindWake[aero].VertB65.X;
							Q_WindWake[aero].Lvert[43][3].Y = Q_WindWake[aero].VertB65.Y;
							Q_WindWake[aero].Lvert[43][3].Z = Q_WindWake[aero].VertB65.Z;


							Q_WindWake[aero].Lvert[44][0].u = 0;
							Q_WindWake[aero].Lvert[44][0].v = 0;
							Q_WindWake[aero].Lvert[44][0].X = Q_WindWake[aero].VertT7.X;
							Q_WindWake[aero].Lvert[44][0].Y = Q_WindWake[aero].VertT7.Y;
							Q_WindWake[aero].Lvert[44][0].Z = Q_WindWake[aero].VertT7.Z;

									
							Q_WindWake[aero].Lvert[44][1].u = 1;
							Q_WindWake[aero].Lvert[44][1].v = 0;
							Q_WindWake[aero].Lvert[44][1].X = Q_WindWake[aero].VertT75.X;
							Q_WindWake[aero].Lvert[44][1].Y = Q_WindWake[aero].VertT75.Y;
							Q_WindWake[aero].Lvert[44][1].Z = Q_WindWake[aero].VertT75.Z;

									
							Q_WindWake[aero].Lvert[44][2].u = 1;
							Q_WindWake[aero].Lvert[44][2].v = 1;
							Q_WindWake[aero].Lvert[44][2].X = Q_WindWake[aero].VertB75.X;
							Q_WindWake[aero].Lvert[44][2].Y = Q_WindWake[aero].VertB75.Y;
							Q_WindWake[aero].Lvert[44][2].Z = Q_WindWake[aero].VertB75.Z;


							Q_WindWake[aero].Lvert[44][3].u = 0;
							Q_WindWake[aero].Lvert[44][3].v = 1;
							Q_WindWake[aero].Lvert[44][3].X = Q_WindWake[aero].VertB7.X;
							Q_WindWake[aero].Lvert[44][3].Y = Q_WindWake[aero].VertB7.Y;
							Q_WindWake[aero].Lvert[44][3].Z = Q_WindWake[aero].VertB7.Z;


							Q_WindWake[aero].Lvert[45][0].u = 0;
							Q_WindWake[aero].Lvert[45][0].v = 0;
							Q_WindWake[aero].Lvert[45][0].X = Q_WindWake[aero].VertT75.X;
							Q_WindWake[aero].Lvert[45][0].Y = Q_WindWake[aero].VertT75.Y;
							Q_WindWake[aero].Lvert[45][0].Z = Q_WindWake[aero].VertT75.Z;

									
							Q_WindWake[aero].Lvert[45][1].u = 1;
							Q_WindWake[aero].Lvert[45][1].v = 0;
							Q_WindWake[aero].Lvert[45][1].X = Q_WindWake[aero].VertT8.X;
							Q_WindWake[aero].Lvert[45][1].Y = Q_WindWake[aero].VertT8.Y;
							Q_WindWake[aero].Lvert[45][1].Z = Q_WindWake[aero].VertT8.Z;

									
							Q_WindWake[aero].Lvert[45][2].u = 1;
							Q_WindWake[aero].Lvert[45][2].v = 1;
							Q_WindWake[aero].Lvert[45][2].X = Q_WindWake[aero].VertB8.X;
							Q_WindWake[aero].Lvert[45][2].Y = Q_WindWake[aero].VertB8.Y;
							Q_WindWake[aero].Lvert[45][2].Z = Q_WindWake[aero].VertB8.Z;


							Q_WindWake[aero].Lvert[45][3].u = 0;
							Q_WindWake[aero].Lvert[45][3].v = 1;
							Q_WindWake[aero].Lvert[45][3].X = Q_WindWake[aero].VertB75.X;
							Q_WindWake[aero].Lvert[45][3].Y = Q_WindWake[aero].VertB75.Y;
							Q_WindWake[aero].Lvert[45][3].Z = Q_WindWake[aero].VertB75.Z;


							Q_WindWake[aero].Lvert[46][0].u = 0;
							Q_WindWake[aero].Lvert[46][0].v = 0;
							Q_WindWake[aero].Lvert[46][0].X = Q_WindWake[aero].VertT8.X;
							Q_WindWake[aero].Lvert[46][0].Y = Q_WindWake[aero].VertT8.Y;
							Q_WindWake[aero].Lvert[46][0].Z = Q_WindWake[aero].VertT8.Z;

									
							Q_WindWake[aero].Lvert[46][1].u = 1;
							Q_WindWake[aero].Lvert[46][1].v = 0;
							Q_WindWake[aero].Lvert[46][1].X = Q_WindWake[aero].VertT85.X;
							Q_WindWake[aero].Lvert[46][1].Y = Q_WindWake[aero].VertT85.Y;
							Q_WindWake[aero].Lvert[46][1].Z = Q_WindWake[aero].VertT85.Z;


							Q_WindWake[aero].Lvert[46][2].u = 1;
							Q_WindWake[aero].Lvert[46][2].v = 1;
							Q_WindWake[aero].Lvert[46][2].X = Q_WindWake[aero].VertB85.X;
							Q_WindWake[aero].Lvert[46][2].Y = Q_WindWake[aero].VertB85.Y;
							Q_WindWake[aero].Lvert[46][2].Z = Q_WindWake[aero].VertB85.Z;


							Q_WindWake[aero].Lvert[46][3].u = 0;
							Q_WindWake[aero].Lvert[46][3].v = 1;
							Q_WindWake[aero].Lvert[46][3].X = Q_WindWake[aero].VertB8.X;
							Q_WindWake[aero].Lvert[46][3].Y = Q_WindWake[aero].VertB8.Y;
							Q_WindWake[aero].Lvert[46][3].Z = Q_WindWake[aero].VertB8.Z;


							Q_WindWake[aero].Lvert[47][0].u = 0;
							Q_WindWake[aero].Lvert[47][0].v = 0;
							Q_WindWake[aero].Lvert[47][0].X = Q_WindWake[aero].VertT85.X;
							Q_WindWake[aero].Lvert[47][0].Y = Q_WindWake[aero].VertT85.Y;
							Q_WindWake[aero].Lvert[47][0].Z = Q_WindWake[aero].VertT85.Z;


							Q_WindWake[aero].Lvert[47][1].u = 1;
							Q_WindWake[aero].Lvert[47][1].v = 0;
							Q_WindWake[aero].Lvert[47][1].X = Q_WindWake[aero].VertT1.X;
							Q_WindWake[aero].Lvert[47][1].Y = Q_WindWake[aero].VertT1.Y;
							Q_WindWake[aero].Lvert[47][1].Z = Q_WindWake[aero].VertT1.Z;


							Q_WindWake[aero].Lvert[47][2].u = 1;
							Q_WindWake[aero].Lvert[47][2].v = 1;
							Q_WindWake[aero].Lvert[47][2].X = Q_WindWake[aero].VertB1.X;
							Q_WindWake[aero].Lvert[47][2].Y = Q_WindWake[aero].VertB1.Y;
							Q_WindWake[aero].Lvert[47][2].Z = Q_WindWake[aero].VertB1.Z;


							Q_WindWake[aero].Lvert[47][3].u = 0;
							Q_WindWake[aero].Lvert[47][3].v = 1;
							Q_WindWake[aero].Lvert[47][3].X = Q_WindWake[aero].VertB85.X;
							Q_WindWake[aero].Lvert[47][3].Y = Q_WindWake[aero].VertB85.Y;
							Q_WindWake[aero].Lvert[47][3].Z = Q_WindWake[aero].VertB85.Z;


				if(Forge[aero].CharDATA.AngelEFFECTS.JinkTYPE == 0)
					{
					i = 0;
					while(i <= 15)
						{
						geWorld_AddPolyOnce(World, &Q_WindWake[aero].Lvert[i][0], 3, Water[Q_WindWake[aero].MaterialCNT], Q_WindWake[aero].Type, Q_WindWake[aero].RenderFlags, 1.0f);
						i++;
						}

					i = 16;
					while(i <= 47)
						{
						geWorld_AddPolyOnce(World, &Q_WindWake[aero].Lvert[i][0], 4, Water[Q_WindWake[aero].MaterialCNT], Q_WindWake[aero].Type, Q_WindWake[aero].RenderFlags, 1.0f);
						i++;
						}
					}

				if(Forge[aero].CharDATA.AngelEFFECTS.JinkTYPE == 1)
					{
					i = 0;
					while(i <= 15)
						{
						geWorld_AddPolyOnce(World, &Q_WindWake[aero].Lvert[i][0], 3, fire[Q_WindWake[aero].MaterialCNT], Q_WindWake[aero].Type, Q_WindWake[aero].RenderFlags, 1.0f);
						i++;
						}

					i = 16;
					while(i <= 47)
						{
						geWorld_AddPolyOnce(World, &Q_WindWake[aero].Lvert[i][0], 4, fire[Q_WindWake[aero].MaterialCNT], Q_WindWake[aero].Type, Q_WindWake[aero].RenderFlags, 1.0f);
						i++;
						}
					}


				//###### Initialise one Textured Tri Effect - WindWake Ring Trail - Static
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Live = 1;
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].EffectType = 1;
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].PosB = Q_WindWake[aero].Pos;
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Pos = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].STRPos;

				if(Forge[aero].CharDATA.AngelEFFECTS.JinkTYPE == 0)
					{ Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].EffectType = 1; }

				if(Forge[aero].CharDATA.AngelEFFECTS.JinkTYPE == 1)
					{ Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].EffectType = 4; }

				//#### Set Back facing verts
				if(Forge[aero].NomTriEffect != 0)
					{
					//#### Set front verts
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT1 = Q_WindWake[aero].VertB1;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT15 = Q_WindWake[aero].VertB15;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT2 = Q_WindWake[aero].VertB2;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT25 = Q_WindWake[aero].VertB25;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT3 = Q_WindWake[aero].VertB3;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT35 = Q_WindWake[aero].VertB35;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT4 = Q_WindWake[aero].VertB4;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT45 = Q_WindWake[aero].VertB45;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT5 = Q_WindWake[aero].VertB5;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT55 = Q_WindWake[aero].VertB55;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT6 = Q_WindWake[aero].VertB6;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT65 = Q_WindWake[aero].VertB65;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT7 = Q_WindWake[aero].VertB7;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT75 = Q_WindWake[aero].VertB75;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT8 = Q_WindWake[aero].VertB8;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT85 = Q_WindWake[aero].VertB85;

					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB1 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT1;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB15 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT15;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB2 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT2;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB25 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT25;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB3 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT3;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB35 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT35;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB4 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT4;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB45 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT45;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB5 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT5;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB55 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT55;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB6 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT6;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB65 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT65;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB7 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT7;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB75 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT75;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB8 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT8;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB85 = Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect-1].VertT85;
					}
				else
					{
					//#### Set front verts
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT1 = Q_WindWake[aero].VertT1;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT15 = Q_WindWake[aero].VertT15;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT2 = Q_WindWake[aero].VertT2;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT25 = Q_WindWake[aero].VertT25;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT3 = Q_WindWake[aero].VertT3;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT35 = Q_WindWake[aero].VertT35;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT4 = Q_WindWake[aero].VertT4;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT45 = Q_WindWake[aero].VertT45;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT5 = Q_WindWake[aero].VertT5;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT55 = Q_WindWake[aero].VertT55;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT6 = Q_WindWake[aero].VertT6;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT65 = Q_WindWake[aero].VertT65;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT7 = Q_WindWake[aero].VertT7;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT75 = Q_WindWake[aero].VertT75;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT8 = Q_WindWake[aero].VertT8;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertT85 = Q_WindWake[aero].VertT85;

					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB1 = Q_WindWake[aero].VertB1;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB15 = Q_WindWake[aero].VertB15;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB2 = Q_WindWake[aero].VertB2;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB25 = Q_WindWake[aero].VertB25;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB3 = Q_WindWake[aero].VertB3;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB35 = Q_WindWake[aero].VertB35;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB4 = Q_WindWake[aero].VertB4;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB45 = Q_WindWake[aero].VertB45;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB5 = Q_WindWake[aero].VertB5;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB55 = Q_WindWake[aero].VertB55;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB6 = Q_WindWake[aero].VertB6;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB65 = Q_WindWake[aero].VertB65;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB7 = Q_WindWake[aero].VertB7;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB75 = Q_WindWake[aero].VertB75;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB8 = Q_WindWake[aero].VertB8;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VertB85 = Q_WindWake[aero].VertB85;
					}


				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VecIn = Q_WindWake[aero].VecIn;
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VecUp = Q_WindWake[aero].VecUp;
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].VecLeft = Q_WindWake[aero].VecLeft;

				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].MaterialCNT = Q_WindWake[aero].MaterialCNT;

				if(Forge[aero].JinkSpecialON < 1)
					{
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Red = 255;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Green = 255;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Blue = 255;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Alpha = Q_WindWake[aero].MAINALPHA;
					}
				else
					{
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Alpha = Q_WindWake[aero].MAINALPHA;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Red = Forge[aero].CharDATA.AngelEFFECTS.JinkRED;	//135
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Green = Forge[aero].CharDATA.AngelEFFECTS.JinkGREEN;
					Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Blue = Forge[aero].CharDATA.AngelEFFECTS.JinkBLUE;
					}

				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].LengthDist = 3;
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].ExpandDist = 0.01;

				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].PolyType = GE_TEXTURED_POLY;
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].RenderFlags = GE_RENDER_DEPTH_SORT_BF;
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].ScaleBIT = 1.0f;

				if(Forge[aero].NomTriEffect == 0)
					{
					TriEffectUt = 0.1;
					TriEffectUb = 0;
					}
				else
					{
					TriEffectUt += 0.1;
					TriEffectUb += 0.1;
					if(TriEffectUt > 1)
						{
						TriEffectUt = 0.1;
						TriEffectUb = 0;
						}
					}

				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Ut = TriEffectUt;
				Forge[aero].Q_TexTriEffect[Forge[aero].NomTriEffect].Ub = TriEffectUb;

				Forge[aero].NomTriEffect++;
				if(Forge[aero].NomTriEffect > 299) Forge[aero].NomTriEffect = 0;
				}
			}

		aero++;
		}


	//------******[  <TEXTURED TRI>------[EFFECTS CONTROL COMPONENT]  ]******------

	if(player.NomTriEffect > 0)
		{
		SCRAM = player.NomTriEffect - 1;
		while(SCRAM >= 0)
			{
			if(player.Q_TexTriEffect[SCRAM].Live == 1)
				{
				switch(player.Q_TexTriEffect[SCRAM].EffectType)
					{
					case 0:	//WindWake Ring Trail
						{
						if(SCRAM != player.NomTriEffect - 1)
							{
							player.Q_TexTriEffect[SCRAM].VertT1 = player.Q_TexTriEffect[SCRAM+1].VertB1;
							player.Q_TexTriEffect[SCRAM].VertT2 = player.Q_TexTriEffect[SCRAM+1].VertB2;
							player.Q_TexTriEffect[SCRAM].VertT3 = player.Q_TexTriEffect[SCRAM+1].VertB3;
							player.Q_TexTriEffect[SCRAM].VertT4 = player.Q_TexTriEffect[SCRAM+1].VertB4;
							player.Q_TexTriEffect[SCRAM].VertT5 = player.Q_TexTriEffect[SCRAM+1].VertB5;
							player.Q_TexTriEffect[SCRAM].VertT6 = player.Q_TexTriEffect[SCRAM+1].VertB6;
							player.Q_TexTriEffect[SCRAM].VertT7 = player.Q_TexTriEffect[SCRAM+1].VertB7;
							player.Q_TexTriEffect[SCRAM].VertT8 = player.Q_TexTriEffect[SCRAM+1].VertB8;
							player.Q_TexTriEffect[SCRAM].Pos = player.Q_TexTriEffect[SCRAM+1].Pos;
							}

						player.Q_TexTriEffect[SCRAM].VertB1 = player.Q_TexTriEffect[SCRAM].VertT1;
						player.Q_TexTriEffect[SCRAM].VertB2 = player.Q_TexTriEffect[SCRAM].VertT2;
						player.Q_TexTriEffect[SCRAM].VertB3 = player.Q_TexTriEffect[SCRAM].VertT3;
						player.Q_TexTriEffect[SCRAM].VertB4 = player.Q_TexTriEffect[SCRAM].VertT4;
						player.Q_TexTriEffect[SCRAM].VertB5 = player.Q_TexTriEffect[SCRAM].VertT5;
						player.Q_TexTriEffect[SCRAM].VertB6 = player.Q_TexTriEffect[SCRAM].VertT6;
						player.Q_TexTriEffect[SCRAM].VertB7 = player.Q_TexTriEffect[SCRAM].VertT7;
						player.Q_TexTriEffect[SCRAM].VertB8 = player.Q_TexTriEffect[SCRAM].VertT8;


						//##### Material Count
						player.Q_TexTriEffect[SCRAM].MaterialCNT++;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT > 136) player.Q_TexTriEffect[SCRAM].MaterialCNT = 124;


						//########- Effect Progression
						//##### Decrease Alpha Value - Increase Colour
						player.Q_TexTriEffect[SCRAM].Alpha -= 4;
						if(player.Q_TexTriEffect[SCRAM].Alpha < 0)
							{
							player.Q_TexTriEffect[SCRAM].Alpha = 0;
							player.Q_TexTriEffect[SCRAM].Live = 0;

							//### Array Reorder
							K = SCRAM;
							while(K < player.NomTriEffect - 1)
								{
								player.Q_TexTriEffect[K] = player.Q_TexTriEffect[K+1];
								K++;
								}

							player.NomTriEffect--;
							}

						player.Q_TexTriEffect[SCRAM].Green += 4;
						if(player.Q_TexTriEffect[SCRAM].Green > 255) player.Q_TexTriEffect[SCRAM].Green = 255;
						player.Q_TexTriEffect[SCRAM].Red += 4;
						if(player.Q_TexTriEffect[SCRAM].Red > 255) player.Q_TexTriEffect[SCRAM].Red = 255;


						//##### Move Bottom Verts of Trail Back and Out
						player.Q_TexTriEffect[SCRAM].LengthDist += 0.05;
						player.Q_TexTriEffect[SCRAM].ExpandDist += 0.004;

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB1, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB1);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB1);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB2, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB2);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB2);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB3, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB3);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB3);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB4, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB4);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB4);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB5, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB5);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB5);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB6, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB6);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB6);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB7, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB7);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB7);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB8, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB8);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB8);


						//##### - ALPHA VALUES AND COLOUR
						a=0;
						while( a <= 7 )
							{
							b=0;
							while( b <= 3 )
								{
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].a = player.Q_TexTriEffect[SCRAM].Alpha;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].b = player.Q_TexTriEffect[SCRAM].Blue;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].g = player.Q_TexTriEffect[SCRAM].Green;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].r = player.Q_TexTriEffect[SCRAM].Red;
								b++;
								}
							a++;
							}


						//##### - SOLID RING VERTS

						player.Q_TexTriEffect[SCRAM].Lvert[0][0].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].X = player.Q_TexTriEffect[SCRAM].VertT2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].Y = player.Q_TexTriEffect[SCRAM].VertT2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].Z = player.Q_TexTriEffect[SCRAM].VertT2.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].X = player.Q_TexTriEffect[SCRAM].VertB2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].Y = player.Q_TexTriEffect[SCRAM].VertB2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].Z = player.Q_TexTriEffect[SCRAM].VertB2.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[0][3].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[1][0].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].X = player.Q_TexTriEffect[SCRAM].VertT2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].Y = player.Q_TexTriEffect[SCRAM].VertT2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].Z = player.Q_TexTriEffect[SCRAM].VertT2.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;

	
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[1][3].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].X = player.Q_TexTriEffect[SCRAM].VertB2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].Y = player.Q_TexTriEffect[SCRAM].VertB2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].Z = player.Q_TexTriEffect[SCRAM].VertB2.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[2][0].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;

						
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].X = player.Q_TexTriEffect[SCRAM].VertT4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].Y = player.Q_TexTriEffect[SCRAM].VertT4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].Z = player.Q_TexTriEffect[SCRAM].VertT4.Z;

						
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].X = player.Q_TexTriEffect[SCRAM].VertB4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].Y = player.Q_TexTriEffect[SCRAM].VertB4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].Z = player.Q_TexTriEffect[SCRAM].VertB4.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[2][3].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[3][0].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].X = player.Q_TexTriEffect[SCRAM].VertT4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].Y = player.Q_TexTriEffect[SCRAM].VertT4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].Z = player.Q_TexTriEffect[SCRAM].VertT4.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].X = player.Q_TexTriEffect[SCRAM].VertT5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].Y = player.Q_TexTriEffect[SCRAM].VertT5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].Z = player.Q_TexTriEffect[SCRAM].VertT5.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].X = player.Q_TexTriEffect[SCRAM].VertB5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].Y = player.Q_TexTriEffect[SCRAM].VertB5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].Z = player.Q_TexTriEffect[SCRAM].VertB5.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[3][3].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].X = player.Q_TexTriEffect[SCRAM].VertB4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].Y = player.Q_TexTriEffect[SCRAM].VertB4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].Z = player.Q_TexTriEffect[SCRAM].VertB4.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[4][0].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].X = player.Q_TexTriEffect[SCRAM].VertT5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].Y = player.Q_TexTriEffect[SCRAM].VertT5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].Z = player.Q_TexTriEffect[SCRAM].VertT5.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].X = player.Q_TexTriEffect[SCRAM].VertT6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].Y = player.Q_TexTriEffect[SCRAM].VertT6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].Z = player.Q_TexTriEffect[SCRAM].VertT6.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].X = player.Q_TexTriEffect[SCRAM].VertB6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].Y = player.Q_TexTriEffect[SCRAM].VertB6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].Z = player.Q_TexTriEffect[SCRAM].VertB6.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[4][3].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].X = player.Q_TexTriEffect[SCRAM].VertB5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].Y = player.Q_TexTriEffect[SCRAM].VertB5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].Z = player.Q_TexTriEffect[SCRAM].VertB5.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[5][0].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].X = player.Q_TexTriEffect[SCRAM].VertT6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].Y = player.Q_TexTriEffect[SCRAM].VertT6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].Z = player.Q_TexTriEffect[SCRAM].VertT6.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].X = player.Q_TexTriEffect[SCRAM].VertT7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].Y = player.Q_TexTriEffect[SCRAM].VertT7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].Z = player.Q_TexTriEffect[SCRAM].VertT7.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].X = player.Q_TexTriEffect[SCRAM].VertB7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].Y = player.Q_TexTriEffect[SCRAM].VertB7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].Z = player.Q_TexTriEffect[SCRAM].VertB7.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[5][3].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].X = player.Q_TexTriEffect[SCRAM].VertB6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].Y = player.Q_TexTriEffect[SCRAM].VertB6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].Z = player.Q_TexTriEffect[SCRAM].VertB6.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[6][0].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].X = player.Q_TexTriEffect[SCRAM].VertT7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].Y = player.Q_TexTriEffect[SCRAM].VertT7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].Z = player.Q_TexTriEffect[SCRAM].VertT7.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].X = player.Q_TexTriEffect[SCRAM].VertT8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].Y = player.Q_TexTriEffect[SCRAM].VertT8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].Z = player.Q_TexTriEffect[SCRAM].VertT8.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].X = player.Q_TexTriEffect[SCRAM].VertB8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].Y = player.Q_TexTriEffect[SCRAM].VertB8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].Z = player.Q_TexTriEffect[SCRAM].VertB8.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[6][3].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].X = player.Q_TexTriEffect[SCRAM].VertB7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].Y = player.Q_TexTriEffect[SCRAM].VertB7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].Z = player.Q_TexTriEffect[SCRAM].VertB7.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[7][0].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].X = player.Q_TexTriEffect[SCRAM].VertT8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].Y = player.Q_TexTriEffect[SCRAM].VertT8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].Z = player.Q_TexTriEffect[SCRAM].VertT8.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].u = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[7][3].u = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].X = player.Q_TexTriEffect[SCRAM].VertB8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].Y = player.Q_TexTriEffect[SCRAM].VertB8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].Z = player.Q_TexTriEffect[SCRAM].VertB8.Z;


						if(player.Q_TexTriEffect[SCRAM].Live == 1)
							{
							i = 0;
							while(i <= 7)
								{
								geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[i][0], 4, Water[player.Q_TexTriEffect[SCRAM].MaterialCNT], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
								i++;
								}
							}

						} break;


					case 1:	//WindWake Ring Trail [Static Non Correctional]
						{
						if(SCRAM != player.NomTriEffect - 1)
							{
							player.Q_TexTriEffect[SCRAM].VertT1 = player.Q_TexTriEffect[SCRAM+1].VertB1;
							player.Q_TexTriEffect[SCRAM].VertT2 = player.Q_TexTriEffect[SCRAM+1].VertB2;
							player.Q_TexTriEffect[SCRAM].VertT3 = player.Q_TexTriEffect[SCRAM+1].VertB3;
							player.Q_TexTriEffect[SCRAM].VertT4 = player.Q_TexTriEffect[SCRAM+1].VertB4;
							player.Q_TexTriEffect[SCRAM].VertT5 = player.Q_TexTriEffect[SCRAM+1].VertB5;
							player.Q_TexTriEffect[SCRAM].VertT6 = player.Q_TexTriEffect[SCRAM+1].VertB6;
							player.Q_TexTriEffect[SCRAM].VertT7 = player.Q_TexTriEffect[SCRAM+1].VertB7;
							player.Q_TexTriEffect[SCRAM].VertT8 = player.Q_TexTriEffect[SCRAM+1].VertB8;
							player.Q_TexTriEffect[SCRAM].VertT15 = player.Q_TexTriEffect[SCRAM+1].VertB15;
							player.Q_TexTriEffect[SCRAM].VertT25 = player.Q_TexTriEffect[SCRAM+1].VertB25;
							player.Q_TexTriEffect[SCRAM].VertT35 = player.Q_TexTriEffect[SCRAM+1].VertB35;
							player.Q_TexTriEffect[SCRAM].VertT45 = player.Q_TexTriEffect[SCRAM+1].VertB45;
							player.Q_TexTriEffect[SCRAM].VertT55 = player.Q_TexTriEffect[SCRAM+1].VertB55;
							player.Q_TexTriEffect[SCRAM].VertT65 = player.Q_TexTriEffect[SCRAM+1].VertB65;
							player.Q_TexTriEffect[SCRAM].VertT75 = player.Q_TexTriEffect[SCRAM+1].VertB75;
							player.Q_TexTriEffect[SCRAM].VertT85 = player.Q_TexTriEffect[SCRAM+1].VertB85;
							}


						//##### Material Count
						player.Q_TexTriEffect[SCRAM].MaterialCNT++;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT < 124) player.Q_TexTriEffect[SCRAM].MaterialCNT = 124;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT > 136) player.Q_TexTriEffect[SCRAM].MaterialCNT = 124;

						/*player.Q_TexTriEffect[SCRAM].MaterialCNT++;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT < 82) player.Q_TexTriEffect[SCRAM].MaterialCNT = 82;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT > 96) player.Q_TexTriEffect[SCRAM].MaterialCNT = 82;*/


						//########- Effect Progression
						//##### Decrease Alpha Value - Increase Colour
						player.Q_TexTriEffect[SCRAM].Alpha -= 6;
						if(player.Q_TexTriEffect[SCRAM].Alpha < 0)
							{
							player.Q_TexTriEffect[SCRAM].Alpha = 0;
							player.Q_TexTriEffect[SCRAM].Live = 0;

							//### Array Reorder
							K = SCRAM;
							while(K < player.NomTriEffect - 1)
								{
								player.Q_TexTriEffect[K] = player.Q_TexTriEffect[K+1];
								K++;
								}

							player.NomTriEffect--;
							}

						if(player.Q_TexTriEffect[SCRAM].Green > 80)
							{
							player.Q_TexTriEffect[SCRAM].Red += 3*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Red > 255) player.Q_TexTriEffect[SCRAM].Red = 255;
							player.Q_TexTriEffect[SCRAM].Green += 3*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Green > 255) player.Q_TexTriEffect[SCRAM].Green = 255;
							}
						else
							{
							player.Q_TexTriEffect[SCRAM].Red -= 10*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Red < 0) player.Q_TexTriEffect[SCRAM].Red = 0;
							player.Q_TexTriEffect[SCRAM].Green -= 10*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Green < 0) player.Q_TexTriEffect[SCRAM].Green = 0;
							player.Q_TexTriEffect[SCRAM].Blue -= 10*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Blue < 0) player.Q_TexTriEffect[SCRAM].Blue = 0;
							}


						//##### Move Bottom Verts of Trail Back and Out
						//player.Q_TexTriEffect[SCRAM].LengthDist += 0.05;
						player.Q_TexTriEffect[SCRAM].ExpandDist += 0.004;

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB1, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB1);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB1);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB2, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB2);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB2);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB3, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB3);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB3);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB4, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB4);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB4);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB5, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB5);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB5);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB6, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB6);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB6);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB7, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB7);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB7);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB8, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB8);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB8);


						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB15, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB1);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB15, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB15);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB25, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB2);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB25, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB25);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB35, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB3);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB35, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB35);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB45, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB4);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB45, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB45);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB55, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB5);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB55, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB55);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB65, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB6);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB65, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB65);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB75, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB7);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB75, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB75);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB85, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB8);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB85, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB85);


						//##### - ALPHA VALUES AND COLOUR
						a=0;
						while( a <= 15 )
							{
							b=0;
							while( b <= 3 )
								{
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].a = player.Q_TexTriEffect[SCRAM].Alpha;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].b = player.Q_TexTriEffect[SCRAM].Blue;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].g = player.Q_TexTriEffect[SCRAM].Green;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].r = player.Q_TexTriEffect[SCRAM].Red;
								b++;
								}
							a++;
							}


						//##### - SOLID RING VERTS

						player.Q_TexTriEffect[SCRAM].Lvert[0][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;

						
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].X = player.Q_TexTriEffect[SCRAM].VertT15.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].Y = player.Q_TexTriEffect[SCRAM].VertT15.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].Z = player.Q_TexTriEffect[SCRAM].VertT15.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].X = player.Q_TexTriEffect[SCRAM].VertB15.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].Y = player.Q_TexTriEffect[SCRAM].VertB15.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].Z = player.Q_TexTriEffect[SCRAM].VertB15.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[0][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[1][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].X = player.Q_TexTriEffect[SCRAM].VertT15.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].Y = player.Q_TexTriEffect[SCRAM].VertT15.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].Z = player.Q_TexTriEffect[SCRAM].VertT15.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].X = player.Q_TexTriEffect[SCRAM].VertT2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].Y = player.Q_TexTriEffect[SCRAM].VertT2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].Z = player.Q_TexTriEffect[SCRAM].VertT2.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].X = player.Q_TexTriEffect[SCRAM].VertB2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].Y = player.Q_TexTriEffect[SCRAM].VertB2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].Z = player.Q_TexTriEffect[SCRAM].VertB2.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[1][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].X = player.Q_TexTriEffect[SCRAM].VertB15.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].Y = player.Q_TexTriEffect[SCRAM].VertB15.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].Z = player.Q_TexTriEffect[SCRAM].VertB15.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[2][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].X = player.Q_TexTriEffect[SCRAM].VertT2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].Y = player.Q_TexTriEffect[SCRAM].VertT2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].Z = player.Q_TexTriEffect[SCRAM].VertT2.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].X = player.Q_TexTriEffect[SCRAM].VertT25.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].Y = player.Q_TexTriEffect[SCRAM].VertT25.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].Z = player.Q_TexTriEffect[SCRAM].VertT25.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].X = player.Q_TexTriEffect[SCRAM].VertB25.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].Y = player.Q_TexTriEffect[SCRAM].VertB25.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].Z = player.Q_TexTriEffect[SCRAM].VertB25.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[2][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].X = player.Q_TexTriEffect[SCRAM].VertB2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].Y = player.Q_TexTriEffect[SCRAM].VertB2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].Z = player.Q_TexTriEffect[SCRAM].VertB2.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[3][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].X = player.Q_TexTriEffect[SCRAM].VertT25.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].Y = player.Q_TexTriEffect[SCRAM].VertT25.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].Z = player.Q_TexTriEffect[SCRAM].VertT25.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[3][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].X = player.Q_TexTriEffect[SCRAM].VertB25.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].Y = player.Q_TexTriEffect[SCRAM].VertB25.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].Z = player.Q_TexTriEffect[SCRAM].VertB25.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[4][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].X = player.Q_TexTriEffect[SCRAM].VertT35.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].Y = player.Q_TexTriEffect[SCRAM].VertT35.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].Z = player.Q_TexTriEffect[SCRAM].VertT35.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].X = player.Q_TexTriEffect[SCRAM].VertB35.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].Y = player.Q_TexTriEffect[SCRAM].VertB35.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].Z = player.Q_TexTriEffect[SCRAM].VertB35.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[4][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[5][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].X = player.Q_TexTriEffect[SCRAM].VertT35.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].Y = player.Q_TexTriEffect[SCRAM].VertT35.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].Z = player.Q_TexTriEffect[SCRAM].VertT35.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].X = player.Q_TexTriEffect[SCRAM].VertT4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].Y = player.Q_TexTriEffect[SCRAM].VertT4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].Z = player.Q_TexTriEffect[SCRAM].VertT4.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].X = player.Q_TexTriEffect[SCRAM].VertB4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].Y = player.Q_TexTriEffect[SCRAM].VertB4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].Z = player.Q_TexTriEffect[SCRAM].VertB4.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[5][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].X = player.Q_TexTriEffect[SCRAM].VertB35.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].Y = player.Q_TexTriEffect[SCRAM].VertB35.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].Z = player.Q_TexTriEffect[SCRAM].VertB35.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[6][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].X = player.Q_TexTriEffect[SCRAM].VertT4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].Y = player.Q_TexTriEffect[SCRAM].VertT4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].Z = player.Q_TexTriEffect[SCRAM].VertT4.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].X = player.Q_TexTriEffect[SCRAM].VertT45.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].Y = player.Q_TexTriEffect[SCRAM].VertT45.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].Z = player.Q_TexTriEffect[SCRAM].VertT45.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].X = player.Q_TexTriEffect[SCRAM].VertB45.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].Y = player.Q_TexTriEffect[SCRAM].VertB45.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].Z = player.Q_TexTriEffect[SCRAM].VertB45.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[6][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].X = player.Q_TexTriEffect[SCRAM].VertB4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].Y = player.Q_TexTriEffect[SCRAM].VertB4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].Z = player.Q_TexTriEffect[SCRAM].VertB4.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[7][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].X = player.Q_TexTriEffect[SCRAM].VertT45.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].Y = player.Q_TexTriEffect[SCRAM].VertT45.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].Z = player.Q_TexTriEffect[SCRAM].VertT45.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].X = player.Q_TexTriEffect[SCRAM].VertT5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].Y = player.Q_TexTriEffect[SCRAM].VertT5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].Z = player.Q_TexTriEffect[SCRAM].VertT5.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].X = player.Q_TexTriEffect[SCRAM].VertB5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].Y = player.Q_TexTriEffect[SCRAM].VertB5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].Z = player.Q_TexTriEffect[SCRAM].VertB5.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[7][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].X = player.Q_TexTriEffect[SCRAM].VertB45.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].Y = player.Q_TexTriEffect[SCRAM].VertB45.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].Z = player.Q_TexTriEffect[SCRAM].VertB45.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[8][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[8][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[8][0].X = player.Q_TexTriEffect[SCRAM].VertT5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[8][0].Y = player.Q_TexTriEffect[SCRAM].VertT5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[8][0].Z = player.Q_TexTriEffect[SCRAM].VertT5.Z;

						
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].X = player.Q_TexTriEffect[SCRAM].VertT55.X;
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].Y = player.Q_TexTriEffect[SCRAM].VertT55.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].Z = player.Q_TexTriEffect[SCRAM].VertT55.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].X = player.Q_TexTriEffect[SCRAM].VertB55.X;
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].Y = player.Q_TexTriEffect[SCRAM].VertB55.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].Z = player.Q_TexTriEffect[SCRAM].VertB55.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[8][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[8][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[8][3].X = player.Q_TexTriEffect[SCRAM].VertB5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[8][3].Y = player.Q_TexTriEffect[SCRAM].VertB5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[8][3].Z = player.Q_TexTriEffect[SCRAM].VertB5.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[9][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[9][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[9][0].X = player.Q_TexTriEffect[SCRAM].VertT55.X;
						player.Q_TexTriEffect[SCRAM].Lvert[9][0].Y = player.Q_TexTriEffect[SCRAM].VertT55.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[9][0].Z = player.Q_TexTriEffect[SCRAM].VertT55.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].X = player.Q_TexTriEffect[SCRAM].VertT6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].Y = player.Q_TexTriEffect[SCRAM].VertT6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].Z = player.Q_TexTriEffect[SCRAM].VertT6.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].X = player.Q_TexTriEffect[SCRAM].VertB6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].Y = player.Q_TexTriEffect[SCRAM].VertB6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].Z = player.Q_TexTriEffect[SCRAM].VertB6.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[9][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[9][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[9][3].X = player.Q_TexTriEffect[SCRAM].VertB55.X;
						player.Q_TexTriEffect[SCRAM].Lvert[9][3].Y = player.Q_TexTriEffect[SCRAM].VertB55.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[9][3].Z = player.Q_TexTriEffect[SCRAM].VertB55.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[10][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[10][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[10][0].X = player.Q_TexTriEffect[SCRAM].VertT6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[10][0].Y = player.Q_TexTriEffect[SCRAM].VertT6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[10][0].Z = player.Q_TexTriEffect[SCRAM].VertT6.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].X = player.Q_TexTriEffect[SCRAM].VertT65.X;
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].Y = player.Q_TexTriEffect[SCRAM].VertT65.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].Z = player.Q_TexTriEffect[SCRAM].VertT65.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].X = player.Q_TexTriEffect[SCRAM].VertB65.X;
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].Y = player.Q_TexTriEffect[SCRAM].VertB65.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].Z = player.Q_TexTriEffect[SCRAM].VertB65.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[10][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[10][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[10][3].X = player.Q_TexTriEffect[SCRAM].VertB6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[10][3].Y = player.Q_TexTriEffect[SCRAM].VertB6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[10][3].Z = player.Q_TexTriEffect[SCRAM].VertB6.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[11][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[11][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[11][0].X = player.Q_TexTriEffect[SCRAM].VertT65.X;
						player.Q_TexTriEffect[SCRAM].Lvert[11][0].Y = player.Q_TexTriEffect[SCRAM].VertT65.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[11][0].Z = player.Q_TexTriEffect[SCRAM].VertT65.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].X = player.Q_TexTriEffect[SCRAM].VertT7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].Y = player.Q_TexTriEffect[SCRAM].VertT7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].Z = player.Q_TexTriEffect[SCRAM].VertT7.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].X = player.Q_TexTriEffect[SCRAM].VertB7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].Y = player.Q_TexTriEffect[SCRAM].VertB7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].Z = player.Q_TexTriEffect[SCRAM].VertB7.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[11][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[11][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[11][3].X = player.Q_TexTriEffect[SCRAM].VertB65.X;
						player.Q_TexTriEffect[SCRAM].Lvert[11][3].Y = player.Q_TexTriEffect[SCRAM].VertB65.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[11][3].Z = player.Q_TexTriEffect[SCRAM].VertB65.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[12][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[12][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[12][0].X = player.Q_TexTriEffect[SCRAM].VertT7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[12][0].Y = player.Q_TexTriEffect[SCRAM].VertT7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[12][0].Z = player.Q_TexTriEffect[SCRAM].VertT7.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].X = player.Q_TexTriEffect[SCRAM].VertT75.X;
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].Y = player.Q_TexTriEffect[SCRAM].VertT75.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].Z = player.Q_TexTriEffect[SCRAM].VertT75.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].X = player.Q_TexTriEffect[SCRAM].VertB75.X;
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].Y = player.Q_TexTriEffect[SCRAM].VertB75.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].Z = player.Q_TexTriEffect[SCRAM].VertB75.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[12][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[12][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[12][3].X = player.Q_TexTriEffect[SCRAM].VertB7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[12][3].Y = player.Q_TexTriEffect[SCRAM].VertB7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[12][3].Z = player.Q_TexTriEffect[SCRAM].VertB7.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[13][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[13][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[13][0].X = player.Q_TexTriEffect[SCRAM].VertT75.X;
						player.Q_TexTriEffect[SCRAM].Lvert[13][0].Y = player.Q_TexTriEffect[SCRAM].VertT75.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[13][0].Z = player.Q_TexTriEffect[SCRAM].VertT75.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].X = player.Q_TexTriEffect[SCRAM].VertT8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].Y = player.Q_TexTriEffect[SCRAM].VertT8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].Z = player.Q_TexTriEffect[SCRAM].VertT8.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].X = player.Q_TexTriEffect[SCRAM].VertB8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].Y = player.Q_TexTriEffect[SCRAM].VertB8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].Z = player.Q_TexTriEffect[SCRAM].VertB8.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[13][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[13][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[13][3].X = player.Q_TexTriEffect[SCRAM].VertB75.X;
						player.Q_TexTriEffect[SCRAM].Lvert[13][3].Y = player.Q_TexTriEffect[SCRAM].VertB75.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[13][3].Z = player.Q_TexTriEffect[SCRAM].VertB75.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[14][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[14][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[14][0].X = player.Q_TexTriEffect[SCRAM].VertT8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[14][0].Y = player.Q_TexTriEffect[SCRAM].VertT8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[14][0].Z = player.Q_TexTriEffect[SCRAM].VertT8.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].X = player.Q_TexTriEffect[SCRAM].VertT85.X;
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].Y = player.Q_TexTriEffect[SCRAM].VertT85.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].Z = player.Q_TexTriEffect[SCRAM].VertT85.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[14][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[14][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[14][2].X = player.Q_TexTriEffect[SCRAM].VertB85.X;
						player.Q_TexTriEffect[SCRAM].Lvert[14][2].Y = player.Q_TexTriEffect[SCRAM].VertB85.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[14][2].Z = player.Q_TexTriEffect[SCRAM].VertB85.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[14][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[14][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[14][3].X = player.Q_TexTriEffect[SCRAM].VertB8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[14][3].Y = player.Q_TexTriEffect[SCRAM].VertB8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[14][3].Z = player.Q_TexTriEffect[SCRAM].VertB8.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[15][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[15][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[15][0].X = player.Q_TexTriEffect[SCRAM].VertT85.X;
						player.Q_TexTriEffect[SCRAM].Lvert[15][0].Y = player.Q_TexTriEffect[SCRAM].VertT85.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[15][0].Z = player.Q_TexTriEffect[SCRAM].VertT85.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[15][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[15][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[15][1].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[15][1].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[15][1].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[15][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[15][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[15][2].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[15][2].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[15][2].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[15][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[15][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[15][3].X = player.Q_TexTriEffect[SCRAM].VertB85.X;
						player.Q_TexTriEffect[SCRAM].Lvert[15][3].Y = player.Q_TexTriEffect[SCRAM].VertB85.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[15][3].Z = player.Q_TexTriEffect[SCRAM].VertB85.Z;


						if(player.Q_TexTriEffect[SCRAM].Live == 1)
							{
							i = 0;
							while(i <= 15)
								{
								geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[i][0], 4, Water[player.Q_TexTriEffect[SCRAM].MaterialCNT], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
								i++;
								}
							}

						} break;


					case 2:	//##### Flame Trails
						{
						if(SCRAM != player.NomTriEffect - 1)
							{
							player.Q_TexTriEffect[SCRAM].VertT1 = player.Q_TexTriEffect[SCRAM+1].VertB1;
							player.Q_TexTriEffect[SCRAM].VertT2 = player.Q_TexTriEffect[SCRAM+1].VertB2;
							player.Q_TexTriEffect[SCRAM].VertT3 = player.Q_TexTriEffect[SCRAM+1].VertB3;
							player.Q_TexTriEffect[SCRAM].VertT4 = player.Q_TexTriEffect[SCRAM+1].VertB4;
							}


						//##### Material Count  Set this
							//Fire
						player.Q_TexTriEffect[SCRAM].MaterialCNT2++;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT2 < 124) player.Q_TexTriEffect[SCRAM].MaterialCNT2 = 124;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT2 > 136) player.Q_TexTriEffect[SCRAM].MaterialCNT2 = 124;

							//Energy
						player.Q_TexTriEffect[SCRAM].MaterialCNT++;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT < 82) player.Q_TexTriEffect[SCRAM].MaterialCNT = 82;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT > 96) player.Q_TexTriEffect[SCRAM].MaterialCNT = 82;


						//########- Effect Progression
						//##### Decrease Alpha Value - Increase Colour
						player.Q_TexTriEffect[SCRAM].Alpha -= 30;	//80
						if(player.Q_TexTriEffect[SCRAM].Alpha < 0)
							{
							player.Q_TexTriEffect[SCRAM].Alpha = 0;
							player.Q_TexTriEffect[SCRAM].Live = 0;

							//### Array Reorder
							K = SCRAM;
							while(K < player.NomTriEffect - 1)
								{
								player.Q_TexTriEffect[K] = player.Q_TexTriEffect[K+1];
								K++;
								}

							player.NomTriEffect--;
							}


						/*if(player.Aposestate != 59)
							{
							player.Q_TexTriEffect[SCRAM].Green += 3*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Green > 255) player.Q_TexTriEffect[SCRAM].Green = 255;
							player.Q_TexTriEffect[SCRAM].Red += 3*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Red > 255) player.Q_TexTriEffect[SCRAM].Red = 255;
							}
						else
							{
							player.Q_TexTriEffect[SCRAM].Green -= 20*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Green < 0) player.Q_TexTriEffect[SCRAM].Green = 0;
							player.Q_TexTriEffect[SCRAM].Red -= 20*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Red < 0) player.Q_TexTriEffect[SCRAM].Red = 0;
							player.Q_TexTriEffect[SCRAM].Blue -= 20*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Blue < 0) player.Q_TexTriEffect[SCRAM].Blue = 0;
							}*/


						//##### Move Bottom Verts of Trail Back and Out
						player.Q_TexTriEffect[SCRAM].ExpandDist *= 5;

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB1, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB1);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB1);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB2, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB2);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB2);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB3, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB3);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB3);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB4, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB4);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB4);


						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertT1, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertT1, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertT1);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertT1, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertT1);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertT2, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertT2, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertT2);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertT2, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertT2);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertT3, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertT3, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertT3);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertT3, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertT3);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertT4, &player.Q_TexTriEffect[SCRAM].Pos, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertT4, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertT4);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertT4, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertT4);


							a=0;
							while( a <= 4 )
								{
								b=0;
								while( b <= 3 )
									{
									player.Q_TexTriEffect[SCRAM].Lvert[a][b].a = player.Q_TexTriEffect[SCRAM].Alpha;
									player.Q_TexTriEffect[SCRAM].Lvert[a][b].b = 255;
									player.Q_TexTriEffect[SCRAM].Lvert[a][b].g = 255;
									player.Q_TexTriEffect[SCRAM].Lvert[a][b].r = 255;
									b++;
									}
								a++;
								}


							a=5;
							while( a <= 8 )
								{
								b=0;
								while( b <= 3 )
									{
									player.Q_TexTriEffect[SCRAM].Lvert[a][b].a = player.Q_TexTriEffect[SCRAM].Alpha/6;
									player.Q_TexTriEffect[SCRAM].Lvert[a][b].b = 255;
									player.Q_TexTriEffect[SCRAM].Lvert[a][b].g = 255;
									player.Q_TexTriEffect[SCRAM].Lvert[a][b].r = 255;
									b++;
									}
								a++;
								}


							//##### - START CAP	- FLAMES
							player.Q_TexTriEffect[SCRAM].Lvert[0][0].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[0][0].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[0][0].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[0][0].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[0][0].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;
											
							player.Q_TexTriEffect[SCRAM].Lvert[0][1].u = 0.5;
							player.Q_TexTriEffect[SCRAM].Lvert[0][1].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[0][1].X = player.Q_TexTriEffect[SCRAM].VertT2.X;
							player.Q_TexTriEffect[SCRAM].Lvert[0][1].Y = player.Q_TexTriEffect[SCRAM].VertT2.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[0][1].Z = player.Q_TexTriEffect[SCRAM].VertT2.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[0][2].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[0][2].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[0][2].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[0][2].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[0][2].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;


							//##### - END CAP - FLAMES
							player.Q_TexTriEffect[SCRAM].Lvert[1][0].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[1][0].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[1][0].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[1][0].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[1][0].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[1][1].u = 0.5;
							player.Q_TexTriEffect[SCRAM].Lvert[1][1].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[1][1].X = player.Q_TexTriEffect[SCRAM].VertB2.X;
							player.Q_TexTriEffect[SCRAM].Lvert[1][1].Y = player.Q_TexTriEffect[SCRAM].VertB2.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[1][1].Z = player.Q_TexTriEffect[SCRAM].VertB2.Z;
											
							player.Q_TexTriEffect[SCRAM].Lvert[1][2].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[1][2].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[1][2].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[1][2].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[1][2].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


							//##### - BOTTOM CAP - FLAMES
							player.Q_TexTriEffect[SCRAM].Lvert[2][0].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[2][0].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[2][0].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[2][0].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[2][0].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[2][1].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[2][1].v = 0.1;
							player.Q_TexTriEffect[SCRAM].Lvert[2][1].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[2][1].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[2][1].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[2][2].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[2][2].v = 0.1;
							player.Q_TexTriEffect[SCRAM].Lvert[2][2].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[2][2].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[2][2].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[2][3].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[2][3].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[2][3].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[2][3].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[2][3].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;


							//##### - FRONT FLAT PANEL - FLAMES
							player.Q_TexTriEffect[SCRAM].Lvert[3][0].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[3][0].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[3][0].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[3][0].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[3][0].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[3][1].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[3][1].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[3][1].X = player.Q_TexTriEffect[SCRAM].VertT2.X;
							player.Q_TexTriEffect[SCRAM].Lvert[3][1].Y = player.Q_TexTriEffect[SCRAM].VertT2.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[3][1].Z = player.Q_TexTriEffect[SCRAM].VertT2.Z;
											
							player.Q_TexTriEffect[SCRAM].Lvert[3][2].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[3][2].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[3][2].X = player.Q_TexTriEffect[SCRAM].VertB2.X;
							player.Q_TexTriEffect[SCRAM].Lvert[3][2].Y = player.Q_TexTriEffect[SCRAM].VertB2.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[3][2].Z = player.Q_TexTriEffect[SCRAM].VertB2.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[3][3].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[3][3].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[3][3].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[3][3].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[3][3].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


							//##### - BACK FLAT PANEL - FLAMES
							player.Q_TexTriEffect[SCRAM].Lvert[4][0].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[4][0].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[4][0].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[4][0].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[4][0].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[4][1].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[4][1].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[4][1].X = player.Q_TexTriEffect[SCRAM].VertT2.X;
							player.Q_TexTriEffect[SCRAM].Lvert[4][1].Y = player.Q_TexTriEffect[SCRAM].VertT2.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[4][1].Z = player.Q_TexTriEffect[SCRAM].VertT2.Z;
											
							player.Q_TexTriEffect[SCRAM].Lvert[4][2].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[4][2].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[4][2].X = player.Q_TexTriEffect[SCRAM].VertB2.X;
							player.Q_TexTriEffect[SCRAM].Lvert[4][2].Y = player.Q_TexTriEffect[SCRAM].VertB2.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[4][2].Z = player.Q_TexTriEffect[SCRAM].VertB2.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[4][3].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[4][3].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[4][3].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[4][3].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[4][3].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;



							//##### - START CAP	- ENERGY
							player.Q_TexTriEffect[SCRAM].Lvert[5][0].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[5][0].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[5][0].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[5][0].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[5][0].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;
											
							player.Q_TexTriEffect[SCRAM].Lvert[5][1].u = 0.5;
							player.Q_TexTriEffect[SCRAM].Lvert[5][1].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[5][1].X = player.Q_TexTriEffect[SCRAM].VertT4.X;
							player.Q_TexTriEffect[SCRAM].Lvert[5][1].Y = player.Q_TexTriEffect[SCRAM].VertT4.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[5][1].Z = player.Q_TexTriEffect[SCRAM].VertT4.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[5][2].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[5][2].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[5][2].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[5][2].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[5][2].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;


							//##### - END CAP - ENERGY
							player.Q_TexTriEffect[SCRAM].Lvert[6][0].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[6][0].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[6][0].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[6][0].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[6][0].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[6][1].u = 0.5;
							player.Q_TexTriEffect[SCRAM].Lvert[6][1].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[6][1].X = player.Q_TexTriEffect[SCRAM].VertB4.X;
							player.Q_TexTriEffect[SCRAM].Lvert[6][1].Y = player.Q_TexTriEffect[SCRAM].VertB4.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[6][1].Z = player.Q_TexTriEffect[SCRAM].VertB4.Z;
											
							player.Q_TexTriEffect[SCRAM].Lvert[6][2].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[6][2].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[6][2].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[6][2].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[6][2].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


							//##### - FRONT FLAT PANEL - ENERGY
							player.Q_TexTriEffect[SCRAM].Lvert[7][0].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[7][0].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[7][0].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[7][0].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[7][0].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[7][1].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[7][1].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[7][1].X = player.Q_TexTriEffect[SCRAM].VertT4.X;
							player.Q_TexTriEffect[SCRAM].Lvert[7][1].Y = player.Q_TexTriEffect[SCRAM].VertT4.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[7][1].Z = player.Q_TexTriEffect[SCRAM].VertT4.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[7][2].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[7][2].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[7][2].X = player.Q_TexTriEffect[SCRAM].VertB4.X;
							player.Q_TexTriEffect[SCRAM].Lvert[7][2].Y = player.Q_TexTriEffect[SCRAM].VertB4.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[7][2].Z = player.Q_TexTriEffect[SCRAM].VertB4.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[7][3].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[7][3].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[7][3].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
							player.Q_TexTriEffect[SCRAM].Lvert[7][3].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[7][3].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


							//##### - BACK FLAT PANEL - ENERGY
							player.Q_TexTriEffect[SCRAM].Lvert[8][0].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[8][0].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[8][0].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[8][0].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[8][0].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[8][1].u = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[8][1].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[8][1].X = player.Q_TexTriEffect[SCRAM].VertT4.X;
							player.Q_TexTriEffect[SCRAM].Lvert[8][1].Y = player.Q_TexTriEffect[SCRAM].VertT4.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[8][1].Z = player.Q_TexTriEffect[SCRAM].VertT4.Z;
											
							player.Q_TexTriEffect[SCRAM].Lvert[8][2].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[8][2].v = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[8][2].X = player.Q_TexTriEffect[SCRAM].VertB4.X;
							player.Q_TexTriEffect[SCRAM].Lvert[8][2].Y = player.Q_TexTriEffect[SCRAM].VertB4.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[8][2].Z = player.Q_TexTriEffect[SCRAM].VertB4.Z;

							player.Q_TexTriEffect[SCRAM].Lvert[8][3].u = 1;
							player.Q_TexTriEffect[SCRAM].Lvert[8][3].v = 0;
							player.Q_TexTriEffect[SCRAM].Lvert[8][3].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
							player.Q_TexTriEffect[SCRAM].Lvert[8][3].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
							player.Q_TexTriEffect[SCRAM].Lvert[8][3].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;


						if(player.Q_TexTriEffect[SCRAM].Live == 1)
							{
							//FLAMES
							geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[0][0], 3, fire[player.Q_TexTriEffect[SCRAM].MaterialCNT], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
							geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[1][0], 3, fire[player.Q_TexTriEffect[SCRAM].MaterialCNT], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
							geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[2][0], 4, fire[player.Q_TexTriEffect[SCRAM].MaterialCNT], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
							geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[3][0], 4, fire[player.Q_TexTriEffect[SCRAM].MaterialCNT], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
							geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[4][0], 4, fire[player.Q_TexTriEffect[SCRAM].MaterialCNT], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);

							//ENERGY
							geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[5][0], 3, Water[player.Q_TexTriEffect[SCRAM].MaterialCNT2], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
							geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[6][0], 3, Water[player.Q_TexTriEffect[SCRAM].MaterialCNT2], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
							geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[7][0], 4, Water[player.Q_TexTriEffect[SCRAM].MaterialCNT2], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
							geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[8][0], 4, Water[player.Q_TexTriEffect[SCRAM].MaterialCNT2], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
							}

						} break;


					case 3:	//Flame Ring Trail [Static Non Correctional]
						{
						if(SCRAM != player.NomTriEffect - 1)
							{
							player.Q_TexTriEffect[SCRAM].VertT1 = player.Q_TexTriEffect[SCRAM+1].VertB1;
							player.Q_TexTriEffect[SCRAM].VertT2 = player.Q_TexTriEffect[SCRAM+1].VertB2;
							player.Q_TexTriEffect[SCRAM].VertT3 = player.Q_TexTriEffect[SCRAM+1].VertB3;
							player.Q_TexTriEffect[SCRAM].VertT4 = player.Q_TexTriEffect[SCRAM+1].VertB4;
							player.Q_TexTriEffect[SCRAM].VertT5 = player.Q_TexTriEffect[SCRAM+1].VertB5;
							player.Q_TexTriEffect[SCRAM].VertT6 = player.Q_TexTriEffect[SCRAM+1].VertB6;
							player.Q_TexTriEffect[SCRAM].VertT7 = player.Q_TexTriEffect[SCRAM+1].VertB7;
							player.Q_TexTriEffect[SCRAM].VertT8 = player.Q_TexTriEffect[SCRAM+1].VertB8;
							//player.Q_TexTriEffect[SCRAM].Pos = player.Q_TexTriEffect[SCRAM+1].Pos;
							}

						//player.Q_TexTriEffect[SCRAM].VertB1 = player.Q_TexTriEffect[SCRAM].VertT1;
						//player.Q_TexTriEffect[SCRAM].VertB2 = player.Q_TexTriEffect[SCRAM].VertT2;
						//player.Q_TexTriEffect[SCRAM].VertB3 = player.Q_TexTriEffect[SCRAM].VertT3;
						//player.Q_TexTriEffect[SCRAM].VertB4 = player.Q_TexTriEffect[SCRAM].VertT4;
						//player.Q_TexTriEffect[SCRAM].VertB5 = player.Q_TexTriEffect[SCRAM].VertT5;
						//player.Q_TexTriEffect[SCRAM].VertB6 = player.Q_TexTriEffect[SCRAM].VertT6;
						//player.Q_TexTriEffect[SCRAM].VertB7 = player.Q_TexTriEffect[SCRAM].VertT7;
						//player.Q_TexTriEffect[SCRAM].VertB8 = player.Q_TexTriEffect[SCRAM].VertT8;


						//##### Material Count
						player.Q_TexTriEffect[SCRAM].MaterialCNT++;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT < 82) player.Q_TexTriEffect[SCRAM].MaterialCNT = 82;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT > 96) player.Q_TexTriEffect[SCRAM].MaterialCNT = 82;


						//########- Effect Progression
						//##### Decrease Alpha Value - Increase Colour
						player.Q_TexTriEffect[SCRAM].Alpha -= 6;
						if(player.Q_TexTriEffect[SCRAM].Alpha < 0)
							{
							player.Q_TexTriEffect[SCRAM].Alpha = 0;
							player.Q_TexTriEffect[SCRAM].Live = 0;

							//### Array Reorder
							K = SCRAM;
							while(K < player.NomTriEffect - 1)
								{
								player.Q_TexTriEffect[K] = player.Q_TexTriEffect[K+1];
								K++;
								}

							player.NomTriEffect--;
							}

						
						player.Q_TexTriEffect[SCRAM].Green += 3*TimeScale;
						if(player.Q_TexTriEffect[SCRAM].Green > 255) player.Q_TexTriEffect[SCRAM].Green = 255;
						player.Q_TexTriEffect[SCRAM].Red += 3*TimeScale;
						if(player.Q_TexTriEffect[SCRAM].Red > 255) player.Q_TexTriEffect[SCRAM].Red = 255;
						


						//##### Move Bottom Verts of Trail Back and Out
						//player.Q_TexTriEffect[SCRAM].LengthDist += 0.05;
						player.Q_TexTriEffect[SCRAM].ExpandDist += 0.02;	//0.004

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB1, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB1);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB1);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB2, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB2);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB2);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB3, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB3);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB3);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB4, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB4);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB4);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB5, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB5);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB5);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB6, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB6);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB6);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB7, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB7);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB7);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB8, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB8);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB8);


						//##### - ALPHA VALUES AND COLOUR
						a=0;
						while( a <= 15 )
							{
							b=0;
							while( b <= 3 )
								{
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].a = player.Q_TexTriEffect[SCRAM].Alpha;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].b = player.Q_TexTriEffect[SCRAM].Blue;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].g = player.Q_TexTriEffect[SCRAM].Green;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].r = player.Q_TexTriEffect[SCRAM].Red;
								b++;
								}
							a++;
							}


						//##### - SOLID RING TWO

						Q_WindWake[SCRAM].Lvert[0][0].u = 0;
						Q_WindWake[SCRAM].Lvert[0][0].v = 0;
						Q_WindWake[SCRAM].Lvert[0][0].X = Q_WindWake[SCRAM].VertT1.X;
						Q_WindWake[SCRAM].Lvert[0][0].Y = Q_WindWake[SCRAM].VertT1.Y;
						Q_WindWake[SCRAM].Lvert[0][0].Z = Q_WindWake[SCRAM].VertT1.Z;

						
						Q_WindWake[SCRAM].Lvert[0][1].u = 1;
						Q_WindWake[SCRAM].Lvert[0][1].v = 0;
						Q_WindWake[SCRAM].Lvert[0][1].X = Q_WindWake[SCRAM].VertT15.X;
						Q_WindWake[SCRAM].Lvert[0][1].Y = Q_WindWake[SCRAM].VertT15.Y;
						Q_WindWake[SCRAM].Lvert[0][1].Z = Q_WindWake[SCRAM].VertT15.Z;

								
						Q_WindWake[SCRAM].Lvert[0][2].u = 1;
						Q_WindWake[SCRAM].Lvert[0][2].v = 1;
						Q_WindWake[SCRAM].Lvert[0][2].X = Q_WindWake[SCRAM].VertB15.X;
						Q_WindWake[SCRAM].Lvert[0][2].Y = Q_WindWake[SCRAM].VertB15.Y;
						Q_WindWake[SCRAM].Lvert[0][2].Z = Q_WindWake[SCRAM].VertB15.Z;


						Q_WindWake[SCRAM].Lvert[0][3].u = 0;
						Q_WindWake[SCRAM].Lvert[0][3].v = 1;
						Q_WindWake[SCRAM].Lvert[0][3].X = Q_WindWake[SCRAM].VertB1.X;
						Q_WindWake[SCRAM].Lvert[0][3].Y = Q_WindWake[SCRAM].VertB1.Y;
						Q_WindWake[SCRAM].Lvert[0][3].Z = Q_WindWake[SCRAM].VertB1.Z;


						Q_WindWake[SCRAM].Lvert[1][0].u = 0;
						Q_WindWake[SCRAM].Lvert[1][0].v = 0;
						Q_WindWake[SCRAM].Lvert[1][0].X = Q_WindWake[SCRAM].VertT15.X;
						Q_WindWake[SCRAM].Lvert[1][0].Y = Q_WindWake[SCRAM].VertT15.Y;
						Q_WindWake[SCRAM].Lvert[1][0].Z = Q_WindWake[SCRAM].VertT15.Z;

								
						Q_WindWake[SCRAM].Lvert[1][1].u = 1;
						Q_WindWake[SCRAM].Lvert[1][1].v = 0;
						Q_WindWake[SCRAM].Lvert[1][1].X = Q_WindWake[SCRAM].VertT2.X;
						Q_WindWake[SCRAM].Lvert[1][1].Y = Q_WindWake[SCRAM].VertT2.Y;
						Q_WindWake[SCRAM].Lvert[1][1].Z = Q_WindWake[SCRAM].VertT2.Z;

								
						Q_WindWake[SCRAM].Lvert[1][2].u = 1;
						Q_WindWake[SCRAM].Lvert[1][2].v = 1;
						Q_WindWake[SCRAM].Lvert[1][2].X = Q_WindWake[SCRAM].VertB2.X;
						Q_WindWake[SCRAM].Lvert[1][2].Y = Q_WindWake[SCRAM].VertB2.Y;
						Q_WindWake[SCRAM].Lvert[1][2].Z = Q_WindWake[SCRAM].VertB2.Z;


						Q_WindWake[SCRAM].Lvert[1][3].u = 0;
						Q_WindWake[SCRAM].Lvert[1][3].v = 1;
						Q_WindWake[SCRAM].Lvert[1][3].X = Q_WindWake[SCRAM].VertB15.X;
						Q_WindWake[SCRAM].Lvert[1][3].Y = Q_WindWake[SCRAM].VertB15.Y;
						Q_WindWake[SCRAM].Lvert[1][3].Z = Q_WindWake[SCRAM].VertB15.Z;


						Q_WindWake[SCRAM].Lvert[2][0].u = 0;
						Q_WindWake[SCRAM].Lvert[2][0].v = 0;
						Q_WindWake[SCRAM].Lvert[2][0].X = Q_WindWake[SCRAM].VertT2.X;
						Q_WindWake[SCRAM].Lvert[2][0].Y = Q_WindWake[SCRAM].VertT2.Y;
						Q_WindWake[SCRAM].Lvert[2][0].Z = Q_WindWake[SCRAM].VertT2.Z;

								
						Q_WindWake[SCRAM].Lvert[2][1].u = 1;
						Q_WindWake[SCRAM].Lvert[2][1].v = 0;
						Q_WindWake[SCRAM].Lvert[2][1].X = Q_WindWake[SCRAM].VertT25.X;
						Q_WindWake[SCRAM].Lvert[2][1].Y = Q_WindWake[SCRAM].VertT25.Y;
						Q_WindWake[SCRAM].Lvert[2][1].Z = Q_WindWake[SCRAM].VertT25.Z;

								
						Q_WindWake[SCRAM].Lvert[2][2].u = 1;
						Q_WindWake[SCRAM].Lvert[2][2].v = 1;
						Q_WindWake[SCRAM].Lvert[2][2].X = Q_WindWake[SCRAM].VertB25.X;
						Q_WindWake[SCRAM].Lvert[2][2].Y = Q_WindWake[SCRAM].VertB25.Y;
						Q_WindWake[SCRAM].Lvert[2][2].Z = Q_WindWake[SCRAM].VertB25.Z;


						Q_WindWake[SCRAM].Lvert[2][3].u = 0;
						Q_WindWake[SCRAM].Lvert[2][3].v = 1;
						Q_WindWake[SCRAM].Lvert[2][3].X = Q_WindWake[SCRAM].VertB2.X;
						Q_WindWake[SCRAM].Lvert[2][3].Y = Q_WindWake[SCRAM].VertB2.Y;
						Q_WindWake[SCRAM].Lvert[2][3].Z = Q_WindWake[SCRAM].VertB2.Z;



						Q_WindWake[SCRAM].Lvert[3][0].u = 0;
						Q_WindWake[SCRAM].Lvert[3][0].v = 0;
						Q_WindWake[SCRAM].Lvert[3][0].X = Q_WindWake[SCRAM].VertT25.X;
						Q_WindWake[SCRAM].Lvert[3][0].Y = Q_WindWake[SCRAM].VertT25.Y;
						Q_WindWake[SCRAM].Lvert[3][0].Z = Q_WindWake[SCRAM].VertT25.Z;

								
						Q_WindWake[SCRAM].Lvert[3][1].u = 1;
						Q_WindWake[SCRAM].Lvert[3][1].v = 0;
						Q_WindWake[SCRAM].Lvert[3][1].X = Q_WindWake[SCRAM].VertT3.X;
						Q_WindWake[SCRAM].Lvert[3][1].Y = Q_WindWake[SCRAM].VertT3.Y;
						Q_WindWake[SCRAM].Lvert[3][1].Z = Q_WindWake[SCRAM].VertT3.Z;

								
						Q_WindWake[SCRAM].Lvert[3][2].u = 1;
						Q_WindWake[SCRAM].Lvert[3][2].v = 1;
						Q_WindWake[SCRAM].Lvert[3][2].X = Q_WindWake[SCRAM].VertB3.X;
						Q_WindWake[SCRAM].Lvert[3][2].Y = Q_WindWake[SCRAM].VertB3.Y;
						Q_WindWake[SCRAM].Lvert[3][2].Z = Q_WindWake[SCRAM].VertB3.Z;


						Q_WindWake[SCRAM].Lvert[3][3].u = 0;
						Q_WindWake[SCRAM].Lvert[3][3].v = 1;
						Q_WindWake[SCRAM].Lvert[3][3].X = Q_WindWake[SCRAM].VertB25.X;
						Q_WindWake[SCRAM].Lvert[3][3].Y = Q_WindWake[SCRAM].VertB25.Y;
						Q_WindWake[SCRAM].Lvert[3][3].Z = Q_WindWake[SCRAM].VertB25.Z;


						Q_WindWake[SCRAM].Lvert[4][0].u = 0;
						Q_WindWake[SCRAM].Lvert[4][0].v = 0;
						Q_WindWake[SCRAM].Lvert[4][0].X = Q_WindWake[SCRAM].VertT3.X;
						Q_WindWake[SCRAM].Lvert[4][0].Y = Q_WindWake[SCRAM].VertT3.Y;
						Q_WindWake[SCRAM].Lvert[4][0].Z = Q_WindWake[SCRAM].VertT3.Z;

								
						Q_WindWake[SCRAM].Lvert[4][1].u = 1;
						Q_WindWake[SCRAM].Lvert[4][1].v = 0;
						Q_WindWake[SCRAM].Lvert[4][1].X = Q_WindWake[SCRAM].VertT35.X;
						Q_WindWake[SCRAM].Lvert[4][1].Y = Q_WindWake[SCRAM].VertT35.Y;
						Q_WindWake[SCRAM].Lvert[4][1].Z = Q_WindWake[SCRAM].VertT35.Z;

								
						Q_WindWake[SCRAM].Lvert[4][2].u = 1;
						Q_WindWake[SCRAM].Lvert[4][2].v = 1;
						Q_WindWake[SCRAM].Lvert[4][2].X = Q_WindWake[SCRAM].VertB35.X;
						Q_WindWake[SCRAM].Lvert[4][2].Y = Q_WindWake[SCRAM].VertB35.Y;
						Q_WindWake[SCRAM].Lvert[4][2].Z = Q_WindWake[SCRAM].VertB35.Z;


						Q_WindWake[SCRAM].Lvert[4][3].u = 0;
						Q_WindWake[SCRAM].Lvert[4][3].v = 1;
						Q_WindWake[SCRAM].Lvert[4][3].X = Q_WindWake[SCRAM].VertB3.X;
						Q_WindWake[SCRAM].Lvert[4][3].Y = Q_WindWake[SCRAM].VertB3.Y;
						Q_WindWake[SCRAM].Lvert[4][3].Z = Q_WindWake[SCRAM].VertB3.Z;


						Q_WindWake[SCRAM].Lvert[5][0].u = 0;
						Q_WindWake[SCRAM].Lvert[5][0].v = 0;
						Q_WindWake[SCRAM].Lvert[5][0].X = Q_WindWake[SCRAM].VertT35.X;
						Q_WindWake[SCRAM].Lvert[5][0].Y = Q_WindWake[SCRAM].VertT35.Y;
						Q_WindWake[SCRAM].Lvert[5][0].Z = Q_WindWake[SCRAM].VertT35.Z;

								
						Q_WindWake[SCRAM].Lvert[5][1].u = 1;
						Q_WindWake[SCRAM].Lvert[5][1].v = 0;
						Q_WindWake[SCRAM].Lvert[5][1].X = Q_WindWake[SCRAM].VertT4.X;
						Q_WindWake[SCRAM].Lvert[5][1].Y = Q_WindWake[SCRAM].VertT4.Y;
						Q_WindWake[SCRAM].Lvert[5][1].Z = Q_WindWake[SCRAM].VertT4.Z;

								
						Q_WindWake[SCRAM].Lvert[5][2].u = 1;
						Q_WindWake[SCRAM].Lvert[5][2].v = 1;
						Q_WindWake[SCRAM].Lvert[5][2].X = Q_WindWake[SCRAM].VertB4.X;
						Q_WindWake[SCRAM].Lvert[5][2].Y = Q_WindWake[SCRAM].VertB4.Y;
						Q_WindWake[SCRAM].Lvert[5][2].Z = Q_WindWake[SCRAM].VertB4.Z;


						Q_WindWake[SCRAM].Lvert[5][3].u = 0;
						Q_WindWake[SCRAM].Lvert[5][3].v = 1;
						Q_WindWake[SCRAM].Lvert[5][3].X = Q_WindWake[SCRAM].VertB35.X;
						Q_WindWake[SCRAM].Lvert[5][3].Y = Q_WindWake[SCRAM].VertB35.Y;
						Q_WindWake[SCRAM].Lvert[5][3].Z = Q_WindWake[SCRAM].VertB35.Z;


						Q_WindWake[SCRAM].Lvert[6][0].u = 0;
						Q_WindWake[SCRAM].Lvert[6][0].v = 0;
						Q_WindWake[SCRAM].Lvert[6][0].X = Q_WindWake[SCRAM].VertT4.X;
						Q_WindWake[SCRAM].Lvert[6][0].Y = Q_WindWake[SCRAM].VertT4.Y;
						Q_WindWake[SCRAM].Lvert[6][0].Z = Q_WindWake[SCRAM].VertT4.Z;

								
						Q_WindWake[SCRAM].Lvert[6][1].u = 1;
						Q_WindWake[SCRAM].Lvert[6][1].v = 0;
						Q_WindWake[SCRAM].Lvert[6][1].X = Q_WindWake[SCRAM].VertT45.X;
						Q_WindWake[SCRAM].Lvert[6][1].Y = Q_WindWake[SCRAM].VertT45.Y;
						Q_WindWake[SCRAM].Lvert[6][1].Z = Q_WindWake[SCRAM].VertT45.Z;

								
						Q_WindWake[SCRAM].Lvert[6][2].u = 1;
						Q_WindWake[SCRAM].Lvert[6][2].v = 1;
						Q_WindWake[SCRAM].Lvert[6][2].X = Q_WindWake[SCRAM].VertB45.X;
						Q_WindWake[SCRAM].Lvert[6][2].Y = Q_WindWake[SCRAM].VertB45.Y;
						Q_WindWake[SCRAM].Lvert[6][2].Z = Q_WindWake[SCRAM].VertB45.Z;


						Q_WindWake[SCRAM].Lvert[6][3].u = 0;
						Q_WindWake[SCRAM].Lvert[6][3].v = 1;
						Q_WindWake[SCRAM].Lvert[6][3].X = Q_WindWake[SCRAM].VertB4.X;
						Q_WindWake[SCRAM].Lvert[6][3].Y = Q_WindWake[SCRAM].VertB4.Y;
						Q_WindWake[SCRAM].Lvert[6][3].Z = Q_WindWake[SCRAM].VertB4.Z;


						Q_WindWake[SCRAM].Lvert[7][0].u = 0;
						Q_WindWake[SCRAM].Lvert[7][0].v = 0;
						Q_WindWake[SCRAM].Lvert[7][0].X = Q_WindWake[SCRAM].VertT45.X;
						Q_WindWake[SCRAM].Lvert[7][0].Y = Q_WindWake[SCRAM].VertT45.Y;
						Q_WindWake[SCRAM].Lvert[7][0].Z = Q_WindWake[SCRAM].VertT45.Z;

								
						Q_WindWake[SCRAM].Lvert[7][1].u = 1;
						Q_WindWake[SCRAM].Lvert[7][1].v = 0;
						Q_WindWake[SCRAM].Lvert[7][1].X = Q_WindWake[SCRAM].VertT5.X;
						Q_WindWake[SCRAM].Lvert[7][1].Y = Q_WindWake[SCRAM].VertT5.Y;
						Q_WindWake[SCRAM].Lvert[7][1].Z = Q_WindWake[SCRAM].VertT5.Z;

								
						Q_WindWake[SCRAM].Lvert[7][2].u = 1;
						Q_WindWake[SCRAM].Lvert[7][2].v = 1;
						Q_WindWake[SCRAM].Lvert[7][2].X = Q_WindWake[SCRAM].VertB5.X;
						Q_WindWake[SCRAM].Lvert[7][2].Y = Q_WindWake[SCRAM].VertB5.Y;
						Q_WindWake[SCRAM].Lvert[7][2].Z = Q_WindWake[SCRAM].VertB5.Z;


						Q_WindWake[SCRAM].Lvert[7][3].u = 0;
						Q_WindWake[SCRAM].Lvert[7][3].v = 1;
						Q_WindWake[SCRAM].Lvert[7][3].X = Q_WindWake[SCRAM].VertB45.X;
						Q_WindWake[SCRAM].Lvert[7][3].Y = Q_WindWake[SCRAM].VertB45.Y;
						Q_WindWake[SCRAM].Lvert[7][3].Z = Q_WindWake[SCRAM].VertB45.Z;


						Q_WindWake[SCRAM].Lvert[8][0].u = 0;
						Q_WindWake[SCRAM].Lvert[8][0].v = 0;
						Q_WindWake[SCRAM].Lvert[8][0].X = Q_WindWake[SCRAM].VertT5.X;
						Q_WindWake[SCRAM].Lvert[8][0].Y = Q_WindWake[SCRAM].VertT5.Y;
						Q_WindWake[SCRAM].Lvert[8][0].Z = Q_WindWake[SCRAM].VertT5.Z;

						
						Q_WindWake[SCRAM].Lvert[8][1].u = 1;
						Q_WindWake[SCRAM].Lvert[8][1].v = 0;
						Q_WindWake[SCRAM].Lvert[8][1].X = Q_WindWake[SCRAM].VertT55.X;
						Q_WindWake[SCRAM].Lvert[8][1].Y = Q_WindWake[SCRAM].VertT55.Y;
						Q_WindWake[SCRAM].Lvert[8][1].Z = Q_WindWake[SCRAM].VertT55.Z;

								
						Q_WindWake[SCRAM].Lvert[8][2].u = 1;
						Q_WindWake[SCRAM].Lvert[8][2].v = 1;
						Q_WindWake[SCRAM].Lvert[8][2].X = Q_WindWake[SCRAM].VertB55.X;
						Q_WindWake[SCRAM].Lvert[8][2].Y = Q_WindWake[SCRAM].VertB55.Y;
						Q_WindWake[SCRAM].Lvert[8][2].Z = Q_WindWake[SCRAM].VertB55.Z;


						Q_WindWake[SCRAM].Lvert[8][3].u = 0;
						Q_WindWake[SCRAM].Lvert[8][3].v = 1;
						Q_WindWake[SCRAM].Lvert[8][3].X = Q_WindWake[SCRAM].VertB5.X;
						Q_WindWake[SCRAM].Lvert[8][3].Y = Q_WindWake[SCRAM].VertB5.Y;
						Q_WindWake[SCRAM].Lvert[8][3].Z = Q_WindWake[SCRAM].VertB5.Z;


						Q_WindWake[SCRAM].Lvert[9][0].u = 0;
						Q_WindWake[SCRAM].Lvert[9][0].v = 0;
						Q_WindWake[SCRAM].Lvert[9][0].X = Q_WindWake[SCRAM].VertT55.X;
						Q_WindWake[SCRAM].Lvert[9][0].Y = Q_WindWake[SCRAM].VertT55.Y;
						Q_WindWake[SCRAM].Lvert[9][0].Z = Q_WindWake[SCRAM].VertT55.Z;

								
						Q_WindWake[SCRAM].Lvert[9][1].u = 1;
						Q_WindWake[SCRAM].Lvert[9][1].v = 0;
						Q_WindWake[SCRAM].Lvert[9][1].X = Q_WindWake[SCRAM].VertT6.X;
						Q_WindWake[SCRAM].Lvert[9][1].Y = Q_WindWake[SCRAM].VertT6.Y;
						Q_WindWake[SCRAM].Lvert[9][1].Z = Q_WindWake[SCRAM].VertT6.Z;

								
						Q_WindWake[SCRAM].Lvert[9][2].u = 1;
						Q_WindWake[SCRAM].Lvert[9][2].v = 1;
						Q_WindWake[SCRAM].Lvert[9][2].X = Q_WindWake[SCRAM].VertB6.X;
						Q_WindWake[SCRAM].Lvert[9][2].Y = Q_WindWake[SCRAM].VertB6.Y;
						Q_WindWake[SCRAM].Lvert[9][2].Z = Q_WindWake[SCRAM].VertB6.Z;


						Q_WindWake[SCRAM].Lvert[9][3].u = 0;
						Q_WindWake[SCRAM].Lvert[9][3].v = 1;
						Q_WindWake[SCRAM].Lvert[9][3].X = Q_WindWake[SCRAM].VertB55.X;
						Q_WindWake[SCRAM].Lvert[9][3].Y = Q_WindWake[SCRAM].VertB55.Y;
						Q_WindWake[SCRAM].Lvert[9][3].Z = Q_WindWake[SCRAM].VertB55.Z;


						Q_WindWake[SCRAM].Lvert[10][0].u = 0;
						Q_WindWake[SCRAM].Lvert[10][0].v = 0;
						Q_WindWake[SCRAM].Lvert[10][0].X = Q_WindWake[SCRAM].VertT6.X;
						Q_WindWake[SCRAM].Lvert[10][0].Y = Q_WindWake[SCRAM].VertT6.Y;
						Q_WindWake[SCRAM].Lvert[10][0].Z = Q_WindWake[SCRAM].VertT6.Z;

								
						Q_WindWake[SCRAM].Lvert[10][1].u = 1;
						Q_WindWake[SCRAM].Lvert[10][1].v = 0;
						Q_WindWake[SCRAM].Lvert[10][1].X = Q_WindWake[SCRAM].VertT65.X;
						Q_WindWake[SCRAM].Lvert[10][1].Y = Q_WindWake[SCRAM].VertT65.Y;
						Q_WindWake[SCRAM].Lvert[10][1].Z = Q_WindWake[SCRAM].VertT65.Z;

								
						Q_WindWake[SCRAM].Lvert[10][2].u = 1;
						Q_WindWake[SCRAM].Lvert[10][2].v = 1;
						Q_WindWake[SCRAM].Lvert[10][2].X = Q_WindWake[SCRAM].VertB65.X;
						Q_WindWake[SCRAM].Lvert[10][2].Y = Q_WindWake[SCRAM].VertB65.Y;
						Q_WindWake[SCRAM].Lvert[10][2].Z = Q_WindWake[SCRAM].VertB65.Z;


						Q_WindWake[SCRAM].Lvert[10][3].u = 0;
						Q_WindWake[SCRAM].Lvert[10][3].v = 1;
						Q_WindWake[SCRAM].Lvert[10][3].X = Q_WindWake[SCRAM].VertB6.X;
						Q_WindWake[SCRAM].Lvert[10][3].Y = Q_WindWake[SCRAM].VertB6.Y;
						Q_WindWake[SCRAM].Lvert[10][3].Z = Q_WindWake[SCRAM].VertB6.Z;


						Q_WindWake[SCRAM].Lvert[11][0].u = 0;
						Q_WindWake[SCRAM].Lvert[11][0].v = 0;
						Q_WindWake[SCRAM].Lvert[11][0].X = Q_WindWake[SCRAM].VertT65.X;
						Q_WindWake[SCRAM].Lvert[11][0].Y = Q_WindWake[SCRAM].VertT65.Y;
						Q_WindWake[SCRAM].Lvert[11][0].Z = Q_WindWake[SCRAM].VertT65.Z;

								
						Q_WindWake[SCRAM].Lvert[11][1].u = 1;
						Q_WindWake[SCRAM].Lvert[11][1].v = 0;
						Q_WindWake[SCRAM].Lvert[11][1].X = Q_WindWake[SCRAM].VertT7.X;
						Q_WindWake[SCRAM].Lvert[11][1].Y = Q_WindWake[SCRAM].VertT7.Y;
						Q_WindWake[SCRAM].Lvert[11][1].Z = Q_WindWake[SCRAM].VertT7.Z;

								
						Q_WindWake[SCRAM].Lvert[11][2].u = 1;
						Q_WindWake[SCRAM].Lvert[11][2].v = 1;
						Q_WindWake[SCRAM].Lvert[11][2].X = Q_WindWake[SCRAM].VertB7.X;
						Q_WindWake[SCRAM].Lvert[11][2].Y = Q_WindWake[SCRAM].VertB7.Y;
						Q_WindWake[SCRAM].Lvert[11][2].Z = Q_WindWake[SCRAM].VertB7.Z;


						Q_WindWake[SCRAM].Lvert[11][3].u = 0;
						Q_WindWake[SCRAM].Lvert[11][3].v = 1;
						Q_WindWake[SCRAM].Lvert[11][3].X = Q_WindWake[SCRAM].VertB65.X;
						Q_WindWake[SCRAM].Lvert[11][3].Y = Q_WindWake[SCRAM].VertB65.Y;
						Q_WindWake[SCRAM].Lvert[11][3].Z = Q_WindWake[SCRAM].VertB65.Z;


						Q_WindWake[SCRAM].Lvert[12][0].u = 0;
						Q_WindWake[SCRAM].Lvert[12][0].v = 0;
						Q_WindWake[SCRAM].Lvert[12][0].X = Q_WindWake[SCRAM].VertT7.X;
						Q_WindWake[SCRAM].Lvert[12][0].Y = Q_WindWake[SCRAM].VertT7.Y;
						Q_WindWake[SCRAM].Lvert[12][0].Z = Q_WindWake[SCRAM].VertT7.Z;

								
						Q_WindWake[SCRAM].Lvert[12][1].u = 1;
						Q_WindWake[SCRAM].Lvert[12][1].v = 0;
						Q_WindWake[SCRAM].Lvert[12][1].X = Q_WindWake[SCRAM].VertT75.X;
						Q_WindWake[SCRAM].Lvert[12][1].Y = Q_WindWake[SCRAM].VertT75.Y;
						Q_WindWake[SCRAM].Lvert[12][1].Z = Q_WindWake[SCRAM].VertT75.Z;

								
						Q_WindWake[SCRAM].Lvert[12][2].u = 1;
						Q_WindWake[SCRAM].Lvert[12][2].v = 1;
						Q_WindWake[SCRAM].Lvert[12][2].X = Q_WindWake[SCRAM].VertB75.X;
						Q_WindWake[SCRAM].Lvert[12][2].Y = Q_WindWake[SCRAM].VertB75.Y;
						Q_WindWake[SCRAM].Lvert[12][2].Z = Q_WindWake[SCRAM].VertB75.Z;


						Q_WindWake[SCRAM].Lvert[12][3].u = 0;
						Q_WindWake[SCRAM].Lvert[12][3].v = 1;
						Q_WindWake[SCRAM].Lvert[12][3].X = Q_WindWake[SCRAM].VertB7.X;
						Q_WindWake[SCRAM].Lvert[12][3].Y = Q_WindWake[SCRAM].VertB7.Y;
						Q_WindWake[SCRAM].Lvert[13][3].Z = Q_WindWake[SCRAM].VertB7.Z;


						Q_WindWake[SCRAM].Lvert[13][0].u = 0;
						Q_WindWake[SCRAM].Lvert[13][0].v = 0;
						Q_WindWake[SCRAM].Lvert[13][0].X = Q_WindWake[SCRAM].VertT75.X;
						Q_WindWake[SCRAM].Lvert[13][0].Y = Q_WindWake[SCRAM].VertT75.Y;
						Q_WindWake[SCRAM].Lvert[13][0].Z = Q_WindWake[SCRAM].VertT75.Z;

								
						Q_WindWake[SCRAM].Lvert[13][1].u = 1;
						Q_WindWake[SCRAM].Lvert[13][1].v = 0;
						Q_WindWake[SCRAM].Lvert[13][1].X = Q_WindWake[SCRAM].VertT8.X;
						Q_WindWake[SCRAM].Lvert[13][1].Y = Q_WindWake[SCRAM].VertT8.Y;
						Q_WindWake[SCRAM].Lvert[13][1].Z = Q_WindWake[SCRAM].VertT8.Z;

								
						Q_WindWake[SCRAM].Lvert[13][2].u = 1;
						Q_WindWake[SCRAM].Lvert[13][2].v = 1;
						Q_WindWake[SCRAM].Lvert[13][2].X = Q_WindWake[SCRAM].VertB8.X;
						Q_WindWake[SCRAM].Lvert[13][2].Y = Q_WindWake[SCRAM].VertB8.Y;
						Q_WindWake[SCRAM].Lvert[13][2].Z = Q_WindWake[SCRAM].VertB8.Z;


						Q_WindWake[SCRAM].Lvert[13][3].u = 0;
						Q_WindWake[SCRAM].Lvert[13][3].v = 1;
						Q_WindWake[SCRAM].Lvert[13][3].X = Q_WindWake[SCRAM].VertB75.X;
						Q_WindWake[SCRAM].Lvert[13][3].Y = Q_WindWake[SCRAM].VertB75.Y;
						Q_WindWake[SCRAM].Lvert[13][3].Z = Q_WindWake[SCRAM].VertB75.Z;


						Q_WindWake[SCRAM].Lvert[14][0].u = 0;
						Q_WindWake[SCRAM].Lvert[14][0].v = 0;
						Q_WindWake[SCRAM].Lvert[14][0].X = Q_WindWake[SCRAM].VertT8.X;
						Q_WindWake[SCRAM].Lvert[14][0].Y = Q_WindWake[SCRAM].VertT8.Y;
						Q_WindWake[SCRAM].Lvert[14][0].Z = Q_WindWake[SCRAM].VertT8.Z;

								
						Q_WindWake[SCRAM].Lvert[14][1].u = 1;
						Q_WindWake[SCRAM].Lvert[14][1].v = 0;
						Q_WindWake[SCRAM].Lvert[14][1].X = Q_WindWake[SCRAM].VertT85.X;
						Q_WindWake[SCRAM].Lvert[14][1].Y = Q_WindWake[SCRAM].VertT85.Y;
						Q_WindWake[SCRAM].Lvert[14][1].Z = Q_WindWake[SCRAM].VertT85.Z;


						Q_WindWake[SCRAM].Lvert[14][2].u = 1;
						Q_WindWake[SCRAM].Lvert[14][2].v = 1;
						Q_WindWake[SCRAM].Lvert[14][2].X = Q_WindWake[SCRAM].VertB85.X;
						Q_WindWake[SCRAM].Lvert[14][2].Y = Q_WindWake[SCRAM].VertB85.Y;
						Q_WindWake[SCRAM].Lvert[14][2].Z = Q_WindWake[SCRAM].VertB85.Z;


						Q_WindWake[SCRAM].Lvert[14][3].u = 0;
						Q_WindWake[SCRAM].Lvert[14][3].v = 1;
						Q_WindWake[SCRAM].Lvert[14][3].X = Q_WindWake[SCRAM].VertB8.X;
						Q_WindWake[SCRAM].Lvert[14][3].Y = Q_WindWake[SCRAM].VertB8.Y;
						Q_WindWake[SCRAM].Lvert[14][3].Z = Q_WindWake[SCRAM].VertB8.Z;


						Q_WindWake[SCRAM].Lvert[15][0].u = 0;
						Q_WindWake[SCRAM].Lvert[15][0].v = 0;
						Q_WindWake[SCRAM].Lvert[15][0].X = Q_WindWake[SCRAM].VertT85.X;
						Q_WindWake[SCRAM].Lvert[15][0].Y = Q_WindWake[SCRAM].VertT85.Y;
						Q_WindWake[SCRAM].Lvert[15][0].Z = Q_WindWake[SCRAM].VertT85.Z;


						Q_WindWake[SCRAM].Lvert[15][1].u = 1;
						Q_WindWake[SCRAM].Lvert[15][1].v = 0;
						Q_WindWake[SCRAM].Lvert[15][1].X = Q_WindWake[SCRAM].VertT1.X;
						Q_WindWake[SCRAM].Lvert[15][1].Y = Q_WindWake[SCRAM].VertT1.Y;
						Q_WindWake[SCRAM].Lvert[15][1].Z = Q_WindWake[SCRAM].VertT1.Z;


						Q_WindWake[SCRAM].Lvert[15][2].u = 1;
						Q_WindWake[SCRAM].Lvert[15][2].v = 1;
						Q_WindWake[SCRAM].Lvert[15][2].X = Q_WindWake[SCRAM].VertB1.X;
						Q_WindWake[SCRAM].Lvert[15][2].Y = Q_WindWake[SCRAM].VertB1.Y;
						Q_WindWake[SCRAM].Lvert[15][2].Z = Q_WindWake[SCRAM].VertB1.Z;


						Q_WindWake[SCRAM].Lvert[15][3].u = 0;
						Q_WindWake[SCRAM].Lvert[15][3].v = 1;
						Q_WindWake[SCRAM].Lvert[15][3].X = Q_WindWake[SCRAM].VertB85.X;
						Q_WindWake[SCRAM].Lvert[15][3].Y = Q_WindWake[SCRAM].VertB85.Y;
						Q_WindWake[SCRAM].Lvert[15][3].Z = Q_WindWake[SCRAM].VertB85.Z;


						if(player.Q_TexTriEffect[SCRAM].Live == 1)
							{
							i = 0;
							while(i <= 15)
								{
								geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[i][0], 4, fire[player.Q_TexTriEffect[SCRAM].MaterialCNT], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
								i++;
								}
							}

						} break;


					case 4:	//WindWake Ring Trail [Static Non Correctional]
						{
						if(SCRAM != player.NomTriEffect - 1)
							{
							player.Q_TexTriEffect[SCRAM].VertT1 = player.Q_TexTriEffect[SCRAM+1].VertB1;
							player.Q_TexTriEffect[SCRAM].VertT2 = player.Q_TexTriEffect[SCRAM+1].VertB2;
							player.Q_TexTriEffect[SCRAM].VertT3 = player.Q_TexTriEffect[SCRAM+1].VertB3;
							player.Q_TexTriEffect[SCRAM].VertT4 = player.Q_TexTriEffect[SCRAM+1].VertB4;
							player.Q_TexTriEffect[SCRAM].VertT5 = player.Q_TexTriEffect[SCRAM+1].VertB5;
							player.Q_TexTriEffect[SCRAM].VertT6 = player.Q_TexTriEffect[SCRAM+1].VertB6;
							player.Q_TexTriEffect[SCRAM].VertT7 = player.Q_TexTriEffect[SCRAM+1].VertB7;
							player.Q_TexTriEffect[SCRAM].VertT8 = player.Q_TexTriEffect[SCRAM+1].VertB8;
							player.Q_TexTriEffect[SCRAM].VertT15 = player.Q_TexTriEffect[SCRAM+1].VertB15;
							player.Q_TexTriEffect[SCRAM].VertT25 = player.Q_TexTriEffect[SCRAM+1].VertB25;
							player.Q_TexTriEffect[SCRAM].VertT35 = player.Q_TexTriEffect[SCRAM+1].VertB35;
							player.Q_TexTriEffect[SCRAM].VertT45 = player.Q_TexTriEffect[SCRAM+1].VertB45;
							player.Q_TexTriEffect[SCRAM].VertT55 = player.Q_TexTriEffect[SCRAM+1].VertB55;
							player.Q_TexTriEffect[SCRAM].VertT65 = player.Q_TexTriEffect[SCRAM+1].VertB65;
							player.Q_TexTriEffect[SCRAM].VertT75 = player.Q_TexTriEffect[SCRAM+1].VertB75;
							player.Q_TexTriEffect[SCRAM].VertT85 = player.Q_TexTriEffect[SCRAM+1].VertB85;
							}


						player.Q_TexTriEffect[SCRAM].MaterialCNT++;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT < 82) player.Q_TexTriEffect[SCRAM].MaterialCNT = 82;
						if(player.Q_TexTriEffect[SCRAM].MaterialCNT > 96) player.Q_TexTriEffect[SCRAM].MaterialCNT = 82;


						//########- Effect Progression
						//##### Decrease Alpha Value - Increase Colour
						player.Q_TexTriEffect[SCRAM].Alpha -= 6;
						if(player.Q_TexTriEffect[SCRAM].Alpha < 0)
							{
							player.Q_TexTriEffect[SCRAM].Alpha = 0;
							player.Q_TexTriEffect[SCRAM].Live = 0;

							//### Array Reorder
							K = SCRAM;
							while(K < player.NomTriEffect - 1)
								{
								player.Q_TexTriEffect[K] = player.Q_TexTriEffect[K+1];
								K++;
								}

							player.NomTriEffect--;
							}

						if(player.Q_TexTriEffect[SCRAM].Green > 80)
							{
							player.Q_TexTriEffect[SCRAM].Red += 3*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Red > 255) player.Q_TexTriEffect[SCRAM].Red = 255;
							player.Q_TexTriEffect[SCRAM].Green += 3*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Green > 255) player.Q_TexTriEffect[SCRAM].Green = 255;
							}
						else
							{
							player.Q_TexTriEffect[SCRAM].Red -= 10*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Red < 0) player.Q_TexTriEffect[SCRAM].Red = 0;
							player.Q_TexTriEffect[SCRAM].Green -= 10*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Green < 0) player.Q_TexTriEffect[SCRAM].Green = 0;
							player.Q_TexTriEffect[SCRAM].Blue -= 10*TimeScale;
							if(player.Q_TexTriEffect[SCRAM].Blue < 0) player.Q_TexTriEffect[SCRAM].Blue = 0;
							}


						//##### Move Bottom Verts of Trail Back and Out
						//player.Q_TexTriEffect[SCRAM].LengthDist += 0.05;
						player.Q_TexTriEffect[SCRAM].ExpandDist += 0.004;

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB1, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB1);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB1);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB2, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB2);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB2);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB3, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB3);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB3);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB4, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB4);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB4);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB5, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB5);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB5);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB6, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB6);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB6);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB7, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB7);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB7);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB8, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB8);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB8);


						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB15, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB1, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB1);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB15, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB15);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB25, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB2, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB2);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB25, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB25);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB35, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB3, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB3);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB35, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB35);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB45, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB4, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB4);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB45, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB45);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB55, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB5, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB5);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB55, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB55);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB65, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB6, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB6);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB65, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB65);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB75, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB7, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB7);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB75, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB75);

						geVec3d_Subtract(&player.Q_TexTriEffect[SCRAM].VertB85, &player.Q_TexTriEffect[SCRAM].PosB, &player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_Normalize(&player.Q_TexTriEffect[SCRAM].ExpandVec);
						//geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB8, -player.Q_TexTriEffect[SCRAM].LengthDist, &player.Q_TexTriEffect[SCRAM].VecIn, &player.Q_TexTriEffect[SCRAM].VertB8);
						geVec3d_MA(&player.Q_TexTriEffect[SCRAM].VertB85, player.Q_TexTriEffect[SCRAM].ExpandDist, &player.Q_TexTriEffect[SCRAM].ExpandVec, &player.Q_TexTriEffect[SCRAM].VertB85);


						//##### - ALPHA VALUES AND COLOUR
						a=0;
						while( a <= 15 )
							{
							b=0;
							while( b <= 3 )
								{
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].a = player.Q_TexTriEffect[SCRAM].Alpha;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].b = player.Q_TexTriEffect[SCRAM].Blue;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].g = player.Q_TexTriEffect[SCRAM].Green;
								player.Q_TexTriEffect[SCRAM].Lvert[a][b].r = player.Q_TexTriEffect[SCRAM].Red;
								b++;
								}
							a++;
							}


						//##### - SOLID RING VERTS

						player.Q_TexTriEffect[SCRAM].Lvert[0][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][0].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;

						
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].X = player.Q_TexTriEffect[SCRAM].VertT15.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].Y = player.Q_TexTriEffect[SCRAM].VertT15.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][1].Z = player.Q_TexTriEffect[SCRAM].VertT15.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].X = player.Q_TexTriEffect[SCRAM].VertB15.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].Y = player.Q_TexTriEffect[SCRAM].VertB15.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][2].Z = player.Q_TexTriEffect[SCRAM].VertB15.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[0][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[0][3].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[1][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].X = player.Q_TexTriEffect[SCRAM].VertT15.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].Y = player.Q_TexTriEffect[SCRAM].VertT15.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][0].Z = player.Q_TexTriEffect[SCRAM].VertT15.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].X = player.Q_TexTriEffect[SCRAM].VertT2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].Y = player.Q_TexTriEffect[SCRAM].VertT2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][1].Z = player.Q_TexTriEffect[SCRAM].VertT2.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].X = player.Q_TexTriEffect[SCRAM].VertB2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].Y = player.Q_TexTriEffect[SCRAM].VertB2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][2].Z = player.Q_TexTriEffect[SCRAM].VertB2.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[1][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].X = player.Q_TexTriEffect[SCRAM].VertB15.X;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].Y = player.Q_TexTriEffect[SCRAM].VertB15.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[1][3].Z = player.Q_TexTriEffect[SCRAM].VertB15.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[2][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].X = player.Q_TexTriEffect[SCRAM].VertT2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].Y = player.Q_TexTriEffect[SCRAM].VertT2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][0].Z = player.Q_TexTriEffect[SCRAM].VertT2.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].X = player.Q_TexTriEffect[SCRAM].VertT25.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].Y = player.Q_TexTriEffect[SCRAM].VertT25.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][1].Z = player.Q_TexTriEffect[SCRAM].VertT25.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].X = player.Q_TexTriEffect[SCRAM].VertB25.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].Y = player.Q_TexTriEffect[SCRAM].VertB25.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][2].Z = player.Q_TexTriEffect[SCRAM].VertB25.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[2][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].X = player.Q_TexTriEffect[SCRAM].VertB2.X;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].Y = player.Q_TexTriEffect[SCRAM].VertB2.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[2][3].Z = player.Q_TexTriEffect[SCRAM].VertB2.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[3][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].X = player.Q_TexTriEffect[SCRAM].VertT25.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].Y = player.Q_TexTriEffect[SCRAM].VertT25.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][0].Z = player.Q_TexTriEffect[SCRAM].VertT25.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][1].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][2].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[3][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].X = player.Q_TexTriEffect[SCRAM].VertB25.X;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].Y = player.Q_TexTriEffect[SCRAM].VertB25.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[3][3].Z = player.Q_TexTriEffect[SCRAM].VertB25.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[4][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].X = player.Q_TexTriEffect[SCRAM].VertT3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].Y = player.Q_TexTriEffect[SCRAM].VertT3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][0].Z = player.Q_TexTriEffect[SCRAM].VertT3.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].X = player.Q_TexTriEffect[SCRAM].VertT35.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].Y = player.Q_TexTriEffect[SCRAM].VertT35.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][1].Z = player.Q_TexTriEffect[SCRAM].VertT35.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].X = player.Q_TexTriEffect[SCRAM].VertB35.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].Y = player.Q_TexTriEffect[SCRAM].VertB35.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][2].Z = player.Q_TexTriEffect[SCRAM].VertB35.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[4][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].X = player.Q_TexTriEffect[SCRAM].VertB3.X;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].Y = player.Q_TexTriEffect[SCRAM].VertB3.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[4][3].Z = player.Q_TexTriEffect[SCRAM].VertB3.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[5][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].X = player.Q_TexTriEffect[SCRAM].VertT35.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].Y = player.Q_TexTriEffect[SCRAM].VertT35.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][0].Z = player.Q_TexTriEffect[SCRAM].VertT35.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].X = player.Q_TexTriEffect[SCRAM].VertT4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].Y = player.Q_TexTriEffect[SCRAM].VertT4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][1].Z = player.Q_TexTriEffect[SCRAM].VertT4.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].X = player.Q_TexTriEffect[SCRAM].VertB4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].Y = player.Q_TexTriEffect[SCRAM].VertB4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][2].Z = player.Q_TexTriEffect[SCRAM].VertB4.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[5][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].X = player.Q_TexTriEffect[SCRAM].VertB35.X;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].Y = player.Q_TexTriEffect[SCRAM].VertB35.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[5][3].Z = player.Q_TexTriEffect[SCRAM].VertB35.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[6][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].X = player.Q_TexTriEffect[SCRAM].VertT4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].Y = player.Q_TexTriEffect[SCRAM].VertT4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][0].Z = player.Q_TexTriEffect[SCRAM].VertT4.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].X = player.Q_TexTriEffect[SCRAM].VertT45.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].Y = player.Q_TexTriEffect[SCRAM].VertT45.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][1].Z = player.Q_TexTriEffect[SCRAM].VertT45.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].X = player.Q_TexTriEffect[SCRAM].VertB45.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].Y = player.Q_TexTriEffect[SCRAM].VertB45.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][2].Z = player.Q_TexTriEffect[SCRAM].VertB45.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[6][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].X = player.Q_TexTriEffect[SCRAM].VertB4.X;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].Y = player.Q_TexTriEffect[SCRAM].VertB4.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[6][3].Z = player.Q_TexTriEffect[SCRAM].VertB4.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[7][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].X = player.Q_TexTriEffect[SCRAM].VertT45.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].Y = player.Q_TexTriEffect[SCRAM].VertT45.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][0].Z = player.Q_TexTriEffect[SCRAM].VertT45.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].X = player.Q_TexTriEffect[SCRAM].VertT5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].Y = player.Q_TexTriEffect[SCRAM].VertT5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][1].Z = player.Q_TexTriEffect[SCRAM].VertT5.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].X = player.Q_TexTriEffect[SCRAM].VertB5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].Y = player.Q_TexTriEffect[SCRAM].VertB5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][2].Z = player.Q_TexTriEffect[SCRAM].VertB5.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[7][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].X = player.Q_TexTriEffect[SCRAM].VertB45.X;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].Y = player.Q_TexTriEffect[SCRAM].VertB45.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[7][3].Z = player.Q_TexTriEffect[SCRAM].VertB45.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[8][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[8][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[8][0].X = player.Q_TexTriEffect[SCRAM].VertT5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[8][0].Y = player.Q_TexTriEffect[SCRAM].VertT5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[8][0].Z = player.Q_TexTriEffect[SCRAM].VertT5.Z;

						
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].X = player.Q_TexTriEffect[SCRAM].VertT55.X;
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].Y = player.Q_TexTriEffect[SCRAM].VertT55.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[8][1].Z = player.Q_TexTriEffect[SCRAM].VertT55.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].X = player.Q_TexTriEffect[SCRAM].VertB55.X;
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].Y = player.Q_TexTriEffect[SCRAM].VertB55.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[8][2].Z = player.Q_TexTriEffect[SCRAM].VertB55.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[8][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[8][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[8][3].X = player.Q_TexTriEffect[SCRAM].VertB5.X;
						player.Q_TexTriEffect[SCRAM].Lvert[8][3].Y = player.Q_TexTriEffect[SCRAM].VertB5.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[8][3].Z = player.Q_TexTriEffect[SCRAM].VertB5.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[9][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[9][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[9][0].X = player.Q_TexTriEffect[SCRAM].VertT55.X;
						player.Q_TexTriEffect[SCRAM].Lvert[9][0].Y = player.Q_TexTriEffect[SCRAM].VertT55.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[9][0].Z = player.Q_TexTriEffect[SCRAM].VertT55.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].X = player.Q_TexTriEffect[SCRAM].VertT6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].Y = player.Q_TexTriEffect[SCRAM].VertT6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[9][1].Z = player.Q_TexTriEffect[SCRAM].VertT6.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].X = player.Q_TexTriEffect[SCRAM].VertB6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].Y = player.Q_TexTriEffect[SCRAM].VertB6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[9][2].Z = player.Q_TexTriEffect[SCRAM].VertB6.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[9][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[9][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[9][3].X = player.Q_TexTriEffect[SCRAM].VertB55.X;
						player.Q_TexTriEffect[SCRAM].Lvert[9][3].Y = player.Q_TexTriEffect[SCRAM].VertB55.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[9][3].Z = player.Q_TexTriEffect[SCRAM].VertB55.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[10][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[10][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[10][0].X = player.Q_TexTriEffect[SCRAM].VertT6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[10][0].Y = player.Q_TexTriEffect[SCRAM].VertT6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[10][0].Z = player.Q_TexTriEffect[SCRAM].VertT6.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].X = player.Q_TexTriEffect[SCRAM].VertT65.X;
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].Y = player.Q_TexTriEffect[SCRAM].VertT65.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[10][1].Z = player.Q_TexTriEffect[SCRAM].VertT65.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].X = player.Q_TexTriEffect[SCRAM].VertB65.X;
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].Y = player.Q_TexTriEffect[SCRAM].VertB65.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[10][2].Z = player.Q_TexTriEffect[SCRAM].VertB65.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[10][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[10][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[10][3].X = player.Q_TexTriEffect[SCRAM].VertB6.X;
						player.Q_TexTriEffect[SCRAM].Lvert[10][3].Y = player.Q_TexTriEffect[SCRAM].VertB6.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[10][3].Z = player.Q_TexTriEffect[SCRAM].VertB6.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[11][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[11][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[11][0].X = player.Q_TexTriEffect[SCRAM].VertT65.X;
						player.Q_TexTriEffect[SCRAM].Lvert[11][0].Y = player.Q_TexTriEffect[SCRAM].VertT65.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[11][0].Z = player.Q_TexTriEffect[SCRAM].VertT65.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].X = player.Q_TexTriEffect[SCRAM].VertT7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].Y = player.Q_TexTriEffect[SCRAM].VertT7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[11][1].Z = player.Q_TexTriEffect[SCRAM].VertT7.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].X = player.Q_TexTriEffect[SCRAM].VertB7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].Y = player.Q_TexTriEffect[SCRAM].VertB7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[11][2].Z = player.Q_TexTriEffect[SCRAM].VertB7.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[11][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[11][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[11][3].X = player.Q_TexTriEffect[SCRAM].VertB65.X;
						player.Q_TexTriEffect[SCRAM].Lvert[11][3].Y = player.Q_TexTriEffect[SCRAM].VertB65.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[11][3].Z = player.Q_TexTriEffect[SCRAM].VertB65.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[12][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[12][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[12][0].X = player.Q_TexTriEffect[SCRAM].VertT7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[12][0].Y = player.Q_TexTriEffect[SCRAM].VertT7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[12][0].Z = player.Q_TexTriEffect[SCRAM].VertT7.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].X = player.Q_TexTriEffect[SCRAM].VertT75.X;
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].Y = player.Q_TexTriEffect[SCRAM].VertT75.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[12][1].Z = player.Q_TexTriEffect[SCRAM].VertT75.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].X = player.Q_TexTriEffect[SCRAM].VertB75.X;
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].Y = player.Q_TexTriEffect[SCRAM].VertB75.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[12][2].Z = player.Q_TexTriEffect[SCRAM].VertB75.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[12][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[12][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[12][3].X = player.Q_TexTriEffect[SCRAM].VertB7.X;
						player.Q_TexTriEffect[SCRAM].Lvert[12][3].Y = player.Q_TexTriEffect[SCRAM].VertB7.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[12][3].Z = player.Q_TexTriEffect[SCRAM].VertB7.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[13][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[13][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[13][0].X = player.Q_TexTriEffect[SCRAM].VertT75.X;
						player.Q_TexTriEffect[SCRAM].Lvert[13][0].Y = player.Q_TexTriEffect[SCRAM].VertT75.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[13][0].Z = player.Q_TexTriEffect[SCRAM].VertT75.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].X = player.Q_TexTriEffect[SCRAM].VertT8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].Y = player.Q_TexTriEffect[SCRAM].VertT8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[13][1].Z = player.Q_TexTriEffect[SCRAM].VertT8.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].X = player.Q_TexTriEffect[SCRAM].VertB8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].Y = player.Q_TexTriEffect[SCRAM].VertB8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[13][2].Z = player.Q_TexTriEffect[SCRAM].VertB8.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[13][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[13][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[13][3].X = player.Q_TexTriEffect[SCRAM].VertB75.X;
						player.Q_TexTriEffect[SCRAM].Lvert[13][3].Y = player.Q_TexTriEffect[SCRAM].VertB75.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[13][3].Z = player.Q_TexTriEffect[SCRAM].VertB75.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[14][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[14][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[14][0].X = player.Q_TexTriEffect[SCRAM].VertT8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[14][0].Y = player.Q_TexTriEffect[SCRAM].VertT8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[14][0].Z = player.Q_TexTriEffect[SCRAM].VertT8.Z;

								
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].X = player.Q_TexTriEffect[SCRAM].VertT85.X;
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].Y = player.Q_TexTriEffect[SCRAM].VertT85.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[14][1].Z = player.Q_TexTriEffect[SCRAM].VertT85.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[14][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[14][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[14][2].X = player.Q_TexTriEffect[SCRAM].VertB85.X;
						player.Q_TexTriEffect[SCRAM].Lvert[14][2].Y = player.Q_TexTriEffect[SCRAM].VertB85.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[14][2].Z = player.Q_TexTriEffect[SCRAM].VertB85.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[14][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[14][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[14][3].X = player.Q_TexTriEffect[SCRAM].VertB8.X;
						player.Q_TexTriEffect[SCRAM].Lvert[14][3].Y = player.Q_TexTriEffect[SCRAM].VertB8.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[14][3].Z = player.Q_TexTriEffect[SCRAM].VertB8.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[15][0].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[15][0].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[15][0].X = player.Q_TexTriEffect[SCRAM].VertT85.X;
						player.Q_TexTriEffect[SCRAM].Lvert[15][0].Y = player.Q_TexTriEffect[SCRAM].VertT85.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[15][0].Z = player.Q_TexTriEffect[SCRAM].VertT85.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[15][1].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[15][1].v = player.Q_TexTriEffect[SCRAM].Ub;
						player.Q_TexTriEffect[SCRAM].Lvert[15][1].X = player.Q_TexTriEffect[SCRAM].VertT1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[15][1].Y = player.Q_TexTriEffect[SCRAM].VertT1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[15][1].Z = player.Q_TexTriEffect[SCRAM].VertT1.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[15][2].u = 1;
						player.Q_TexTriEffect[SCRAM].Lvert[15][2].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[15][2].X = player.Q_TexTriEffect[SCRAM].VertB1.X;
						player.Q_TexTriEffect[SCRAM].Lvert[15][2].Y = player.Q_TexTriEffect[SCRAM].VertB1.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[15][2].Z = player.Q_TexTriEffect[SCRAM].VertB1.Z;


						player.Q_TexTriEffect[SCRAM].Lvert[15][3].u = 0;
						player.Q_TexTriEffect[SCRAM].Lvert[15][3].v = player.Q_TexTriEffect[SCRAM].Ut;
						player.Q_TexTriEffect[SCRAM].Lvert[15][3].X = player.Q_TexTriEffect[SCRAM].VertB85.X;
						player.Q_TexTriEffect[SCRAM].Lvert[15][3].Y = player.Q_TexTriEffect[SCRAM].VertB85.Y;
						player.Q_TexTriEffect[SCRAM].Lvert[15][3].Z = player.Q_TexTriEffect[SCRAM].VertB85.Z;


						if(player.Q_TexTriEffect[SCRAM].Live == 1)
							{
							i = 0;
							while(i <= 15)
								{
								geWorld_AddPolyOnce(World, &player.Q_TexTriEffect[SCRAM].Lvert[i][0], 4, fire[player.Q_TexTriEffect[SCRAM].MaterialCNT], player.Q_TexTriEffect[SCRAM].PolyType, player.Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
								i++;
								}
							}

						} break;

					}


				}//END Live

			SCRAM--;
			}//END SCRAM

		}//END player NomTriEffects


	//######## AI Textured Tri Effects ########

	aero=0;
	while(aero < NomAI)	//AI Loop
		{
		if(Forge[aero].LIVE == 1)
			{
			if(Forge[aero].NomTriEffect > 0)
				{
				SCRAM = Forge[aero].NomTriEffect - 1;
				while(SCRAM >= 0)
					{
					if(Forge[aero].Q_TexTriEffect[SCRAM].Live == 1)
						{
						switch(Forge[aero].Q_TexTriEffect[SCRAM].EffectType)
							{
							case 0:	//WindWake Ring Trail
								{
								if(SCRAM != Forge[aero].NomTriEffect - 1)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].VertT1 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB1;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT2 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB2;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT3 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB3;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT4 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB4;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT5 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB5;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT6 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB6;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT7 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB7;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT8 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB8;
									Forge[aero].Q_TexTriEffect[SCRAM].Pos = Forge[aero].Q_TexTriEffect[SCRAM+1].Pos;
									}

								Forge[aero].Q_TexTriEffect[SCRAM].VertB1 = Forge[aero].Q_TexTriEffect[SCRAM].VertT1;
								Forge[aero].Q_TexTriEffect[SCRAM].VertB2 = Forge[aero].Q_TexTriEffect[SCRAM].VertT2;
								Forge[aero].Q_TexTriEffect[SCRAM].VertB3 = Forge[aero].Q_TexTriEffect[SCRAM].VertT3;
								Forge[aero].Q_TexTriEffect[SCRAM].VertB4 = Forge[aero].Q_TexTriEffect[SCRAM].VertT4;
								Forge[aero].Q_TexTriEffect[SCRAM].VertB5 = Forge[aero].Q_TexTriEffect[SCRAM].VertT5;
								Forge[aero].Q_TexTriEffect[SCRAM].VertB6 = Forge[aero].Q_TexTriEffect[SCRAM].VertT6;
								Forge[aero].Q_TexTriEffect[SCRAM].VertB7 = Forge[aero].Q_TexTriEffect[SCRAM].VertT7;
								Forge[aero].Q_TexTriEffect[SCRAM].VertB8 = Forge[aero].Q_TexTriEffect[SCRAM].VertT8;


								//##### Material Count
								Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT++;
								if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT > 136) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT = 124;


								//########- Effect Progression
								//##### Decrease Alpha Value - Increase Colour
								Forge[aero].Q_TexTriEffect[SCRAM].Alpha -= 4;
								if(Forge[aero].Q_TexTriEffect[SCRAM].Alpha < 0)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].Alpha = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Live = 0;

									//### Array Reorder
									K = SCRAM;
									while(K < Forge[aero].NomTriEffect - 1)
										{
										Forge[aero].Q_TexTriEffect[K] = Forge[aero].Q_TexTriEffect[K+1];
										K++;
										}

									Forge[aero].NomTriEffect--;
									}

								Forge[aero].Q_TexTriEffect[SCRAM].Green += 4;
								if(Forge[aero].Q_TexTriEffect[SCRAM].Green > 255) Forge[aero].Q_TexTriEffect[SCRAM].Green = 255;
								Forge[aero].Q_TexTriEffect[SCRAM].Red += 4;
								if(Forge[aero].Q_TexTriEffect[SCRAM].Red > 255) Forge[aero].Q_TexTriEffect[SCRAM].Red = 255;


								//##### Move Bottom Verts of Trail Back and Out
								Forge[aero].Q_TexTriEffect[SCRAM].LengthDist += 0.05;
								Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist += 0.004;

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB1);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB1);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB2);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB2);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB3);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB3);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB4);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB4);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB5);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB5);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB6);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB6);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB7);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB7);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB8);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB8);


								//##### - ALPHA VALUES AND COLOUR
								a=0;
								while( a <= 7 )
									{
									b=0;
									while( b <= 3 )
										{
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].a = Forge[aero].Q_TexTriEffect[SCRAM].Alpha;
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].b = Forge[aero].Q_TexTriEffect[SCRAM].Blue;
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].g = Forge[aero].Q_TexTriEffect[SCRAM].Green;
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].r = Forge[aero].Q_TexTriEffect[SCRAM].Red;
										b++;
										}
									a++;
									}


								//##### - SOLID RING VERTS

								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Z;

			
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Z;

								
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Z;

								
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].u = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].u = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.Z;


								if(Forge[aero].Q_TexTriEffect[SCRAM].Live == 1)
									{
									i = 0;
									while(i <= 7)
										{
										geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[i][0], 4, Water[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
										i++;
										}
									}

								} break;


							case 1:	//WindWake Ring Trail [Static Non Correctional]
								{
								if(SCRAM != Forge[aero].NomTriEffect - 1)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].VertT1 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB1;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT2 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB2;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT3 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB3;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT4 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB4;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT5 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB5;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT6 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB6;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT7 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB7;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT8 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB8;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT15 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB15;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT25 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB25;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT35 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB35;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT45 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB45;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT55 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB55;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT65 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB65;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT75 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB75;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT85 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB85;
									}


								//##### Material Count
								//Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT++;
								//if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT < 124) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT = 124;
								//if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT > 136) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT = 124;

								Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT++;
								if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT < 82) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT = 82;
								if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT > 96) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT = 82;


								//########- Effect Progression
								//##### Decrease Alpha Value - Increase Colour
								Forge[aero].Q_TexTriEffect[SCRAM].Alpha -= 6;
								if(Forge[aero].Q_TexTriEffect[SCRAM].Alpha < 0)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].Alpha = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Live = 0;

									//### Array Reorder
									K = SCRAM;
									while(K < Forge[aero].NomTriEffect - 1)
										{
										Forge[aero].Q_TexTriEffect[K] = Forge[aero].Q_TexTriEffect[K+1];
										K++;
										}

									Forge[aero].NomTriEffect--;
									}

								if(Forge[aero].Q_TexTriEffect[SCRAM].Green > 80)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].Red += 3*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Red > 255) Forge[aero].Q_TexTriEffect[SCRAM].Red = 255;
									Forge[aero].Q_TexTriEffect[SCRAM].Green += 3*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Green > 255) Forge[aero].Q_TexTriEffect[SCRAM].Green = 255;
									}
								else
									{
									Forge[aero].Q_TexTriEffect[SCRAM].Red -= 10*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Red < 0) Forge[aero].Q_TexTriEffect[SCRAM].Red = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Green -= 10*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Green < 0) Forge[aero].Q_TexTriEffect[SCRAM].Green = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Blue -= 10*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Blue < 0) Forge[aero].Q_TexTriEffect[SCRAM].Blue = 0;
									}


								//##### Move Bottom Verts of Trail Back and Out
								//Forge[aero].Q_TexTriEffect[SCRAM].LengthDist += 0.05;
								Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist += 0.004;

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB1);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB1);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB2);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB2);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB3);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB3);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB4);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB4);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB5);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB5);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB6);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB6);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB7);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB7);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB8);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB8);


								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB15, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB1);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB15, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB15);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB25, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB2);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB25, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB25);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB35, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB3);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB35, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB35);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB45, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB4);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB45, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB45);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB55, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB5);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB55, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB55);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB65, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB6);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB65, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB65);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB75, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB7);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB75, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB75);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB85, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB8);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB85, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB85);


								//##### - ALPHA VALUES AND COLOUR
								a=0;
								while( a <= 15 )
									{
									b=0;
									while( b <= 3 )
										{
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].a = Forge[aero].Q_TexTriEffect[SCRAM].Alpha;
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].b = Forge[aero].Q_TexTriEffect[SCRAM].Blue;
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].g = Forge[aero].Q_TexTriEffect[SCRAM].Green;
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].r = Forge[aero].Q_TexTriEffect[SCRAM].Red;
										b++;
										}
									a++;
									}


								//##### - SOLID RING VERTS

								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Z;

								
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT15.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT15.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT15.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB15.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB15.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB15.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT15.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT15.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT15.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB15.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB15.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB15.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT25.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT25.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT25.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB25.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB25.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB25.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT25.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT25.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT25.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB25.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB25.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB25.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT35.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT35.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT35.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB35.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB35.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB35.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT35.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT35.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT35.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB35.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB35.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB35.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT45.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT45.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT45.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB45.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB45.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB45.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT45.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT45.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT45.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB45.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB45.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB45.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT5.Z;

								
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT55.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT55.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT55.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB55.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB55.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB55.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB5.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT55.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT55.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT55.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB55.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB55.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[9][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB55.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT6.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT65.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT65.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT65.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB65.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB65.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB65.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[10][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB6.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT65.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT65.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT65.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB65.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB65.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[11][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB65.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT7.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT75.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT75.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT75.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB75.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB75.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB75.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[12][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB7.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT75.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT75.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT75.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB75.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB75.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[13][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB75.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT8.Z;

										
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT85.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT85.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT85.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB85.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB85.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB85.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[14][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB8.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][0].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][0].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT85.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT85.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT85.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][1].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][1].v = Forge[aero].Q_TexTriEffect[SCRAM].Ub;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][2].u = 1;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][2].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Z;


								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][3].u = 0;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][3].v = Forge[aero].Q_TexTriEffect[SCRAM].Ut;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB85.X;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB85.Y;
								Forge[aero].Q_TexTriEffect[SCRAM].Lvert[15][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB85.Z;


								if(Forge[aero].Q_TexTriEffect[SCRAM].Live == 1)
									{
									i = 0;
									while(i <= 15)
										{
										geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[i][0], 4, fire[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
										i++;
										}
									}

								} break;


							case 2:	//##### Flame Trails
								{
								if(SCRAM != Forge[aero].NomTriEffect - 1)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].VertT1 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB1;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT2 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB2;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT3 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB3;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT4 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB4;
									}


								//##### Material Count  Set this
									//Fire
								Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT2++;
								if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT2 < 124) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT2 = 124;
								if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT2 > 136) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT2 = 124;

									//Energy
								Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT++;
								if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT < 82) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT = 82;
								if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT > 96) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT = 82;


								//########- Effect Progression
								//##### Decrease Alpha Value - Increase Colour
								Forge[aero].Q_TexTriEffect[SCRAM].Alpha -= 30;	//80
								if(Forge[aero].Q_TexTriEffect[SCRAM].Alpha < 0)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].Alpha = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Live = 0;

									//### Array Reorder
									K = SCRAM;
									while(K < Forge[aero].NomTriEffect - 1)
										{
										Forge[aero].Q_TexTriEffect[K] = Forge[aero].Q_TexTriEffect[K+1];
										K++;
										}

									Forge[aero].NomTriEffect--;
									}


								/*if(Forge[aero].Aposestate != 59)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].Green += 3*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Green > 255) Forge[aero].Q_TexTriEffect[SCRAM].Green = 255;
									Forge[aero].Q_TexTriEffect[SCRAM].Red += 3*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Red > 255) Forge[aero].Q_TexTriEffect[SCRAM].Red = 255;
									}
								else
									{
									Forge[aero].Q_TexTriEffect[SCRAM].Green -= 20*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Green < 0) Forge[aero].Q_TexTriEffect[SCRAM].Green = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Red -= 20*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Red < 0) Forge[aero].Q_TexTriEffect[SCRAM].Red = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Blue -= 20*TimeScale;
									if(Forge[aero].Q_TexTriEffect[SCRAM].Blue < 0) Forge[aero].Q_TexTriEffect[SCRAM].Blue = 0;
									}*/


								//##### Move Bottom Verts of Trail Back and Out
								Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist *= 5;

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB1);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB1);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB2);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB2);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB3);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB3);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB4);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB4);


								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertT1, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertT1, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertT1);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertT1, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertT1);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertT2, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertT2, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertT2);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertT2, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertT2);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertT3, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertT3, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertT3);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertT3, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertT3);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertT4, &Forge[aero].Q_TexTriEffect[SCRAM].Pos, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertT4, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertT4);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertT4, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertT4);


									a=0;
									while( a <= 4 )
										{
										b=0;
										while( b <= 3 )
											{
											Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].a = Forge[aero].Q_TexTriEffect[SCRAM].Alpha;
											Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].b = 255;
											Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].g = 255;
											Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}


									a=5;
									while( a <= 8 )
										{
										b=0;
										while( b <= 3 )
											{
											Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].a = Forge[aero].Q_TexTriEffect[SCRAM].Alpha/6;
											Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].b = 255;
											Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].g = 255;
											Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].r = 255;
											b++;
											}
										a++;
										}


									//##### - START CAP	- FLAMES
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Z;
													
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].u = 0.5;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Z;


									//##### - END CAP - FLAMES
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].u = 0.5;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Z;
													
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Z;


									//##### - BOTTOM CAP - FLAMES
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].v = 0.1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].v = 0.1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Z;


									//##### - FRONT FLAT PANEL - FLAMES
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Z;
													
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Z;


									//##### - BACK FLAT PANEL - FLAMES
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT2.Z;
													
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB2.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Z;



									//##### - START CAP	- ENERGY
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Z;
													
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].u = 0.5;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Z;


									//##### - END CAP - ENERGY
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].u = 0.5;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Z;
													
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Z;


									//##### - FRONT FLAT PANEL - ENERGY
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT3.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB3.Z;


									//##### - BACK FLAT PANEL - ENERGY
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT1.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].u = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].X = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][1].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertT4.Z;
													
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].v = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][2].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB4.Z;

									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].u = 1;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].v = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].X = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.X;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].Y = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Y;
									Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][3].Z = Forge[aero].Q_TexTriEffect[SCRAM].VertB1.Z;


								if(Forge[aero].Q_TexTriEffect[SCRAM].Live == 1)
									{
									//FLAMES
									geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[0][0], 3, fire[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
									geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[1][0], 3, fire[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
									geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[2][0], 4, fire[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
									geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[3][0], 4, fire[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
									geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[4][0], 4, fire[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);

									//ENERGY
									geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[5][0], 3, Water[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT2], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
									geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[6][0], 3, Water[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT2], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
									geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[7][0], 4, Water[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT2], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
									geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[8][0], 4, Water[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT2], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
									}

								} break;


							case 3:	//Flame Ring Trail [Static Non Correctional]
								{
								if(SCRAM != Forge[aero].NomTriEffect - 1)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].VertT1 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB1;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT2 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB2;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT3 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB3;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT4 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB4;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT5 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB5;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT6 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB6;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT7 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB7;
									Forge[aero].Q_TexTriEffect[SCRAM].VertT8 = Forge[aero].Q_TexTriEffect[SCRAM+1].VertB8;
									//Forge[aero].Q_TexTriEffect[SCRAM].Pos = Forge[aero].Q_TexTriEffect[SCRAM+1].Pos;
									}

								//Forge[aero].Q_TexTriEffect[SCRAM].VertB1 = Forge[aero].Q_TexTriEffect[SCRAM].VertT1;
								//Forge[aero].Q_TexTriEffect[SCRAM].VertB2 = Forge[aero].Q_TexTriEffect[SCRAM].VertT2;
								//Forge[aero].Q_TexTriEffect[SCRAM].VertB3 = Forge[aero].Q_TexTriEffect[SCRAM].VertT3;
								//Forge[aero].Q_TexTriEffect[SCRAM].VertB4 = Forge[aero].Q_TexTriEffect[SCRAM].VertT4;
								//Forge[aero].Q_TexTriEffect[SCRAM].VertB5 = Forge[aero].Q_TexTriEffect[SCRAM].VertT5;
								//Forge[aero].Q_TexTriEffect[SCRAM].VertB6 = Forge[aero].Q_TexTriEffect[SCRAM].VertT6;
								//Forge[aero].Q_TexTriEffect[SCRAM].VertB7 = Forge[aero].Q_TexTriEffect[SCRAM].VertT7;
								//Forge[aero].Q_TexTriEffect[SCRAM].VertB8 = Forge[aero].Q_TexTriEffect[SCRAM].VertT8;


								//##### Material Count
								Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT++;
								if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT < 82) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT = 82;
								if(Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT > 96) Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT = 82;


								//########- Effect Progression
								//##### Decrease Alpha Value - Increase Colour
								Forge[aero].Q_TexTriEffect[SCRAM].Alpha -= 6;
								if(Forge[aero].Q_TexTriEffect[SCRAM].Alpha < 0)
									{
									Forge[aero].Q_TexTriEffect[SCRAM].Alpha = 0;
									Forge[aero].Q_TexTriEffect[SCRAM].Live = 0;

									//### Array Reorder
									K = SCRAM;
									while(K < Forge[aero].NomTriEffect - 1)
										{
										Forge[aero].Q_TexTriEffect[K] = Forge[aero].Q_TexTriEffect[K+1];
										K++;
										}

									Forge[aero].NomTriEffect--;
									}

								
								Forge[aero].Q_TexTriEffect[SCRAM].Green += 3*TimeScale;
								if(Forge[aero].Q_TexTriEffect[SCRAM].Green > 255) Forge[aero].Q_TexTriEffect[SCRAM].Green = 255;
								Forge[aero].Q_TexTriEffect[SCRAM].Red += 3*TimeScale;
								if(Forge[aero].Q_TexTriEffect[SCRAM].Red > 255) Forge[aero].Q_TexTriEffect[SCRAM].Red = 255;
								


								//##### Move Bottom Verts of Trail Back and Out
								//Forge[aero].Q_TexTriEffect[SCRAM].LengthDist += 0.05;
								Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist += 0.02;	//0.004

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB1);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB1, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB1);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB2);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB2, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB2);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB3);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB3, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB3);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB4);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB4, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB4);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB5);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB5, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB5);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB6);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB6, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB6);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB7);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB7, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB7);

								geVec3d_Subtract(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, &Forge[aero].Q_TexTriEffect[SCRAM].PosB, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_Normalize(&Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec);
								//geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, -Forge[aero].Q_TexTriEffect[SCRAM].LengthDist, &Forge[aero].Q_TexTriEffect[SCRAM].VecIn, &Forge[aero].Q_TexTriEffect[SCRAM].VertB8);
								geVec3d_MA(&Forge[aero].Q_TexTriEffect[SCRAM].VertB8, Forge[aero].Q_TexTriEffect[SCRAM].ExpandDist, &Forge[aero].Q_TexTriEffect[SCRAM].ExpandVec, &Forge[aero].Q_TexTriEffect[SCRAM].VertB8);


								//##### - ALPHA VALUES AND COLOUR
								a=0;
								while( a <= 15 )
									{
									b=0;
									while( b <= 3 )
										{
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].a = Forge[aero].Q_TexTriEffect[SCRAM].Alpha;
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].b = Forge[aero].Q_TexTriEffect[SCRAM].Blue;
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].g = Forge[aero].Q_TexTriEffect[SCRAM].Green;
										Forge[aero].Q_TexTriEffect[SCRAM].Lvert[a][b].r = Forge[aero].Q_TexTriEffect[SCRAM].Red;
										b++;
										}
									a++;
									}


								//##### - SOLID RING TWO

								Q_WindWake[SCRAM].Lvert[0][0].u = 0;
								Q_WindWake[SCRAM].Lvert[0][0].v = 0;
								Q_WindWake[SCRAM].Lvert[0][0].X = Q_WindWake[SCRAM].VertT1.X;
								Q_WindWake[SCRAM].Lvert[0][0].Y = Q_WindWake[SCRAM].VertT1.Y;
								Q_WindWake[SCRAM].Lvert[0][0].Z = Q_WindWake[SCRAM].VertT1.Z;

								
								Q_WindWake[SCRAM].Lvert[0][1].u = 1;
								Q_WindWake[SCRAM].Lvert[0][1].v = 0;
								Q_WindWake[SCRAM].Lvert[0][1].X = Q_WindWake[SCRAM].VertT15.X;
								Q_WindWake[SCRAM].Lvert[0][1].Y = Q_WindWake[SCRAM].VertT15.Y;
								Q_WindWake[SCRAM].Lvert[0][1].Z = Q_WindWake[SCRAM].VertT15.Z;

										
								Q_WindWake[SCRAM].Lvert[0][2].u = 1;
								Q_WindWake[SCRAM].Lvert[0][2].v = 1;
								Q_WindWake[SCRAM].Lvert[0][2].X = Q_WindWake[SCRAM].VertB15.X;
								Q_WindWake[SCRAM].Lvert[0][2].Y = Q_WindWake[SCRAM].VertB15.Y;
								Q_WindWake[SCRAM].Lvert[0][2].Z = Q_WindWake[SCRAM].VertB15.Z;


								Q_WindWake[SCRAM].Lvert[0][3].u = 0;
								Q_WindWake[SCRAM].Lvert[0][3].v = 1;
								Q_WindWake[SCRAM].Lvert[0][3].X = Q_WindWake[SCRAM].VertB1.X;
								Q_WindWake[SCRAM].Lvert[0][3].Y = Q_WindWake[SCRAM].VertB1.Y;
								Q_WindWake[SCRAM].Lvert[0][3].Z = Q_WindWake[SCRAM].VertB1.Z;


								Q_WindWake[SCRAM].Lvert[1][0].u = 0;
								Q_WindWake[SCRAM].Lvert[1][0].v = 0;
								Q_WindWake[SCRAM].Lvert[1][0].X = Q_WindWake[SCRAM].VertT15.X;
								Q_WindWake[SCRAM].Lvert[1][0].Y = Q_WindWake[SCRAM].VertT15.Y;
								Q_WindWake[SCRAM].Lvert[1][0].Z = Q_WindWake[SCRAM].VertT15.Z;

										
								Q_WindWake[SCRAM].Lvert[1][1].u = 1;
								Q_WindWake[SCRAM].Lvert[1][1].v = 0;
								Q_WindWake[SCRAM].Lvert[1][1].X = Q_WindWake[SCRAM].VertT2.X;
								Q_WindWake[SCRAM].Lvert[1][1].Y = Q_WindWake[SCRAM].VertT2.Y;
								Q_WindWake[SCRAM].Lvert[1][1].Z = Q_WindWake[SCRAM].VertT2.Z;

										
								Q_WindWake[SCRAM].Lvert[1][2].u = 1;
								Q_WindWake[SCRAM].Lvert[1][2].v = 1;
								Q_WindWake[SCRAM].Lvert[1][2].X = Q_WindWake[SCRAM].VertB2.X;
								Q_WindWake[SCRAM].Lvert[1][2].Y = Q_WindWake[SCRAM].VertB2.Y;
								Q_WindWake[SCRAM].Lvert[1][2].Z = Q_WindWake[SCRAM].VertB2.Z;


								Q_WindWake[SCRAM].Lvert[1][3].u = 0;
								Q_WindWake[SCRAM].Lvert[1][3].v = 1;
								Q_WindWake[SCRAM].Lvert[1][3].X = Q_WindWake[SCRAM].VertB15.X;
								Q_WindWake[SCRAM].Lvert[1][3].Y = Q_WindWake[SCRAM].VertB15.Y;
								Q_WindWake[SCRAM].Lvert[1][3].Z = Q_WindWake[SCRAM].VertB15.Z;


								Q_WindWake[SCRAM].Lvert[2][0].u = 0;
								Q_WindWake[SCRAM].Lvert[2][0].v = 0;
								Q_WindWake[SCRAM].Lvert[2][0].X = Q_WindWake[SCRAM].VertT2.X;
								Q_WindWake[SCRAM].Lvert[2][0].Y = Q_WindWake[SCRAM].VertT2.Y;
								Q_WindWake[SCRAM].Lvert[2][0].Z = Q_WindWake[SCRAM].VertT2.Z;

										
								Q_WindWake[SCRAM].Lvert[2][1].u = 1;
								Q_WindWake[SCRAM].Lvert[2][1].v = 0;
								Q_WindWake[SCRAM].Lvert[2][1].X = Q_WindWake[SCRAM].VertT25.X;
								Q_WindWake[SCRAM].Lvert[2][1].Y = Q_WindWake[SCRAM].VertT25.Y;
								Q_WindWake[SCRAM].Lvert[2][1].Z = Q_WindWake[SCRAM].VertT25.Z;

										
								Q_WindWake[SCRAM].Lvert[2][2].u = 1;
								Q_WindWake[SCRAM].Lvert[2][2].v = 1;
								Q_WindWake[SCRAM].Lvert[2][2].X = Q_WindWake[SCRAM].VertB25.X;
								Q_WindWake[SCRAM].Lvert[2][2].Y = Q_WindWake[SCRAM].VertB25.Y;
								Q_WindWake[SCRAM].Lvert[2][2].Z = Q_WindWake[SCRAM].VertB25.Z;


								Q_WindWake[SCRAM].Lvert[2][3].u = 0;
								Q_WindWake[SCRAM].Lvert[2][3].v = 1;
								Q_WindWake[SCRAM].Lvert[2][3].X = Q_WindWake[SCRAM].VertB2.X;
								Q_WindWake[SCRAM].Lvert[2][3].Y = Q_WindWake[SCRAM].VertB2.Y;
								Q_WindWake[SCRAM].Lvert[2][3].Z = Q_WindWake[SCRAM].VertB2.Z;



								Q_WindWake[SCRAM].Lvert[3][0].u = 0;
								Q_WindWake[SCRAM].Lvert[3][0].v = 0;
								Q_WindWake[SCRAM].Lvert[3][0].X = Q_WindWake[SCRAM].VertT25.X;
								Q_WindWake[SCRAM].Lvert[3][0].Y = Q_WindWake[SCRAM].VertT25.Y;
								Q_WindWake[SCRAM].Lvert[3][0].Z = Q_WindWake[SCRAM].VertT25.Z;

										
								Q_WindWake[SCRAM].Lvert[3][1].u = 1;
								Q_WindWake[SCRAM].Lvert[3][1].v = 0;
								Q_WindWake[SCRAM].Lvert[3][1].X = Q_WindWake[SCRAM].VertT3.X;
								Q_WindWake[SCRAM].Lvert[3][1].Y = Q_WindWake[SCRAM].VertT3.Y;
								Q_WindWake[SCRAM].Lvert[3][1].Z = Q_WindWake[SCRAM].VertT3.Z;

										
								Q_WindWake[SCRAM].Lvert[3][2].u = 1;
								Q_WindWake[SCRAM].Lvert[3][2].v = 1;
								Q_WindWake[SCRAM].Lvert[3][2].X = Q_WindWake[SCRAM].VertB3.X;
								Q_WindWake[SCRAM].Lvert[3][2].Y = Q_WindWake[SCRAM].VertB3.Y;
								Q_WindWake[SCRAM].Lvert[3][2].Z = Q_WindWake[SCRAM].VertB3.Z;


								Q_WindWake[SCRAM].Lvert[3][3].u = 0;
								Q_WindWake[SCRAM].Lvert[3][3].v = 1;
								Q_WindWake[SCRAM].Lvert[3][3].X = Q_WindWake[SCRAM].VertB25.X;
								Q_WindWake[SCRAM].Lvert[3][3].Y = Q_WindWake[SCRAM].VertB25.Y;
								Q_WindWake[SCRAM].Lvert[3][3].Z = Q_WindWake[SCRAM].VertB25.Z;


								Q_WindWake[SCRAM].Lvert[4][0].u = 0;
								Q_WindWake[SCRAM].Lvert[4][0].v = 0;
								Q_WindWake[SCRAM].Lvert[4][0].X = Q_WindWake[SCRAM].VertT3.X;
								Q_WindWake[SCRAM].Lvert[4][0].Y = Q_WindWake[SCRAM].VertT3.Y;
								Q_WindWake[SCRAM].Lvert[4][0].Z = Q_WindWake[SCRAM].VertT3.Z;

										
								Q_WindWake[SCRAM].Lvert[4][1].u = 1;
								Q_WindWake[SCRAM].Lvert[4][1].v = 0;
								Q_WindWake[SCRAM].Lvert[4][1].X = Q_WindWake[SCRAM].VertT35.X;
								Q_WindWake[SCRAM].Lvert[4][1].Y = Q_WindWake[SCRAM].VertT35.Y;
								Q_WindWake[SCRAM].Lvert[4][1].Z = Q_WindWake[SCRAM].VertT35.Z;

										
								Q_WindWake[SCRAM].Lvert[4][2].u = 1;
								Q_WindWake[SCRAM].Lvert[4][2].v = 1;
								Q_WindWake[SCRAM].Lvert[4][2].X = Q_WindWake[SCRAM].VertB35.X;
								Q_WindWake[SCRAM].Lvert[4][2].Y = Q_WindWake[SCRAM].VertB35.Y;
								Q_WindWake[SCRAM].Lvert[4][2].Z = Q_WindWake[SCRAM].VertB35.Z;


								Q_WindWake[SCRAM].Lvert[4][3].u = 0;
								Q_WindWake[SCRAM].Lvert[4][3].v = 1;
								Q_WindWake[SCRAM].Lvert[4][3].X = Q_WindWake[SCRAM].VertB3.X;
								Q_WindWake[SCRAM].Lvert[4][3].Y = Q_WindWake[SCRAM].VertB3.Y;
								Q_WindWake[SCRAM].Lvert[4][3].Z = Q_WindWake[SCRAM].VertB3.Z;


								Q_WindWake[SCRAM].Lvert[5][0].u = 0;
								Q_WindWake[SCRAM].Lvert[5][0].v = 0;
								Q_WindWake[SCRAM].Lvert[5][0].X = Q_WindWake[SCRAM].VertT35.X;
								Q_WindWake[SCRAM].Lvert[5][0].Y = Q_WindWake[SCRAM].VertT35.Y;
								Q_WindWake[SCRAM].Lvert[5][0].Z = Q_WindWake[SCRAM].VertT35.Z;

										
								Q_WindWake[SCRAM].Lvert[5][1].u = 1;
								Q_WindWake[SCRAM].Lvert[5][1].v = 0;
								Q_WindWake[SCRAM].Lvert[5][1].X = Q_WindWake[SCRAM].VertT4.X;
								Q_WindWake[SCRAM].Lvert[5][1].Y = Q_WindWake[SCRAM].VertT4.Y;
								Q_WindWake[SCRAM].Lvert[5][1].Z = Q_WindWake[SCRAM].VertT4.Z;

										
								Q_WindWake[SCRAM].Lvert[5][2].u = 1;
								Q_WindWake[SCRAM].Lvert[5][2].v = 1;
								Q_WindWake[SCRAM].Lvert[5][2].X = Q_WindWake[SCRAM].VertB4.X;
								Q_WindWake[SCRAM].Lvert[5][2].Y = Q_WindWake[SCRAM].VertB4.Y;
								Q_WindWake[SCRAM].Lvert[5][2].Z = Q_WindWake[SCRAM].VertB4.Z;


								Q_WindWake[SCRAM].Lvert[5][3].u = 0;
								Q_WindWake[SCRAM].Lvert[5][3].v = 1;
								Q_WindWake[SCRAM].Lvert[5][3].X = Q_WindWake[SCRAM].VertB35.X;
								Q_WindWake[SCRAM].Lvert[5][3].Y = Q_WindWake[SCRAM].VertB35.Y;
								Q_WindWake[SCRAM].Lvert[5][3].Z = Q_WindWake[SCRAM].VertB35.Z;


								Q_WindWake[SCRAM].Lvert[6][0].u = 0;
								Q_WindWake[SCRAM].Lvert[6][0].v = 0;
								Q_WindWake[SCRAM].Lvert[6][0].X = Q_WindWake[SCRAM].VertT4.X;
								Q_WindWake[SCRAM].Lvert[6][0].Y = Q_WindWake[SCRAM].VertT4.Y;
								Q_WindWake[SCRAM].Lvert[6][0].Z = Q_WindWake[SCRAM].VertT4.Z;

										
								Q_WindWake[SCRAM].Lvert[6][1].u = 1;
								Q_WindWake[SCRAM].Lvert[6][1].v = 0;
								Q_WindWake[SCRAM].Lvert[6][1].X = Q_WindWake[SCRAM].VertT45.X;
								Q_WindWake[SCRAM].Lvert[6][1].Y = Q_WindWake[SCRAM].VertT45.Y;
								Q_WindWake[SCRAM].Lvert[6][1].Z = Q_WindWake[SCRAM].VertT45.Z;

										
								Q_WindWake[SCRAM].Lvert[6][2].u = 1;
								Q_WindWake[SCRAM].Lvert[6][2].v = 1;
								Q_WindWake[SCRAM].Lvert[6][2].X = Q_WindWake[SCRAM].VertB45.X;
								Q_WindWake[SCRAM].Lvert[6][2].Y = Q_WindWake[SCRAM].VertB45.Y;
								Q_WindWake[SCRAM].Lvert[6][2].Z = Q_WindWake[SCRAM].VertB45.Z;


								Q_WindWake[SCRAM].Lvert[6][3].u = 0;
								Q_WindWake[SCRAM].Lvert[6][3].v = 1;
								Q_WindWake[SCRAM].Lvert[6][3].X = Q_WindWake[SCRAM].VertB4.X;
								Q_WindWake[SCRAM].Lvert[6][3].Y = Q_WindWake[SCRAM].VertB4.Y;
								Q_WindWake[SCRAM].Lvert[6][3].Z = Q_WindWake[SCRAM].VertB4.Z;


								Q_WindWake[SCRAM].Lvert[7][0].u = 0;
								Q_WindWake[SCRAM].Lvert[7][0].v = 0;
								Q_WindWake[SCRAM].Lvert[7][0].X = Q_WindWake[SCRAM].VertT45.X;
								Q_WindWake[SCRAM].Lvert[7][0].Y = Q_WindWake[SCRAM].VertT45.Y;
								Q_WindWake[SCRAM].Lvert[7][0].Z = Q_WindWake[SCRAM].VertT45.Z;

										
								Q_WindWake[SCRAM].Lvert[7][1].u = 1;
								Q_WindWake[SCRAM].Lvert[7][1].v = 0;
								Q_WindWake[SCRAM].Lvert[7][1].X = Q_WindWake[SCRAM].VertT5.X;
								Q_WindWake[SCRAM].Lvert[7][1].Y = Q_WindWake[SCRAM].VertT5.Y;
								Q_WindWake[SCRAM].Lvert[7][1].Z = Q_WindWake[SCRAM].VertT5.Z;

										
								Q_WindWake[SCRAM].Lvert[7][2].u = 1;
								Q_WindWake[SCRAM].Lvert[7][2].v = 1;
								Q_WindWake[SCRAM].Lvert[7][2].X = Q_WindWake[SCRAM].VertB5.X;
								Q_WindWake[SCRAM].Lvert[7][2].Y = Q_WindWake[SCRAM].VertB5.Y;
								Q_WindWake[SCRAM].Lvert[7][2].Z = Q_WindWake[SCRAM].VertB5.Z;


								Q_WindWake[SCRAM].Lvert[7][3].u = 0;
								Q_WindWake[SCRAM].Lvert[7][3].v = 1;
								Q_WindWake[SCRAM].Lvert[7][3].X = Q_WindWake[SCRAM].VertB45.X;
								Q_WindWake[SCRAM].Lvert[7][3].Y = Q_WindWake[SCRAM].VertB45.Y;
								Q_WindWake[SCRAM].Lvert[7][3].Z = Q_WindWake[SCRAM].VertB45.Z;


								Q_WindWake[SCRAM].Lvert[8][0].u = 0;
								Q_WindWake[SCRAM].Lvert[8][0].v = 0;
								Q_WindWake[SCRAM].Lvert[8][0].X = Q_WindWake[SCRAM].VertT5.X;
								Q_WindWake[SCRAM].Lvert[8][0].Y = Q_WindWake[SCRAM].VertT5.Y;
								Q_WindWake[SCRAM].Lvert[8][0].Z = Q_WindWake[SCRAM].VertT5.Z;

								
								Q_WindWake[SCRAM].Lvert[8][1].u = 1;
								Q_WindWake[SCRAM].Lvert[8][1].v = 0;
								Q_WindWake[SCRAM].Lvert[8][1].X = Q_WindWake[SCRAM].VertT55.X;
								Q_WindWake[SCRAM].Lvert[8][1].Y = Q_WindWake[SCRAM].VertT55.Y;
								Q_WindWake[SCRAM].Lvert[8][1].Z = Q_WindWake[SCRAM].VertT55.Z;

										
								Q_WindWake[SCRAM].Lvert[8][2].u = 1;
								Q_WindWake[SCRAM].Lvert[8][2].v = 1;
								Q_WindWake[SCRAM].Lvert[8][2].X = Q_WindWake[SCRAM].VertB55.X;
								Q_WindWake[SCRAM].Lvert[8][2].Y = Q_WindWake[SCRAM].VertB55.Y;
								Q_WindWake[SCRAM].Lvert[8][2].Z = Q_WindWake[SCRAM].VertB55.Z;


								Q_WindWake[SCRAM].Lvert[8][3].u = 0;
								Q_WindWake[SCRAM].Lvert[8][3].v = 1;
								Q_WindWake[SCRAM].Lvert[8][3].X = Q_WindWake[SCRAM].VertB5.X;
								Q_WindWake[SCRAM].Lvert[8][3].Y = Q_WindWake[SCRAM].VertB5.Y;
								Q_WindWake[SCRAM].Lvert[8][3].Z = Q_WindWake[SCRAM].VertB5.Z;


								Q_WindWake[SCRAM].Lvert[9][0].u = 0;
								Q_WindWake[SCRAM].Lvert[9][0].v = 0;
								Q_WindWake[SCRAM].Lvert[9][0].X = Q_WindWake[SCRAM].VertT55.X;
								Q_WindWake[SCRAM].Lvert[9][0].Y = Q_WindWake[SCRAM].VertT55.Y;
								Q_WindWake[SCRAM].Lvert[9][0].Z = Q_WindWake[SCRAM].VertT55.Z;

										
								Q_WindWake[SCRAM].Lvert[9][1].u = 1;
								Q_WindWake[SCRAM].Lvert[9][1].v = 0;
								Q_WindWake[SCRAM].Lvert[9][1].X = Q_WindWake[SCRAM].VertT6.X;
								Q_WindWake[SCRAM].Lvert[9][1].Y = Q_WindWake[SCRAM].VertT6.Y;
								Q_WindWake[SCRAM].Lvert[9][1].Z = Q_WindWake[SCRAM].VertT6.Z;

										
								Q_WindWake[SCRAM].Lvert[9][2].u = 1;
								Q_WindWake[SCRAM].Lvert[9][2].v = 1;
								Q_WindWake[SCRAM].Lvert[9][2].X = Q_WindWake[SCRAM].VertB6.X;
								Q_WindWake[SCRAM].Lvert[9][2].Y = Q_WindWake[SCRAM].VertB6.Y;
								Q_WindWake[SCRAM].Lvert[9][2].Z = Q_WindWake[SCRAM].VertB6.Z;


								Q_WindWake[SCRAM].Lvert[9][3].u = 0;
								Q_WindWake[SCRAM].Lvert[9][3].v = 1;
								Q_WindWake[SCRAM].Lvert[9][3].X = Q_WindWake[SCRAM].VertB55.X;
								Q_WindWake[SCRAM].Lvert[9][3].Y = Q_WindWake[SCRAM].VertB55.Y;
								Q_WindWake[SCRAM].Lvert[9][3].Z = Q_WindWake[SCRAM].VertB55.Z;


								Q_WindWake[SCRAM].Lvert[10][0].u = 0;
								Q_WindWake[SCRAM].Lvert[10][0].v = 0;
								Q_WindWake[SCRAM].Lvert[10][0].X = Q_WindWake[SCRAM].VertT6.X;
								Q_WindWake[SCRAM].Lvert[10][0].Y = Q_WindWake[SCRAM].VertT6.Y;
								Q_WindWake[SCRAM].Lvert[10][0].Z = Q_WindWake[SCRAM].VertT6.Z;

										
								Q_WindWake[SCRAM].Lvert[10][1].u = 1;
								Q_WindWake[SCRAM].Lvert[10][1].v = 0;
								Q_WindWake[SCRAM].Lvert[10][1].X = Q_WindWake[SCRAM].VertT65.X;
								Q_WindWake[SCRAM].Lvert[10][1].Y = Q_WindWake[SCRAM].VertT65.Y;
								Q_WindWake[SCRAM].Lvert[10][1].Z = Q_WindWake[SCRAM].VertT65.Z;

										
								Q_WindWake[SCRAM].Lvert[10][2].u = 1;
								Q_WindWake[SCRAM].Lvert[10][2].v = 1;
								Q_WindWake[SCRAM].Lvert[10][2].X = Q_WindWake[SCRAM].VertB65.X;
								Q_WindWake[SCRAM].Lvert[10][2].Y = Q_WindWake[SCRAM].VertB65.Y;
								Q_WindWake[SCRAM].Lvert[10][2].Z = Q_WindWake[SCRAM].VertB65.Z;


								Q_WindWake[SCRAM].Lvert[10][3].u = 0;
								Q_WindWake[SCRAM].Lvert[10][3].v = 1;
								Q_WindWake[SCRAM].Lvert[10][3].X = Q_WindWake[SCRAM].VertB6.X;
								Q_WindWake[SCRAM].Lvert[10][3].Y = Q_WindWake[SCRAM].VertB6.Y;
								Q_WindWake[SCRAM].Lvert[10][3].Z = Q_WindWake[SCRAM].VertB6.Z;


								Q_WindWake[SCRAM].Lvert[11][0].u = 0;
								Q_WindWake[SCRAM].Lvert[11][0].v = 0;
								Q_WindWake[SCRAM].Lvert[11][0].X = Q_WindWake[SCRAM].VertT65.X;
								Q_WindWake[SCRAM].Lvert[11][0].Y = Q_WindWake[SCRAM].VertT65.Y;
								Q_WindWake[SCRAM].Lvert[11][0].Z = Q_WindWake[SCRAM].VertT65.Z;

										
								Q_WindWake[SCRAM].Lvert[11][1].u = 1;
								Q_WindWake[SCRAM].Lvert[11][1].v = 0;
								Q_WindWake[SCRAM].Lvert[11][1].X = Q_WindWake[SCRAM].VertT7.X;
								Q_WindWake[SCRAM].Lvert[11][1].Y = Q_WindWake[SCRAM].VertT7.Y;
								Q_WindWake[SCRAM].Lvert[11][1].Z = Q_WindWake[SCRAM].VertT7.Z;

										
								Q_WindWake[SCRAM].Lvert[11][2].u = 1;
								Q_WindWake[SCRAM].Lvert[11][2].v = 1;
								Q_WindWake[SCRAM].Lvert[11][2].X = Q_WindWake[SCRAM].VertB7.X;
								Q_WindWake[SCRAM].Lvert[11][2].Y = Q_WindWake[SCRAM].VertB7.Y;
								Q_WindWake[SCRAM].Lvert[11][2].Z = Q_WindWake[SCRAM].VertB7.Z;


								Q_WindWake[SCRAM].Lvert[11][3].u = 0;
								Q_WindWake[SCRAM].Lvert[11][3].v = 1;
								Q_WindWake[SCRAM].Lvert[11][3].X = Q_WindWake[SCRAM].VertB65.X;
								Q_WindWake[SCRAM].Lvert[11][3].Y = Q_WindWake[SCRAM].VertB65.Y;
								Q_WindWake[SCRAM].Lvert[11][3].Z = Q_WindWake[SCRAM].VertB65.Z;


								Q_WindWake[SCRAM].Lvert[12][0].u = 0;
								Q_WindWake[SCRAM].Lvert[12][0].v = 0;
								Q_WindWake[SCRAM].Lvert[12][0].X = Q_WindWake[SCRAM].VertT7.X;
								Q_WindWake[SCRAM].Lvert[12][0].Y = Q_WindWake[SCRAM].VertT7.Y;
								Q_WindWake[SCRAM].Lvert[12][0].Z = Q_WindWake[SCRAM].VertT7.Z;

										
								Q_WindWake[SCRAM].Lvert[12][1].u = 1;
								Q_WindWake[SCRAM].Lvert[12][1].v = 0;
								Q_WindWake[SCRAM].Lvert[12][1].X = Q_WindWake[SCRAM].VertT75.X;
								Q_WindWake[SCRAM].Lvert[12][1].Y = Q_WindWake[SCRAM].VertT75.Y;
								Q_WindWake[SCRAM].Lvert[12][1].Z = Q_WindWake[SCRAM].VertT75.Z;

										
								Q_WindWake[SCRAM].Lvert[12][2].u = 1;
								Q_WindWake[SCRAM].Lvert[12][2].v = 1;
								Q_WindWake[SCRAM].Lvert[12][2].X = Q_WindWake[SCRAM].VertB75.X;
								Q_WindWake[SCRAM].Lvert[12][2].Y = Q_WindWake[SCRAM].VertB75.Y;
								Q_WindWake[SCRAM].Lvert[12][2].Z = Q_WindWake[SCRAM].VertB75.Z;


								Q_WindWake[SCRAM].Lvert[12][3].u = 0;
								Q_WindWake[SCRAM].Lvert[12][3].v = 1;
								Q_WindWake[SCRAM].Lvert[12][3].X = Q_WindWake[SCRAM].VertB7.X;
								Q_WindWake[SCRAM].Lvert[12][3].Y = Q_WindWake[SCRAM].VertB7.Y;
								Q_WindWake[SCRAM].Lvert[13][3].Z = Q_WindWake[SCRAM].VertB7.Z;


								Q_WindWake[SCRAM].Lvert[13][0].u = 0;
								Q_WindWake[SCRAM].Lvert[13][0].v = 0;
								Q_WindWake[SCRAM].Lvert[13][0].X = Q_WindWake[SCRAM].VertT75.X;
								Q_WindWake[SCRAM].Lvert[13][0].Y = Q_WindWake[SCRAM].VertT75.Y;
								Q_WindWake[SCRAM].Lvert[13][0].Z = Q_WindWake[SCRAM].VertT75.Z;

										
								Q_WindWake[SCRAM].Lvert[13][1].u = 1;
								Q_WindWake[SCRAM].Lvert[13][1].v = 0;
								Q_WindWake[SCRAM].Lvert[13][1].X = Q_WindWake[SCRAM].VertT8.X;
								Q_WindWake[SCRAM].Lvert[13][1].Y = Q_WindWake[SCRAM].VertT8.Y;
								Q_WindWake[SCRAM].Lvert[13][1].Z = Q_WindWake[SCRAM].VertT8.Z;

										
								Q_WindWake[SCRAM].Lvert[13][2].u = 1;
								Q_WindWake[SCRAM].Lvert[13][2].v = 1;
								Q_WindWake[SCRAM].Lvert[13][2].X = Q_WindWake[SCRAM].VertB8.X;
								Q_WindWake[SCRAM].Lvert[13][2].Y = Q_WindWake[SCRAM].VertB8.Y;
								Q_WindWake[SCRAM].Lvert[13][2].Z = Q_WindWake[SCRAM].VertB8.Z;


								Q_WindWake[SCRAM].Lvert[13][3].u = 0;
								Q_WindWake[SCRAM].Lvert[13][3].v = 1;
								Q_WindWake[SCRAM].Lvert[13][3].X = Q_WindWake[SCRAM].VertB75.X;
								Q_WindWake[SCRAM].Lvert[13][3].Y = Q_WindWake[SCRAM].VertB75.Y;
								Q_WindWake[SCRAM].Lvert[13][3].Z = Q_WindWake[SCRAM].VertB75.Z;


								Q_WindWake[SCRAM].Lvert[14][0].u = 0;
								Q_WindWake[SCRAM].Lvert[14][0].v = 0;
								Q_WindWake[SCRAM].Lvert[14][0].X = Q_WindWake[SCRAM].VertT8.X;
								Q_WindWake[SCRAM].Lvert[14][0].Y = Q_WindWake[SCRAM].VertT8.Y;
								Q_WindWake[SCRAM].Lvert[14][0].Z = Q_WindWake[SCRAM].VertT8.Z;

										
								Q_WindWake[SCRAM].Lvert[14][1].u = 1;
								Q_WindWake[SCRAM].Lvert[14][1].v = 0;
								Q_WindWake[SCRAM].Lvert[14][1].X = Q_WindWake[SCRAM].VertT85.X;
								Q_WindWake[SCRAM].Lvert[14][1].Y = Q_WindWake[SCRAM].VertT85.Y;
								Q_WindWake[SCRAM].Lvert[14][1].Z = Q_WindWake[SCRAM].VertT85.Z;


								Q_WindWake[SCRAM].Lvert[14][2].u = 1;
								Q_WindWake[SCRAM].Lvert[14][2].v = 1;
								Q_WindWake[SCRAM].Lvert[14][2].X = Q_WindWake[SCRAM].VertB85.X;
								Q_WindWake[SCRAM].Lvert[14][2].Y = Q_WindWake[SCRAM].VertB85.Y;
								Q_WindWake[SCRAM].Lvert[14][2].Z = Q_WindWake[SCRAM].VertB85.Z;


								Q_WindWake[SCRAM].Lvert[14][3].u = 0;
								Q_WindWake[SCRAM].Lvert[14][3].v = 1;
								Q_WindWake[SCRAM].Lvert[14][3].X = Q_WindWake[SCRAM].VertB8.X;
								Q_WindWake[SCRAM].Lvert[14][3].Y = Q_WindWake[SCRAM].VertB8.Y;
								Q_WindWake[SCRAM].Lvert[14][3].Z = Q_WindWake[SCRAM].VertB8.Z;


								Q_WindWake[SCRAM].Lvert[15][0].u = 0;
								Q_WindWake[SCRAM].Lvert[15][0].v = 0;
								Q_WindWake[SCRAM].Lvert[15][0].X = Q_WindWake[SCRAM].VertT85.X;
								Q_WindWake[SCRAM].Lvert[15][0].Y = Q_WindWake[SCRAM].VertT85.Y;
								Q_WindWake[SCRAM].Lvert[15][0].Z = Q_WindWake[SCRAM].VertT85.Z;


								Q_WindWake[SCRAM].Lvert[15][1].u = 1;
								Q_WindWake[SCRAM].Lvert[15][1].v = 0;
								Q_WindWake[SCRAM].Lvert[15][1].X = Q_WindWake[SCRAM].VertT1.X;
								Q_WindWake[SCRAM].Lvert[15][1].Y = Q_WindWake[SCRAM].VertT1.Y;
								Q_WindWake[SCRAM].Lvert[15][1].Z = Q_WindWake[SCRAM].VertT1.Z;


								Q_WindWake[SCRAM].Lvert[15][2].u = 1;
								Q_WindWake[SCRAM].Lvert[15][2].v = 1;
								Q_WindWake[SCRAM].Lvert[15][2].X = Q_WindWake[SCRAM].VertB1.X;
								Q_WindWake[SCRAM].Lvert[15][2].Y = Q_WindWake[SCRAM].VertB1.Y;
								Q_WindWake[SCRAM].Lvert[15][2].Z = Q_WindWake[SCRAM].VertB1.Z;


								Q_WindWake[SCRAM].Lvert[15][3].u = 0;
								Q_WindWake[SCRAM].Lvert[15][3].v = 1;
								Q_WindWake[SCRAM].Lvert[15][3].X = Q_WindWake[SCRAM].VertB85.X;
								Q_WindWake[SCRAM].Lvert[15][3].Y = Q_WindWake[SCRAM].VertB85.Y;
								Q_WindWake[SCRAM].Lvert[15][3].Z = Q_WindWake[SCRAM].VertB85.Z;


								if(Forge[aero].Q_TexTriEffect[SCRAM].Live == 1)
									{
									i = 0;
									while(i <= 15)
										{
										geWorld_AddPolyOnce(World, &Forge[aero].Q_TexTriEffect[SCRAM].Lvert[i][0], 4, fire[Forge[aero].Q_TexTriEffect[SCRAM].MaterialCNT], Forge[aero].Q_TexTriEffect[SCRAM].PolyType, Forge[aero].Q_TexTriEffect[SCRAM].RenderFlags, 1.0f);
										i++;
										}
									}

								} break;

							}


						}//END Live

					SCRAM--;
					}//END SCRAM

				}//END NomTriEffects
			}

		aero++;
		}//END AI loop



	//------******[  <RENDER PIN EFFECT MESHES>------[EFFECTS RENDERING COMPONENT]  ]******------

	if(NomPEFMesh > 0)
		{
		aero = 0;
		while(aero < NomPEFMesh)
			{
			if(Q_PinEffectMesh[aero].EffectLive == 1)
				{
				switch(Q_PinEffectMesh[aero].EffectType)
					{
					case 0:	//##### Carpet Single Face Effect
						{
						//##### Control Mesh Effects
						PEF_CONTROL_FaceRippleMesh(aero);

						//##### Single Face No 1
						helly=0;

						while(helly < Q_PinEffectMesh[aero].MaxNumY)
							{
							jet=0;
							while(jet < Q_PinEffectMesh[aero].MaxNumX)
								{
								//##### Active Cell
								//##### Material Count		TODO SET VALUES ELSEWHERE PROGRESSIVELY HERE
								//WATER
								//Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]++;
								//if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] > 136) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 124;

								Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]++;
								if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] < 82) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 82;
								if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] > 96) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 82;


								//########- Effect Progression		-Interesting Ideas with sliding alpha values
								//##### Decrease Alpha Value - Increase Colour
								/*Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] -= 4;
								if(Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] < 0)
									{
									Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] = 0;
									}*/

								//##### Alter Colour Values -
								/*Q_PinEffectMesh[aero].Green += 4;
								if(Q_PinEffectMesh[aero].Green > 255) Q_PinEffectMesh[aero].Green = 255;
								Q_PinEffectMesh[aero].Red += 4;
								if(Q_PinEffectMesh[aero].Red > 255) Q_PinEffectMesh[aero].Red = 255;*/


								//##### - ALPHA VALUES AND COLOUR  TODO at present individual tris around cell all the same
								a=0;
								while( a <= 3 )
									{
									b=0;
									while( b <= 2 )
										{
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].a = Q_PinEffectMesh[aero].CellAlpha[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].b = Q_PinEffectMesh[aero].CellBlue[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].g = Q_PinEffectMesh[aero].CellGreen[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].r = Q_PinEffectMesh[aero].CellRed[0][jet][helly];
										b++;
										}
									a++;
									}
						

								//##### - FIRST TRI
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].u = 0;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].v = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;

								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].u = 0.5;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].v = 0;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;

								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].u = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].v = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Z;


								//##### - SECOND TRI
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].u = 0;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].v = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Z;
										
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].u = 0.5;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].v = 0;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
										
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].u = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].v = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Z;


								//##### - THIRD TRI
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].u = 0;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].v = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Z;
										
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].u = 0.5;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].v = 0;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
										
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].u = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].v = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;


								//##### - FOURTH TRI
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].u = 0;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].v = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;
										
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].u = 0.5;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].v = 0;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
										
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].u = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].v = 1;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
								Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;


								if(Q_PinEffectMesh[aero].CellLive[0][jet][helly] == 1)
									{
									i = 0;
									while(i <= 3)
										{
										geWorld_AddPolyOnce(World, &Q_PinEffectMesh[aero].Lvert[0][jet][helly][i][0], 3, fire[Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]]/*Water[Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]]*/, Q_PinEffectMesh[aero].PolyType, Q_PinEffectMesh[aero].RenderFlags, 1.0f);
										i++;
										}
									}

								//Increment X  ->'jet'
								jet++;
								}

							//Increment Y  ->'helly'
							helly++;
							}

						} break;



					case 1:	//##### Ring PEF Mesh
						{

						//##### Control Mesh Effects
						PEF_CONTROL_RingRippleMesh(aero);

						//##### Single Face No 1
						helly=0;
						while(helly < Q_PinEffectMesh[aero].NoMLines)
							{
							jet=0;
							while(jet < Q_PinEffectMesh[aero].MaxNumX)
								{
								//##### Active Cell
								//##### Material Count		TODO SET VALUES ELSEWHERE PROGRESSIVELY HERE
								//WATER
								//Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]++;
								//if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] > 136) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 124;

								Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]++;
								if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] < 82) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 82;
								if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] > 96) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 82;


								//########- Effect Progression		-Interesting Ideas with sliding alpha values
								//##### Decrease Alpha Value - Increase Colour
								Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] -= 55;	//9
								if(Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] < 0)
									{
									Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] = 0;
									Q_PinEffectMesh[aero].CellLive[0][jet][helly] = 0;
									}

								//##### Alter Colour Values -
								/*Q_PinEffectMesh[aero].Green += 4;
								if(Q_PinEffectMesh[aero].Green > 255) Q_PinEffectMesh[aero].Green = 255;
								Q_PinEffectMesh[aero].Red += 4;
								if(Q_PinEffectMesh[aero].Red > 255) Q_PinEffectMesh[aero].Red = 255;*/


								//##### - ALPHA VALUES AND COLOUR  TODO at present individual tris around cell all the same
								a=0;
								while( a <= 3 )
									{
									b=0;
									while( b <= 2 )
										{
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].a = Q_PinEffectMesh[aero].CellAlpha[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].b = Q_PinEffectMesh[aero].CellBlue[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].g = Q_PinEffectMesh[aero].CellGreen[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].r = Q_PinEffectMesh[aero].CellRed[0][jet][helly];
										b++;
										}
									a++;
									}
						
								if(helly != Q_PinEffectMesh[aero].NoMLines - 1)
									{
									if(jet != Q_PinEffectMesh[aero].MaxNumX - 1)
										{
										//##### - FIRST TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Z;


										//##### - SECOND TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Z;


										//##### - THIRD TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;


										//##### - FOURTH TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;
										}
									else	//Wrap Ends Together
										{
										//##### - FIRST TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Z;


										//##### - SECOND TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Z;


										//##### - THIRD TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;


										//##### - FOURTH TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;
										}
									}


								if(Q_PinEffectMesh[aero].CellLive[0][jet][helly] == 1)
									{
									i = 0;
									while(i <= 3)
										{
										geWorld_AddPolyOnce(World, &Q_PinEffectMesh[aero].Lvert[0][jet][helly][i][0], 3, FlameSingle/*fire[Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]]/*Water[Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]]*/, Q_PinEffectMesh[aero].PolyType, Q_PinEffectMesh[aero].RenderFlags, 1.0f);
										i++;
										}
									}

								//Increment X  ->'jet'
								jet++;
								}

							//Increment Y  ->'helly'
							helly++;
							}

						} break;



					case 2:	//##### Spherical PEF Mesh
						{

						//##### Control Mesh Effects
						PEF_CONTROL_RingShieldSphere(aero);

						//##### Single Face No 1
						helly=0;
						while(helly < Q_PinEffectMesh[aero].NoMLines)
							{
							jet=0;
							while(jet < Q_PinEffectMesh[aero].MaxNumX)
								{
								//##### Active Cell
								//##### Material Count		TODO SET VALUES ELSEWHERE PROGRESSIVELY HERE
								//WATER
								//Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]++;
								//if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] > 136) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 124;

								Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]++;
								if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] < 124) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 124;
								if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] > 136) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 124;


								//########- Effect Progression		-Interesting Ideas with sliding alpha values
								//##### Decrease Alpha Value - Increase Colour
								/*Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] -= 55;	//9
								if(Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] < 0)
									{
									Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] = 0;
									Q_PinEffectMesh[aero].CellLive[0][jet][helly] = 0;
									}*/

								//##### Alter Colour Values -
								/*Q_PinEffectMesh[aero].Green += 4;
								if(Q_PinEffectMesh[aero].Green > 255) Q_PinEffectMesh[aero].Green = 255;
								Q_PinEffectMesh[aero].Red += 4;
								if(Q_PinEffectMesh[aero].Red > 255) Q_PinEffectMesh[aero].Red = 255;*/


								//##### - ALPHA VALUES AND COLOUR  TODO at present individual tris around cell all the same
								a=0;
								while( a <= 3 )
									{
									b=0;
									while( b <= 2 )
										{
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].a = 120;//Q_PinEffectMesh[aero].CellAlpha[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].b = Q_PinEffectMesh[aero].CellBlue[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].g = Q_PinEffectMesh[aero].CellGreen[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].r = Q_PinEffectMesh[aero].CellRed[0][jet][helly];
										b++;
										}
									a++;
									}
						
								if(helly != Q_PinEffectMesh[aero].NoMLines - 1)
									{
									if(jet != Q_PinEffectMesh[aero].MaxNumX - 1)
										{
										//##### - FIRST TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Z;


										//##### - SECOND TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Z;


										//##### - THIRD TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;


										//##### - FOURTH TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;
										}
									else	//Wrap Ends Together
										{
										//##### - FIRST TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Z;


										//##### - SECOND TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Z;


										//##### - THIRD TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;


										//##### - FOURTH TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;
										}
									}


								if(Q_PinEffectMesh[aero].CellLive[0][jet][helly] == 1)
									{
									i = 0;
									while(i <= 3)
										{
										geWorld_AddPolyOnce(World, &Q_PinEffectMesh[aero].Lvert[0][jet][helly][i][0], 3, Water[Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]], Q_PinEffectMesh[aero].PolyType, Q_PinEffectMesh[aero].RenderFlags, 1.0f);
										i++;
										}
									}

								//Increment X  ->'jet'
								jet++;
								}

							//Increment Y  ->'helly'
							helly++;
							}

						} break;



					case 3:	//##### Energy Wake
						{

						//##### Control Mesh Effects
						PEF_CONTROL_EnergyWake(aero);

						//##### Single Face No 1
						helly=0;
						while(helly < Q_PinEffectMesh[aero].NoMLines)
							{
							//##### Decrease Alpha Value - Increase Colour
							if(Q_PinEffectMesh[aero].LineReleased[0][helly] == 1)
								{
								Q_PinEffectMesh[aero].LineAlpha[0][helly] -= 0.4;
								if(Q_PinEffectMesh[aero].LineAlpha[0][helly] < 0) Q_PinEffectMesh[aero].LineAlpha[0][helly] = 0;
								}

							jet=0;
							while(jet < Q_PinEffectMesh[aero].MaxNumX)
								{
								//##### Active Cell
								//##### Material Count		TODO SET VALUES ELSEWHERE PROGRESSIVELY HERE
								//WATER
								//Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]++;
								//if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] > 136) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 124;

								Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]++;
								if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] < 82) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 124;
								if(Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] > 96) Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly] = 124;


								//########- Effect Progression		-Interesting Ideas with sliding alpha values
								//##### Alter Colour Values -
								if(Q_PinEffectMesh[aero].LineReleased[0][helly] == 1)
									{
									Q_PinEffectMesh[aero].CellGreen[0][jet][helly] -= 3;
									if(Q_PinEffectMesh[aero].CellGreen[0][jet][helly] < 0) Q_PinEffectMesh[aero].CellGreen[0][jet][helly] = 0;
									Q_PinEffectMesh[aero].CellBlue[0][jet][helly] -= 3;
									if(Q_PinEffectMesh[aero].CellBlue[0][jet][helly] < 0) Q_PinEffectMesh[aero].CellBlue[0][jet][helly] = 0;
									Q_PinEffectMesh[aero].CellRed[0][jet][helly] -= 3;
									if(Q_PinEffectMesh[aero].CellRed[0][jet][helly] < 0) Q_PinEffectMesh[aero].CellRed[0][jet][helly] = 0;
									Q_PinEffectMesh[aero].CellAlpha[0][jet][helly] = Q_PinEffectMesh[aero].LineAlpha[0][helly];
									}



								//##### - ALPHA VALUES AND COLOUR  TODO at present individual tris around cell all the same
								a=0;
								while( a <= 3 )
									{
									b=0;
									while( b <= 2 )
										{
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].a = Q_PinEffectMesh[aero].CellAlpha[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].b = Q_PinEffectMesh[aero].CellBlue[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].g = Q_PinEffectMesh[aero].CellGreen[0][jet][helly];
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][a][b].r = Q_PinEffectMesh[aero].CellRed[0][jet][helly];
										b++;
										}
									a++;
									}
						
								if(helly != Q_PinEffectMesh[aero].NoMLines - 1)
									{
									if(jet != Q_PinEffectMesh[aero].MaxNumX - 1)
										{
										//##### - FIRST TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Z;


										//##### - SECOND TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Z;


										//##### - THIRD TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet+1][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;


										//##### - FOURTH TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;
										}
									else	//Wrap Ends Together
										{
										//##### - FIRST TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;

										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][0][2].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Z;


										//##### - SECOND TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][0].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][1][2].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Z;


										//##### - THIRD TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].X = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Y = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][0].Z = Q_PinEffectMesh[aero].BaseVert[0][0][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][2][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;


										//##### - FOURTH TRI
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].u = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][0].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly+1].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].u = 0.5;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].v = 0;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].X = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Y = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][1].Z = Q_PinEffectMesh[aero].CellVert1[0][jet][helly].Z;
												
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].u = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].v = 1;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].X = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].X;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Y = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Y;
										Q_PinEffectMesh[aero].Lvert[0][jet][helly][3][2].Z = Q_PinEffectMesh[aero].BaseVert[0][jet][helly].Z;
										}
									}


								if(Q_PinEffectMesh[aero].CellLive[0][jet][helly] == 1)
									{
									i = 0;
									while(i <= 3)
										{
										geWorld_AddPolyOnce(World, &Q_PinEffectMesh[aero].Lvert[0][jet][helly][i][0], 3, fire[Q_PinEffectMesh[aero].CellMaterialCNT[0][jet][helly]], Q_PinEffectMesh[aero].PolyType, Q_PinEffectMesh[aero].RenderFlags, 1.0f);
										i++;
										}
									}

								//Increment X  ->'jet'
								jet++;
								}

							//Increment Y  ->'helly'
							helly++;
							}

						} break;

					//<-- Insert New Effect Types Here
					}

				}//END Live

			aero++;
			}//END aero

		}//END NomPEFMesh

	}//END WORLD EVENT ENGINE
