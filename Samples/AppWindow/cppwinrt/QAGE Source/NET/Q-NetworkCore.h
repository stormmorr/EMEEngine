//********************************************************
//********************************************************
//**	Q-NetworkCore.h									**
//**	Author	-Max Lawlor								**
//**													**
//**	Contain main networking code					**
//**								Quantum Angel		**
//**								Copyright 2006		**
//********************************************************
//********************************************************


void QNETWORKInit(int NetOption)
	{//############  - Network Initialisation Routines -  ############
	//### Converted Code

	////MessageBox(NULL,"Preparing Network Initialisation","ERROR",MB_OK);

	// Init the host struct
	if(NetOption == 1)
		{
		QHost.Mode = HOST_MODE_CLIENT;
		strcpy(&QHost.ClientName, "ClientMax");
		}

	if(NetOption == 2)
		{
		QHost.Mode = HOST_MODE_SERVER_CLIENT;
		strcpy(&QHost.ClientName, "MaxServer");
		}

	// Get the client name form the menu
	//strcpy(TempString, "Max Lawlor");
	
	// Get the Ip address from the menu...
	//strcpy(TempString, "195.37.36.0");
	strcpy(&QHost.IPAddress, "");


	////MessageBox(NULL,"SUCCESS Set Mode / Set Name / Set IP","ERROR",MB_OK);


	//=====================================================================================
	//	NetMgr_Create
	//=====================================================================================
	QHost.NMgr = GE_RAM_ALLOCATE_STRUCT(NetMgr);

	memset(QHost.NMgr, 0 , sizeof(NetMgr));

	// Setup local message buffers...
	QHost.NMgr->ClientToServerBuffer.Data = QHost.NMgr->ClientBuffer;
	QHost.NMgr->ClientToServerBuffer.Size = NETMGR_LOCAL_MSG_BUFFER_SIZE;
	QHost.NMgr->ClientToServerBuffer.Pos = 0;

	QHost.NMgr->ServerToClientBuffer.Data = QHost.NMgr->ServerBuffer;
	QHost.NMgr->ServerToClientBuffer.Size = NETMGR_LOCAL_MSG_BUFFER_SIZE;
	QHost.NMgr->ServerToClientBuffer.Pos = 0;


	////MessageBox(NULL,"SUCCESS Set Client and Server Buffers","ERROR",MB_OK);


	//WARNING EDIT GE_true GE_false WARNING WARNING
	QHost.NMgr->UseLocalBuffers = GE_false;

	if(!QHost.NMgr->UseLocalBuffers)
		{
		QHost.NMgr->CSNetMgr = geCSNetMgr_Create();

		if(!QHost.NMgr->CSNetMgr)
			{
			//MessageBox(NULL,"NetMgr_Create Could not create geCSNeMgr...\n","ERROR",MB_OK);
			_exit(-1);
			}
		}


	////MessageBox(NULL,"SUCCESS Create geCSNetMgr","ERROR",MB_OK);


	assert( geCSNetMgr_IsValid(QHost.NMgr->CSNetMgr)!=GE_false );


	////MessageBox(NULL,"geCSNetMgr Is Valid","ERROR",MB_OK);


	QHost.NMgr->SelfCheck1 = QHost.NMgr;
	QHost.NMgr->SelfCheck2 = QHost.NMgr;

	if (!QHost.NMgr)
		{
		//MessageBox(NULL,"NetMgr_Create:  Could not create NetMgr object.","ERROR",MB_OK);
		_exit(-1);
		}


	//MessageBox(NULL,"SUCCESS Self Checks","ERROR",MB_OK);


	// Copy name over
	strcpy(GEClient.Name, &QHost.ClientName);

	switch(QHost.Mode)
		{
		case HOST_MODE_SERVER_CLIENT:		// Create a game as server with local client
			{
			assert(QHost.NMgr->UseLocalBuffers == GE_false);

			//MessageBox(NULL,"Preparing to start session","ERROR",MB_OK);

			if (!geCSNetMgr_StartSession(QHost.NMgr->CSNetMgr, "QUANTUM ANGEL Virtual Studio", &QHost.ClientName))
				{
				MessageBox(NULL,"geCSNetMgr_StartSession Failed to Initialise...","ERROR",MB_OK);
				_exit(-1);
				}

			//MessageBox(NULL,"Preparing to Create Server","ERROR",MB_OK);
		
			//####----------------------------------------- Create Server
			QHost.Server = GE_RAM_ALLOCATE_STRUCT(Server_Server);

			assert(QHost.Server != NULL);
			
			if (!QHost.Server)
				{
				MessageBox(NULL,"NetMgr_Create Could not create Server...\n","ERROR",MB_OK);
				_exit(-1);
				}

			memset(QHost.Server, 0, sizeof(Server_Server));

			// These objects CANNOT change throughout this servers life!!!
			//QHost.Server->GMgr = GMgr;
			QHost.Server->NMgr = QHost.NMgr;
			QHost.Server->Client = QHost.Client;

			// Steal the ID we were assigned by netplay
			GEClient.Id = geCSNetMgr_GetOurID(QHost.NMgr->CSNetMgr);
			QHost.ID = GEClient.Id;

			//MessageBox(NULL,"SUCCESS SERVER CREATED","ERROR",MB_OK);
			} break;
		
		
		case HOST_MODE_CLIENT:				// Join as client
			{
			assert(QHost.NMgr->UseLocalBuffers == GE_false);

			if(!geCSNetMgr_FindSession(QHost.NMgr->CSNetMgr, &QHost.IPAddress, &SessionList, &NumSessions))
				{
				MessageBox(NULL,"NetMgr_JoinSession:  geCSNetMgr_FindSession failed...","ERROR",MB_OK);
				_exit(-1);
				}

			if(!NumSessions)
				{
				MessageBox(NULL,"NetMgr_JoinSession:  Could not find any sessions at address:","ERROR",MB_OK);
				_exit(-1);
				}

			//MessageBox(NULL,"Preparing to JOIN","ERROR",MB_OK);

			if(!geCSNetMgr_JoinSession(QHost.NMgr->CSNetMgr, &QHost.ClientName, &SessionList[0]))
				{
				MessageBox(NULL,"NetMgr_JoinSession:  Could not join a session at address:","ERROR",MB_OK);
				_exit(-1);
				}

			QHost.Server = NULL;

			// Steal the Id we were assigned by netplay
			GEClient.Id = geCSNetMgr_GetOurID(QHost.NMgr->CSNetMgr);
			QHost.ID = GEClient.Id;


			if(!QNETWORKSendPlayerCharacterData())
				{
				MessageBox(NULL,"SendPlayerCharacterData:  Failed...","ERROR",MB_OK);
				_exit(-1);
				}
			} break;

		}//END Switch

	}


/*geBoolean Host_Frame(Host_Host *Host, float Time)
	{
	
	if (Time < 0.001f)
		Time = 0.001f;
	
	if (Time > 0.1f)
		Time = 0.1f;
	
	//Host->Time += Time;

	Host->Engine = GameMgr_GetEngine(Host->GMgr);

	//
	// Do a server frame (if not in demo play mode)
	//
	if (Host->Server)
	{
		if (!Server_Frame(Host->Server, Host->GMgr, Time))
			return GE_false;
	}

	//
	//	Do a client frame
	//
	NetMgr_ResetClientBuffer(Host->NMgr);

	if (Host->Client)	// Client will be NULL for dedicated servers
	{
		if (!Client_Frame(Host->Client, Time))
			return GE_false;
	}

	NetMgr_ResetServerBuffer(Host->NMgr);

	return GE_true;
}*/


void QNETWORKHostFrame(void)
	{
	
	if (Time < 0.001f)
		Time = 0.001f;
	
	if (Time > 0.1f)
		Time = 0.1f;
	
	//Host->Time += Time;


	//
	// Do a server frame (if not in demo play mode)
	//

	while(1)		// Keep reading messages till none left...
		{
		//if (!QNETWORKReceiveClientMessage(QHost.NMgr->CSNetMgr, MsgType, ClientId, &Buffer->Size, &Buffer->Data))
		if (!QNETWORKReceiveClientMessage(QHost.NMgr, &MsgType, &ClientId, &QHost.NMgr->ClientToServerBuffer))
			{
			MessageBox(NULL,"ReadClientMessages:  geCSNetMgr_ReceiveFromClient failed","ERROR",MB_OK);
			_exit(-1);
			}

		if(MsgType == NET_MSG_NONE)
			break;

		assert(QHost.NMgr->ClientToServerBuffer.Size > 0);

		switch(MsgType)
			{
			case NET_MSG_CREATE_CLIENT:
				{
				pGEClient = (geCSNetMgr_NetClient*)QHost.NMgr->ClientToServerBuffer.Data;

				if(!QNETWORKClientConnect(QHost.Server, pGEClient))
					{
					MessageBox(NULL,"Could not add client...\n","ERROR",MB_OK);
					_exit(-1);
					}
				break;
				}

			//*******************************

			/*case NET_MSG_DESTROY_CLIENT:
				{

				pGEClient = (geCSNetMgr_NetClient*)Buffer->Data;

				Server_ClientDisconnect(QHost.Server, pGEClient->Id, pGEClient->Name);
				break;
				}*/

			case NET_MSG_USER:
				{
				if (!QNETWORKParseClientMessage(QHost.Server, ClientId, &QHost.NMgr->ClientToServerBuffer, Time))
					{ MessageBox(NULL,"ReadClientMessages:  ParseClientMessage failed","ERROR",MB_OK); }
				break;
				}

			case NET_MSG_HOST:
				{
				break;
				}

			/*case NET_MSG_SESSIONLOST:
				{
				GenVS_Error("ReadClientMessages:  Session was lost.\n");
				}*/

			default:
				{
				//MessageBox(NULL,"Unknown Message (Receive client Messages)","ERROR",MB_OK);

				//### Disconnect Client
				//Server_ClientDisconnect(QHost.Server, ClientId);	//EDIT*************************************************************
				}
				break;
			}
		}



	//########  --- SEND WORLD TO ALL NET PLAYERS ---  ########

	trans=0;
	while(trans < _->NETNomNetplayer)
		{
		if(Q_Netplayer->Netplayer[trans].Live == 1 && Q_Netplayer->Netplayer[trans].Spawned == 2)
			{
			if(!QNETWORKSendWorldToClient(Q_Netplayer->Netplayer[trans].ID, Time) && Q_Netplayer->Netplayer[trans].Activated > 1)
				{
				//MessageBox(NULL,"QNETWORKSendWorldToClient Failed...\n","ERROR",MB_OK);

				Server_ClientDisconnect(QHost.Server, Q_Netplayer->Netplayer[trans].ID);
				}

			//#### Conditionally Update Q_Netplayer->Netplayer CharDATA
			if(Q_Netplayer->Netplayer[trans].UpdateCHAR == 1 || Q_Netplayer->Netplayer[trans].UpdateCHAR == 2)
				{
				QNETWORKSendUpdateCharacterData(Q_Netplayer->Netplayer[trans].ID, Time);
				}

			if(Q_Netplayer->Netplayer[trans].UpdateCHAR == 3)
				{
				QNETWORKSendUpdateCharacterDataALL(Q_Netplayer->Netplayer[trans].ID, Time);
				}

			if(Q_Netplayer->Netplayer[trans].UpdateCHAR == 5)
				{
				Q_Netplayer->Netplayer[trans].UpdateCHAR = 0;

				if(!QNETWORKSendServerCharacterDataUPDATE(Q_Netplayer->Netplayer[trans].ID, Time))
					{ MessageBox(NULL,"QNETWORKSendServerCharacterDataUPDATE Failed...\n","ERROR",MB_OK); }
				}
			}
		else
			{
			if(Q_Netplayer->Netplayer[trans].Live == 1 && Q_Netplayer->Netplayer[trans].Spawned == 1 && Q_Netplayer->Netplayer[trans].Activated > 0)
				{
				Q_Netplayer->Netplayer[trans].Spawned = 2;

				if(!QNETWORKSendServerCharacterData(Q_Netplayer->Netplayer[trans].ID, Time))
					{ MessageBox(NULL,"QNETWORKSendServerCharacterDataToClient Failed...\n","ERROR",MB_OK); }
				}
			}
		trans++;
		}


	//RESET BUFFERS
	//QHost.NMgr->ClientToServerBuffer.Pos = 0;
	}



//=====================================================================================
//	Server_ClientConnect
//=====================================================================================
geBoolean QNETWORKClientConnect(Server_Server *Server, const geCSNetMgr_NetClient *Client)
	{
	int32			i;
	Buffer_Data		Buffer;
	char			Data[128];
	Server_Client	*SClient;

	SClient = Server->Clients;

	for (i=0; i< NETMGR_MAX_CLIENTS; i++, SClient++)
	{
		if (!SClient->Active)			// Look for a non active client slot
			break;
	}
	
	if (i >= NETMGR_MAX_CLIENTS)
		return false;
	
	memset(SClient, 0, sizeof(Server_Client));
	
	strcpy(SClient->Name, Client->Name);
	SClient->NetID = Client->Id;

	SClient->Active = GE_true;
	
	// Send version to client FIRST thing
	Buffer_Set(&Buffer, Data, 128);
	Buffer_FillByte(&Buffer, NETMGR_MSG_VERSION);
	Buffer_FillLong(&Buffer, NETMGR_VERSION_MAJOR);
	Buffer_FillLong(&Buffer, NETMGR_VERSION_MINOR);

	if (!QNETWORKSendClientMessage(Server->NMgr, SClient->NetID, &Buffer, GE_true))
	{
		//Server_ClientDisconnect(Server, SClient->NetID, SClient->Name);
		return GE_true;
	}

	// Let the client know that it is currently connecting
	QNETWORKChangeClientState(Server, SClient, NetState_Connecting);

	// Make the client legit, create it's player, etc...
	//Server_ValidateClient(Server, SClient);

	if (!SClient->Active)		// Client was dicconected...
		return GE_true;

	// Send this client the startupdata for everything at it's current state
	/*if (!Server_SendClientStartupData(Server, SClient))
	{
		Server_ClientDisconnect(Server, SClient->NetID, SClient->Name);
		
		GenVS_Error("Server_ClientConnect:  Server_SendClientStartupData failed.\n");
		return GE_false;
	}*/

	//if(!QNETWORKSendServerCharacterData(SClient->NetID, Time))
	//	{ MessageBox(NULL,"QNETWORKSendServerCharacterDataToClient Failed...\n","ERROR",MB_OK); }


	return GE_true;
}


geBoolean QNETWORKChangeClientState(Server_Server *Server, Server_Client *Client, NetMgr_NetState NetState)
{
	Buffer_Data			Buffer;
	char				Data[128];
	geCSNetMgr_NetID	ClientNID;

	assert(Server);
	assert(Client);

	Buffer_Set(&Buffer, Data, 128);

	Buffer_FillByte(&Buffer, NETMGR_MSG_NET_STATE_CHANGE);
	Buffer_FillSLong(&Buffer, NetState);


	if (!geCSNetMgr_SendToClient(Server->NMgr->CSNetMgr, Client->NetID, GE_true, Buffer.Data, Buffer.Pos))
		{
		MessageBox(NULL,"Server_ChangeClientState:  NetMgr_SendClientMessage failed.\n","ERROR",MB_OK);
		_exit(-1);
		}

	Client->NetState = NetState;
	Client->NetStateConfirmed[NetState] = GE_false;


	ClientNID = geCSNetMgr_GetOurID(QHost.NMgr->CSNetMgr);


	if(Client->NetID != ClientNID)
		{
		Q_Netplayer->Netplayer[_->NETNomNetplayer].ID = Client->NetID;
		Q_Netplayer->Netplayer[_->NETNomNetplayer].Spawned = 0;
		Q_Netplayer->Netplayer[_->NETNomNetplayer].SpawnREADY = 0;
		Q_Netplayer->Netplayer[_->NETNomNetplayer].Live = 1;

		_->NETNomNetplayer++;
		}


	return GE_true;
}


//=====================================================================================
//	QNETWORK_ReceiveClientMessage
//=====================================================================================
geBoolean QNETWORKReceiveClientMessage(NetMgr *NMgr, geCSNetMgr_NetMsgType *MsgType, geCSNetMgr_NetID *ClientID, Buffer_Data *Buffer)
{
	if(!geCSNetMgr_ReceiveFromClient(NMgr->CSNetMgr, MsgType, ClientID, &Buffer->Size, &Buffer->Data))
		return GE_false;

	return GE_true;		// Got a message for'em
}


//=====================================================================================
//	QNETWORK_ReceiveServerMessage
//=====================================================================================
geBoolean QNETWORKReceiveServerMessage(NetMgr *NMgr, geCSNetMgr_NetMsgType *Type, Buffer_Data *Buffer)
{
	assert(NetMgr_IsValid(NMgr));

	// Use real message system if in real network mode
	if (!geCSNetMgr_ReceiveFromServer(NMgr->CSNetMgr, Type, &Buffer->Size, &Buffer->Data))
		return GE_false;

	return GE_true;
}


//===========================================================================
//	NetMgr_SendServerMessage
//	Send a message to the server
//===========================================================================
geBoolean QNETWORKSendServerMessage(NetMgr *NMgr, Buffer_Data *Buffer, geBoolean G)
{
	//assert(NetMgr_IsValid(NMgr));

	if (!geCSNetMgr_SendToServer(NMgr->CSNetMgr, G, Buffer->Data, Buffer->Pos))
		return GE_false;

	return GE_true;
}


//=====================================================================================
//	QNETWORKSendClientMessage
//=====================================================================================

geBoolean QNETWORKSendClientMessage(NetMgr *NMgr, geCSNetMgr_NetID NetID, Buffer_Data *Buffer, geBoolean G)
{
	//assert(NetMgr_IsValid(NMgr));
    
	if (NetID == NETMGR_SPECIAL_BOT_NETID)
		return GE_true;

	/*if (NMgr->UseLocalBuffers)
	{
		if (!Buffer_FillBuffer(&NMgr->ServerToClientBuffer, Buffer))
			return GE_false;
	}
	else
	{*/
		if (!geCSNetMgr_SendToClient(NMgr->CSNetMgr, NetID, G, Buffer->Data, Buffer->Pos))
			return GE_false;
	//}

	return GE_true;
}


//=====================================================================================
//	ParseClientMessage
//=====================================================================================
static geBoolean QNETWORKParseClientMessage(Server_Server *Server, geCSNetMgr_NetID ClientID, Buffer_Data *Buffer, float Time)
{
	uint8			Type;
	Server_Client	*Client;

	Client = QNETWORKFindClient(Server, ClientID);

	//MessageBox(NULL,"Server_ParseClientMessage ACTIVE","ERROR",MB_OK);

	if (!Client)
	{
		MessageBox(NULL,"Server_ParseClientMessage","ERROR",MB_OK);
		return GE_true;		// Ignore??
	}

	//if (!Client->Player)
	//	return GE_true;			// The client spawn function has not beed called yet in the game code...

	Buffer->Pos = 0;

	// Keep reading till end of buffer
	while (Buffer->Pos < Buffer->Size)
	{
		//geVec3d	Angles;

		Buffer_GetByte(Buffer, &Type);

		switch(Type)
		{
			case NETMGR_MSG_CLIENT_CHARACTER_DATA:
				{
					QNETWORKParseClientCharData(Server, Buffer, Client, Time);
					break;
				}

			case NETMGR_MSG_CLIENT_ACTIVATION:
				{
					QNETWORKReceiveClientActivation(Server, Buffer, Client, Time);
					break;
				}

			case NETMGR_MSG_CLIENT_MOVE:
				{
					QNETWORKParseClientMove(Server, Buffer, Client, Time);
					break;
				}

			case NETMGR_MSG_CLIENT_CONFIRM:
				{
					NetMgr_NetState		NetState;

					Buffer_GetSLong(Buffer, &NetState);

					// This NetState has been confirmed
					Client->NetStateConfirmed[NetState] = GE_true;

					break;
				}

			default:
				{ MessageBox(NULL,"Server_ParseClientMessage:  Invalid msg type.\n","ERROR",MB_OK); }
		}
	}

	return GE_true;
}


//=====================================================================================
//	FindClient
//=====================================================================================
static Server_Client *QNETWORKFindClient(Server_Server *Server, geCSNetMgr_NetID ClientID)
{
	int32			i;
	Server_Client	*Client;

	Client = Server->Clients;

	for (i=0; i< NETMGR_MAX_CLIENTS; i++, Client++)
	{
		if (!Client->Active)
			continue;

		if (Client->NetID == ClientID)
			return Client;
	}

	return NULL;
}


//=====================================================================================
//	Client_Frame
//	Sends movement for this machine
//	Renders the world
//=====================================================================================
geBoolean QNETWORKClientFrame(Client_Client *Client, float Time)
{
	//assert(Client_IsValid(Client) == GE_true);

	//Client->Time += Time;						// Update client time

	// Read and process msg's from the server
	if (!QNETWORKReadServerMessages(Client, Time))
		{ MessageBox(NULL,"Client_Frame:  ReadServerMessages failed.\n","ERROR",MB_OK); }

	//if (Client->Demo.Mode != CLIENT_DEMO_PLAY)
	//{
		// If the world is loaded and we have the go from server, start sending move cmd's
		//if (Client->NetState == NetState_WorldActive)
		//{

	
		if (!QNETWORKClientSendMove2(Client, Time))			// Send movement commands
			{ MessageBox(NULL,"Client_Frame:  Client_SendMove failed.\n","ERROR",MB_OK); }


	return GE_true;
	//return GE_false;
}


geBoolean QNETWORKClientHALFFrame(Client_Client *Client, float Time)
{
	//assert(Client_IsValid(Client) == GE_true);

	//Client->Time += Time;						// Update client time

	// Read and process msg's from the server
	//if (!QNETWORKReadServerMessages(Client, Time))
	//	{ MessageBox(NULL,"Client_Frame:  ReadServerMessages failed.\n","ERROR",MB_OK); }

	//if (Client->Demo.Mode != CLIENT_DEMO_PLAY)
	//{
		// If the world is loaded and we have the go from server, start sending move cmd's
		//if (Client->NetState == NetState_WorldActive)
		//{

	
		//if (!QNETWORKClientSendMove2(Client, Time))			// Send movement commands
		//	{ MessageBox(NULL,"Client_Frame:  Client_SendMove failed.\n","ERROR",MB_OK); }


	return GE_true;
	//return GE_false;
}


//===========================================================================
//	ReadServerMessages
//	Read ALL mesages from server
//===========================================================================
static geBoolean QNETWORKReadServerMessages(Client_Client *Client, float Time)
{
	uint8			Type;
	//Buffer_Data		Buffer;

	//assert(Client_IsValid(Client) == GE_true);

	//Client->ServerPingBack = -1.0f;		// Reset ping back variable

	// Keep on reading till there is no more messages...
	// We have to process every message just in case they are critical ones
	while (QNETWORKClientReadServerMessages(Client, &QHost.NMgr->ServerToClientBuffer))
	{
		//assert(Buffer.Size < NETMGR_LOCAL_MSG_BUFFER_SIZE);
		//assert(Buffer.Size >= 0);

		TotalMsgBytes += QHost.NMgr->ServerToClientBuffer.Size;

		// Keep reading till end of buffer
		while (QHost.NMgr->ServerToClientBuffer.Pos < QHost.NMgr->ServerToClientBuffer.Size)
		{
			// Get the type of message...
			Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Type);

			switch(Type)
			{
				case NETMGR_MSG_VERSION:
				{
					uint32		VersionMajor, VersionMinor;

					Buffer_GetLong(&QHost.NMgr->ServerToClientBuffer, &VersionMajor);
					Buffer_GetLong(&QHost.NMgr->ServerToClientBuffer, &VersionMinor);

					//{ MessageBox(NULL,"RECIEVED VERSION INFORMATION","ERROR",MB_OK); }

					/*if (VersionMajor != NETMGR_VERSION_MAJOR || VersionMinor != NETMGR_VERSION_MINOR)
						GenVS_Error("Wrong Server Version:  %i.%i", VersionMajor, VersionMinor);*/

					break;
				}

				case NETMGR_MSG_TIME:
				{
					Client->TempTime = 0.0f;
					Client->OldNetTime = Client->NetTime;
					Buffer_GetFloat(&QHost.NMgr->ServerToClientBuffer, &Client->NetTime);

					if (Client->NetTime >= Client->OldNetTime)
						Client->NetTimeGood = GE_true;
					else
						Client->NetTimeGood = GE_false;
					
					Client->ServerPingBack = Client->NetTime;		// So server can calc ping times

					Buffer_GetFloat(&QHost.NMgr->ServerToClientBuffer, &Client->Ping);

					break;
				}


				case NETMGR_MSG_UPDATE_CLIENT_WORLD:
					{

					QNETWORKUpdateClientWorld(&QHost.NMgr->ServerToClientBuffer, Time);
				
					} break;


				case NETMGR_MSG_SERVER_CHARACTER_DATA:
					{

					QNETWORKUpdateClientCharData(&QHost.NMgr->ServerToClientBuffer, Time);
				
					} break;


				case NETMGR_MSG_SERVER_CHARACTER_DATA_UPD:
					{

					QNETWORKUpdateClientCharDataUPDATE(&QHost.NMgr->ServerToClientBuffer, Time);
				
					} break;


				case NETMGR_MSG_UPDATE_CHARACTER_DATA:
					{

					QNETWORKReceiveUpdateCharData(&QHost.NMgr->ServerToClientBuffer, Time);
				
					} break;


				case NETMGR_MSG_UPDATE_CHARACTER_DATA_ALL:
					{

					QNETWORKReceiveUpdateCharDataALL(&QHost.NMgr->ServerToClientBuffer, Time);
				
					} break;


				case NETMGR_MSG_CLIENT_ACTOR_REF:
					{

					QNETWORKReceiveClientActorRef(&QHost.NMgr->ServerToClientBuffer, Time);

					} break;


				case NETMGR_MSG_DISCONNECT_CLIENT:
					{

					QNETWORKReceiveDisconnectClient(&QHost.NMgr->ServerToClientBuffer, Time);

					} break;
	
				case NETMGR_MSG_PLAYER_DATA:
				{
					/*if (Client->NetState != NetState_WorldActive)
						GenVS_Error("ReadServerMessages:  Client->NetState != NetState_WorldActive\n");

					// If we are in the middle of a world change, or the net time is bad, do a fake update
					if (!Client->NetTimeGood || Client->NetState != NetState_WorldActive)
						ParsePlayerDataLocally(Client, &QHost.NMgr->ServerToClientBuffer, GE_true);
					else
						ParsePlayerDataLocally(Client, &QHost.NMgr->ServerToClientBuffer, GE_false);

					break;*/
				}

				case NETMGR_MSG_NEW_WORLD_PLAYER_DATA:
				{
					/*if (Client->NetState != NetState_WorldChange)
						GenVS_Error("ReadServerMessages:  Client->NetState != NetState_WorldChange\n");

					ParsePlayerDataLocally(Client, &QHost.NMgr->ServerToClientBuffer, GE_false);
					break;*/
				}

				case NETMGR_MSG_VIEW_PLAYER:
				{
					/*uint16		Player;
					//GPlayer		*pPlayer;
					int32		OldViewPlayer;

					Buffer_GetShort(&QHost.NMgr->ServerToClientBuffer, &Player);

					assert(Player != 0);	// For debugging, it could be possible, but not likely...
											// Usually the view player will the client...

					OldViewPlayer = Client->ViewPlayer;

					Client->ViewPlayer = (int32)Player;
					
					if (OldViewPlayer != -1)
					{
						pPlayer = &Client->Players[OldViewPlayer];
						
						if (pplayer[g_Player]->Actor)
						{
							pplayer[g_Player]->OldViewIndex2 = 0xffff;
							CheckClientPlayerChanges(Client, pPlayer, GE_false);
						}
					}

					// Force it to rewcreate the actor that represents this player (kind of a hack)
					pPlayer = &Client->Players[Player];
					
					if (pplayer[g_Player]->Actor)
					{
						pplayer[g_Player]->OldViewIndex2 = 0xffff;
						CheckClientPlayerChanges(Client, pPlayer, GE_false);
					}

					//Console_Printf(GameMgr_GetConsole(Client->GMgr), "View Player assigned by server: %i\n", Player);*/
					break;
				}

				case NETMGR_MSG_SET_WORLD:
				{
					/*char		Name[256];

					assert( Client->NetState == NetState_WorldChange);		// The world should be in the middle of a change to get this message

					Buffer_GetString(&QHost.NMgr->ServerToClientBuffer, Name);

					assert(Name[0]);

					if (!Name[0])
						GenVS_Error("ReadServerMessages:  No World Name!\n");

					//if (Client->Mode == ClientMode_Dumb)
					//	break;	// World allready loaded if server on same machine 

					Client_FreeResourcesForNewWorld(Client);
					Client_NewWorldDefaults(Client);

					/*if (!GameMgr_SetWorld(GMgr, Name))
						GenVS_Error("ReadServerMessages:  GameMgr_SetWorld failed.\n");*/
					break;
				}

				case NETMGR_MSG_ACTOR_INDEX:
				{
					int32		ActorIndex;
					char		ActorName[20];
					
					Buffer_GetSLong(&QHost.NMgr->ServerToClientBuffer, &ActorIndex);
					Buffer_GetString(&QHost.NMgr->ServerToClientBuffer, ActorName);

					//if (Client->Mode == ClientMode_Dumb)
					//	break;			// Server already issued the load, just ignore
					
					/*if (!GameMgr_SetActorIndex(GMgr, ActorIndex, ActorName))
						GenVS_Error("ReadServerMessages:  GameMgr_SetActorIndex failed.\n");*/
	
					break;
				}

				case NETMGR_MSG_MOTION_INDEX:
				{
					/*GameMgr_MotionIndex		MotionIndex;
					char					MotionName[GAMEMGR_MAX_MOTION_NAME];
					
					Buffer_GetSLong(&QHost.NMgr->ServerToClientBuffer, &MotionIndex);
					Buffer_GetString(&QHost.NMgr->ServerToClientBuffer, MotionName);

					if (Client->Mode == ClientMode_Dumb)
						break;			// Server already issued the load, just ignore
					
					if (!GameMgr_SetMotionIndexDef(Client->GMgr, MotionIndex, MotionName))
						GenVS_Error("ReadServerMessages:  GameMgr_SetMotionIndexDef failed.\n");*/

					break;
				}

				case NETMGR_MSG_BONE_INDEX:
				{
					/*int32					BoneIndex;
					char					BoneName[GAMEMGR_MAX_BONE_NAME];
					
					Buffer_GetSLong(&QHost.NMgr->ServerToClientBuffer, &BoneIndex);
					Buffer_GetString(&QHost.NMgr->ServerToClientBuffer, BoneName);

					if (Client->Mode == ClientMode_Dumb)
						break;			// Server already issued the load, just ignore
					
					if (!GameMgr_SetBoneIndex(Client->GMgr, BoneIndex, BoneName))
						GenVS_Error("ReadServerMessages:  GameMgr_SetBoneIndex failed.\n");

					break;*/
				}

				case NETMGR_MSG_TEXTURE_INDEX:
				{
					/*int32		Index;
					char		FileName[256];
					char		AFileName[256];

					assert(Client->NetState == NetState_WorldChange);

					Buffer_GetSLong(&QHost.NMgr->ServerToClientBuffer, &Index);
					Buffer_GetString(&QHost.NMgr->ServerToClientBuffer, FileName);
					Buffer_GetString(&QHost.NMgr->ServerToClientBuffer, AFileName);
					
					if (Client->Mode == ClientMode_Dumb)
						break;			// Server already issued the load, just ignore

					if (!GameMgr_SetTextureIndex(Client->GMgr, Index, FileName, AFileName))
						GenVS_Error("ReadServerMessages:  GameMgr_SetTextureIndex failed.\n");*/

					break;
				}

				case NETMGR_MSG_SOUND_INDEX:
				{
					/*int32		Index;
					char		FileName[GAMEMGR_MAX_FILENAME];

					Buffer_GetSLong(&QHost.NMgr->ServerToClientBuffer, &Index);
					Buffer_GetString(&QHost.NMgr->ServerToClientBuffer, FileName);
					
					if (Client->Mode == ClientMode_Dumb)
						break;			// Server already issued the load, just ignore

					if (!GameMgr_SetSoundIndex(Client->GMgr, Index, FileName))
						GenVS_Error("ReadServerMessages:  GameMgr_SetSoundIndex failed.\n");*/

					break;
				}

				case NETMGR_MSG_CD_TRACK:
				{
					uint8	Track, Smin, Ssec, Emin, Esec;

					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Track);
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Smin);
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Ssec);
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Emin);
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Esec);

					Track = 1;
					Smin = 0;
					Ssec = 0;
					Emin = 2;
					Esec = 42;

					//PlayCDTrack(GameMgr_GetCdID(Client->GMgr), 0, Track, Smin, Ssec, Emin, Esec);
					break;
				}
				
				case NETMGR_MSG_PLAY_SOUND_INDEX:
				{
					/*uint16				SoundIndex;
					geVec3d				Pos;
					geWorld				*World;
					GameMgr_SoundIndex	*pSoundIndex;
					geSound_System		*SoundSys;

					Buffer_GetShort(&QHost.NMgr->ServerToClientBuffer, &SoundIndex);
					Buffer_GetPos(&QHost.NMgr->ServerToClientBuffer, &Pos);
					
					World = GameMgr_GetWorld(Client->GMgr);

					if (!World)
						break;

					SoundSys = GameMgr_GetSoundSystem(Client->GMgr);
					//assert(SoundSys);

					if (SoundSys)
					{
						pSoundIndex = GameMgr_GetSoundIndex(Client->GMgr, SoundIndex);

						if (pSoundIndex->SoundDef)
						{
							float	Vol, Pan, Freq;

							geSound3D_GetConfig(World, &Client->ViewXForm, &Pos, 500.0f, 2.0f, &Vol, &Pan, &Freq);
							geSound_PlaySoundDef(SoundSys, pSoundIndex->SoundDef, Vol, Pan, Freq, GE_false);
						}
					}*/
					
					break;
				}

				case NETMGR_MSG_CLIENT_INDEX:
				{
					/*uint8		ClientIndex;
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &ClientIndex);
					
					if (ClientIndex >= NETMGR_MAX_CLIENTS)
						GenVS_Error("ReadServerMessages:  Bad client index number.\n");
					
					Client->ClientIndex = (int32)ClientIndex;

					break;*/
				}

				case NETMGR_MSG_CLIENT_ACTIVE:
				{
					/*uint8		ClientIndex, Active;
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &ClientIndex);
					
					if (ClientIndex >= NETMGR_MAX_CLIENTS)
						GenVS_Error("ReadServerMessages:  Bad client index number.\n");
					
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Active);

					Client->ClientInfo[ClientIndex].Active = (geBoolean)Active;*/
					break;
				}

				case NETMGR_MSG_CLIENT_NAME:
				{
					/*uint8		ClientIndex;
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &ClientIndex);
					
					if (ClientIndex >= NETMGR_MAX_CLIENTS)
						GenVS_Error("ReadServerMessages:  Bad client index number.\n");
					
					Buffer_GetString(&QHost.NMgr->ServerToClientBuffer, Client->ClientInfo[ClientIndex].Name);*/
					break;
				}

				case NETMGR_MSG_CLIENT_SCORE:
				{
					/*uint8		ClientIndex;
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &ClientIndex);
					
					if (ClientIndex >= NETMGR_MAX_CLIENTS)
						GenVS_Error("ReadServerMessages:  Bad client index number.\n");
					
					Buffer_GetSLong(&QHost.NMgr->ServerToClientBuffer, &Client->ClientInfo[ClientIndex].Score);*/
					break;
				}

				case NETMGR_MSG_CLIENT_HEALTH:
				{
					/*uint8		ClientIndex;
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &ClientIndex);
					
					if (ClientIndex >= NETMGR_MAX_CLIENTS)
						GenVS_Error("ReadServerMessages:  Bad client index number.\n");
					
					Buffer_GetSLong(&QHost.NMgr->ServerToClientBuffer, &Client->ClientInfo[ClientIndex].Health);*/
					break;
				}

				case NETMGR_MSG_CLIENT_INVENTORY:
				{
					/*uint8		ClientIndex, Slot;
					uint16		Val;
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &ClientIndex);
					
					if (ClientIndex >= NETMGR_MAX_CLIENTS)
						GenVS_Error("ReadServerMessages:  Bad client index number.\n");
					
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Slot);
					Buffer_GetShort(&QHost.NMgr->ServerToClientBuffer, &Val);
					Client->Inventory[Slot] = Val;
					
					if (Client->ClientPlayer != -1)
					{
						GPlayer		*Player;
						int32		Ammo;
						geBoolean	HasItem;

						Player = &Client->Players[Client->ClientPlayer];

						Ammo = Client->Inventory[Slot];

						HasItem = (Val & (1<<15))>>15;
						Val &= 0xff;

						player[g_Player]->Inventory[Slot] = Val;
						player[g_Player]->InventoryHas[Slot] = HasItem;
					}*/
				
					break;
				}
				
				case NETMGR_MSG_CLIENT_WEAPON:
				{
					/*uint8		ClientIndex;

					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &ClientIndex);
					
					if (ClientIndex >= NETMGR_MAX_CLIENTS)
						GenVS_Error("ReadServerMessages:  Bad client index number.\n");

					Buffer_GetShort(&QHost.NMgr->ServerToClientBuffer, &Client->CurrentWeapon);*/
					break;
				}

				case NETMGR_MSG_SPAWN_FX:
				{
					/*uint8			Type, Sound;
					geVec3d			Pos;
					geWorld			*World;
					geSound_System	*SoundSys;
					GameMgr_SoundIndex	*pSoundIndex;

					Buffer_GetPos(&QHost.NMgr->ServerToClientBuffer, &Pos);
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Type);
					Buffer_GetByte(&QHost.NMgr->ServerToClientBuffer, &Sound);

					World = GameMgr_GetWorld(Client->GMgr);
					if (!World)
						break;

					if (!Fx_SpawnFx(GameMgr_GetFxSystem(Client->GMgr), &Pos, Type))
						GenVS_Error("[CLIENT] ReadServerMessages:  Could not spawn fx:  %i.\n", Type);

					if (Sound == 255)
						break;

					SoundSys = GameMgr_GetSoundSystem(Client->GMgr);

					if (SoundSys)
					{
						pSoundIndex = GameMgr_GetSoundIndex(Client->GMgr, Sound);

						if (pSoundIndex->SoundDef)
						{
							float	Vol, Pan, Freq;

							assert(pSoundIndex->Active == GE_true);

							geSound3D_GetConfig(World, &Client->ViewXForm, &Pos, 500.0f, 2.0f, &Vol, &Pan, &Freq);
								geSound_PlaySoundDef(SoundSys, pSoundIndex->SoundDef, Vol, Pan, Freq, GE_false);
						}
					}*/

					break;
				}


				case NETMGR_MSG_HEADER_PRINTF:
				{
					/*char	Str[256];

					Buffer_GetString(&QHost.NMgr->ServerToClientBuffer, Str);

					Console_HeaderPrintf(GameMgr_GetConsole(Client->GMgr), Str);*/

					break;
				}

				case NETMGR_MSG_CLIENT_PLAYER_INDEX:
				{
					/*int32		PlayerIndex;

					Buffer_GetSLong(&QHost.NMgr->ServerToClientBuffer, &PlayerIndex);

					SetClientProxyPlayer(Client, PlayerIndex);*/
					break;
				}

				case NETMGR_MSG_NET_STATE_CHANGE:
				{
					/*NetMgr_NetState	NetState;

					Buffer_GetSLong(&QHost.NMgr->ServerToClientBuffer, &NetState);

					if (!Client_ChangeNetState(Client, NetState))
						GenVS_Error("ReadServerMessages:  Client_ChangeNetState failed.\n");*/

					break;
				}

				case NETMGR_MSG_SHUTDOWN:
				{
					//GenVS_Error("Lost connection with server!!!");
				}

				default:
				{
					//GenVS_Error("Unknown message from server: %i\n", Type);
				}
			}
		}

		// Draw every frame if full speed is set
		//if (Client->Demo.Mode == CLIENT_DEMO_PLAY && !Client->Demo.OriginalSpeed)
		//	break;
	}

	// Update the players.  NOTE - This is where this client's view xform gets built.
	//UpdatePlayers(Client, Time);
	
	return GE_true;
}


//=====================================================================================
//	QNETWORKClientReadServerMessages
//	Keeps on returning true till the clients time passes the hosts current time.
//	This keeps frame rates the same on all machines...
//=====================================================================================
geBoolean QNETWORKClientReadServerMessages(Client_Client *Client, Buffer_Data *Buffer)
{
	geCSNetMgr_NetMsgType	MsgType;

	//assert(Client_IsValid(Client) == GE_true);

	// Reset the buffer pos
	Buffer->Pos = 0;


	/*if (Client->Demo.Mode == CLIENT_DEMO_PLAY)		// If demo play mode, get message from file
	{
		geBoolean	Good = GE_false;

		Buffer->Data = DemoBuffer;

		assert(Client->Demo.File);
		
		// Make the demo run at it's original recorded speed...
		if (Client->Demo.OriginalSpeed)
			if (Client->Time <= Client->NetTime)
				return GE_false;	// Wait till client catches up with the demo
		
		if (fread(&Buffer->Size, sizeof(int32), 1, Client->Demo.File) == 1)
		{
			if (Buffer->Size >= NETMGR_LOCAL_MSG_BUFFER_SIZE)
				GenVS_Error("Client_ReadServerMessages:  Demo Buffer size can't hold data.\n");

			if (fread(Buffer->Data, sizeof(char), Buffer->Size, Client->Demo.File) == (uint32)Buffer->Size)
				Good = GE_true;
		}

		if (!Good)		// End of file, try the beginning...
		{
			Client->Time = 0.0f;
			Client->NetTime = 0.0f;
			
			// Reset the scoreboard between demo changes...
			memset(Client->ClientInfo, 0, sizeof(Client_ClientInfo)*NETMGR_MAX_CLIENTS);

			if (!Client_SetDemo(Client, (Client->Demo.CurrentDemo+1)%Client->Demo.NumDemos))
			{
				Client->Demo.Mode = CLIENT_DEMO_NONE;
				return GE_true;
			}
			
			//GenVS_Error("End of demo.\n");
			fseek(Client->Demo.File, 0, SEEK_SET);

			if (fread(&Buffer->Size, sizeof(int32), 1, Client->Demo.File) != 1)
				GenVS_Error("Error reading the demo file.\n");

			if (fread(Buffer->Data, sizeof(char), Buffer->Size, Client->Demo.File) != (uint32)Buffer->Size)
				GenVS_Error("Error reading the demo file.\n");
		}

		return GE_true;
	}*/


	while (1)
	{
		if (!QNETWORKReceiveServerMessage(QHost.NMgr, &MsgType, Buffer))
			{ MessageBox(NULL,"Client_ReadServerMessages:  NetMgr_ReceiveServerMessage failed.\n","ERROR",MB_OK); }

		if (MsgType == NET_MSG_SESSIONLOST)
			{ MessageBox(NULL,"Client_ReadServerMessages:  Session was lost.\n","ERROR",MB_OK); }

		if (MsgType == NET_MSG_NONE)
			return GE_false;

		if (MsgType == NET_MSG_USER)
			break;
	}

	// Check to see if the buffer has data
	if (!Buffer->Size)
		return GE_false;

	/*// Record the message
	if (Client->Demo.Mode == CLIENT_DEMO_RECORD)	// Record messages for DemoRecord mode
	{
		assert(Client->Demo.File);
		fwrite(&Buffer->Size, 1, sizeof(int32), Client->Demo.File);
		fwrite(Buffer->Data, Buffer->Size, 1, Client->Demo.File);
	}*/

	return GE_true;
}


//=====================================================================================
//	Client_SendMove
//	Sends clients intentions to the server (through the supplied host)
//=====================================================================================
geBoolean QNETWORKClientSendMove(Client_Client *Client, float Time)
{
	Buffer_Data		Buffer;
	uint8			Data[512];
	uint16			ButtonBits;
	//HWND			hWnd;

	//uint8 *TempData;
	//int32 TempDataSize;

	/*Buffer = GE_RAM_ALLOCATE_STRUCT(Buffer_Data);

	memset(Buffer, 0 , sizeof(Buffer_Data));

	// Setup local message buffers...
	Buffer->Data = Data;//QHost.NMgr->ClientBuffer;
	Buffer->Size = 512;//NETMGR_LOCAL_MSG_BUFFER_SIZE;
	Buffer->Pos = 0;*/


	Buffer_Set(&Buffer, Data, 512);

	ButtonBits = 0;

	// Change forward/back motion
	/*if (IsKeyDown(KeyLut[VK_UP], hWnd))
		tempForwardSpeed = 4000.0f;
	else if (IsKeyDown(KeyLut[VK_DOWN], hWnd))
		tempForwardSpeed = -4000.0f;
	else
		tempForwardSpeed = 0.0f;*/


	Client->ForwardSpeed = player[g_Player]->PlayerSpeed;


	/*if (MouseInvert)
		Client->Angles.X -= GlobalMouseSpeedY;
	else
		Client->Angles.X += GlobalMouseSpeedY;

	Client->Angles.Y += GlobalMouseSpeedX;

	if (Client->Angles.X > 1.3f)
		Client->Angles.X = 1.3f;
	else if (Client->Angles.X < -1.3f)
		Client->Angles.X = -1.3f;

	GlobalMouseSpeedX = 0.0f;
	GlobalMouseSpeedY = 0.0f;*/


	Client->Angles = player[g_Player]->trueAngles;


	/*if (IsKeyDown(KeyLut[VK_LEFT], hWnd))
		ButtonBits |= HOST_BUTTON_LEFT;

	if (IsKeyDown(KeyLut[VK_RIGHT], hWnd))
		ButtonBits |= HOST_BUTTON_RIGHT;

	// Do misc move actions
	if (NewKeyDown(KeyLut[VK_RBUTTON], hWnd))
		ButtonBits |= HOST_BUTTON_JUMP;

	if (IsKeyDown(KeyLut[VK_LBUTTON], hWnd))
	{
		ButtonBits |= HOST_BUTTON_FIRE;
	}*/


	/*if (KEY_DOWN(0x57))
		{
		ButtonBits |= HOST_BUTTON_JUMP;					//Forwards
		}


	if (KEY_DOWN(0x53) && player[g_Player]->Aposestate != 23)		//Back
		{
		ButtonBits |= HOST_BUTTON_FIRE;
		}


	if (KEY_DOWN(0x41) && player[g_Player]->attackon == 0)		
		{
		ButtonBits |= HOST_BUTTON_LEFT;			//Sidestep Left
		}


	if (KEY_DOWN(0x44) && player[g_Player]->attackon == 0)		//Sidestep Right
		{
		ButtonBits |= HOST_BUTTON_LEFT;			//Sidestep Right
		}*/

	
/*if (IsKeyDown('1', hWnd))
	{
		Client->CurrentWeapon = 0;
	}
	else if (IsKeyDown('2', hWnd))
	{
		Client->CurrentWeapon = 1;
	}
	else if (IsKeyDown('3', hWnd))
	{
		Client->CurrentWeapon = 2;
	}
	else if (IsKeyDown('4', hWnd))
	{
		Client->CurrentWeapon = 3;
	}
	else if (NewKeyDown(KeyLut[VK_CONTROL], hWnd))
	{
		Client->CurrentWeapon ++;
		Client->CurrentWeapon %= 4;
		
		Client_ValidateWeapon(Client);
	}*/
	
	//ButtonBits = ButtonBits;

	Buffer_FillByte(&Buffer, NETMGR_MSG_CLIENT_MOVE);			// Let server know we're moving
	Buffer_FillFloat(&Buffer, Client->Time);				// Current Time
	Buffer_FillFloat(&Buffer, Client->ServerPingBack);		// Current Time
	Buffer_FillFloat(&Buffer, Client->ForwardSpeed);		// Current Speed
	Buffer_FillFloat(&Buffer, Client->Angles.X);			// Pitch
	Buffer_FillFloat(&Buffer, Client->Angles.Y);			// Yaw
	Buffer_FillShort(&Buffer, ButtonBits);					// Current Buttons

	/*if (ButtonBits & HOST_BUTTON_FIRE)
	{
		assert(Client->CurrentWeapon >= 0 && Client->CurrentWeapon <= 65535);
		Buffer_FillShort(&Buffer, (uint16)Client->CurrentWeapon);		// Send Current Weapon if firing
	}*/

/*#ifdef CALC_ERROR
	if (Client->ClientPlayer >= 0)
		GPlayer		*Player;

		Player = &Client->Players[Client->ClientPlayer];
		Buffer_FillAngle(&Buffer, player[g_Player]->Pos);
	}
	else
	{
		geVec3d		FakePos = {0.0f, 0.0f, 0.0f};

		Buffer_FillAngle(&Buffer, FakePos);	
	}
#endif*/

//BEGIN_TIMER();
//#if 1
	//if (!QNETWORKSendServerMessage(QHost.NMgr, &Buffer, GE_false))
	//	MessageBox(NULL,"Client_SendMove:  NetMgr_SendServerMessage failed.\n","ERROR",MB_OK);
/*#else
	if (Client->Mode == ClientMode_Dumb)
	{
		// Send the move intention to the server for processing
		if (!QNETWORKSendServerMessage(QHost.NMgr, &Buffer, GE_false))
			MessageBox(NULL,"Client_SendMove:  NetMgr_SendServerMessage failed.\n","ERROR",MB_OK);
	}
	else if (Client->Time >= Client->NextSend)
	{*/
		//Buffer_FillBuffer(&SendBuffer, Buffer);

		// Send the move intention to the server for processing
		if (!QNETWORKSendServerMessage(QHost.NMgr, &Buffer, GE_false))
			MessageBox(NULL,"Client_SendMove:  NetMgr_SendServerMessage failed.\n","ERROR",MB_OK);


		/*TempData = "1";
		TempDataSize = sizeof(NETMGR_MSG_CLIENT_MOVE);

		geCSNetMgr_SendToServer(QHost.NMgr->CSNetMgr, GE_false, TempData, 0);
		//return GE_false;*/


		//if (!QNETWORKSendServerMessage(QHost.NMgr, TempData, GE_false))
		//	MessageBox(NULL,"Client_SendMove:  NetMgr_SendServerMessage failed.\n","ERROR",MB_OK);

		//Buffer_Set(&SendBuffer, SData, 5000);

		//Client->NextSend = Client->Time + (float)(rand()%100) * (1/100.0f) * 0.5f + 0.25f;
		//Client->NextSend = Client->Time + 0.5f;
		/*Client->NextSend = Client->Time;
	}
#endif*/
//END_TIMER(Client->GMgr);

	// Send the message directly to our proxy player so we can begin moving NOW
	/*if (Client->Mode == ClientMode_Proxy && Client->ClientPlayer != -1)
	{
		Client_Move		Move;
		GPlayer		*Player;

		Player = &Client->Players[Client->ClientPlayer];

		Move.Time = Client->Time;
		Move.Delta = Time;
		Move.ForwardSpeed = Client->ForwardSpeed;
		Move.Pitch = Client->Angles.X;
		Move.Yaw = Client->Angles.Y;
		Move.Pos = player[g_Player]->Pos;								// So we know our position at this time...
		Move.ButtonBits = ButtonBits;
		Move.CurrentWeapon = Client->CurrentWeapon;

	#ifdef PREDICT_CLIENT

		Client_MoveClientLocally(Client, &Move);
			
		//geEngine_Printf(Host->Engine, 2, 35, "Inventory: %i, %i", player[g_Player]->InventoryHas[Client->CurrentWeapon], player[g_Player]->Inventory[Client->CurrentWeapon]);

		// Remember this move, so when we get an update that is older then where we
		// are actually at, we can replay all the moves after the update, and "catch"
		// back up...
		Client_AddMove(Client, &Move);
	#endif
	}*/

	return GE_true;
}


//=====================================================================================
//	SendServerCharacterData(void)
//	Send All Server Character Data to Client
//=====================================================================================
geBoolean QNETWORKSendServerCharacterData(geCSNetMgr_NetID NID, float Time)
{
	uint8			Data[555000];

	Buffer_Set(&QHost.NMgr->ServerToClientBuffer, Data, 555000);

	//#########  - FILL SEND BUFFER -  #########

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, NETMGR_MSG_SERVER_CHARACTER_DATA);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Time);							// Current Time
	//Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, Client->ServerPingBack);		// Current Time
	
	//###### PREPARE Player Update  #####
	//#### Find Player Avatars
	NomCharDATA = 0;
	helly=0;
	while(helly < _->NETNomNetplayer)
		{
		if(Q_Netplayer->Netplayer[helly].Live == 1 && Q_Netplayer->Netplayer[helly].SpawnREADY == 1 && Q_Netplayer->Netplayer[helly].ID != NID) NomCharDATA++;
		helly++;
		}

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, NomCharDATA);

	//#### Find AI Avatars
	_->NomAIAvatars = 0;
	helly=0;
	while(helly < _->NomAI)
		{
		if(Q_Forge->Forge[helly].LIVE == 1)
			{
			if(Q_Forge->Forge[helly].NetplayerFLAG == 0) _->NomAIAvatars++;
			}
		helly++;
		}

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, _->NomAIAvatars);

	//####### DEACTIVATE ITEM ATTRIBUTES
	Q_DeactivateItems();

	//#### Send Actor Reference
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorREF);
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ShadowREF);

	//### Send Mouse Bytes
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].TEAM);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Class);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Level);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorSCALE);

	//### Send Key Bytes
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.EnergyEff);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSNAP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Height);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Weight);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.PhysicalStr);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Quickness);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Dexterity);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Constitution);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.AggPower);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.DefPower);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.Accuracy);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.DrawSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.ReloadSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.RecoilHEIGHTrecover);


	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeALPHA);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[0]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[1]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[2]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[3]);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrWEAPON);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrHEADARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrUPPERARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrLOWERARMOUR);

	//######### -  ITEM DATA LOOP  - #########

	//### Number of Items
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS);

	jet=0;
	while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS)
		{
		//##### - Set ITEM Name
		Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Name);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemREF);

		if(player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type == 0)
			{
			//##### - Set Character Item Actor Reference
			Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemActorREF);
			}

		//##### - Set Item Scale Factor
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemScaleFACT);

		//##### - Set Item Quality Level
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QualLVL);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Power);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Ammo);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilHeight);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilDistance);

		//##### - Get Item Fire Rate
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FireRate);

		//##### - Get Item Accuracy
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Accuracy);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].BulletCNT);

		//##### - Set Item Scope Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeTYPE);

		//##### - Set Item Scope Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeLOC);

		//##### - Set Item Laser Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserTYPE);

		//##### - Set Item Laser Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserLOC);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_Fire);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltIn);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipIn);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourFACTOR);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourAMOUNT);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourREGEN);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ExpandSTRENGTH);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_NoWEP);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_TimeScale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Gravity);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LifeINC);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyINC);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyEff);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Height);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Weight);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Strength);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Quickness);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Dexterity);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Constitution);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_AggPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_DefPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKpower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINK3intensity);

		jet++;
		}

	//#### ACTIVE SPELLS
	jet=0;
	while(jet < 3)
		{
		//##### - Get Item QA Effect Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_TYPE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_INTENSITY);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_SWITCH);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_EnergyEff);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Height);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Weight);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Strength);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Quickness);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Dexterity);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Constitution);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_AggPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_DefPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKpower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].LIVE);

		jet++;
		}

	//######### -  Physical Attacks SPEC DATA LOOP  - #########

	jet=0;
	while(jet < 30)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Power);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].MoveSpeed);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].NumRotate);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].ExpRadius);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  Cleric Class Skills LOOP  - #########

	jet=0;
	while(jet < 12)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Cost);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Potency);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Amount);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Speed);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Duration);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  SPELL DATA LOOP  - #########

	//### Number of Spells
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells);

	jet=0;
	while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells)
		{
		//##### - Get Spell Quality
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QualityLVL);

		//##### - Set Spell Attribute IDs
		SHADOW=0;
		while(SHADOW < 10)
			{
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].AttributeID[SHADOW]);
			SHADOW++;
			}

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_INTENSITY);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_SWITCH);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04ALPHA);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_IntBoost);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_EnergyEff);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Height);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Weight);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Strength);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Quickness);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Dexterity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Constitution);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_AggPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_DefPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPAccuracy);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPDrawSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPReloadSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPRecoilHR);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKmovespeed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKpower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINK3intensity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
		jet++;
		}


	//#### GET ANGEL COLOUR EDIT
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.ANGELEDITFLAG);

	jet2=0;
	while(jet2 < 38)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.RED[jet2]);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.GREEN[jet2]);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.BLUE[jet2]);

		jet2++;
		}


	//####### DEACTIVATE ITEM ATTRIBUTES
	Q_ActivateItems();

	//MessageBox(NULL,"QNETWORKSendServerCharacterData - 2","ERROR",MB_OK);

	//###### PREPARE Player Update  #####
	//#### Find Player Avatar
	helly=0;
	while(helly < NomCharDATA)
		{
		if(Q_Netplayer->Netplayer[helly].Live == 1 && Q_Netplayer->Netplayer[helly].SpawnREADY == 1 && Q_Netplayer->Netplayer[helly].ID != NID)
			{
			//#### Send Net ID
			TempUint8 = Q_Netplayer->Netplayer[helly].ID;
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, TempUint8);

			//#### Send Forge Reference
			TempUint8 = Q_Netplayer->Netplayer[helly].LocalCONTROLID;
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, TempUint8);

			//####### DEACTIVATE ITEM ATTRIBUTES
			Q_DeactivateItemsAI(Q_Netplayer->Netplayer[helly].LocalCONTROLID);

			//### Send Actor Reference
			Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ActorREF);
			Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ShadowREF);

			//### Send Mouse Bytes
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.TEAM);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Class);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Level);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ActorSCALE);

			//### Send Key Bytes
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.UnusedXP);

			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.EnergyEff);

			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftArmSTRENGTH);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightArmSTRENGTH);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftLegSTRENGTH);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightLegSTRENGTH);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftArmSNAP);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightArmSNAP);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftLegSNAP);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightLegSNAP);

			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Height);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Weight);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.PhysicalStr);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Quickness);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Dexterity);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Constitution);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.AggPower);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.DefPower);

			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.Accuracy);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.DrawSPD);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.ReloadSPD);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);


			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailTYPE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailRED);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailGREEN);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailBLUE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailALPHA);
			
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkTYPE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkRED);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkGREEN);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkBLUE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkALPHA);
			
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamTYPE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamRED);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamGREEN);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamBLUE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamALPHA);
			
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeTYPE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeRED);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeGREEN);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeBLUE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeALPHA);

			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[0]);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[1]);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[2]);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[3]);

			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrWEAPON);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrHEADARMOUR);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrUPPERARMOUR);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrLOWERARMOUR);

			//######### -  ITEM DATA LOOP  - #########

			//### Number of Items
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.NomITEMS);

			jet=0;
			while(jet < Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.NomITEMS)
				{
				//##### - Set ITEM Name
				Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Name);

				//##### - Set Item Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Type);

				//##### - Set Item Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemREF);

				if(Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Type == 0)
					{
					//##### - Set Character Item Actor Reference
					Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemActorREF);
					}

				//##### - Set Item Scale Factor
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemScaleFACT);

				//##### - Set Item Quality Level
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QualLVL);

				//##### - Get Item Damage
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Damage);

				//##### - Get Item Power
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Power);

				//##### - Get Item Ammo
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Ammo);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].RecoilHeight);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].RecoilDistance);

				//##### - Get Item Fire Rate
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FireRate);

				//##### - Get Item Accuracy
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Accuracy);

				//##### - Set Item Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].BulletCNT);

				//##### - Set Item Scope Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ScopeTYPE);

				//##### - Set Item Scope Type
				Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ScopeLOC);

				//##### - Set Item Laser Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].LaserTYPE);

				//##### - Set Item Laser Type
				Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].LaserLOC);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_Fire);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadBoltOut);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadBoltIn);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadClipOut);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadClipIn);

				//##### - Get Item Armour
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourFACTOR);

				//##### - Get Item Armour
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourAMOUNT);

				//##### - Get Item Armour
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourREGEN);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ExpandSTRENGTH);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_NoWEP);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_TimeScale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Gravity);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LifeINC);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyINC);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_IntBoost);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyEff);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Height);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Weight);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Strength);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Quickness);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Dexterity);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Constitution);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_AggPower);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_DefPower);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmStr);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmStr);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegStr);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegStr);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmSnap);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmSnap);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegSnap);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegSnap);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKpower);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINK3intensity);

				jet++;
				}

			//#### ACTIVE SPELLS
			jet=0;
			while(jet < 3)
				{
				//##### - Get Item QA Effect Type
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_TYPE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_INTENSITY);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_SWITCH);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_IntBoost);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_EnergyEff);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Height);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Weight);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Strength);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Quickness);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Dexterity);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Constitution);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_AggPower);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_DefPower);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmStr);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmStr);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegStr);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegStr);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmSnap);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmSnap);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegSnap);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegSnap);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKpower);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].LIVE);

				jet++;
				}

			//######### -  Physical Attacks SPEC DATA LOOP  - #########

			jet=0;
			while(jet < 30)
				{
				//##### - Get Item Type
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].Power);

				//##### - Get Item Damage
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].Damage);

				//##### - Get Item Power
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].MoveSpeed);

				//##### - Get Item Ammo
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].NumRotate);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].ExpRadius);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].Accuracy);

				jet++;
				}


			//######### -  Cleric Class Skills LOOP  - #########

			jet=0;
			while(jet < 12)
				{
				//##### - Get Item Type
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Cost);

				//##### - Get Item Damage
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Potency);

				//##### - Get Item Power
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Amount);

				//##### - Get Item Ammo
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Speed);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Duration);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Accuracy);

				jet++;
				}


			//######### -  SPELL DATA LOOP  - #########

			//### Number of Spells
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA_->NomSpells);

			jet=0;
			while(jet < Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA_->NomSpells)
				{
				//##### - Get Spell Quality
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QualityLVL);

				//##### - Set Spell Attribute IDs
				SHADOW=0;
				while(SHADOW < 10)
					{
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].AttributeID[SHADOW]);
					SHADOW++;
					}

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_TYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Height);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Weight);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Strength);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
				jet++;
				}


			//#### GET ANGEL COLOUR EDIT
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

			jet2=0;
			while(jet2 < 38)
				{
				//##### - Get Item Type
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.RED[jet2]);

				//##### - Get Item Damage
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.GREEN[jet2]);

				//##### - Get Item Power
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.BLUE[jet2]);

				jet2++;
				}


			//####### DEACTIVATE ITEM ATTRIBUTES
			Q_ActivateItemsAI(Q_Netplayer->Netplayer[helly].LocalCONTROLID);
			}
		helly++;
		}


	//###### PREPARE Player Update  #####
	//#### Find Player Avatar
	helly=0;
	while(helly < _->NomAI)
		{
		if(Q_Forge->Forge[helly].LIVE == 1)
			{
			if(Q_Forge->Forge[helly].NetplayerFLAG == 0)
				{
				//### Send Avatar Forge ID
				TempUint8 = helly;
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, TempUint8);

				//### Send Avatar Team
				TempUint8 = Q_Forge->Forge[helly].Team;
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, TempUint8);

				//####### DEACTIVATE ITEM ATTRIBUTES
				Q_DeactivateItemsAI(helly);

				//### Send Actor Reference
				Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ActorREF);
				Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ShadowREF);

				//### Send Mouse Bytes
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.TEAM);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Class);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Level);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ActorSCALE);

				//### Send Key Bytes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.UnusedXP);

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.EnergyEff);

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftArmSTRENGTH);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightArmSTRENGTH);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftLegSTRENGTH);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightLegSTRENGTH);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftArmSNAP);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightArmSNAP);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftLegSNAP);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightLegSNAP);

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Height);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Weight);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.PhysicalStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Quickness);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Dexterity);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Constitution);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.AggPower);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.DefPower);

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.Accuracy);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.DrawSPD);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.ReloadSPD);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);


				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailTYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailRED);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailGREEN);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailBLUE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailALPHA);
				
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkTYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkRED);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkGREEN);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkBLUE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkALPHA);
				
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamTYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamRED);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamGREEN);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamBLUE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamALPHA);
				
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeTYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeRED);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeGREEN);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeBLUE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeALPHA);

				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[0]);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[1]);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[2]);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[3]);

				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrWEAPON);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrHEADARMOUR);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrUPPERARMOUR);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrLOWERARMOUR);

				//######### -  ITEM DATA LOOP  - #########

				//### Number of Items
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.NomITEMS);

				jet=0;
				while(jet < Q_Forge->Forge[helly].CharDATA.NomITEMS)
					{
					//##### - Set ITEM Name
					Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Name);

					//##### - Set Item Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Type);

					//##### - Set Item Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ItemREF);

					if(Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Type == 0)
						{
						//##### - Set Character Item Actor Reference
						Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ItemActorREF);
						}

					//##### - Set Item Scale Factor
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ItemScaleFACT);

					//##### - Set Item Quality Level
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QualLVL);

					//##### - Get Item Damage
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Damage);

					//##### - Get Item Power
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Power);

					//##### - Get Item Ammo
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Ammo);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].RecoilHeight);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].RecoilDistance);

					//##### - Get Item Fire Rate
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FireRate);

					//##### - Get Item Accuracy
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Accuracy);

					//##### - Set Item Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].BulletCNT);

					//##### - Set Item Scope Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ScopeTYPE);

					//##### - Set Item Scope Type
					Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ScopeLOC);

					//##### - Set Item Laser Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].LaserTYPE);

					//##### - Set Item Laser Type
					Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].LaserLOC);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_Fire);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadBoltOut);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadBoltIn);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadClipOut);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadClipIn);

					//##### - Get Item Armour
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ArmourFACTOR);

					//##### - Get Item Armour
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ArmourAMOUNT);

					//##### - Get Item Armour
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ArmourREGEN);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ExpandSTRENGTH);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_NoWEP);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_TimeScale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Gravity);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LifeINC);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyINC);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_IntBoost);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyEff);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Height);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Weight);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Strength);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Quickness);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Dexterity);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Constitution);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_AggPower);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_DefPower);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmStr);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmStr);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegStr);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegStr);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmSnap);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmSnap);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegSnap);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegSnap);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKpower);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINK3intensity);

					jet++;
					}

				//#### ACTIVE SPELLS
				jet=0;
				while(jet < 3)
					{
					//##### - Get Item QA Effect Type
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_TYPE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_INTENSITY);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_SWITCH);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_IntBoost);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_EnergyEff);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Height);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Weight);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Strength);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Quickness);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Dexterity);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Constitution);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_AggPower);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_DefPower);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmStr);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmStr);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegStr);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegStr);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmSnap);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmSnap);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegSnap);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegSnap);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKpower);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].LIVE);

					jet++;
					}

				//######### -  Physical Attack SPEC DATA LOOP  - #########

				jet=0;
				while(jet < 30)
					{
					//##### - Get Item Type
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].Power);

					//##### - Get Item Damage
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].Damage);

					//##### - Get Item Power
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].MoveSpeed);

					//##### - Get Item Ammo
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].NumRotate);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].ExpRadius);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].Accuracy);

					jet++;
					}


				//######### -  Cleric Class Skills LOOP  - #########

				jet=0;
				while(jet < 12)
					{
					//##### - Get Item Type
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Cost);

					//##### - Get Item Damage
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Potency);

					//##### - Get Item Power
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Amount);

					//##### - Get Item Ammo
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Speed);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Duration);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Accuracy);

					jet++;
					}


				//######### -  SPELL DATA LOOP  - #########

				//### Number of Spells
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA_->NomSpells);

				jet=0;
				while(jet < Q_Forge->Forge[helly].CharDATA_->NomSpells)
					{
					//##### - Get Spell Quality
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QualityLVL);

					//##### - Set Spell Attribute IDs
					SHADOW=0;
					while(SHADOW < 10)
						{
						Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].AttributeID[SHADOW]);
						SHADOW++;
						}

					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_TYPE);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Height);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Weight);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Strength);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
					jet++;
					}


				//#### GET ANGEL COLOUR EDIT
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

				jet2=0;
				while(jet2 < 38)
					{
					//##### - Get Item Type
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.RED[jet2]);

					//##### - Get Item Damage
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.GREEN[jet2]);

					//##### - Get Item Power
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.BLUE[jet2]);

					jet2++;
					}


				//####### DEACTIVATE ITEM ATTRIBUTES
				Q_ActivateItemsAI(helly);
				}
			}
		helly++;
		}

	//MessageBox(NULL,"QNETWORKSendServerCharacterData - 4","ERROR",MB_OK);

	if (!geCSNetMgr_SendToClient(QHost.NMgr->CSNetMgr, NID, GE_true, QHost.NMgr->ServerToClientBuffer.Data, QHost.NMgr->ServerToClientBuffer.Pos))
		return GE_false;

	return GE_true;
}


//=====================================================================================
//	SendServerCharacterData(void)
//	Send All Server Character Data to Client
//=====================================================================================
geBoolean QNETWORKSendServerCharacterDataUPDATE(geCSNetMgr_NetID NID, float Time)
{
	uint8			Data[555000];

	Buffer_Set(&QHost.NMgr->ServerToClientBuffer, Data, 555000);

	//#########  - FILL SEND BUFFER -  #########

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, NETMGR_MSG_SERVER_CHARACTER_DATA_UPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Time);							// Current Time
	//Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, Client->ServerPingBack);		// Current Time

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, 185);

	//#### Find AI Avatars
	_->NomAIAvatars = 0;
	helly=0;
	while(helly < _->NomAI)
		{
		if(Q_Forge->Forge[helly].LIVE == 1)
			{
			if(Q_Forge->Forge[helly].NetplayerFLAG == 0) _->NomAIAvatars++;
			}
		helly++;
		}

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, _->NomAIAvatars);

	//####### DEACTIVATE ITEM ATTRIBUTES
	Q_DeactivateItems();

	//#### Send Actor Reference
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorREF);
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ShadowREF);

	//### Send Mouse Bytes
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].TEAM);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Class);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Level);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorSCALE);

	//### Send Key Bytes
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.EnergyEff);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSNAP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Height);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Weight);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.PhysicalStr);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Quickness);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Dexterity);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Constitution);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.AggPower);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.DefPower);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.Accuracy);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.DrawSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.ReloadSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.RecoilHEIGHTrecover);


	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeALPHA);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[0]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[1]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[2]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[3]);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrWEAPON);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrHEADARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrUPPERARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrLOWERARMOUR);

	//######### -  ITEM DATA LOOP  - #########

	//### Number of Items
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS);

	jet=0;
	while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS)
		{
		//##### - Set ITEM Name
		Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Name);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemREF);

		if(player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type == 0)
			{
			//##### - Set Character Item Actor Reference
			Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemActorREF);
			}

		//##### - Set Item Scale Factor
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemScaleFACT);

		//##### - Set Item Quality Level
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QualLVL);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Power);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Ammo);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilHeight);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilDistance);

		//##### - Get Item Fire Rate
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FireRate);

		//##### - Get Item Accuracy
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Accuracy);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].BulletCNT);

		//##### - Set Item Scope Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeTYPE);

		//##### - Set Item Scope Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeLOC);

		//##### - Set Item Laser Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserTYPE);

		//##### - Set Item Laser Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserLOC);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_Fire);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltIn);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipIn);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourFACTOR);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourAMOUNT);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourREGEN);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ExpandSTRENGTH);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_NoWEP);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_TimeScale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Gravity);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LifeINC);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyINC);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyEff);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Height);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Weight);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Strength);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Quickness);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Dexterity);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Constitution);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_AggPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_DefPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKpower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINK3intensity);

		jet++;
		}

	//#### ACTIVE SPELLS
	jet=0;
	while(jet < 3)
		{
		//##### - Get Item QA Effect Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_TYPE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_INTENSITY);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_SWITCH);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_EnergyEff);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Height);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Weight);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Strength);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Quickness);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Dexterity);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Constitution);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_AggPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_DefPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKpower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].LIVE);

		jet++;
		}

	//######### -  Physical Attacks SPEC DATA LOOP  - #########

	jet=0;
	while(jet < 30)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Power);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].MoveSpeed);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].NumRotate);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].ExpRadius);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  Cleric Class Skills LOOP  - #########

	jet=0;
	while(jet < 12)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Cost);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Potency);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Amount);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Speed);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Duration);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  SPELL DATA LOOP  - #########

	//### Number of Spells
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells);

	jet=0;
	while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells)
		{
		//##### - Get Spell Quality
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QualityLVL);

		//##### - Set Spell Attribute IDs
		SHADOW=0;
		while(SHADOW < 10)
			{
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].AttributeID[SHADOW]);
			SHADOW++;
			}

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_INTENSITY);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_SWITCH);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04ALPHA);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_IntBoost);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_EnergyEff);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Height);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Weight);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Strength);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Quickness);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Dexterity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Constitution);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_AggPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_DefPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPAccuracy);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPDrawSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPReloadSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPRecoilHR);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKmovespeed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKpower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINK3intensity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
		jet++;
		}


	//#### GET ANGEL COLOUR EDIT
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.ANGELEDITFLAG);

	jet2=0;
	while(jet2 < 38)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.RED[jet2]);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.GREEN[jet2]);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.BLUE[jet2]);

		jet2++;
		}


	//####### DEACTIVATE ITEM ATTRIBUTES
	Q_ActivateItems();


	//###### PREPARE Player Update  #####
	//#### Find Player Avatar
	helly=0;
	while(helly < _->NomAI)
		{
		if(Q_Forge->Forge[helly].LIVE == 1)
			{
			if(Q_Forge->Forge[helly].NetplayerFLAG == 0)
				{
				//### Send Avatar Forge ID
				TempUint8 = helly;
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, TempUint8);

				//### Send Avatar Team
				TempUint8 = Q_Forge->Forge[helly].Team;
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, TempUint8);

				//####### DEACTIVATE ITEM ATTRIBUTES
				Q_DeactivateItemsAI(helly);

				//### Send Actor Reference
				Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ActorREF);
				Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ShadowREF);

				//### Send Mouse Bytes
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.TEAM);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Class);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Level);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ActorSCALE);

				//### Send Key Bytes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.UnusedXP);

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.EnergyEff);

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftArmSTRENGTH);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightArmSTRENGTH);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftLegSTRENGTH);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightLegSTRENGTH);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftArmSNAP);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightArmSNAP);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftLegSNAP);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightLegSNAP);

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Height);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Weight);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.PhysicalStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Quickness);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Dexterity);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Constitution);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.AggPower);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.DefPower);

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.Accuracy);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.DrawSPD);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.ReloadSPD);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);


				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailTYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailRED);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailGREEN);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailBLUE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailALPHA);
				
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkTYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkRED);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkGREEN);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkBLUE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkALPHA);
				
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamTYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamRED);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamGREEN);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamBLUE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamALPHA);
				
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeTYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeRED);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeGREEN);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeBLUE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeALPHA);

				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[0]);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[1]);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[2]);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[3]);

				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrWEAPON);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrHEADARMOUR);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrUPPERARMOUR);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrLOWERARMOUR);

				//######### -  ITEM DATA LOOP  - #########

				//### Number of Items
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.NomITEMS);

				jet=0;
				while(jet < Q_Forge->Forge[helly].CharDATA.NomITEMS)
					{
					//##### - Set ITEM Name
					Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Name);

					//##### - Set Item Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Type);

					//##### - Set Item Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ItemREF);

					if(Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Type == 0)
						{
						//##### - Set Character Item Actor Reference
						Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ItemActorREF);
						}

					//##### - Set Item Scale Factor
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ItemScaleFACT);

					//##### - Set Item Quality Level
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QualLVL);

					//##### - Get Item Damage
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Damage);

					//##### - Get Item Power
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Power);

					//##### - Get Item Ammo
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Ammo);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].RecoilHeight);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].RecoilDistance);

					//##### - Get Item Fire Rate
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FireRate);

					//##### - Get Item Accuracy
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Accuracy);

					//##### - Set Item Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].BulletCNT);

					//##### - Set Item Scope Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ScopeTYPE);

					//##### - Set Item Scope Type
					Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ScopeLOC);

					//##### - Set Item Laser Type
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].LaserTYPE);

					//##### - Set Item Laser Type
					Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].LaserLOC);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_Fire);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadBoltOut);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadBoltIn);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadClipOut);

					//##### - Set Item Sound
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadClipIn);

					//##### - Get Item Armour
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ArmourFACTOR);

					//##### - Get Item Armour
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ArmourAMOUNT);

					//##### - Get Item Armour
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ArmourREGEN);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.TYPE);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.INT);

					//##### - Set Item Attribute
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.ON);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Red);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Green);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Blue);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Alpha);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Scale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.TIMER);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.CNT);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ExpandSTRENGTH);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_NoWEP);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_TimeScale);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Gravity);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LifeINC);

					//##### - Set Item Attribute
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyINC);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_IntBoost);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyEff);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Height);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Weight);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Strength);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Quickness);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Dexterity);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Constitution);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_AggPower);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_DefPower);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmStr);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmStr);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegStr);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegStr);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmSnap);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmSnap);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegSnap);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegSnap);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKpower);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINK3intensity);

					jet++;
					}

				//#### ACTIVE SPELLS
				jet=0;
				while(jet < 3)
					{
					//##### - Get Item QA Effect Type
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_TYPE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_INTENSITY);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_SWITCH);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04RED);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_IntBoost);

					//##### - Get Item Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_EnergyEff);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Height);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Weight);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Strength);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Quickness);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Dexterity);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Constitution);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_AggPower);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_DefPower);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmStr);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmStr);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegStr);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegStr);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmSnap);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmSnap);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegSnap);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegSnap);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKpower);

					//##### - Get SPELL Attributes
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

					//##### - Set Item QA Effect Intensity
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].LIVE);

					jet++;
					}

				//######### -  Physical Attack SPEC DATA LOOP  - #########

				jet=0;
				while(jet < 30)
					{
					//##### - Get Item Type
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].Power);

					//##### - Get Item Damage
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].Damage);

					//##### - Get Item Power
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].MoveSpeed);

					//##### - Get Item Ammo
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].NumRotate);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].ExpRadius);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].Accuracy);

					jet++;
					}


				//######### -  Cleric Class Skills LOOP  - #########

				jet=0;
				while(jet < 12)
					{
					//##### - Get Item Type
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Cost);

					//##### - Get Item Damage
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Potency);

					//##### - Get Item Power
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Amount);

					//##### - Get Item Ammo
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Speed);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Duration);

					//##### - Get Item Recoil
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Accuracy);

					jet++;
					}


				//######### -  SPELL DATA LOOP  - #########

				//### Number of Spells
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA_->NomSpells);

				jet=0;
				while(jet < Q_Forge->Forge[helly].CharDATA_->NomSpells)
					{
					//##### - Get Spell Quality
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QualityLVL);

					//##### - Set Spell Attribute IDs
					SHADOW=0;
					while(SHADOW < 10)
						{
						Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].AttributeID[SHADOW]);
						SHADOW++;
						}

					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_TYPE);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Height);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Weight);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Strength);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
					jet++;
					}


				//#### GET ANGEL COLOUR EDIT
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

				jet2=0;
				while(jet2 < 38)
					{
					//##### - Get Item Type
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.RED[jet2]);

					//##### - Get Item Damage
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.GREEN[jet2]);

					//##### - Get Item Power
					Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.BLUE[jet2]);

					jet2++;
					}


				//####### DEACTIVATE ITEM ATTRIBUTES
				Q_ActivateItemsAI(helly);
				}
			}
		helly++;
		}

	if (!geCSNetMgr_SendToClient(QHost.NMgr->CSNetMgr, NID, GE_true, QHost.NMgr->ServerToClientBuffer.Data, QHost.NMgr->ServerToClientBuffer.Pos))
		return GE_false;

	return GE_true;
}


//=====================================================================================
//	SendUpdateCharacterData(void)
//	Update and Send All Server Character Data to Client
//=====================================================================================
geBoolean QNETWORKSendUpdateCharacterData(geCSNetMgr_NetID NID, float Time)
{
	uint8			Data[555000];

	Buffer_Set(&QHost.NMgr->ServerToClientBuffer, Data, 555000);

	//#########  - FILL SEND BUFFER -  #########

	MessageBox(NULL,"QNETWORKSendUpdateCharacterData","ERROR",MB_OK);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, NETMGR_MSG_UPDATE_CHARACTER_DATA);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Time);							// Current Time
	//Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, Client->ServerPingBack);		// Current Time

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, 50);

	//###### PREPARE Player Update  #####
	//#### Find Player Avatar
	helly=0;
	while(Q_Netplayer->Netplayer[helly].ID != NID)
		{ helly++; }

	//####### DEACTIVATE ITEM ATTRIBUTES
	Q_DeactivateItemsAI(Q_Netplayer->Netplayer[helly].LocalCONTROLID);

	//####### Prepare Player Update
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Netplayer->Netplayer[helly].UpdateCHAR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Netplayer->Netplayer[helly].NewITEMREF.RefNUM);

	Q_Netplayer->Netplayer[helly].UpdateCHAR = 0;

	//### Send Actor Reference
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ActorREF);
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ShadowREF);

	//### Send Mouse Bytes
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.TEAM);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Class);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Level);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ActorSCALE);

	//### Send Key Bytes
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.UnusedXP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.EnergyEff);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftLegSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightLegSNAP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Height);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Weight);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.PhysicalStr);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Quickness);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Dexterity);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Constitution);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.AggPower);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.DefPower);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.Accuracy);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.DrawSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.ReloadSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeALPHA);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[0]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[1]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[2]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[3]);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrWEAPON);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrHEADARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrUPPERARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrLOWERARMOUR);

	//######### -  ITEM DATA LOOP  - #########

	//### Number of Items
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.NomITEMS);

	jet=0;
	while(jet < Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.NomITEMS)
		{
		//##### - Set ITEM Name
		Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Name);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Type);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemREF);

		if(Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Type == 0)
			{
			//##### - Set Character Item Actor Reference
			Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemActorREF);
			}

		//##### - Set Item Scale Factor
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemScaleFACT);

		//##### - Set Item Quality Level
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QualLVL);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Power);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Ammo);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].RecoilHeight);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].RecoilDistance);

		//##### - Get Item Fire Rate
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FireRate);

		//##### - Get Item Accuracy
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Accuracy);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].BulletCNT);

		//##### - Set Item Scope Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ScopeTYPE);

		//##### - Set Item Scope Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ScopeLOC);

		//##### - Set Item Laser Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].LaserTYPE);

		//##### - Set Item Laser Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].LaserLOC);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_Fire);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadBoltOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadBoltIn);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadClipOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadClipIn);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourFACTOR);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourAMOUNT);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourREGEN);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ExpandSTRENGTH);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_NoWEP);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_TimeScale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Gravity);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LifeINC);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyINC);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyEff);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Height);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Weight);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Strength);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Quickness);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Dexterity);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Constitution);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_AggPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_DefPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKpower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINK3intensity);

		jet++;
		}

	//#### ACTIVE SPELLS
	jet=0;
	while(jet < 3)
		{
		//##### - Get Item QA Effect Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_TYPE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_INTENSITY);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_SWITCH);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_EnergyEff);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Height);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Weight);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Strength);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Quickness);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Dexterity);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Constitution);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_AggPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_DefPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKpower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].LIVE);

		jet++;
		}


	//######### -  Physical Attack SPEC DATA LOOP  - #########

	jet=0;
	while(jet < 30)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].Power);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].MoveSpeed);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].NumRotate);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].ExpRadius);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  Cleric Class Skills LOOP  - #########

	jet=0;
	while(jet < 12)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Cost);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Potency);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Amount);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Speed);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Duration);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  SPELL DATA LOOP  - #########

	//### Number of Spells
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA_->NomSpells);

	jet=0;
	while(jet < Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA_->NomSpells)
		{
		//##### - Get Spell Quality
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QualityLVL);

		//##### - Set Spell Attribute IDs
		SHADOW=0;
		while(SHADOW < 10)
			{
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].AttributeID[SHADOW]);
			SHADOW++;
			}

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Height);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Weight);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Strength);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
		jet++;
		}


	//#### GET ANGEL COLOUR EDIT
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

	jet2=0;
	while(jet2 < 38)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.RED[jet2]);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.GREEN[jet2]);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.BLUE[jet2]);

		jet2++;
		}


	//####### REACTIVATE ITEM ATTRIBUTES
	Q_ActivateItemsAI(Q_Netplayer->Netplayer[helly].LocalCONTROLID);

	if (!geCSNetMgr_SendToClient(QHost.NMgr->CSNetMgr, NID, GE_true, QHost.NMgr->ServerToClientBuffer.Data, QHost.NMgr->ServerToClientBuffer.Pos))
		return GE_false;

	return GE_true;
}


//=====================================================================================
//	SendALLUpdateCharacterData(void)
//	Update and Send All Server Character Data to Client
//=====================================================================================
geBoolean QNETWORKSendUpdateCharacterDataALL(geCSNetMgr_NetID NID, float Time)
{
	uint8			Data[555000];

	Buffer_Set(&QHost.NMgr->ServerToClientBuffer, Data, 555000);

	//#########  - FILL SEND BUFFER -  #########

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, NETMGR_MSG_UPDATE_CHARACTER_DATA_ALL);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Time);							// Current Time
	//Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, Client->ServerPingBack);		// Current Time

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, 101);

	//MessageBox(NULL,"QNETWORKSendUpdateCharacterDataALL:  \n","ERROR",MB_OK);

	//###### PREPARE Player Update  #####
	//#### Find Player Avatar
	helly=0;
	while(Q_Netplayer->Netplayer[helly].ID != NID)
		{ helly++; }

	//####### Prepare Player Update
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Netplayer->Netplayer[helly].UpdateCHAR);

	Q_Netplayer->Netplayer[helly].UpdateCHAR = 0;

	//####### DEACTIVATE ITEM ATTRIBUTES
	Q_DeactivateItemsAI(Q_Netplayer->Netplayer[helly].LocalCONTROLID);

	//### Send Actor Reference
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ActorREF);
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ShadowREF);

	//### Send Mouse Bytes
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.TEAM);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Class);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Level);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ActorSCALE);

	//### Send Key Bytes
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.UnusedXP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.EnergyEff);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.LeftLegSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.RightLegSNAP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Height);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Weight);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.PhysicalStr);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Quickness);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Dexterity);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.Constitution);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.AggPower);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.BodySKILL.DefPower);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.Accuracy);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.DrawSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.ReloadSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);


	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeALPHA);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[0]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[1]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[2]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellContainerID[3]);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrWEAPON);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrHEADARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrUPPERARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CurrLOWERARMOUR);

	//######### -  ITEM DATA LOOP  - #########

	//### Number of Items
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.NomITEMS);

	jet=0;
	while(jet < Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.NomITEMS)
		{
		//##### - Set ITEM Name
		Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Name);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Type);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemREF);

		if(Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Type == 0)
			{
			//##### - Set Character Item Actor Reference
			Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemActorREF);
			}

		//##### - Set Item Scale Factor
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemScaleFACT);

		//##### - Set Item Quality Level
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QualLVL);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Power);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Ammo);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].RecoilHeight);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].RecoilDistance);

		//##### - Get Item Fire Rate
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FireRate);

		//##### - Get Item Accuracy
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Accuracy);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].BulletCNT);

		//##### - Set Item Scope Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ScopeTYPE);

		//##### - Set Item Scope Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ScopeLOC);

		//##### - Set Item Laser Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].LaserTYPE);

		//##### - Set Item Laser Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].LaserLOC);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_Fire);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadBoltOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadBoltIn);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadClipOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadClipIn);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourFACTOR);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourAMOUNT);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourREGEN);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].ExpandSTRENGTH);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_NoWEP);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_TimeScale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Gravity);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LifeINC);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyINC);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyEff);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Height);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Weight);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Strength);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Quickness);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Dexterity);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Constitution);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_AggPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_DefPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKpower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINK3intensity);

		jet++;
		}

	//#### ACTIVE SPELLS
	jet=0;
	while(jet < 3)
		{
		//##### - Get Item QA Effect Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_TYPE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_INTENSITY);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_SWITCH);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_EnergyEff);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Height);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Weight);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Strength);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Quickness);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Dexterity);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Constitution);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_AggPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_DefPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKpower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.SpellSLOT[jet].LIVE);

		jet++;
		}

	//######### -  Physical Attacks SPEC DATA LOOP  - #########

	jet=0;
	while(jet < 30)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].Power);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].MoveSpeed);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].NumRotate);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].ExpRadius);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AttackSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  Cleric Class Skills LOOP  - #########

	jet=0;
	while(jet < 12)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Cost);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Potency);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Amount);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Speed);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Duration);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  SPELL DATA LOOP  - #########

	//### Number of Spells
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA_->NomSpells);

	jet=0;
	while(jet < Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA_->NomSpells)
		{
		//##### - Get Spell Quality
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QualityLVL);

		//##### - Set Spell Attribute IDs
		SHADOW=0;
		while(SHADOW < 10)
			{
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].AttributeID[SHADOW]);
			SHADOW++;
			}

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Height);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Weight);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Strength);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
		jet++;
		}


	//#### GET ANGEL COLOUR EDIT
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

	jet2=0;
	while(jet2 < 38)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.RED[jet2]);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.GREEN[jet2]);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].CharDATA.AngelCOLOURS.BLUE[jet2]);

		jet2++;
		}


	//####### REACTIVATE ITEM ATTRIBUTES
	Q_ActivateItemsAI(Q_Netplayer->Netplayer[helly].LocalCONTROLID);


	//##### -  FILL SERVER ATTRIBUTES - #####

	//####### DEACTIVATE ITEM ATTRIBUTES
	Q_DeactivateItems();

	//### Send Actor Reference
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorREF);
	Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ShadowREF);

	//### Send Mouse Bytes
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].TEAM);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Class);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Level);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorSCALE);

	//### Send Key Bytes
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.EnergyEff);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSNAP);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSNAP);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Height);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Weight);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.PhysicalStr);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Quickness);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Dexterity);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Constitution);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.AggPower);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.DefPower);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.Accuracy);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.DrawSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.ReloadSPD);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.RecoilHEIGHTrecover);


	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeTYPE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeRED);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeGREEN);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeBLUE);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeALPHA);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[0]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[1]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[2]);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[3]);

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrWEAPON);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrHEADARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrUPPERARMOUR);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrLOWERARMOUR);

	//######### -  ITEM DATA LOOP  - #########

	//### Number of Items
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS);

	jet=0;
	while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS)
		{
		//##### - Set ITEM Name
		Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Name);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemREF);

		if(player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type == 0)
			{
			//##### - Set Character Item Actor Reference
			Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemActorREF);
			}

		//##### - Set Item Scale Factor
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemScaleFACT);

		//##### - Set Item Quality Level
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QualLVL);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Power);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Ammo);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilHeight);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilDistance);

		//##### - Get Item Fire Rate
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FireRate);

		//##### - Get Item Accuracy
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Accuracy);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].BulletCNT);

		//##### - Set Item Scope Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeTYPE);

		//##### - Set Item Scope Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeLOC);

		//##### - Set Item Laser Type
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserTYPE);

		//##### - Set Item Laser Type
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserLOC);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_Fire);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltIn);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipIn);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourFACTOR);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourAMOUNT);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourREGEN);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ExpandSTRENGTH);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_NoWEP);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_TimeScale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Gravity);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LifeINC);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyINC);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyEff);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Height);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Weight);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Strength);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Quickness);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Dexterity);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Constitution);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_AggPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_DefPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKpower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINK3intensity);

		jet++;
		}

	//#### ACTIVE SPELLS
	jet=0;
	while(jet < 3)
		{
		//##### - Get Item QA Effect Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_TYPE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_INTENSITY);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_SWITCH);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_EnergyEff);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Height);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Weight);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Strength);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Quickness);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Dexterity);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Constitution);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_AggPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_DefPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKpower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].LIVE);

		jet++;
		}

	//######### -  Physical Attacks SPEC DATA LOOP  - #########

	jet=0;
	while(jet < 30)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Power);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].MoveSpeed);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].NumRotate);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].ExpRadius);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  Cleric Class Skills LOOP  - #########

	jet=0;
	while(jet < 12)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Cost);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Potency);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Amount);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Speed);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Duration);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  SPELL DATA LOOP  - #########

	//### Number of Spells
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells);

	jet=0;
	while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells)
		{
		//##### - Get Spell Quality
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QualityLVL);

		//##### - Set Spell Attribute IDs
		SHADOW=0;
		while(SHADOW < 10)
			{
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].AttributeID[SHADOW]);
			SHADOW++;
			}

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_INTENSITY);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_SWITCH);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04ALPHA);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_IntBoost);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_EnergyEff);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Height);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Weight);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Strength);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Quickness);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Dexterity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Constitution);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_AggPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_DefPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPAccuracy);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPDrawSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPReloadSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPRecoilHR);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKmovespeed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKpower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINK3intensity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
		jet++;
		}


	//#### GET ANGEL COLOUR EDIT
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.ANGELEDITFLAG);

	jet2=0;
	while(jet2 < 38)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.RED[jet2]);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.GREEN[jet2]);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.BLUE[jet2]);

		jet2++;
		}

	//####### REACTIVATE ITEM ATTRIBUTES
	Q_ActivateItems();


	//##### -  FILL ALL AVATARS ATTRIBUTES - #####

	//#### Fill AI Avatars
	_->NomAIAvatars=0;
	helly=0;
	while(helly < _->NomAI)
		{
		if(Q_Forge->Forge[helly].LIVE == 1)
			{
			if(Q_Forge->Forge[helly].NetplayerFLAG == 0 || (Q_Forge->Forge[helly].NetplayerFLAG == 1 && Q_Netplayer->Netplayer[Q_Forge->Forge[helly].NetPID].Live == 1 && Q_Netplayer->Netplayer[Q_Forge->Forge[helly].NetPID].SpawnREADY == 1 && Q_Netplayer->Netplayer[Q_Forge->Forge[helly].NetPID].ID != NID)) _->NomAIAvatars++;
			}
		helly++;
		}
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, _->NomAIAvatars);

	//### Run through all avatars
	helly=0;
	while(helly < _->NomAI)
		{
		if(Q_Forge->Forge[helly].LIVE == 1)
			{
			//####### DEACTIVATE ITEM ATTRIBUTES
			Q_DeactivateItemsAI(helly);

			//#### Fill AI Avatars
			TempUint8 = helly;
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, TempUint8);

			//### Send Actor Reference
			Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ActorREF);
			Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ShadowREF);

			//### Send Mouse Bytes
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.TEAM);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Class);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Level);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ActorSCALE);

			//### Send Key Bytes
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.UnusedXP);

			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.EnergyEff);

			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftArmSTRENGTH);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightArmSTRENGTH);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftLegSTRENGTH);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightLegSTRENGTH);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftArmSNAP);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightArmSNAP);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.LeftLegSNAP);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.RightLegSNAP);

			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Height);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Weight);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.PhysicalStr);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Quickness);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Dexterity);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.Constitution);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.AggPower);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.BodySKILL.DefPower);

			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.Accuracy);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.DrawSPD);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.ReloadSPD);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);


			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailTYPE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailRED);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailGREEN);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailBLUE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.TrailALPHA);
			
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkTYPE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkRED);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkGREEN);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkBLUE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.JinkALPHA);
			
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamTYPE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamRED);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamGREEN);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamBLUE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SteamALPHA);
			
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeTYPE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeRED);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeGREEN);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeBLUE);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelEFFECTS.SpikeALPHA);

			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[0]);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[1]);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[2]);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellContainerID[3]);

			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrWEAPON);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrHEADARMOUR);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrUPPERARMOUR);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CurrLOWERARMOUR);

			//######### -  ITEM DATA LOOP  - #########

			//### Number of Items
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.NomITEMS);

			jet=0;
			while(jet < Q_Forge->Forge[helly].CharDATA.NomITEMS)
				{
				//##### - Set ITEM Name
				Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Name);

				//##### - Set Item Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Type);

				//##### - Set Item Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ItemREF);

				if(Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Type == 0)
					{
					//##### - Set Character Item Actor Reference
					Buffer_FillString(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ItemActorREF);
					}

				//##### - Set Item Scale Factor
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ItemScaleFACT);

				//##### - Set Item Quality Level
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QualLVL);

				//##### - Get Item Damage
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Damage);

				//##### - Get Item Power
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Power);

				//##### - Get Item Ammo
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Ammo);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].RecoilHeight);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].RecoilDistance);

				//##### - Get Item Fire Rate
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FireRate);

				//##### - Get Item Accuracy
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Accuracy);

				//##### - Set Item Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].BulletCNT);

				//##### - Set Item Scope Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ScopeTYPE);

				//##### - Set Item Scope Type
				Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ScopeLOC);

				//##### - Set Item Laser Type
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].LaserTYPE);

				//##### - Set Item Laser Type
				Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].LaserLOC);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_Fire);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadBoltOut);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadBoltIn);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadClipOut);

				//##### - Set Item Sound
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QAS_ReloadClipIn);

				//##### - Get Item Armour
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ArmourFACTOR);

				//##### - Get Item Armour
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ArmourAMOUNT);

				//##### - Get Item Armour
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ArmourREGEN);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Smoke.CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[0].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[1].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[2].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[3].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Effect[4].CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].Fog.CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.TYPE);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.INT);

				//##### - Set Item Attribute
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.ON);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Red);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Green);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Blue);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Alpha);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.Scale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.TIMER);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].FogLight.CNT);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].ExpandSTRENGTH);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_NoWEP);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_TimeScale);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Gravity);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LifeINC);

				//##### - Set Item Attribute
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyINC);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_IntBoost);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyEff);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Height);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Weight);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Strength);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Quickness);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Dexterity);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Constitution);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_AggPower);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_DefPower);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmStr);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmStr);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegStr);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegStr);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmSnap);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmSnap);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegSnap);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegSnap);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKpower);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINK3intensity);

				jet++;
				}

			//#### ACTIVE SPELLS
			jet=0;
			while(jet < 3)
				{
				//##### - Get Item QA Effect Type
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_TYPE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_INTENSITY);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_SWITCH);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04RED);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_IntBoost);

				//##### - Get Item Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_EnergyEff);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Height);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Weight);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Strength);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Quickness);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Dexterity);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Constitution);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_AggPower);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_DefPower);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmStr);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmStr);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegStr);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegStr);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmSnap);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmSnap);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegSnap);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegSnap);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKpower);

				//##### - Get SPELL Attributes
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

				//##### - Set Item QA Effect Intensity
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.SpellSLOT[jet].LIVE);

				jet++;
				}

			//######### -  Physical Attacks SPEC DATA LOOP  - #########

			jet=0;
			while(jet < 30)
				{
				//##### - Get Item Type
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].Power);

				//##### - Get Item Damage
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].Damage);

				//##### - Get Item Power
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].MoveSpeed);

				//##### - Get Item Ammo
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].NumRotate);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].ExpRadius);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AttackSKILL[jet].Accuracy);

				jet++;
				}


			//######### -  Cleric Class Skills LOOP  - #########

			jet=0;
			while(jet < 12)
				{
				//##### - Get Item Type
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Cost);

				//##### - Get Item Damage
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Potency);

				//##### - Get Item Power
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Amount);

				//##### - Get Item Ammo
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Speed);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Duration);

				//##### - Get Item Recoil
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.CLSClericSKILL[jet].Accuracy);

				jet++;
				}


			//######### -  SPELL DATA LOOP  - #########

			//### Number of Spells
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA_->NomSpells);

			jet=0;
			while(jet < Q_Forge->Forge[helly].CharDATA_->NomSpells)
				{
				//##### - Get Spell Quality
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QualityLVL);

				//##### - Set Spell Attribute IDs
				SHADOW=0;
				while(SHADOW < 10)
					{
					Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].AttributeID[SHADOW]);
					SHADOW++;
					}

				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_TYPE);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
				Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Height);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Weight);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Strength);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
				jet++;
				}


			//#### GET ANGEL COLOUR EDIT
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

			jet2=0;
			while(jet2 < 38)
				{
				//##### - Get Item Type
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.RED[jet2]);

				//##### - Get Item Damage
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.GREEN[jet2]);

				//##### - Get Item Power
				Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Q_Forge->Forge[helly].CharDATA.AngelCOLOURS.BLUE[jet2]);

				jet2++;
				}


			//####### REACTIVATE ITEM ATTRIBUTES
			Q_ActivateItemsAI(helly);
			}

		helly++;
		}


	if (!geCSNetMgr_SendToClient(QHost.NMgr->CSNetMgr, NID, GE_true, QHost.NMgr->ServerToClientBuffer.Data, QHost.NMgr->ServerToClientBuffer.Pos))
		return GE_false;

	return GE_true;
}


geBoolean QNETWORKClientSendMove2(Client_Client *Client, float Time)
{
	uint8			Data[1024];

	Buffer_Set(&QHost.NMgr->ClientToServerBuffer, Data, 2048);	//512


	if (KEY_DOWN(VK_LBUTTON))
		{
		QHost.ControlSET.Mouse.NORLeftButton = KEYDOWN;
		}
	else QHost.ControlSET.Mouse.NORLeftButton = KEYSTATIC;


	if (KEY_DOWN(VK_->mbutton[g_Player]))
		{
		QHost.ControlSET.Mouse.NORMiddButton = KEYDOWN;
		}
	else QHost.ControlSET.Mouse.NORMiddButton = KEYSTATIC;


	if (KEY_DOWN(VK_RBUTTON))
		{
		QHost.ControlSET.Mouse.NORRightButton = KEYDOWN;
		}
	else QHost.ControlSET.Mouse.NORRightButton = KEYSTATIC;


	if (_->lbutton[g_Player] == 1)
		{
		QHost.ControlSET.Mouse.SYSLeftButton = KEYDOWN;
		}
	else QHost.ControlSET.Mouse.SYSLeftButton = KEYSTATIC;


	if (_->mbutton[g_Player] == 1)
		{
		QHost.ControlSET.Mouse.SYSMiddButton = KEYDOWN;
		}
	else QHost.ControlSET.Mouse.SYSMiddButton = KEYSTATIC;


	if (_->rbutton[g_Player] == 1)
		{
		QHost.ControlSET.Mouse.SYSRightButton = KEYDOWN;
		}
	else QHost.ControlSET.Mouse.SYSRightButton = KEYSTATIC;


	if (_->mwheelroll[g_Player] == 1)
		{
		QHost.ControlSET.Mouse.NORMouseWheel = KEYDOWN;
		}
	else QHost.ControlSET.Mouse.NORMouseWheel = KEYSTATIC;


	if (KEY_DOWN(0x57))										// 'W' Key  //Forward
		{
		QHost.ControlSET.Key.NORkeyW = KEYDOWN;	
		}
	else QHost.ControlSET.Key.NORkeyW = KEYSTATIC;


	if (KEY_DOWN(0x53))										// 'S' Key  //Back
		{
		QHost.ControlSET.Key.NORkeyS = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeyS = KEYSTATIC;


	if (KEY_DOWN(0x41))										// 'A' Key  //Sidestep Left
		{
		QHost.ControlSET.Key.NORkeyA = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeyA = KEYSTATIC;


	if (KEY_DOWN(0x44))										// 'D' Key  //Sidestep Right
		{
		QHost.ControlSET.Key.NORkeyD = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeyD = KEYSTATIC;


	if (KEY_DOWN(VK_TAB))										// 'TAB' Key  //Forward
		{
		QHost.ControlSET.Key.NORkeyTAB = KEYDOWN;	
		}
	else QHost.ControlSET.Key.NORkeyTAB = KEYSTATIC;


	if (KEY_DOWN(VK_SHIFT))										// 'SHIFT' Key  //Sidestep Left
		{
		QHost.ControlSET.Key.NORkeySHIFT = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeySHIFT = KEYSTATIC;


	if (KEY_DOWN(VK_SPACE))										// 'SPACE' Key  //Back
		{
		QHost.ControlSET.Key.NORkeySPACE = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeySPACE = KEYSTATIC;

	
	if (KEY_DOWN(0x5A))										// 'Z' Key  //Sidestep Right
		{
		QHost.ControlSET.Key.NORkeyZ = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeyZ = KEYSTATIC;


	if (KEY_DOWN(0x51))										// 'Q' Key  //Sidestep Right
		{
		QHost.ControlSET.Key.NORkeyQ = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeyQ = KEYSTATIC;


	if (KEY_DOWN(0x45))										// 'E' Key  //Sidestep Right
		{
		QHost.ControlSET.Key.NORkeyE = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeyE = KEYSTATIC;


	if (KEY_DOWN(0x46))										// 'F' Key  //Sidestep Right
		{
		QHost.ControlSET.Key.NORkeyF = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeyF = KEYSTATIC;


	if (KEY_DOWN(0x52))										// 'R' Key  //Sidestep Right
		{
		QHost.ControlSET.Key.NORkeyR = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeyR = KEYSTATIC;


	if (KEY_DOWN(0x48))										// 'R' Key  //Sidestep Right
		{
		QHost.ControlSET.Key.NORkeyH = KEYDOWN;
		}
	else QHost.ControlSET.Key.NORkeyH = KEYSTATIC;


	QHost.ControlSET.CLog.KL_BTFSpecLevel = player[g_Player]->KL_BTFSpecLevel;

	QHost.ControlSET.CLog.KL_LTFSpecLevel = player[g_Player]->KL_LTFSpecLevel;
	
	QHost.ControlSET.CLog.KL_RTFSpecLevel = player[g_Player]->KL_RTFSpecLevel;

	QHost.ControlSET.CLog.KL_FTLSpecLevel = player[g_Player]->KL_FTLSpecLevel;

	QHost.ControlSET.CLog.KL_FTRSpecLevel = player[g_Player]->KL_FTRSpecLevel;


	QHost.ControlSET.AvatarAngle.X = player[g_Player]->Angles.X;
	QHost.ControlSET.AvatarAngle.Y = player[g_Player]->trueAngles.Y;

	geXForm3d_GetUp(&playact.ActorXform, &QHost.ControlSET.AnglesVec);
	geXForm3d_GetIn(&player[g_Player]->ViewXForm, &QHost.ControlSET.ViewVec);

	QHost.ControlSET.EnergyTARGET = player[g_Player]->EnergyLockID;

	if(QHost.ControlSET.EnergyTARGET == Q_Netplayer->Netplayer[0].LocalCONTROLID) QHost.ControlSET.EnergyTARGET = 250;
	else { if(QHost.ControlSET.EnergyTARGET == 250) QHost.ControlSET.EnergyTARGET = player[g_Player]->NetUPDATE.ServerCONTROLID; }


	//#########  - FILL SEND BUFFER -  #########

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, NETMGR_MSG_CLIENT_MOVE);			// Let server know we're moving
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, Time);				// Current Time
	//Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, Client->ServerPingBack);		// Current Time

	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, _->FRLresult);

	//### Send Mouse Bytes
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Mouse.NORLeftButton);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Mouse.NORMiddButton);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Mouse.NORRightButton);

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Mouse.SYSLeftButton);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Mouse.SYSMiddButton);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Mouse.SYSRightButton);

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Mouse.NORMouseWheel);

	//### Send Key Bytes
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyW);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyS);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyA);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyD);

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyTAB);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeySHIFT);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeySPACE);

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyZ);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyQ);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyE);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyF);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyR);

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.Key.NORkeyH);

	//### Send Key Loggers
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.CLog.KL_BTFSpecLevel);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.CLog.KL_LTFSpecLevel);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.CLog.KL_RTFSpecLevel);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.CLog.KL_FTLSpecLevel);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.CLog.KL_FTRSpecLevel);

	//Weapon Firing
	//Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.MFlash);

	//### Send Angles
	Buffer_FillAngle(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.AvatarAngle);
	Buffer_FillAngle(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.AnglesVec);
	Buffer_FillAngle(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.ViewVec);

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, QHost.ControlSET.EnergyTARGET);
	

	//if (!QNETWORKSendServerMessage(QHost.NMgr, &Buffer, GE_false))
	//		MessageBox(NULL,"Client_SendMove:  NetMgr_SendServerMessage failed.\n","ERROR",MB_OK);*/

	if (!geCSNetMgr_SendToServer(QHost.NMgr->CSNetMgr, GE_false, QHost.NMgr->ClientToServerBuffer.Data, QHost.NMgr->ClientToServerBuffer.Pos))
		return GE_false;

	return GE_true;
}


//=====================================================================================
//	ParseClientMove
//=====================================================================================
static void QNETWORKParseClientMove(Server_Server *Server, Buffer_Data *Buffer, Server_Client *Client, float Time)
{
	float		DeltaTime, MoveTime/*, NetTime*/;
	geVec3d		Origin = {0.0f, 0.0f, 0.0f};
	uint16		ButtonBits;

	//MessageBox(NULL,"Server_ParseClientMove ACTIVE","ERROR",MB_OK);

	Buffer_GetFloat(Buffer, &MoveTime);

	//Buffer_GetFloat(Buffer, &NetTime);					// For getting pings for throttling messages to this client
	//Buffer_GetFloat(Buffer, &Client->ForwardSpeed);
	//Buffer_GetFloat(Buffer, &Client->Angles.X);
	//Buffer_GetFloat(Buffer, &Client->Angles.Y);
	//Buffer_GetShort(Buffer, &Client->ButtonBits);

	/*if (NetTime >= 0)	// -1 represents that the client did not get an update that frame...
	{
		float	Ping;

		Ping = GameMgr_GetTime(Server->GMgr) - NetTime;

		if (Ping >= 0)
		{
			Client->Pings[Client->NumPings%10] = Ping;
			Client->NumPings++;
		}
	}
	
	if (Client->ButtonBits & HOST_BUTTON_FIRE)
		Buffer_GetShort(Buffer, &Client->CurrentWeapon);		// Read Current Weapon if firing*/

/*#ifdef CALC_ERROR
	Buffer_GetAngle(Buffer, &Client->Pos);
#endif*/

	/*if (!GameMgr_GetWorld(Server->GMgr))
		return;*/

	//Client->OldMoveTime = Client->MoveTime;
	//Client->MoveTime = MoveTime;

	//if (MoveTime <= Client->OldMoveTime)
	//	return;

	// Since the client is going to be controlled in the main loop, pull off the amount
	// of time it is going to move it from this time.  
	//DeltaTime = Client->MoveTime - Client->OldMoveTime;

	/*if (DeltaTime <= 0.0f)		// Ignore older messages (this will lose button bits every now and then...)
		return;
	
	if (DeltaTime > 0.1f)
		DeltaTime = 0.1f;
	else if (DeltaTime < 0.001f)
		DeltaTime = 0.001f;*/

/*#ifdef CALC_ERROR	
	if (!geVec3d_Compare(&Client->Pos, &Origin, 0.1f))
	{
		geVec3d		Vect;

		geVec3d_Subtract(&Client->player[g_Player]->XForm.Translation, &Client->Pos, &Vect);

		if (geVec3d_Length(&Vect) > 1.0f)
		{
			Client->player[g_Player]->OldPos.X = 0.0f;
			geEngine_Printf(Server->Host->Engine, 10, 100, "Client prediction error.");
		}
	}
#endif*/

	/*if (Client->Player)		// Must control the client now, with these move intentions...
	{	
		Client->player[g_Player]->SpawnTime = Client->MoveTime;					// Set this now, so weapons spawned by this move can
		Client->player[g_Player]->PingTime = Client->Ping;
																		// Be time stamped...
		//Client->player[g_Player]->Control(&Server->GenVSI, Client->Player, DeltaTime);
		ControlPlayer(Server, Client->Player, DeltaTime);
		
		ForceServerPlayerOnLocalClient(Server, Client->Player);
	}
	else
		GenVS_Error("ParseClientMove:  No player for client!!!");*/

	//###### Update Player #####


	//#########  - EMPTY BUFFER -  #########

	//### Find Q_Netplayer->Netplayer ID
	helly=0;
	while(Q_Netplayer->Netplayer[helly].ID != Client->NetID)
		{ helly++; }


	//### Frame Rate Limiter
	Buffer_GetFloat(Buffer, &_->FRLpossibleT);

	if(_->FRLpossibleT > _->FRLCurrtarget)
		{
		_->FRLtarget = _->FRLpossibleT;
		_->FRLCurrtarget = _->FRLpossibleT;

		jet=0;
		while(jet < _->NETNomNetplayer)
			{
			Q_Netplayer->Netplayer[jet].FRLswitch = 1;
			jet++;
			}

		Q_Netplayer->Netplayer[helly].FRLswitch = 0;

		if(FRLON != 2) FRLON = 1;
		}
	else
		{
		_->FRLtarget = _->FRLpossibleT;
		_->FRLCurrtarget = _->FRLpossibleT;
		if(FRLON != 2) FRLON = 1;
		}


	//### GET Mouse Bytes
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Mouse.NORLeftButton);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Mouse.NORMiddButton);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Mouse.NORRightButton);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Mouse.SYSLeftButton);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Mouse.SYSMiddButton);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Mouse.SYSRightButton);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Mouse.NORMouseWheel);

	//### GET Key Bytes
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyW);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyS);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyA);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyD);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyTAB);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeySHIFT);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeySPACE);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyZ);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyQ);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyE);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyF);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyR);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.Key.NORkeyH);

	//### Get Key Loggers
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.CLog.KL_BTFSpecLevel);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.CLog.KL_LTFSpecLevel);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.CLog.KL_RTFSpecLevel);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.CLog.KL_FTLSpecLevel);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.CLog.KL_FTRSpecLevel);

	//### GET Angles
	Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.AvatarAngle);
	Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.AnglesVec);
	Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.ViewVec);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].ControlSET.EnergyTARGET);

	//########### Find and Control Realworld avatar
	_->Multipass = Q_Netplayer->Netplayer[helly].LocalCONTROLID;

	
	//### Set Angles
	/*Q_Forge->Forge[_->Multipass].ScanTurnAng = Q_Netplayer->Netplayer[helly].ControlSET.AvatarAngle.Y - Q_Forge->Forge[_->Multipass].Angles.Y;
	
	Q_Forge->Forge[_->Multipass].Angles.Y = Q_Forge->Forge[_->Multipass].Angles.Y + Q_Forge->Forge[_->Multipass].ScanTurnAng;

	if(Q_Forge->Forge[_->Multipass].Angles.Y > (PI*2)) Q_Forge->Forge[_->Multipass].Angles.Y = 0;
	if(Q_Forge->Forge[_->Multipass].Angles.Y < 0) Q_Forge->Forge[_->Multipass].Angles.Y = (PI*2);

	geXForm3d_SetZRotation(&AIfriendly, Q_Forge->Forge[_->Multipass].ScanTurnAng);
	geXForm3d_Multiply(&Q_Forge->Forge[_->Multipass].Avatar.ActorXform, &AIfriendly, &Q_Forge->Forge[_->Multipass].Avatar.ActorXform);*/


	Q_Forge->Forge[_->Multipass].Angles.X = Q_Netplayer->Netplayer[helly].ControlSET.AvatarAngle.X;

	geXForm3d_GetUp(&Q_Forge->Forge[_->Multipass].Avatar.ActorXform, &Q_Forge->Forge[_->Multipass].Up);
	Q_Forge->Forge[_->Multipass].TempVec1 = Q_Netplayer->Netplayer[helly].ControlSET.AnglesVec;
	Q_Forge->Forge[_->Multipass].TempVec1.Y = 0;
	geVec3d_Normalize(&Q_Forge->Forge[_->Multipass].TempVec1);
	Q_Forge->Forge[_->Multipass].Up.Y = 0;
	Q_Forge->Forge[_->Multipass].ScanTurnAng = geVec3d_DistanceBetween(&Q_Forge->Forge[_->Multipass].TempVec1, &Q_Forge->Forge[_->Multipass].Up);

	//### Check Distance between Pure Left and Right to work out direction of Turn
	geXForm3d_GetLeft(&Q_Forge->Forge[_->Multipass].Avatar.ActorXform, &Q_Forge->Forge[_->Multipass].Left);
	geXForm3d_GetIn(&Q_Forge->Forge[_->Multipass].Avatar.ActorXform, &Q_Forge->Forge[_->Multipass].Up);
	geVec3d_Copy(&Q_Forge->Forge[_->Multipass].Left, &Q_Forge->Forge[_->Multipass].Right);
	geVec3d_Inverse(&Q_Forge->Forge[_->Multipass].Right);

	Q_Forge->Forge[_->Multipass].ScanDistL = geVec3d_DistanceBetween(&Q_Forge->Forge[_->Multipass].TempVec1, &Q_Forge->Forge[_->Multipass].Left);
	Q_Forge->Forge[_->Multipass].ScanDistR = geVec3d_DistanceBetween(&Q_Forge->Forge[_->Multipass].TempVec1, &Q_Forge->Forge[_->Multipass].Right);

	if(Q_Forge->Forge[_->Multipass].ScanDistL > Q_Forge->Forge[_->Multipass].ScanDistR) Q_Forge->Forge[_->Multipass].ScanTurnAng *= -1;

	Q_Forge->Forge[_->Multipass].trueAngles.Y += Q_Forge->Forge[_->Multipass].ScanTurnAng / 3;

	Q_Forge->Forge[_->Multipass].Angles.Y += Q_Forge->Forge[_->Multipass].ScanTurnAng / 3;
	if(Q_Forge->Forge[_->Multipass].Angles.Y > (PI*2)) Q_Forge->Forge[_->Multipass].Angles.Y = 0;
	if(Q_Forge->Forge[_->Multipass].Angles.Y < 0) Q_Forge->Forge[_->Multipass].Angles.Y = (PI*2);

	geXForm3d_SetZRotation(&RotateMatrix, Q_Forge->Forge[_->Multipass].ScanTurnAng / 3);
	geXForm3d_Multiply(&Q_Forge->Forge[_->Multipass].Avatar.ActorXform, &RotateMatrix, &Q_Forge->Forge[_->Multipass].Avatar.ActorXform);

	//## Air Rush Rotation
	if(Q_Forge->Forge[_->Multipass].AirJinkRotFG == 1)
		{
		Q_Forge->Forge[_->Multipass].ROTATEMatrix = Q_Forge->Forge[_->Multipass].STOREMatrix;

		Q_Forge->Forge[_->Multipass].AJAngles.Y = Q_Forge->Forge[_->Multipass].Angles.Y - Q_Forge->Forge[_->Multipass].STOREAngles.Y;

		if(Q_Forge->Forge[_->Multipass].AJAngles.Y > (2*PI)) Q_Forge->Forge[_->Multipass].AJAngles.Y = Q_Forge->Forge[_->Multipass].AJAngles.Y-(PI*2);
		if(Q_Forge->Forge[_->Multipass].AJAngles.Y < 0) Q_Forge->Forge[_->Multipass].AJAngles.Y = (PI*2) + Q_Forge->Forge[_->Multipass].AJAngles.Y;

#if 0	// Originally
		geXForm3d_RotateY(&Q_Forge->Forge[_->Multipass].ROTATEMatrix, Q_Forge->Forge[_->Multipass].AJAngles.Y);

		geXForm3d_SetXRotation(&AIfriendly, -Q_Forge->Forge[_->Multipass].Angles.X);
		geXForm3d_Multiply(&Q_Forge->Forge[_->Multipass].ROTATEMatrix, &AIfriendly, &Q_Forge->Forge[_->Multipass].ROTATEMatrix);
#endif

		Qpo->Transform_New_YRotation(&AIfriendly, -(PI/2));	/// Originaly -
		Qpo->Transform_Multiply(&Q_Forge->Forge[_->Multipass].ROTATEMatrix, &AIfriendly, &Q_Forge->Forge[_->Multipass].ROTATEMatrix);

		Qpo->Transform_New_XRotation(&AIfriendly, -(Q_Forge->Forge[_->Multipass].Angles.x) - (PI/2));	/// Originaly -
		Qpo->Transform_Multiply(&Q_Forge->Forge[_->Multipass].ROTATEMatrix, &AIfriendly, &Q_Forge->Forge[_->Multipass].ROTATEMatrix);

		Qpo->Transform_New_YRotation(&AIfriendly, Q_Forge->Forge[_->Multipass].Angles.y + (PI/2));	/// Originaly -
		Qpo->Transform_Multiply(&Q_Forge->Forge[_->Multipass].ROTATEMatrix, &AIfriendly, &Q_Forge->Forge[_->Multipass].ROTATEMatrix);

		geVec3d_Copy(&Q_Forge->Forge[_->Multipass].Avatar.ActorXform.Translation, &Q_Forge->Forge[_->Multipass].ROTATEMatrix.Translation);

		Q_Forge->Forge[_->Multipass].Avatar.ActorXform = Q_Forge->Forge[_->Multipass].ROTATEMatrix;
		}

	//#######  Analyse Net Player Input  #######
	QNETWORKQ_Netplayer->NetplayerControl(_->Multipass, helly);
}


//=====================================================================================
//	Update Client Character Data
//=====================================================================================
static void QNETWORKUpdateClientCharData(Buffer_Data *Buffer, float Time)
{
	float		DeltaTime, MoveTime/*, NetTime*/;
	geVec3d		Origin = {0.0f, 0.0f, 0.0f};
	uint16		ButtonBits;


	//MessageBox(NULL,"QNETWORKUpdateClientCharData 1  \n","ERROR",MB_OK);


	Buffer_GetFloat(Buffer, &Time);
	
	//###### PREPARE Player Update  #####

	Buffer_GetByte(Buffer, &NomCharDATA);
	Buffer_GetByte(Buffer, &_->NomAIAvatars);

	//### Actor Reference
	Buffer_GetString(Buffer, Q_Netplayer->Netplayer[0].CharDATA.ActorREF);
	Buffer_GetString(Buffer, Q_Netplayer->Netplayer[0].CharDATA.ShadowREF);

	//### Send Mouse Bytes
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.TEAM);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Class);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Level);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ActorSCALE);

	//### Send Key Bytes
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.UnusedXP);

	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.EnergyEff);

	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.LeftArmSTRENGTH);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.RightArmSTRENGTH);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.LeftLegSTRENGTH);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.RightLegSTRENGTH);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.LeftArmSNAP);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.RightArmSNAP);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.LeftLegSNAP);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.RightLegSNAP);

	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Height);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Weight);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.PhysicalStr);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Quickness);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Dexterity);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Constitution);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.AggPower);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.DefPower);

	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.WeaponSKILL.Accuracy);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.WeaponSKILL.DrawSPD);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.WeaponSKILL.ReloadSPD);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailTYPE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailRED);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailGREEN);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailBLUE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailALPHA);
	
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkTYPE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkRED);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkGREEN);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkBLUE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkALPHA);
	
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamTYPE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamRED);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamGREEN);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamBLUE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamALPHA);
	
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeTYPE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeRED);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeGREEN);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeBLUE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeALPHA);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellContainerID[0]);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellContainerID[1]);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellContainerID[2]);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellContainerID[3]);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CurrWEAPON);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CurrHEADARMOUR);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CurrUPPERARMOUR);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CurrLOWERARMOUR);

	//######### -  ITEM DATA LOOP  - #########

	//### Number of Items
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.NomITEMS);

	jet2=0;
	while(jet2 < Q_Netplayer->Netplayer[0].CharDATA.NomITEMS)
		{
		//##### - Set ITEM Name
		Buffer_GetString(Buffer, Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Name);

		//##### - Set Item Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Type);

		//##### - Set Item Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ItemREF);

		if(Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Type == 0)
			{
			//##### - Set Character Item Actor Reference
			Buffer_GetString(Buffer, Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ItemActorREF);
			}

		//##### - Set Item Scale Factor
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ItemScaleFACT);

		//##### - Set Item Quality Level
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QualLVL);

		//##### - Get Item Damage
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Damage);

		//##### - Get Item Power
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Power);

		//##### - Get Item Ammo
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Ammo);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].RecoilHeight);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].RecoilDistance);

		//##### - Get Item Fire Rate
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FireRate);

		//##### - Get Item Accuracy
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Accuracy);

		//##### - Set Item Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].BulletCNT);

		//##### - Set Item Scope Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ScopeTYPE);

		//##### - Set Item Scope Type
		Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ScopeLOC);

		//##### - Set Item Laser Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].LaserTYPE);

		//##### - Set Item Laser Type
		Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].LaserLOC);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_Fire);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_ReloadBoltOut);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_ReloadBoltIn);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_ReloadClipOut);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_ReloadClipIn);

		//##### - Get Item Armour
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ArmourFACTOR);

		//##### - Get Item Armour
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ArmourAMOUNT);

		//##### - Get Item Armour
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ArmourREGEN);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ExpandSTRENGTH);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_NoWEP);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_TimeScale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Gravity);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LifeINC);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyINC);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyEff);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Height);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Weight);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Strength);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Quickness);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Dexterity);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Constitution);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_AggPower);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_DefPower);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmStr);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmStr);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegStr);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegStr);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmSnap);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmSnap);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegSnap);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegSnap);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPAccuracy);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPDrawSPD);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPReloadSPD);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPRecoilHR);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKmovespeed);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKpower);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINK3intensity);

		jet2++;
		}

	//#### ACTIVE SPELLS
	jet2=0;
	while(jet2 < 3)
		{
		//##### - Get Item QA Effect Type
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_TYPE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_INTENSITY);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_SWITCH);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04ALPHA);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_EnergyEff);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Height);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Weight);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Strength);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Quickness);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Dexterity);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Constitution);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_AggPower);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_DefPower);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmStr);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmStr);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegStr);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegStr);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmSnap);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmSnap);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegSnap);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegSnap);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPAccuracy);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPDrawSPD);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPReloadSPD);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPRecoilHR);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKmovespeed);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKpower);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINK3intensity);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].LIVE);

		jet2++;
		}

	//######### -  Physical Attacks SPEC DATA LOOP  - #########

	jet2=0;
	while(jet2 < 30)
		{
		//##### - Get Item Type
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].Power);

		//##### - Get Item Damage
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].Damage);

		//##### - Get Item Power
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].MoveSpeed);

		//##### - Get Item Ammo
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].NumRotate);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].ExpRadius);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].Accuracy);

		jet2++;
		}


	//######### -  Cleric Class Skills LOOP  - #########

	jet=0;
	while(jet < 12)
		{
		//##### - Get Item Type
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Cost);

		//##### - Get Item Damage
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Potency);

		//##### - Get Item Power
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Amount);

		//##### - Get Item Ammo
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Speed);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Duration);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  SPELL DATA LOOP  - #########

	//### Number of Spells
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA_->NomSpells);

	jet=0;
	while(jet < Q_Netplayer->Netplayer[0].CharDATA_->NomSpells)
		{
		//##### - Get Spell Quality
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QualityLVL);

		//##### - Set Spell Attribute IDs
		SHADOW=0;
		while(SHADOW < 10)
			{
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].AttributeID[SHADOW]);
			SHADOW++;
			}

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_TYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Height);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Weight);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Strength);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
		jet++;
		}


	//#### GET ANGEL COLOUR EDIT
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

	jet2=0;
	while(jet2 < 38)
		{
		//##### - Get Item Type
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelCOLOURS.RED[jet2]);

		//##### - Get Item Damage
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelCOLOURS.GREEN[jet2]);

		//##### - Get Item Power
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelCOLOURS.BLUE[jet2]);

		jet2++;
		}


	Q_Netplayer->Netplayer[0].ID = geCSNetMgr_GetServerID(QHost.NMgr->CSNetMgr);
	Q_Netplayer->Netplayer[0].Spawned = 0;
	Q_Netplayer->Netplayer[0].SpawnREADY = 1;
	Q_Netplayer->Netplayer[0].Live = 1;

	_->NETNomNetplayer++;


	//MessageBox(NULL,"QNETWORKUpdateClientCharData 2  \n","ERROR",MB_OK);


	//###### PREPARE Player Update  #####
	//#### Find Player Avatar
	helly2=0;
	while(helly2 < NomCharDATA)
		{
		//MessageBox(NULL,"QNETWORKUpdateClientCharData 3  \n","ERROR",MB_OK);

		//#### Send Net ID
		Buffer_GetByte(Buffer, &TempUint8);
		Q_Netplayer->Netplayer[_->NETNomNetplayer].ID = TempUint8;

		//#### Send Net ID
		Buffer_GetByte(Buffer, &TempUint8);
		Q_Netplayer->Netplayer[_->NETNomNetplayer].LocalCONTROLID = TempUint8;

		//### Actor Reference
		Buffer_GetString(Buffer, Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ActorREF);
		Buffer_GetString(Buffer, Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ShadowREF);

		//### Send Mouse Bytes
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.TEAM);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Class);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Level);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ActorSCALE);

		//MessageBox(NULL,"QNETWORKUpdateClientCharData 4  \n","ERROR",MB_OK);

		//### Send Key Bytes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.UnusedXP);

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.EnergyEff);

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.LeftArmSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.RightArmSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.LeftLegSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.RightLegSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.LeftArmSNAP);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.RightArmSNAP);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.LeftLegSNAP);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.RightLegSNAP);

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.Height);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.Weight);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.PhysicalStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.Quickness);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.Dexterity);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.Constitution);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.AggPower);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.BodySKILL.DefPower);

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.WeaponSKILL.Accuracy);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.WeaponSKILL.DrawSPD);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.WeaponSKILL.ReloadSPD);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);

		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.TrailTYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.TrailRED);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.TrailGREEN);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.TrailBLUE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.TrailALPHA);
		
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.JinkTYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.JinkRED);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.JinkGREEN);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.JinkBLUE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.JinkALPHA);
		
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SteamTYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SteamRED);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SteamGREEN);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SteamBLUE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SteamALPHA);
		
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SpikeTYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SpikeRED);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SpikeGREEN);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SpikeBLUE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelEFFECTS.SpikeALPHA);

		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellContainerID[0]);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellContainerID[1]);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellContainerID[2]);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellContainerID[3]);

		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CurrWEAPON);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CurrHEADARMOUR);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CurrUPPERARMOUR);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CurrLOWERARMOUR);

		//MessageBox(NULL,"QNETWORKUpdateClientCharData 5  \n","ERROR",MB_OK);

		//######### -  ITEM DATA LOOP  - #########

		//### Number of Items
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.NomITEMS);

		jet2=0;
		while(jet2 < Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.NomITEMS)
			{
			//##### - Set ITEM Name
			Buffer_GetString(Buffer, Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Name);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Type);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ItemREF);

			if(Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Type == 0)
				{
				//##### - Set Character Item Actor Reference
				Buffer_GetString(Buffer, Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ItemActorREF);
				}

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ItemScaleFACT);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QualLVL);

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ItemScaleFACT);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QualLVL);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Power);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Ammo);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].RecoilHeight);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].RecoilDistance);

			//##### - Get Item Fire Rate
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FireRate);

			//##### - Get Item Accuracy
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Accuracy);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].BulletCNT);

			//##### - Set Item Scope Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ScopeTYPE);

			//##### - Set Item Scope Type
			Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ScopeLOC);

			//##### - Set Item Laser Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].LaserTYPE);

			//##### - Set Item Laser Type
			Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].LaserLOC);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QAS_Fire);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QAS_ReloadBoltOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QAS_ReloadBoltIn);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QAS_ReloadClipOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QAS_ReloadClipIn);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ArmourFACTOR);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ArmourAMOUNT);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ArmourREGEN);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Smoke.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[0].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[1].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[2].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[3].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Effect[4].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].Fog.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].FogLight.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].ExpandSTRENGTH);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_NoWEP);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_TimeScale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_Gravity);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_LifeINC);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyINC);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyEff);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_Height);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_Weight);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_Strength);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_Quickness);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_Dexterity);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_Constitution);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_AggPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_DefPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPAccuracy);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPDrawSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPReloadSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPRecoilHR);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKmovespeed);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKpower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINK3intensity);

			jet2++;
			}

		//MessageBox(NULL,"QNETWORKUpdateClientCharData 7  \n","ERROR",MB_OK);

		//#### ACTIVE SPELLS
		jet2=0;
		while(jet2 < 3)
			{
			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_TYPE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_INTENSITY);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_SWITCH);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04ALPHA);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_EnergyEff);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Height);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Weight);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Strength);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Quickness);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Dexterity);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Constitution);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_AggPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_DefPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPAccuracy);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPDrawSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPReloadSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPRecoilHR);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKmovespeed);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKpower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINK3intensity);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.SpellSLOT[jet2].LIVE);

			jet2++;
			}

		//######### -  Physical Attacks SPEC DATA LOOP  - #########

		//MessageBox(NULL,"QNETWORKUpdateClientCharData 8  \n","ERROR",MB_OK);

		jet2=0;
		while(jet2 < 30)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AttackSKILL[jet2].Power);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AttackSKILL[jet2].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AttackSKILL[jet2].MoveSpeed);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AttackSKILL[jet2].NumRotate);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AttackSKILL[jet2].ExpRadius);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AttackSKILL[jet2].Accuracy);

			jet2++;
			}

		//MessageBox(NULL,"QNETWORKUpdateClientCharData 9  \n","ERROR",MB_OK);


		//######### -  Cleric Class Skills LOOP  - #########

		jet=0;
		while(jet < 12)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CLSClericSKILL[jet].Cost);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CLSClericSKILL[jet].Potency);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CLSClericSKILL[jet].Amount);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CLSClericSKILL[jet].Speed);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CLSClericSKILL[jet].Duration);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.CLSClericSKILL[jet].Accuracy);

			jet++;
			}

		//MessageBox(NULL,"QNETWORKUpdateClientCharData 10  \n","ERROR",MB_OK);


		//######### -  SPELL DATA LOOP  - #########

		//### Number of Spells
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA_->NomSpells);

		jet=0;
		while(jet < Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA_->NomSpells)
			{
			//##### - Get Spell Quality
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QualityLVL);

			//##### - Set Spell Attribute IDs
			SHADOW=0;
			while(SHADOW < 10)
				{
				Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].AttributeID[SHADOW]);
				SHADOW++;
				}

			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_TYPE);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_Height);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_Weight);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_Strength);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
			jet++;
			}

		//MessageBox(NULL,"QNETWORKUpdateClientCharData 11  \n","ERROR",MB_OK);


		//#### GET ANGEL COLOUR EDIT
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

		jet2=0;
		while(jet2 < 38)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelCOLOURS.RED[jet2]);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelCOLOURS.GREEN[jet2]);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[_->NETNomNetplayer].CharDATA.AngelCOLOURS.BLUE[jet2]);

			jet2++;
			}

		//MessageBox(NULL,"QNETWORKUpdateClientCharData 13  \n","ERROR",MB_OK);


		Q_Netplayer->Netplayer[_->NETNomNetplayer].Spawned = 0;
		Q_Netplayer->Netplayer[_->NETNomNetplayer].SpawnREADY = 1;
		Q_Netplayer->Netplayer[_->NETNomNetplayer].Live = 1;

		_->NETNomNetplayer++;

		helly2++;
		}


	//MessageBox(NULL,"QNETWORKUpdateClientCharData 3  \n","ERROR",MB_OK);


	//###### AI Avatar Update  #####
	//#### Find AI Avatars
	helly2=0;
	while(helly2 < _->NomAIAvatars)
		{
		//### Obtain Correct Character Data for Avatar
		Buffer_GetByte(Buffer, &TempUint8);
		TOBE = TempUint8;

		Buffer_GetByte(Buffer, &TempUint8);
		Q_Forge->Forge[TOBE].CharDATA.TEAM = TempUint8;
		Q_Forge->Forge[TOBE].Team = TempUint8;

		//### Actor Reference
		Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ActorREF);
		Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ShadowREF);

		//### Send Mouse Bytes
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.TEAM);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Class);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Level);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ActorSCALE);

		//### Send Key Bytes
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.UnusedXP);

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.EnergyEff);

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftArmSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightArmSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftLegSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightLegSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftArmSNAP);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightArmSNAP);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftLegSNAP);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightLegSNAP);

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.PhysicalStr);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Quickness);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Dexterity);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Constitution);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.AggPower);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.DefPower);

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.Accuracy);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.DrawSPD);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.ReloadSPD);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);

		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailTYPE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailRED);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailGREEN);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailBLUE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailALPHA);
		
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkTYPE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkRED);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkGREEN);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkBLUE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkALPHA);
		
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamTYPE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamRED);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamGREEN);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamBLUE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamALPHA);
		
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeTYPE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeRED);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeGREEN);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeBLUE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeALPHA);

		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[0]);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[1]);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[2]);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[3]);

		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrWEAPON);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrHEADARMOUR);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrUPPERARMOUR);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrLOWERARMOUR);

		//######### -  ITEM DATA LOOP  - #########

		//### Number of Items
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.NomITEMS);

		jet2=0;
		while(jet2 < Q_Forge->Forge[TOBE].CharDATA.NomITEMS)
			{
			//##### - Set ITEM Name
			Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Name);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Type);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ItemREF);

			if(Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Type == 0)
				{
				//##### - Set Character Item Actor Reference
				Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ItemActorREF);
				}

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ItemScaleFACT);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QualLVL);

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ItemScaleFACT);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QualLVL);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Power);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Ammo);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].RecoilHeight);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].RecoilDistance);

			//##### - Get Item Fire Rate
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FireRate);

			//##### - Get Item Accuracy
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Accuracy);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].BulletCNT);

			//##### - Set Item Scope Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ScopeTYPE);

			//##### - Set Item Scope Type
			Buffer_GetAngle(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ScopeLOC);

			//##### - Set Item Laser Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].LaserTYPE);

			//##### - Set Item Laser Type
			Buffer_GetAngle(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].LaserLOC);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_Fire);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_ReloadBoltOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_ReloadBoltIn);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_ReloadClipOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_ReloadClipIn);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ArmourFACTOR);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ArmourAMOUNT);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ArmourREGEN);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ExpandSTRENGTH);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_NoWEP);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_TimeScale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Gravity);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LifeINC);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyINC);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyEff);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Height);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Weight);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Strength);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Quickness);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Dexterity);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Constitution);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_AggPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_DefPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPAccuracy);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPDrawSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPReloadSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPRecoilHR);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKmovespeed);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKpower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINK3intensity);

			jet2++;
			}

		//#### ACTIVE SPELLS
		jet2=0;
		while(jet2 < 3)
			{
			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_TYPE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_INTENSITY);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_SWITCH);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04ALPHA);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_EnergyEff);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Height);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Weight);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Strength);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Quickness);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Dexterity);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Constitution);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_AggPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_DefPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPAccuracy);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPDrawSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPReloadSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPRecoilHR);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKmovespeed);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKpower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINK3intensity);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].LIVE);

			jet2++;
			}

		//######### -  Physical Attacks SPEC DATA LOOP  - #########

		jet2=0;
		while(jet2 < 30)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].Power);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].MoveSpeed);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].NumRotate);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].ExpRadius);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].Accuracy);

			jet2++;
			}


		//######### -  Cleric Class Skills LOOP  - #########

		jet=0;
		while(jet < 12)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Cost);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Potency);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Amount);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Speed);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Duration);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Accuracy);

			jet++;
			}


		//######### -  SPELL DATA LOOP  - #########

		//### Number of Spells
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA_->NomSpells);

		jet=0;
		while(jet < Q_Forge->Forge[TOBE].CharDATA_->NomSpells)
			{
			//##### - Get Spell Quality
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QualityLVL);

			//##### - Set Spell Attribute IDs
			SHADOW=0;
			while(SHADOW < 10)
				{
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].AttributeID[SHADOW]);
				SHADOW++;
				}

			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_TYPE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Height);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Weight);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Strength);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
			jet++;
			}


		//#### GET ANGEL COLOUR EDIT
		Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

		jet2=0;
		while(jet2 < 38)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.RED[jet2]);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.GREEN[jet2]);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.BLUE[jet2]);

			jet2++;
			}


		//### Obtain Correct Character Data for Avatar
		Q_Forge->Forge[TOBE].Role = 0;
		Q_Forge->Forge[TOBE].Rank = 1;
		Q_Forge->Forge[TOBE].LEVEL = Q_Forge->Forge[TOBE].CharDATA.Level;

		Q_SpawnAvatarAI(TOBE, Q_Forge->Forge[TOBE].Team);

		helly2++;
		}

	//MessageBox(NULL,"QNETWORKUpdateClientCharData 4  \n","ERROR",MB_OK);

	Q_SearchPlayers();

	//MessageBox(NULL,"QNETWORKUpdateClientCharData 5  \n","ERROR",MB_OK);
}


//=====================================================================================
//	Update Client Character Data
//=====================================================================================
static void QNETWORKUpdateClientCharDataUPDATE(Buffer_Data *Buffer, float Time)
{
	float		DeltaTime, MoveTime;
	geVec3d		Origin = {0.0f, 0.0f, 0.0f};
	uint16		ButtonBits;

	//MessageBox(NULL,"QNETWORKUpdateClientCharDataUPDATE 1  \n","ERROR",MB_OK);

	Buffer_GetFloat(Buffer, &Time);

	Buffer_GetByte(Buffer, &TempUint8);

	if(TempUint8 == 185)
		{
		//###### PREPARE Player Update  #####
		Buffer_GetByte(Buffer, &_->NomAIAvatars);

		//### Actor Reference
		Buffer_GetString(Buffer, Q_Netplayer->Netplayer[0].CharDATA.ActorREF);
		Buffer_GetString(Buffer, Q_Netplayer->Netplayer[0].CharDATA.ShadowREF);

		//### Send Mouse Bytes
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.TEAM);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Class);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Level);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ActorSCALE);

		//### Send Key Bytes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.UnusedXP);

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.EnergyEff);

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.LeftArmSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.RightArmSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.LeftLegSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.RightLegSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.LeftArmSNAP);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.RightArmSNAP);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.LeftLegSNAP);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.RightLegSNAP);

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Height);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Weight);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.PhysicalStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Quickness);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Dexterity);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Constitution);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.AggPower);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.DefPower);

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.WeaponSKILL.Accuracy);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.WeaponSKILL.DrawSPD);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.WeaponSKILL.ReloadSPD);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);

		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailTYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailRED);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailGREEN);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailBLUE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.TrailALPHA);
		
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkTYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkRED);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkGREEN);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkBLUE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.JinkALPHA);
		
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamTYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamRED);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamGREEN);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamBLUE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SteamALPHA);
		
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeTYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeRED);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeGREEN);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeBLUE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelEFFECTS.SpikeALPHA);

		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellContainerID[0]);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellContainerID[1]);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellContainerID[2]);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellContainerID[3]);

		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CurrWEAPON);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CurrHEADARMOUR);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CurrUPPERARMOUR);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CurrLOWERARMOUR);

		//######### -  ITEM DATA LOOP  - #########

		//### Number of Items
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.NomITEMS);

		jet2=0;
		while(jet2 < Q_Netplayer->Netplayer[0].CharDATA.NomITEMS)
			{
			//##### - Set ITEM Name
			Buffer_GetString(Buffer, Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Name);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Type);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ItemREF);

			if(Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Type == 0)
				{
				//##### - Set Character Item Actor Reference
				Buffer_GetString(Buffer, Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ItemActorREF);
				}

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ItemScaleFACT);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QualLVL);

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ItemScaleFACT);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QualLVL);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Power);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Ammo);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].RecoilHeight);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].RecoilDistance);

			//##### - Get Item Fire Rate
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FireRate);

			//##### - Get Item Accuracy
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Accuracy);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].BulletCNT);

			//##### - Set Item Scope Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ScopeTYPE);

			//##### - Set Item Scope Type
			Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ScopeLOC);

			//##### - Set Item Laser Type
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].LaserTYPE);

			//##### - Set Item Laser Type
			Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].LaserLOC);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_Fire);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_ReloadBoltOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_ReloadBoltIn);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_ReloadClipOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QAS_ReloadClipIn);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ArmourFACTOR);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ArmourAMOUNT);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ArmourREGEN);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Smoke.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[0].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[1].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[2].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[3].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Effect[4].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].Fog.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].FogLight.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].ExpandSTRENGTH);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_NoWEP);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_TimeScale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Gravity);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LifeINC);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyINC);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyEff);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Height);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Weight);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Strength);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Quickness);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Dexterity);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_Constitution);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_AggPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_DefPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPAccuracy);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPDrawSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPReloadSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPRecoilHR);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKmovespeed);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKpower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINK3intensity);

			jet2++;
			}

		//#### ACTIVE SPELLS
		jet2=0;
		while(jet2 < 3)
			{
			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_TYPE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_INTENSITY);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_SWITCH);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04ALPHA);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_EnergyEff);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Height);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Weight);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Strength);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Quickness);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Dexterity);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Constitution);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_AggPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_DefPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPAccuracy);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPDrawSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPReloadSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPRecoilHR);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKmovespeed);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKpower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINK3intensity);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.SpellSLOT[jet2].LIVE);

			jet2++;
			}

		//######### -  Physical Attacks SPEC DATA LOOP  - #########

		jet2=0;
		while(jet2 < 30)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].Power);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].MoveSpeed);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].NumRotate);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].ExpRadius);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AttackSKILL[jet2].Accuracy);

			jet2++;
			}


		//######### -  Cleric Class Skills LOOP  - #########

		jet=0;
		while(jet < 12)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Cost);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Potency);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Amount);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Speed);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Duration);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.CLSClericSKILL[jet].Accuracy);

			jet++;
			}


		//######### -  SPELL DATA LOOP  - #########

		//### Number of Spells
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA_->NomSpells);

		jet=0;
		while(jet < Q_Netplayer->Netplayer[0].CharDATA_->NomSpells)
			{
			//##### - Get Spell Quality
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QualityLVL);

			//##### - Set Spell Attribute IDs
			SHADOW=0;
			while(SHADOW < 10)
				{
				Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].AttributeID[SHADOW]);
				SHADOW++;
				}

			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_TYPE);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Height);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Weight);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Strength);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
			jet++;
			}


		//#### GET ANGEL COLOUR EDIT
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

		jet2=0;
		while(jet2 < 38)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelCOLOURS.RED[jet2]);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelCOLOURS.GREEN[jet2]);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[0].CharDATA.AngelCOLOURS.BLUE[jet2]);

			jet2++;
			}


		Q_Netplayer->Netplayer[0].ID = geCSNetMgr_GetServerID(QHost.NMgr->CSNetMgr);
		Q_Netplayer->Netplayer[0].Live = 1;

		//#### DEAL WITH UPDATES

		//###### UPDATE SERVER WEAPON
		STRcompare = strcmp(Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[Q_Netplayer->Netplayer[0].CharDATA.CurrWEAPON].ItemActorREF, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrWEAPON].ItemActorREF);

		if(STRcompare != 0)
			{
			if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].WeaponStatus != 0)
				{
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].WeaponATTACHFLAG = 0;
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].WeaponStatus = 0;
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].WeaponHolster = 0;
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].attposecnt = 0;
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Aposestate = 0;
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].blendamount[25] = 0;
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].blendamount[0] = 0;
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].attackon = 0;
				geActor_Detach(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor);
				geVec3d_Copy(&_->Origon, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.ActorXform.Translation);
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].WepAlpha = 0;
				Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].WeaponDrawn = 0;
				}

			NamePlateUpdate();

			geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor);
			geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor);

			NamePlateUpdate();

			egen3d_LoadActor(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.ActorXform, Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[Q_Netplayer->Netplayer[0].CharDATA.CurrWEAPON].ItemActorREF);

			NamePlateUpdate();

			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Mins.X = -20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Mins.Y = -20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Mins.Z = -20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Maxs.X = 20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Maxs.Y = 20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Maxs.Z = 20.f;

			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.ActorDef = egen3d_FullAccess_ActorDef();
			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor = egen3d_FullAccess_Actor();
			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.ActorXform = egen3d_FullAccess_ActorXform();

			geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor, 1.2 + (0.16*(((Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Height/100)-0.5)*2)), 1.2 + (0.16*(((Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Weight/100)-0.5)*2)), 1.2 + (0.16*(((Q_Netplayer->Netplayer[0].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
			geWorld_AddActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0xffffffff);

			NamePlateUpdate();

			Ange.X=-(PI/2);
			Ange.Y=PI;
			Ange.Z=0;

			geXForm3d_RotateX(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.ActorXform, Ange.X);
			geXForm3d_RotateY(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.ActorXform, Ange.Y);
			geXForm3d_RotateZ(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.ActorXform, Ange.Z);
			geVec3d_Copy(&_->Origon, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.ActorXform.Translation);

			geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor,GE_true,&goup,255,255,255,170,170,170,GE_false,0,NULL,GE_true);
			geActor_ClearPose(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.ActorXform);

			geActor_SetAlpha(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor, 0);

			if(Q_Netplayer->Netplayer[0].CharDATA.ItemDATA[Q_Netplayer->Netplayer[0].CharDATA.CurrWEAPON].ItemREF == 3) geActor_SetEnvironOptions( Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Weapon.Actor, &ActorEnviro );

			Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].WeaponDISPLAY = 0;

			NamePlateUpdate();
			}

		//##### ASSIGN CHARACTER DATA
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA = Q_Netplayer->Netplayer[0].CharDATA;

		//#### RESET STATIC VALUES
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Team = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.TEAM;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].LEVEL = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Level;
		
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Mins.X = -(25 + (20*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));    //Mins/Maxs set up the bounding box around our Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID] which is used for
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Mins.Y = -(45 + (30*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));    //collision Detect purposes. It tells it when we are colliding.
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Mins.Z = -(25 + (20*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Maxs.X = (25 + (20*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Maxs.Y = (45 + (30*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Maxs.Z = (25 + (20*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Mins.X = -(20 + (20*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));    //Mins/Maxs set up the bounding box around our Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID] which is used for
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Mins.Y = -(45 + (30*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));    //collision Detect purposes. It tells it when we are colliding.
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Mins.Z = -(20 + (20*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Maxs.X = (20 + (20*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Maxs.Y = (45 + (30*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Maxs.Z = (20 + (20*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

		NamePlateUpdate();

		//####### RELATIVE ATTACK SPEED
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.RELQuickness = 0.2 + (((float)Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Quickness / 100) * 0.8);

		//####### RELATIVE ENERGY EFFICIENCY
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.RELEnergyEff = 1 + ((float)Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.EnergyEff / 6000);

		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_Armour = ((float)(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_MaxArmour = ((float)(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);

		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_MaxHealth = 500 * (((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Constitution/100)*0.6)+0.4);
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_Health = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_MaxHealth;

		//Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_MaxEnergy = 500;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_MaxEnergy = 500;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_Energy = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_MaxEnergy;

		if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].LEVEL > 1000) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].LEVELFactor = 1;
		else Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].LEVELFactor = (((float)Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].LEVEL + 1) / 1000);

		NamePlateUpdate();

		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Extenbox.Min.X = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Mins.X;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Extenbox.Min.Y = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Mins.Y;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Extenbox.Min.Z = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Mins.Z;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Extenbox.Max.X = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Maxs.X;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Extenbox.Max.Y = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Maxs.Y;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Extenbox.Max.Z = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Maxs.Z;
		
		geActor_SetExtBox(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Actor, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Extenbox, "BIP01");

										//SCALE VALUES HEIGHT,WEIGHT,WEIGHT
		geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Actor, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

		geActor_ClearPose(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Actor, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.ActorXform);

		NamePlateUpdate();

		if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.ANGELEDITFLAG == 1)
			{
			//##### ANGEL COLOUR EDIT
			K=0;
			while(K < 38)
				{
				geActor_GetMaterial(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
				geActor_SetMaterial(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.BLUE[K]);
				K++;
				}

			//##### ANGEL COLOUR EDIT
			warp=0;
			while(warp <= 2)
				{
				warp++;
				K=0;
				while(K < 38)
					{
					geActor_GetMaterial(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Shadows[warp].Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
					geActor_SetMaterial(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Shadows[warp].Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.BLUE[K]);
					K++;
					}
				}
			}


		//#### RESET UPDATE FLAGS
		helly2=0;
		while(helly2 < _->NomAI)
			{
			if(helly2 != Q_Netplayer->Netplayer[0].LocalCONTROLID) Q_Forge->Forge[helly2].Updated = 0;
			helly2++;
			}

		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Updated = 1;


		//###### AI Avatar Update  #####
		//#### Find AI Avatars
		helly2=0;
		while(helly2 < _->NomAIAvatars)
			{
			//### Obtain Correct Character Data for Avatar
			Buffer_GetByte(Buffer, &TempUint8);
			TOBE = TempUint8;

			Buffer_GetByte(Buffer, &TempUint8);
			Q_Forge->Forge[TOBE].CharDATA.TEAM = TempUint8;
			Q_Forge->Forge[TOBE].Team = TempUint8;

			//### - STORE CURRENT ACTORS
			strcpy(TEMP_PlayerWEP, Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrWEAPON].ItemActorREF);
			strcpy(TEMP_PlayerACT, Q_Forge->Forge[TOBE].CharDATA.ActorREF);
			strcpy(TEMP_PlayerSACT, Q_Forge->Forge[TOBE].CharDATA.ShadowREF);

			NamePlateUpdate();

			//### Actor Reference
			Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ActorREF);
			Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ShadowREF);

			//### Send Mouse Bytes
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.TEAM);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Class);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Level);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ActorSCALE);

			//### Send Key Bytes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.UnusedXP);

			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.EnergyEff);

			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftArmSTRENGTH);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightArmSTRENGTH);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftLegSTRENGTH);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightLegSTRENGTH);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftArmSNAP);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightArmSNAP);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftLegSNAP);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightLegSNAP);

			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.PhysicalStr);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Quickness);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Dexterity);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Constitution);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.AggPower);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.DefPower);

			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.Accuracy);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.DrawSPD);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.ReloadSPD);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);

			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailTYPE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailRED);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailGREEN);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailBLUE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailALPHA);
			
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkTYPE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkRED);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkGREEN);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkBLUE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkALPHA);
			
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamTYPE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamRED);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamGREEN);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamBLUE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamALPHA);
			
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeTYPE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeRED);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeGREEN);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeBLUE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeALPHA);

			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[0]);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[1]);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[2]);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[3]);

			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrWEAPON);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrHEADARMOUR);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrUPPERARMOUR);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrLOWERARMOUR);

			NamePlateUpdate();

			//######### -  ITEM DATA LOOP  - #########

			//### Number of Items
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.NomITEMS);

			jet2=0;
			while(jet2 < Q_Forge->Forge[TOBE].CharDATA.NomITEMS)
				{
				//##### - Set ITEM Name
				Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Name);

				//##### - Set Item Type
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Type);

				//##### - Set Item Type
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ItemREF);

				if(Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Type == 0)
					{
					//##### - Set Character Item Actor Reference
					Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ItemActorREF);
					}

				//##### - Set Item Scale Factor
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ItemScaleFACT);

				//##### - Set Item Quality Level
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QualLVL);

				//##### - Set Item Scale Factor
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ItemScaleFACT);

				//##### - Set Item Quality Level
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QualLVL);

				//##### - Get Item Damage
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Damage);

				//##### - Get Item Power
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Power);

				//##### - Get Item Ammo
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Ammo);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].RecoilHeight);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].RecoilDistance);

				//##### - Get Item Fire Rate
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FireRate);

				//##### - Get Item Accuracy
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Accuracy);

				//##### - Set Item Type
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].BulletCNT);

				//##### - Set Item Scope Type
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ScopeTYPE);

				//##### - Set Item Scope Type
				Buffer_GetAngle(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ScopeLOC);

				//##### - Set Item Laser Type
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].LaserTYPE);

				//##### - Set Item Laser Type
				Buffer_GetAngle(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].LaserLOC);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_Fire);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_ReloadBoltOut);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_ReloadBoltIn);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_ReloadClipOut);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QAS_ReloadClipIn);

				//##### - Get Item Armour
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ArmourFACTOR);

				//##### - Get Item Armour
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ArmourAMOUNT);

				//##### - Get Item Armour
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ArmourREGEN);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.TYPE);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.INT);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.ON);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Red);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Green);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Blue);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Alpha);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.Scale);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.TIMER);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Smoke.CNT);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].TYPE);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].INT);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].ON);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Red);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Green);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Blue);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Alpha);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].Scale);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].TIMER);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[0].CNT);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].TYPE);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].INT);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].ON);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Red);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Green);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Blue);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Alpha);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].Scale);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].TIMER);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[1].CNT);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].TYPE);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].INT);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].ON);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Red);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Green);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Blue);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Alpha);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].Scale);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].TIMER);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[2].CNT);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].TYPE);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].INT);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].ON);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Red);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Green);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Blue);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Alpha);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].Scale);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].TIMER);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[3].CNT);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].TYPE);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].INT);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].ON);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Red);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Green);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Blue);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Alpha);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].Scale);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].TIMER);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Effect[4].CNT);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.TYPE);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.INT);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.ON);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Red);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Green);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Blue);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Alpha);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.Scale);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.TIMER);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].Fog.CNT);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.TYPE);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.INT);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.ON);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Red);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Green);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Blue);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Alpha);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.Scale);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.TIMER);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].FogLight.CNT);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].ExpandSTRENGTH);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_NoWEP);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_TimeScale);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Gravity);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LifeINC);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyINC);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_IntBoost);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_EnergyEff);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Height);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Weight);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Strength);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Quickness);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Dexterity);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_Constitution);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_AggPower);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_DefPower);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmStr);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmStr);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegStr);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegStr);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_RArmSnap);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LArmSnap);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_RLegSnap);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_LLegSnap);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPAccuracy);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPDrawSPD);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPReloadSPD);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_WEPRecoilHR);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKmovespeed);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINKpower);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet2].QA_ITEMINC_JINK3intensity);

				jet2++;
				}

			NamePlateUpdate();

			//#### ACTIVE SPELLS
			jet2=0;
			while(jet2 < 3)
				{
				//##### - Get Item QA Effect Type
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_TYPE);

				//##### - Set Item QA Effect Intensity
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_INTENSITY);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_SWITCH);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00RED);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL00ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01RED);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL01ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02RED);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL02ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03RED);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL03ALPHA);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04RED);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04GREEN);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04BLUE);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_EFFECT_COL04ALPHA);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_IntBoost);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_EnergyEff);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Height);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Weight);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Strength);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Quickness);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Dexterity);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_Constitution);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_AggPower);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_DefPower);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmStr);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmStr);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegStr);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegStr);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RArmSnap);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LArmSnap);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_RLegSnap);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_LLegSnap);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPAccuracy);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPDrawSPD);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPReloadSPD);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_WEPRecoilHR);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKmovespeed);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINKpower);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].QA_SPELLINC_JINK3intensity);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet2].LIVE);

				jet2++;
				}

			//######### -  Physical Attacks SPEC DATA LOOP  - #########

			jet2=0;
			while(jet2 < 30)
				{
				//##### - Get Item Type
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].Power);

				//##### - Get Item Damage
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].Damage);

				//##### - Get Item Power
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].MoveSpeed);

				//##### - Get Item Ammo
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].NumRotate);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].ExpRadius);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet2].Accuracy);

				jet2++;
				}


			//######### -  Cleric Class Skills LOOP  - #########

			jet=0;
			while(jet < 12)
				{
				//##### - Get Item Type
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Cost);

				//##### - Get Item Damage
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Potency);

				//##### - Get Item Power
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Amount);

				//##### - Get Item Ammo
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Speed);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Duration);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Accuracy);

				jet++;
				}


			//######### -  SPELL DATA LOOP  - #########

			//### Number of Spells
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA_->NomSpells);

			jet=0;
			while(jet < Q_Forge->Forge[TOBE].CharDATA_->NomSpells)
				{
				//##### - Get Spell Quality
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QualityLVL);

				//##### - Set Spell Attribute IDs
				SHADOW=0;
				while(SHADOW < 10)
					{
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].AttributeID[SHADOW]);
					SHADOW++;
					}

				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_TYPE);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Height);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Weight);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Strength);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
				jet++;
				}


			//#### GET ANGEL COLOUR EDIT
			Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

			jet2=0;
			while(jet2 < 38)
				{
				//##### - Get Item Type
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.RED[jet2]);

				//##### - Get Item Damage
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.GREEN[jet2]);

				//##### - Get Item Power
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.BLUE[jet2]);

				jet2++;
				}

			NamePlateUpdate();


			if(Q_Forge->Forge[TOBE].LIVE == 1)
				{
				//#### AVATAR UPDATE CHECK
				STRcompare = strcmp(Q_Forge->Forge[TOBE].CharDATA.ActorREF, TEMP_PlayerACT);

				if(STRcompare != 0)
					{
					geWorld_RemoveActor(World, Q_Forge->Forge[TOBE].Avatar.Actor);
					geActor_Destroy(&Q_Forge->Forge[TOBE].Avatar.Actor);
					if(TEMP_AvatarCLASS[aero] == 2)
						{
						geWorld_RemoveActor(World, Q_Forge->Forge[TOBE].Shield.Actor);
						geActor_Destroy(&Q_Forge->Forge[TOBE].Shield.Actor);
						}

					NamePlateUpdate();

					egen3d_LoadActor(Q_Forge->Forge[TOBE].Avatar.ActorXform, Q_Forge->Forge[TOBE].CharDATA.ActorREF);
					Q_Forge->Forge[TOBE].Avatar.ActorDef = egen3d_FullAccess_ActorDef();
					Q_Forge->Forge[TOBE].Avatar.Actor = egen3d_FullAccess_Actor();
					Q_Forge->Forge[TOBE].Avatar.ActorXform = egen3d_FullAccess_ActorXform();

					NamePlateUpdate();

					Q_Forge->Forge[TOBE].idlespeed = 0.1;
					Q_Forge->Forge[TOBE].JINK3_PowerFactor = 1;

					Q_Forge->Forge[TOBE].GravityAlter = 1;

					geWorld_AddActor(World, Q_Forge->Forge[TOBE].Avatar.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0x00000001);
					Q_Forge->Forge[TOBE].Avatar.Actor->Visible = GE_true;

					NamePlateUpdate();

					Q_Forge->Forge[TOBE].Avatar.Motion[0] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Idle" );
					Q_Forge->Forge[TOBE].Avatar.Motion[1] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Walk" );
					Q_Forge->Forge[TOBE].Avatar.Motion[2] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Run" );
					Q_Forge->Forge[TOBE].Avatar.Motion[3] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Sidestep" );
					Q_Forge->Forge[TOBE].Avatar.Motion[4] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Jump" );
					Q_Forge->Forge[TOBE].Avatar.Motion[5] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LLPunch" );
					Q_Forge->Forge[TOBE].Avatar.Motion[6] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RLPunch" );
					Q_Forge->Forge[TOBE].Avatar.Motion[7] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RHPunch2" );	//RHPunch
					Q_Forge->Forge[TOBE].Avatar.Motion[8] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RMKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[9] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LMPunch" );	//LSPunch needs a home
					Q_Forge->Forge[TOBE].Avatar.Motion[10] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RMPunch" );
					Q_Forge->Forge[TOBE].Avatar.Motion[12] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WalkL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[13] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WalkR" );
					Q_Forge->Forge[TOBE].Avatar.Motion[14] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[15] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunR" );
					Q_Forge->Forge[TOBE].Avatar.Motion[16] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SidestepL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[17] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SidestepR" );
					Q_Forge->Forge[TOBE].Avatar.Motion[18] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Renzou" );		//TODO: Combine these two
					Q_Forge->Forge[TOBE].Avatar.Motion[19] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouE" );		//TODO: Into one
					Q_Forge->Forge[TOBE].Avatar.Motion[20] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RSPunch" );
					Q_Forge->Forge[TOBE].Avatar.Motion[21] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Uppercut" );	//Uppercut
					Q_Forge->Forge[TOBE].Avatar.Motion[22] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HBlock" );
					Q_Forge->Forge[TOBE].Avatar.Motion[23] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Idle2" );
					Q_Forge->Forge[TOBE].Avatar.Motion[24] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouR" );
					Q_Forge->Forge[TOBE].Avatar.Motion[25] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Weapon1" );
					Q_Forge->Forge[TOBE].Avatar.Motion[26] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunWep1L" );
					Q_Forge->Forge[TOBE].Avatar.Motion[27] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunWep1R" );
					Q_Forge->Forge[TOBE].Avatar.Motion[28] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AimWep1" );
					Q_Forge->Forge[TOBE].Avatar.Motion[29] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AXKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[30] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SPKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[31] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[32] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpR" );
					Q_Forge->Forge[TOBE].Avatar.Motion[33] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Cartwheel" );
					Q_Forge->Forge[TOBE].Avatar.Motion[34] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Weapon1UPP" );
					Q_Forge->Forge[TOBE].Avatar.Motion[35] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AimWep1UPP" );
					Q_Forge->Forge[TOBE].Avatar.Motion[36] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "CartWep1" );
					Q_Forge->Forge[TOBE].Avatar.Motion[37] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Idle3" );
					Q_Forge->Forge[TOBE].Avatar.Motion[38] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[39] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HoldDash" );
					Q_Forge->Forge[TOBE].Avatar.Motion[40] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Knee" );
					Q_Forge->Forge[TOBE].Avatar.Motion[41] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[42] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Wave" );
					Q_Forge->Forge[TOBE].Avatar.Motion[43] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HitStom" );
					Q_Forge->Forge[TOBE].Avatar.Motion[44] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HitUpper" );
					Q_Forge->Forge[TOBE].Avatar.Motion[45] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSpiral" );
					Q_Forge->Forge[TOBE].Avatar.Motion[46] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "DodgeL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[47] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "FKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[48] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunBack" );
					Q_Forge->Forge[TOBE].Avatar.Motion[53] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "FallHead" );
					Q_Forge->Forge[TOBE].Avatar.Motion[54] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RHKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[55] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "FlameUpperCut" );
					Q_Forge->Forge[TOBE].Avatar.Motion[56] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HBlockHit" );
					Q_Forge->Forge[TOBE].Avatar.Motion[57] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BackFlip" );
					Q_Forge->Forge[TOBE].Avatar.Motion[58] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WeaponReload" );
					Q_Forge->Forge[TOBE].Avatar.Motion[59] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SpinKickFull" );
					Q_Forge->Forge[TOBE].Avatar.Motion[60] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Crouch" );
					Q_Forge->Forge[TOBE].Avatar.Motion[61] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "CrouchL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[62] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "CrouchR" );
					Q_Forge->Forge[TOBE].Avatar.Motion[67] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "VHKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[68] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Entro" );
					Q_Forge->Forge[TOBE].Avatar.Motion[69] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "TwinDragon1" );
					Q_Forge->Forge[TOBE].Avatar.Motion[70] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "TwinDragon2" );
					Q_Forge->Forge[TOBE].Avatar.Motion[71] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Golrekka" );
					Q_Forge->Forge[TOBE].Avatar.Motion[72] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SkyPush" );
					Q_Forge->Forge[TOBE].Avatar.Motion[73] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Lowtro" );
					Q_Forge->Forge[TOBE].Avatar.Motion[74] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Lowkick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[75] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Legsweep" );
					Q_Forge->Forge[TOBE].Avatar.Motion[76] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Crunch" );
					Q_Forge->Forge[TOBE].Avatar.Motion[77] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Hitwall" );
					Q_Forge->Forge[TOBE].Avatar.Motion[78] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AttFlip" );
					Q_Forge->Forge[TOBE].Avatar.Motion[79] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunAttP" );
					Q_Forge->Forge[TOBE].Avatar.Motion[80] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LowPunchL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[81] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LowPunchR" );
					Q_Forge->Forge[TOBE].Avatar.Motion[82] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LBlock" );
					Q_Forge->Forge[TOBE].Avatar.Motion[83] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LBlockHit" );
					Q_Forge->Forge[TOBE].Avatar.Motion[84] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Hadouken" );
					Q_Forge->Forge[TOBE].Avatar.Motion[85] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HadoukenAir" );
					Q_Forge->Forge[TOBE].Avatar.Motion[86] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AirDash" );
					Q_Forge->Forge[TOBE].Avatar.Motion[87] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HoverKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[88] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RollF" );
					Q_Forge->Forge[TOBE].Avatar.Motion[89] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Taunt1" );
					Q_Forge->Forge[TOBE].Avatar.Motion[90] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Sakurat" );
					Q_Forge->Forge[TOBE].Avatar.Motion[91] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BrollyT" );
					Q_Forge->Forge[TOBE].Avatar.Motion[92] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "PCombo1" );
					Q_Forge->Forge[TOBE].Avatar.Motion[93] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SpiralDown" );
					Q_Forge->Forge[TOBE].Avatar.Motion[94] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSpiralOver" );
					Q_Forge->Forge[TOBE].Avatar.Motion[95] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSmall" );
					Q_Forge->Forge[TOBE].Avatar.Motion[96] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "TwistKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[97] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BackFLipAtt" );
					Q_Forge->Forge[TOBE].Avatar.Motion[98] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Deflect" );
					Q_Forge->Forge[TOBE].Avatar.Motion[99] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSmallL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[100] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSmallR" );
					Q_Forge->Forge[TOBE].Avatar.Motion[101] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "PCombo2" );
					Q_Forge->Forge[TOBE].Avatar.Motion[102] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RushElbow" );
					Q_Forge->Forge[TOBE].Avatar.Motion[103] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HoldBarge" );
					Q_Forge->Forge[TOBE].Avatar.Motion[104] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "DoubleStrike" );
					Q_Forge->Forge[TOBE].Avatar.Motion[105] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LowLunge" );
					Q_Forge->Forge[TOBE].Avatar.Motion[106] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SideChop" );
					Q_Forge->Forge[TOBE].Avatar.Motion[107] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SpinChop" );
					Q_Forge->Forge[TOBE].Avatar.Motion[108] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RollLowL" );
					Q_Forge->Forge[TOBE].Avatar.Motion[109] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RollLowR" );
					//VEHICLE MOTIONS UNUSED
					//Q_Forge->Forge[TOBE].Avatar.Motion[110] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BikeMount" );
					//Q_Forge->Forge[TOBE].Avatar.Motion[111] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BikeRush" );
					//Q_Forge->Forge[TOBE].Avatar.Motion[112] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BikeWheelie" );
					//Q_Forge->Forge[TOBE].Avatar.Motion[113] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BikeIdle" );
					Q_Forge->Forge[TOBE].Avatar.Motion[114] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouP" );
					Q_Forge->Forge[TOBE].Avatar.Motion[115] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouPR" );
					Q_Forge->Forge[TOBE].Avatar.Motion[116] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AttFlipE" );
					Q_Forge->Forge[TOBE].Avatar.Motion[117] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HandSlap" );
					Q_Forge->Forge[TOBE].Avatar.Motion[118] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JSRUSH" );
					Q_Forge->Forge[TOBE].Avatar.Motion[119] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JSRUSHPUNCH" );
					Q_Forge->Forge[TOBE].Avatar.Motion[120] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JSRUSHBG" );
					Q_Forge->Forge[TOBE].Avatar.Motion[121] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JSRUSHKICK" );
					Q_Forge->Forge[TOBE].Avatar.Motion[122] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "StaticKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[123] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunAttK" );
					Q_Forge->Forge[TOBE].Avatar.Motion[124] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RDoubleKick" );
					Q_Forge->Forge[TOBE].Avatar.Motion[125] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WeaponReloadUPP" );
					Q_Forge->Forge[TOBE].Avatar.Motion[126] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunAttK" );
					Q_Forge->Forge[TOBE].Avatar.Motion[127] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "PowerBomb" );
					Q_Forge->Forge[TOBE].Avatar.Motion[128] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LeapDownStrike" );
					Q_Forge->Forge[TOBE].Avatar.Motion[129] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RSPINSTRIKE" );
					Q_Forge->Forge[TOBE].Avatar.Motion[130] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SpinoutLeft" );
					Q_Forge->Forge[TOBE].Avatar.Motion[131] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "OverheadPinwheel" );
					Q_Forge->Forge[TOBE].Avatar.Motion[132] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LeapDownFist" );
					Q_Forge->Forge[TOBE].Avatar.Motion[140] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LookRight" );

					if(Q_Forge->Forge[TOBE].CharDATA.Class == 2)
						{
						Q_Forge->Forge[TOBE].Avatar.Motion[63] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Glance" );
						Q_Forge->Forge[TOBE].Avatar.Motion[65] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HealUPP" );
						Q_Forge->Forge[TOBE].Avatar.Motion[66] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Heal" );
						}

					Q_Forge->Forge[TOBE].Avatar.Motion[133] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Weapon2" );
					Q_Forge->Forge[TOBE].Avatar.Motion[134] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Weapon2UPP" );
					Q_Forge->Forge[TOBE].Avatar.Motion[135] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AimWep2" );
					Q_Forge->Forge[TOBE].Avatar.Motion[136] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AimWep2UPP" );
					Q_Forge->Forge[TOBE].Avatar.Motion[137] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WeaponReload2" );
					Q_Forge->Forge[TOBE].Avatar.Motion[138] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WeaponReload2UPP" );

					//##### ATTENTION REQUIRED
					geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Avatar.Actor,GE_true,&goup,200,200,200,190,145,100,GE_false,8,NULL,GE_true);

					NamePlateUpdate();

					//Starting Rotation
					Ange.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Ang.Y + (PI);
					if(Ange.Y>(2*PI)) Ange.Y = Ange.Y - (PI*2);

					Ange.X=-(PI/2);
					Ange.Z=0;

					// Set the actor's angle
					geXForm3d_RotateX(&Q_Forge->Forge[TOBE].Avatar.ActorXform, Ange.X);		//Update Avatar's starting facing direction
					geXForm3d_RotateY(&Q_Forge->Forge[TOBE].Avatar.ActorXform, Ange.Y);
					geXForm3d_RotateZ(&Q_Forge->Forge[TOBE].Avatar.ActorXform, Ange.Z);

					Q_Forge->Forge[TOBE].Angles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Ang.Y;
					Q_Forge->Forge[TOBE].trueAngles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Ang.Y;
					Q_Forge->Forge[TOBE].STOREAngles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Ang.Y;


					//ATTENTION START POINT CONTROL	***********************************************

					geXForm3d_GetIn(&Q_Forge->Forge[TOBE].Avatar.ActorXform,&Q_Forge->Forge[TOBE].In);

					Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].TempVec.X = 0;
					Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].TempVec.Y = 1;
					Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].TempVec.Z = 0;

					geVec3d_CrossProduct(&Q_Forge->Forge[TOBE].In, &Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].TempVec, &Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].VecRight);
					geVec3d_Normalize(&Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].VecRight);

					Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Push += 40;
					if(Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Push > 300) Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Push = 0;

					geVec3d_MA(&Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Pos, Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Push, &Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].VecRight, &Q_Forge->Forge[TOBE].Avatar.ActorXform.Translation);

					//###### Set the actor to its position
					geVec3d_Copy(&Q_Forge->Forge[TOBE].Avatar.ActorXform.Translation, &Q_Forge->Forge[TOBE].ORIGSTARTPOINT);

					geActor_SetEnvironOptions(Q_Forge->Forge[TOBE].Avatar.Actor, &ActorEnviro );

					geActor_SetStaticLightingOptions( Q_Forge->Forge[TOBE].Avatar.Actor, GE_true, GE_true, 10 );

					Q_Forge->Forge[TOBE].STOREMatrix = Q_Forge->Forge[TOBE].Avatar.ActorXform;
					geVec3d_Copy(&Origin, &Q_Forge->Forge[TOBE].STOREMatrix.Translation);

					Q_Forge->Forge[TOBE].Avatar.Actor->IDflag = AVATARCNT;

					Q_Forge->Forge[TOBE].WeaponAimer = 1.7;

					NamePlateUpdate();

					//### Cleric shield
					if(Q_Forge->Forge[TOBE].CharDATA.Class == 2)
						{
						Q_Forge->Forge[TOBE].Shield.Mins.X = -500.f;
						Q_Forge->Forge[TOBE].Shield.Mins.Y = -500.f;
						Q_Forge->Forge[TOBE].Shield.Mins.Z = -500.f;
						Q_Forge->Forge[TOBE].Shield.Maxs.X = 500.f;
						Q_Forge->Forge[TOBE].Shield.Maxs.Y = 500.f;
						Q_Forge->Forge[TOBE].Shield.Maxs.Z = 500.f;

						egen3d_LoadActor(Q_Forge->Forge[TOBE].Shield.ActorXform, "Actors\\ShockWave.act");
						Q_Forge->Forge[TOBE].Shield.ActorDef = egen3d_FullAccess_ActorDef();
						Q_Forge->Forge[TOBE].Shield.Actor = egen3d_FullAccess_Actor();
						Q_Forge->Forge[TOBE].Shield.ActorXform = egen3d_FullAccess_ActorXform();

						geActor_SetScale(Q_Forge->Forge[TOBE].Shield.Actor, 0.65f,0.65f,0.65f);
						geWorld_AddActor(World, Q_Forge->Forge[TOBE].Shield.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0xffffffff);
						geActor_SetAlpha(Q_Forge->Forge[TOBE].Shield.Actor, 40);

						fogbox.Min.X = Q_Forge->Forge[TOBE].Shield.Mins.X;
						fogbox.Min.Y = Q_Forge->Forge[TOBE].Shield.Mins.Y;
						fogbox.Min.Z = Q_Forge->Forge[TOBE].Shield.Mins.Z;
						fogbox.Max.X = Q_Forge->Forge[TOBE].Shield.Maxs.X;
						fogbox.Max.Y = Q_Forge->Forge[TOBE].Shield.Maxs.Y;
						fogbox.Max.Z = Q_Forge->Forge[TOBE].Shield.Maxs.Z;
						
						geActor_SetExtBox(Q_Forge->Forge[TOBE].Shield.Actor, &fogbox, NULL);

						geActor_ClearPose(Q_Forge->Forge[TOBE].Shield.Actor, &Q_Forge->Forge[TOBE].Shield.ActorXform);
						geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Shield.Actor, GE_false, &goup, 0, 0, 0, 255, 255, 255, GE_false, 0, NULL, GE_false);
						geVec3d_Copy(&_->Origon, &Q_Forge->Forge[TOBE].Shield.ActorXform.Translation);

						Q_Forge->Forge[TOBE].Shield.Actor->IDflag = 251;
						}

					NamePlateUpdate();
					}

				//#### AVATAR UPDATE CHECK
				STRcompare = strcmp(Q_Forge->Forge[TOBE].CharDATA.ShadowREF, TEMP_PlayerSACT);

				if(STRcompare != 0)
					{
					Q_Forge->Forge[TOBE].ShadowsOn = GE_false;
					Q_Forge->Forge[TOBE].ShadowALPHA = 240;

					SHADOW = 0;
					while(SHADOW <= 2)
						{
						SHADOW++;

						NamePlateUpdate();

						geWorld_RemoveActor(World, Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor);
						geActor_Destroy(&Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor);

						egen3d_LoadActor(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform, Q_Forge->Forge[TOBE].CharDATA.ShadowREF);

						NamePlateUpdate();

						Q_Forge->Forge[TOBE].Shadows[SHADOW].Mins.X = -20.f;
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Mins.Y = -20.f;
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Mins.Z = -20.f;
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Maxs.X = 20.f;
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Maxs.Y = 20.f;
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Maxs.Z = 20.f;

						Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef = egen3d_FullAccess_ActorDef();
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor = egen3d_FullAccess_Actor();
						Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform = egen3d_FullAccess_ActorXform();

						geActor_SetScale(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

						geWorld_AddActor(World, Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0x00000001);
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor->Visible = GE_true;

						NamePlateUpdate();

						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[0] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Idle" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[1] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Walk" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[2] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Run" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[3] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Sidestep" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[4] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Jump" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[5] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LLPunch" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[6] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RLPunch" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[7] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RHPunch2" );	//RHPunch
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[8] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RMKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[9] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LMPunch" );	//LSPunch needs a home
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[10] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RMPunch" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[11] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LLPunchA" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[12] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "WalkL" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[13] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "WalkR" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[14] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunL" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[15] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunR" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[16] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SidestepL" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[17] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SidestepR" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[18] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Renzou" );		//TODO: Combine these two
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[19] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RenzouE" );		//TODO: Into one
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[20] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RSPunch" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[21] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Uppercut" );	//Uppercut
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[22] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HBlock" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[23] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Idle2" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[24] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RenzouR" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[25] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Weapon1" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[26] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunWep1L" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[27] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunWep1R" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[28] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AimWep1" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[29] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AXKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[30] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SPKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[31] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JumpL" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[32] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JumpR" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[33] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Cartwheel" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[34] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Weapon1UPP" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[35] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AimWep1UPP" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[36] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "CartWep1" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[37] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Idle3" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[38] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RenzouL" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[39] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HoldDash" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[40] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Knee" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[41] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JumpKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[42] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Wave" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[43] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HitStom" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[44] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HitUpper" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[45] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JumpSpiral" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[46] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "DodgeL" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[47] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "FKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[48] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AirJink" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[49] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunBack" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[50] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AirRushFront" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[51] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HitStorm" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[52] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RapidKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[53] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "FallHead" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[54] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RHKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[55] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "FlameUpperCut" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[56] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HBlockHit" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[57] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "BackFlip" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[58] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "WeaponReload" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[59] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SpinKickFull" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[60] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Crouch" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[61] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "CrouchL" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[62] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "CrouchR" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[63] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LLPunchUPP" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[64] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RLPunchUPP" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[65] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LMPunchUPP" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[66] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LMKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[67] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "VHKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[71] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Golrekka" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[72] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SkyPush" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[76] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Crunch" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[77] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Hitwall" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[78] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AttFlip" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[84] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Hadouken" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[85] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HadoukenAir" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[86] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AirDash" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[87] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HoverKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[88] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RollF" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[90] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Sakurat" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[91] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "BrollyT" );
						//Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[92] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "PCombo1" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[96] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "TwistKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[101] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "PCombo2" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[102] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RushElbow" );

						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[118] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JSRUSH" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[119] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JSRUSHPUNCH" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[120] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JSRUSHBG" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[121] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JSRUSHKICK" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[122] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "StaticKick" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[127] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "PowerBomb" );

						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[128] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LeapDownStrike" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[129] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "CartwheelAtt" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[130] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SpinoutLeft" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[131] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "OverheadPinwheel" );
						Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[132] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LeapDownFist" );

						NamePlateUpdate();

						Ange.X=-(PI/2);
						Ange.Y=PI;
						Ange.Z=0;

						geXForm3d_RotateX(&Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform, Ange.X);
						geXForm3d_RotateY(&Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform, Ange.Y);
						geXForm3d_RotateZ(&Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform, Ange.Z);
						geVec3d_Copy(&_->Origon, &Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform.Translation);

						//geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor,GE_true,&goup,255/((SHADOW+1)/2),255/((SHADOW+1)/2),255/((SHADOW+1)/2),255/((SHADOW+1)/2),255/((SHADOW+1)/2),255/((SHADOW+1)/2),GE_false,0,NULL,GE_true);
						geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor,GE_true,&goup,255,255,255,255,255,255,GE_false,0,NULL,GE_true);
						geActor_SetEnvironOptions(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, &ActorEnviro );

						geActor_ClearPose(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, &Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform);

						geActor_SetAlpha(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, 255/(SHADOW+1));

						Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor->IDflag = AVATARCNT;

						NamePlateUpdate();
						}
					}


				//#### RESET STATIC VALUES
				Q_Forge->Forge[TOBE].CharDATA.TEAM = player[g_Player]->CDATA->AVATARDATA[aero].TEAM;
				Q_Forge->Forge[TOBE].Team = player[g_Player]->CDATA->AVATARDATA[aero].TEAM;

				Q_Forge->Forge[TOBE].LEVEL = Q_Forge->Forge[TOBE].CharDATA.Level;
				
				Q_Forge->Forge[TOBE].Mins.X = -(25 + (20*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));    //Mins/Maxs set up the bounding box around our Q_Forge->Forge[TOBE] which is used for
				Q_Forge->Forge[TOBE].Mins.Y = -(45 + (30*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));    //collision Detect purposes. It tells it when we are colliding.
				Q_Forge->Forge[TOBE].Mins.Z = -(25 + (20*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
				Q_Forge->Forge[TOBE].Maxs.X = (25 + (20*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
				Q_Forge->Forge[TOBE].Maxs.Y = (45 + (30*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
				Q_Forge->Forge[TOBE].Maxs.Z = (25 + (20*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

				Q_Forge->Forge[TOBE].Avatar.Mins.X = -(20 + (20*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));    //Mins/Maxs set up the bounding box around our Q_Forge->Forge[TOBE] which is used for
				Q_Forge->Forge[TOBE].Avatar.Mins.Y = -(45 + (30*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));    //collision Detect purposes. It tells it when we are colliding.
				Q_Forge->Forge[TOBE].Avatar.Mins.Z = -(20 + (20*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
				Q_Forge->Forge[TOBE].Avatar.Maxs.X = (20 + (20*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
				Q_Forge->Forge[TOBE].Avatar.Maxs.Y = (45 + (30*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
				Q_Forge->Forge[TOBE].Avatar.Maxs.Z = (20 + (20*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

				NamePlateUpdate();

				//####### RELATIVE ATTACK SPEED
				Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RELQuickness = 0.2 + (((float)Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Quickness / 100) * 0.8);

				//####### RELATIVE ENERGY EFFICIENCY
				Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RELEnergyEff = 1 + ((float)Q_Forge->Forge[TOBE].CharDATA.BodySKILL.EnergyEff / 6000);

				Q_Forge->Forge[TOBE].HB_Armour = ((float)(Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);
				Q_Forge->Forge[TOBE].HB_MaxArmour = ((float)(Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);

				Q_Forge->Forge[TOBE].HB_MaxHealth = 500 * (((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Constitution/100)*0.6)+0.4);
				Q_Forge->Forge[TOBE].HB_Health = Q_Forge->Forge[TOBE].HB_MaxHealth;

				//Q_Forge->Forge[TOBE].HB_MaxEnergy = 500;
				Q_Forge->Forge[TOBE].HB_MaxEnergy = 500;
				Q_Forge->Forge[TOBE].HB_Energy = Q_Forge->Forge[TOBE].HB_MaxEnergy;

				if(Q_Forge->Forge[TOBE].LEVEL > 1000) Q_Forge->Forge[TOBE].LEVELFactor = 1;
				else Q_Forge->Forge[TOBE].LEVELFactor = (((float)Q_Forge->Forge[TOBE].LEVEL + 1) / 1000);

				NamePlateUpdate();

				Q_Forge->Forge[TOBE].Extenbox.Min.X = Q_Forge->Forge[TOBE].Avatar.Mins.X;
				Q_Forge->Forge[TOBE].Extenbox.Min.Y = Q_Forge->Forge[TOBE].Avatar.Mins.Y;
				Q_Forge->Forge[TOBE].Extenbox.Min.Z = Q_Forge->Forge[TOBE].Avatar.Mins.Z;
				Q_Forge->Forge[TOBE].Extenbox.Max.X = Q_Forge->Forge[TOBE].Avatar.Maxs.X;
				Q_Forge->Forge[TOBE].Extenbox.Max.Y = Q_Forge->Forge[TOBE].Avatar.Maxs.Y;
				Q_Forge->Forge[TOBE].Extenbox.Max.Z = Q_Forge->Forge[TOBE].Avatar.Maxs.Z;
				
				geActor_SetExtBox(Q_Forge->Forge[TOBE].Avatar.Actor, &Q_Forge->Forge[TOBE].Extenbox, "BIP01");

												//SCALE VALUES HEIGHT,WEIGHT,WEIGHT
				geActor_SetScale(Q_Forge->Forge[TOBE].Avatar.Actor, Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

				geActor_ClearPose(Q_Forge->Forge[TOBE].Avatar.Actor, &Q_Forge->Forge[TOBE].Avatar.ActorXform);

				NamePlateUpdate();

				if(Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.ANGELEDITFLAG == 1)
					{
					//##### ANGEL COLOUR EDIT
					K=0;
					while(K < 38)
						{
						geActor_GetMaterial(Q_Forge->Forge[TOBE].Avatar.Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
						geActor_SetMaterial(Q_Forge->Forge[TOBE].Avatar.Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.BLUE[K]);
						K++;
						}

					//##### ANGEL COLOUR EDIT
					warp=0;
					while(warp <= 2)
						{
						warp++;
						K=0;
						while(K < 38)
							{
							geActor_GetMaterial(Q_Forge->Forge[TOBE].Shadows[warp].Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
							geActor_SetMaterial(Q_Forge->Forge[TOBE].Shadows[warp].Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.BLUE[K]);
							K++;
							}
						}
					}


				//#### WEAPON UPDATE CHECK
				STRcompare = strcmp(Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrWEAPON].ItemActorREF, TEMP_PlayerWEP);

				if(STRcompare != 0)
					{
					if(Q_Forge->Forge[TOBE].WeaponStatus != 0)
						{
						Q_Forge->Forge[TOBE].WeaponATTACHFLAG = 0;
						Q_Forge->Forge[TOBE].WeaponStatus = 0;
						Q_Forge->Forge[TOBE].WeaponHolster = 0;
						Q_Forge->Forge[TOBE].attposecnt = 0;
						Q_Forge->Forge[TOBE].Aposestate = 0;
						Q_Forge->Forge[TOBE].blendamount[25] = 0;
						Q_Forge->Forge[TOBE].blendamount[0] = 0;
						Q_Forge->Forge[TOBE].attackon = 0;
						geActor_Detach(Q_Forge->Forge[TOBE].Weapon.Actor);
						geVec3d_Copy(&_->Origon, &Q_Forge->Forge[TOBE].Weapon.ActorXform.Translation);
						Q_Forge->Forge[TOBE].WepAlpha = 0;
						Q_Forge->Forge[TOBE].WeaponDrawn = 0;
						}

					NamePlateUpdate();

					geWorld_RemoveActor(World, Q_Forge->Forge[TOBE].Weapon.Actor);
					geActor_Destroy(&Q_Forge->Forge[TOBE].Weapon.Actor);

					NamePlateUpdate();

					egen3d_LoadActor(Q_Forge->Forge[TOBE].Weapon.ActorXform, Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrWEAPON].ItemActorREF);

					NamePlateUpdate();

					Q_Forge->Forge[TOBE].Weapon.Mins.X = -20.f;
					Q_Forge->Forge[TOBE].Weapon.Mins.Y = -20.f;
					Q_Forge->Forge[TOBE].Weapon.Mins.Z = -20.f;
					Q_Forge->Forge[TOBE].Weapon.Maxs.X = 20.f;
					Q_Forge->Forge[TOBE].Weapon.Maxs.Y = 20.f;
					Q_Forge->Forge[TOBE].Weapon.Maxs.Z = 20.f;

					Q_Forge->Forge[TOBE].Weapon.ActorDef = egen3d_FullAccess_ActorDef();
					Q_Forge->Forge[TOBE].Weapon.Actor = egen3d_FullAccess_Actor();
					Q_Forge->Forge[TOBE].Weapon.ActorXform = egen3d_FullAccess_ActorXform();

					geActor_SetScale(Q_Forge->Forge[TOBE].Weapon.Actor, 1.2 + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height/100)-0.5)*2)), 1.2 + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)), 1.2 + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
					geWorld_AddActor(World, Q_Forge->Forge[TOBE].Weapon.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0xffffffff);

					NamePlateUpdate();

					Ange.X=-(PI/2);
					Ange.Y=PI;
					Ange.Z=0;

					geXForm3d_RotateX(&Q_Forge->Forge[TOBE].Weapon.ActorXform, Ange.X);
					geXForm3d_RotateY(&Q_Forge->Forge[TOBE].Weapon.ActorXform, Ange.Y);
					geXForm3d_RotateZ(&Q_Forge->Forge[TOBE].Weapon.ActorXform, Ange.Z);
					geVec3d_Copy(&_->Origon, &Q_Forge->Forge[TOBE].Weapon.ActorXform.Translation);

					geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Weapon.Actor,GE_true,&goup,255,255,255,170,170,170,GE_false,0,NULL,GE_true);
					geActor_ClearPose(Q_Forge->Forge[TOBE].Weapon.Actor, &Q_Forge->Forge[TOBE].Weapon.ActorXform);

					geActor_SetAlpha(Q_Forge->Forge[TOBE].Weapon.Actor, 0);

					if(Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrWEAPON].ItemREF == 3) geActor_SetEnvironOptions( Q_Forge->Forge[TOBE].Weapon.Actor, &ActorEnviro );

					Q_Forge->Forge[TOBE].WeaponDISPLAY = 0;

					NamePlateUpdate();
					}

				//### Obtain Correct Character Data for Avatar
				Q_Forge->Forge[TOBE].Role = 0;
				Q_Forge->Forge[TOBE].Rank = 1;
				Q_Forge->Forge[TOBE].LEVEL = Q_Forge->Forge[TOBE].CharDATA.Level;

				//#### Update Flag
				Q_Forge->Forge[TOBE].Updated = 1;
				}
			else
				{
				//##### SPAWN NEW AVATAR IN SLOT
				Q_Forge->Forge[TOBE].LIVE = 1;
				Q_Forge->Forge[TOBE].Avatar.upspeed = -15;
				Q_Forge->Forge[TOBE].Avatar.ModelCounter = 0;
				Q_Forge->Forge[TOBE].Avatar.Mins.X = -25.f;
				Q_Forge->Forge[TOBE].Avatar.Mins.Y = -45.f;
				Q_Forge->Forge[TOBE].Avatar.Mins.Z = -25.f;
				Q_Forge->Forge[TOBE].Avatar.Maxs.X = 25.f;
				Q_Forge->Forge[TOBE].Avatar.Maxs.Y = 45.f;
				Q_Forge->Forge[TOBE].Avatar.Maxs.Z = 25.f;

				Q_Forge->Forge[TOBE].PlayerSpeed = PLAYER_SPEED;

				//Fill Weapon Ammo
				Q_Forge->Forge[TOBE].WeaponAmmo = 32;

				Q_Forge->Forge[TOBE].HB_Illumination = 255;
				Q_Forge->Forge[TOBE].HB_Dead = 0;

				Q_Forge->Forge[TOBE].Q_Brain.Aggression = 70;

				NamePlateUpdate();

				//###### AVATAR SELECTION
				
				//### Obtain Correct Character Data for Avatar
				Q_Forge->Forge[TOBE].Team = Q_Forge->Forge[TOBE].CharDATA.TEAM;
				Q_Forge->Forge[TOBE].AVDATID = TOBE;
				//player[g_Player]->CDATA->AVATARDATA[aero].AVATARID = TOBE;

				//#### Set Roler
				Q_Forge->Forge[TOBE].Role = 0;
				Q_Forge->Forge[TOBE].Rank = 1;
				Q_Forge->Forge[TOBE].LEVEL = Q_Forge->Forge[TOBE].CharDATA.Level;

				egen3d_LoadActor(Q_Forge->Forge[TOBE].Avatar.ActorXform, Q_Forge->Forge[TOBE].CharDATA.ActorREF);
				Q_Forge->Forge[TOBE].Avatar.ActorDef = egen3d_FullAccess_ActorDef();
				Q_Forge->Forge[TOBE].Avatar.Actor = egen3d_FullAccess_Actor();
				Q_Forge->Forge[TOBE].Avatar.ActorXform = egen3d_FullAccess_ActorXform();

				NamePlateUpdate();

				geActor_SetScale(Q_Forge->Forge[TOBE].Avatar.Actor, Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
				Q_Forge->Forge[TOBE].idlespeed = 0.1;

				if(Q_Forge->Forge[TOBE].LEVEL > 1000) Q_Forge->Forge[TOBE].LEVELFactor = 1;
				else Q_Forge->Forge[TOBE].LEVELFactor = (((float)Q_Forge->Forge[TOBE].LEVEL + 1) / 1000);


				Q_Forge->Forge[TOBE].HB_MaxHealth = 500 * (((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Constitution/100)*0.6)+0.4);
				Q_Forge->Forge[TOBE].HB_Health = Q_Forge->Forge[TOBE].HB_MaxHealth;

				Q_Forge->Forge[TOBE].HB_MaxEnergy = 500;
				Q_Forge->Forge[TOBE].HB_Energy = Q_Forge->Forge[TOBE].HB_MaxEnergy;

				Q_Forge->Forge[TOBE].HB_Armour = ((float)(Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);
				Q_Forge->Forge[TOBE].HB_MaxArmour = ((float)(Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);

				Q_Forge->Forge[TOBE].JINK3_PowerFactor = 1;

				Q_Forge->Forge[TOBE].GravityAlter = 1;


				//#### RESET SPELLS
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[0].LIVE = 0;
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[1].LIVE = 0;
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[2].LIVE = 0;
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[3].LIVE = 0;
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[4].LIVE = 0;
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[5].LIVE = 0;
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[6].LIVE = 0;
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[7].LIVE = 0;
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[8].LIVE = 0;
				Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[9].LIVE = 0;

				//ACTOR SETUP AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				
				//####### RELATIVE ATTACK SPEED
				Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RELQuickness = 0.2 + (((float)Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Quickness / 100) * 0.8);

				//####### RELATIVE ENERGY EFFICIENCY
				Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RELEnergyEff = 1 + ((float)Q_Forge->Forge[TOBE].CharDATA.BodySKILL.EnergyEff / 6000);


				geWorld_AddActor(World, Q_Forge->Forge[TOBE].Avatar.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0x00000001);
				Q_Forge->Forge[TOBE].Avatar.Actor->Visible = GE_true;

				NamePlateUpdate();

				Q_Forge->Forge[TOBE].Avatar.Motion[0] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Idle" );
				Q_Forge->Forge[TOBE].Avatar.Motion[1] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Walk" );
				Q_Forge->Forge[TOBE].Avatar.Motion[2] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Run" );
				Q_Forge->Forge[TOBE].Avatar.Motion[3] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Sidestep" );
				Q_Forge->Forge[TOBE].Avatar.Motion[4] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Jump" );
				Q_Forge->Forge[TOBE].Avatar.Motion[5] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LLPunch" );
				Q_Forge->Forge[TOBE].Avatar.Motion[6] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RLPunch" );
				Q_Forge->Forge[TOBE].Avatar.Motion[7] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RHPunch2" );	//RHPunch
				Q_Forge->Forge[TOBE].Avatar.Motion[8] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RMKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[9] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LMPunch" );	//LSPunch needs a home
				Q_Forge->Forge[TOBE].Avatar.Motion[10] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RMPunch" );
				Q_Forge->Forge[TOBE].Avatar.Motion[12] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WalkL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[13] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WalkR" );
				Q_Forge->Forge[TOBE].Avatar.Motion[14] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[15] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunR" );
				Q_Forge->Forge[TOBE].Avatar.Motion[16] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SidestepL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[17] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SidestepR" );
				Q_Forge->Forge[TOBE].Avatar.Motion[18] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Renzou" );		//TODO: Combine these two
				Q_Forge->Forge[TOBE].Avatar.Motion[19] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouE" );		//TODO: Into one
				Q_Forge->Forge[TOBE].Avatar.Motion[20] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RSPunch" );
				Q_Forge->Forge[TOBE].Avatar.Motion[21] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Uppercut" );	//Uppercut
				Q_Forge->Forge[TOBE].Avatar.Motion[22] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HBlock" );
				Q_Forge->Forge[TOBE].Avatar.Motion[23] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Idle2" );
				Q_Forge->Forge[TOBE].Avatar.Motion[24] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouR" );
				Q_Forge->Forge[TOBE].Avatar.Motion[25] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Weapon1" );
				Q_Forge->Forge[TOBE].Avatar.Motion[26] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunWep1L" );
				Q_Forge->Forge[TOBE].Avatar.Motion[27] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunWep1R" );
				Q_Forge->Forge[TOBE].Avatar.Motion[28] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AimWep1" );
				Q_Forge->Forge[TOBE].Avatar.Motion[29] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AXKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[30] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SPKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[31] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[32] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpR" );
				Q_Forge->Forge[TOBE].Avatar.Motion[33] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Cartwheel" );
				Q_Forge->Forge[TOBE].Avatar.Motion[34] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Weapon1UPP" );
				Q_Forge->Forge[TOBE].Avatar.Motion[35] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AimWep1UPP" );
				Q_Forge->Forge[TOBE].Avatar.Motion[36] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "CartWep1" );
				Q_Forge->Forge[TOBE].Avatar.Motion[37] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Idle3" );
				Q_Forge->Forge[TOBE].Avatar.Motion[38] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[39] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HoldDash" );
				Q_Forge->Forge[TOBE].Avatar.Motion[40] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Knee" );
				Q_Forge->Forge[TOBE].Avatar.Motion[41] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[42] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Wave" );
				Q_Forge->Forge[TOBE].Avatar.Motion[43] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HitStom" );
				Q_Forge->Forge[TOBE].Avatar.Motion[44] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HitUpper" );
				Q_Forge->Forge[TOBE].Avatar.Motion[45] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSpiral" );
				Q_Forge->Forge[TOBE].Avatar.Motion[46] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "DodgeL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[47] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "FKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[48] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunBack" );
				Q_Forge->Forge[TOBE].Avatar.Motion[53] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "FallHead" );
				Q_Forge->Forge[TOBE].Avatar.Motion[54] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RHKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[55] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "FlameUpperCut" );
				Q_Forge->Forge[TOBE].Avatar.Motion[56] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HBlockHit" );
				Q_Forge->Forge[TOBE].Avatar.Motion[57] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BackFlip" );
				Q_Forge->Forge[TOBE].Avatar.Motion[58] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WeaponReload" );
				Q_Forge->Forge[TOBE].Avatar.Motion[59] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SpinKickFull" );
				Q_Forge->Forge[TOBE].Avatar.Motion[60] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Crouch" );
				Q_Forge->Forge[TOBE].Avatar.Motion[61] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "CrouchL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[62] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "CrouchR" );
				Q_Forge->Forge[TOBE].Avatar.Motion[67] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "VHKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[68] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Entro" );
				Q_Forge->Forge[TOBE].Avatar.Motion[69] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "TwinDragon1" );
				Q_Forge->Forge[TOBE].Avatar.Motion[70] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "TwinDragon2" );
				Q_Forge->Forge[TOBE].Avatar.Motion[71] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Golrekka" );
				Q_Forge->Forge[TOBE].Avatar.Motion[72] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SkyPush" );
				Q_Forge->Forge[TOBE].Avatar.Motion[73] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Lowtro" );
				Q_Forge->Forge[TOBE].Avatar.Motion[74] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Lowkick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[75] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Legsweep" );
				Q_Forge->Forge[TOBE].Avatar.Motion[76] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Crunch" );
				Q_Forge->Forge[TOBE].Avatar.Motion[77] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Hitwall" );
				Q_Forge->Forge[TOBE].Avatar.Motion[78] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AttFlip" );
				Q_Forge->Forge[TOBE].Avatar.Motion[79] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunAttP" );
				Q_Forge->Forge[TOBE].Avatar.Motion[80] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LowPunchL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[81] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LowPunchR" );
				Q_Forge->Forge[TOBE].Avatar.Motion[82] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LBlock" );
				Q_Forge->Forge[TOBE].Avatar.Motion[83] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LBlockHit" );
				Q_Forge->Forge[TOBE].Avatar.Motion[84] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Hadouken" );
				Q_Forge->Forge[TOBE].Avatar.Motion[85] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HadoukenAir" );
				Q_Forge->Forge[TOBE].Avatar.Motion[86] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AirDash" );
				Q_Forge->Forge[TOBE].Avatar.Motion[87] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HoverKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[88] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RollF" );
				Q_Forge->Forge[TOBE].Avatar.Motion[89] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Taunt1" );
				Q_Forge->Forge[TOBE].Avatar.Motion[90] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Sakurat" );
				Q_Forge->Forge[TOBE].Avatar.Motion[91] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BrollyT" );
				Q_Forge->Forge[TOBE].Avatar.Motion[92] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "PCombo1" );
				Q_Forge->Forge[TOBE].Avatar.Motion[93] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SpiralDown" );
				Q_Forge->Forge[TOBE].Avatar.Motion[94] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSpiralOver" );
				Q_Forge->Forge[TOBE].Avatar.Motion[95] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSmall" );
				Q_Forge->Forge[TOBE].Avatar.Motion[96] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "TwistKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[97] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BackFLipAtt" );
				Q_Forge->Forge[TOBE].Avatar.Motion[98] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Deflect" );
				Q_Forge->Forge[TOBE].Avatar.Motion[99] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSmallL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[100] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JumpSmallR" );
				Q_Forge->Forge[TOBE].Avatar.Motion[101] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "PCombo2" );
				Q_Forge->Forge[TOBE].Avatar.Motion[102] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RushElbow" );
				Q_Forge->Forge[TOBE].Avatar.Motion[103] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HoldBarge" );
				Q_Forge->Forge[TOBE].Avatar.Motion[104] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "DoubleStrike" );
				Q_Forge->Forge[TOBE].Avatar.Motion[105] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LowLunge" );
				Q_Forge->Forge[TOBE].Avatar.Motion[106] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SideChop" );
				Q_Forge->Forge[TOBE].Avatar.Motion[107] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SpinChop" );
				Q_Forge->Forge[TOBE].Avatar.Motion[108] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RollLowL" );
				Q_Forge->Forge[TOBE].Avatar.Motion[109] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RollLowR" );
				//VEHICLE MOTIONS UNUSED
				//Q_Forge->Forge[TOBE].Avatar.Motion[110] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BikeMount" );
				//Q_Forge->Forge[TOBE].Avatar.Motion[111] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BikeRush" );
				//Q_Forge->Forge[TOBE].Avatar.Motion[112] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BikeWheelie" );
				//Q_Forge->Forge[TOBE].Avatar.Motion[113] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "BikeIdle" );
				Q_Forge->Forge[TOBE].Avatar.Motion[114] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouP" );
				Q_Forge->Forge[TOBE].Avatar.Motion[115] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RenzouPR" );
				Q_Forge->Forge[TOBE].Avatar.Motion[116] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AttFlipE" );
				Q_Forge->Forge[TOBE].Avatar.Motion[117] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HandSlap" );
				Q_Forge->Forge[TOBE].Avatar.Motion[118] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JSRUSH" );
				Q_Forge->Forge[TOBE].Avatar.Motion[119] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JSRUSHPUNCH" );
				Q_Forge->Forge[TOBE].Avatar.Motion[120] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JSRUSHBG" );
				Q_Forge->Forge[TOBE].Avatar.Motion[121] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "JSRUSHKICK" );
				Q_Forge->Forge[TOBE].Avatar.Motion[122] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "StaticKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[123] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunAttK" );
				Q_Forge->Forge[TOBE].Avatar.Motion[124] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RDoubleKick" );
				Q_Forge->Forge[TOBE].Avatar.Motion[125] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WeaponReloadUPP" );
				Q_Forge->Forge[TOBE].Avatar.Motion[126] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RunAttK" );
				Q_Forge->Forge[TOBE].Avatar.Motion[127] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "PowerBomb" );
				Q_Forge->Forge[TOBE].Avatar.Motion[128] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LeapDownStrike" );
				Q_Forge->Forge[TOBE].Avatar.Motion[129] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "RSPINSTRIKE" );
				Q_Forge->Forge[TOBE].Avatar.Motion[130] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "SpinoutLeft" );
				Q_Forge->Forge[TOBE].Avatar.Motion[131] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "OverheadPinwheel" );
				Q_Forge->Forge[TOBE].Avatar.Motion[132] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LeapDownFist" );
				Q_Forge->Forge[TOBE].Avatar.Motion[140] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "LookRight" );

				if(Q_Forge->Forge[TOBE].CharDATA.Class == 2)
					{
					Q_Forge->Forge[TOBE].Avatar.Motion[63] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Glance" );
					Q_Forge->Forge[TOBE].Avatar.Motion[65] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "HealUPP" );
					Q_Forge->Forge[TOBE].Avatar.Motion[66] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Heal" );
					}

				Q_Forge->Forge[TOBE].Avatar.Motion[133] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Weapon2" );
				Q_Forge->Forge[TOBE].Avatar.Motion[134] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "Weapon2UPP" );
				Q_Forge->Forge[TOBE].Avatar.Motion[135] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AimWep2" );
				Q_Forge->Forge[TOBE].Avatar.Motion[136] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "AimWep2UPP" );
				Q_Forge->Forge[TOBE].Avatar.Motion[137] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WeaponReload2" );
				Q_Forge->Forge[TOBE].Avatar.Motion[138] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Avatar.ActorDef, "WeaponReload2UPP" );

				NamePlateUpdate();

				//##### ATTENTION REQUIRED
				geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Avatar.Actor,GE_true,&goup,200,200,200,190,145,100,GE_false,8,NULL,GE_true);

				//Starting Rotation
				Ange.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Ang.Y + (PI);
				if(Ange.Y>(2*PI)) Ange.Y = Ange.Y - (PI*2);

				Ange.X=-(PI/2);
				Ange.Z=0;

				// Set the actor's angle
				geXForm3d_RotateX(&Q_Forge->Forge[TOBE].Avatar.ActorXform, Ange.X);		//Update Avatar's starting facing direction
				geXForm3d_RotateY(&Q_Forge->Forge[TOBE].Avatar.ActorXform, Ange.Y);
				geXForm3d_RotateZ(&Q_Forge->Forge[TOBE].Avatar.ActorXform, Ange.Z);

				Q_Forge->Forge[TOBE].Angles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Ang.Y;
				Q_Forge->Forge[TOBE].trueAngles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Ang.Y;
				Q_Forge->Forge[TOBE].STOREAngles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Ang.Y;

				NamePlateUpdate();

				//ATTENTION START POINT CONTROL	***********************************************

				geXForm3d_GetIn(&Q_Forge->Forge[TOBE].Avatar.ActorXform,&Q_Forge->Forge[TOBE].In);

				Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].TempVec.X = 0;
				Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].TempVec.Y = 1;
				Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].TempVec.Z = 0;

				geVec3d_CrossProduct(&Q_Forge->Forge[TOBE].In, &Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].TempVec, &Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].VecRight);
				geVec3d_Normalize(&Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].VecRight);

				Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Push += 40;
				if(Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Push > 300) Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Push = 0;

				geVec3d_MA(&Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Pos, Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].Push, &Q_StartPoints->StartPoints[Q_Forge->Forge[TOBE].Team].VecRight, &Q_Forge->Forge[TOBE].Avatar.ActorXform.Translation);

				//###### Set the actor to its position
				geVec3d_Copy(&Q_Forge->Forge[TOBE].Avatar.ActorXform.Translation, &Q_Forge->Forge[TOBE].ORIGSTARTPOINT);

				//*****************************************************************************

				geActor_ClearPose(Q_Forge->Forge[TOBE].Avatar.Actor, &Q_Forge->Forge[TOBE].Avatar.ActorXform);

				Q_Forge->Forge[TOBE].Extenbox.Min.X = Q_Forge->Forge[TOBE].Avatar.Mins.X;
				Q_Forge->Forge[TOBE].Extenbox.Min.Y = Q_Forge->Forge[TOBE].Avatar.Mins.Y;
				Q_Forge->Forge[TOBE].Extenbox.Min.Z = Q_Forge->Forge[TOBE].Avatar.Mins.Z;
				Q_Forge->Forge[TOBE].Extenbox.Max.X = Q_Forge->Forge[TOBE].Avatar.Maxs.X;
				Q_Forge->Forge[TOBE].Extenbox.Max.Y = Q_Forge->Forge[TOBE].Avatar.Maxs.Y;
				Q_Forge->Forge[TOBE].Extenbox.Max.Z = Q_Forge->Forge[TOBE].Avatar.Maxs.Z;
				
				geActor_SetExtBox(Q_Forge->Forge[TOBE].Avatar.Actor, &Q_Forge->Forge[TOBE].Extenbox, "BIP01");

				geActor_SetEnvironOptions(Q_Forge->Forge[TOBE].Avatar.Actor, &ActorEnviro );

				geActor_SetStaticLightingOptions( Q_Forge->Forge[TOBE].Avatar.Actor, GE_true, GE_true, 10 );

				Q_Forge->Forge[TOBE].STOREMatrix = Q_Forge->Forge[TOBE].Avatar.ActorXform;
				geVec3d_Copy(&Origin, &Q_Forge->Forge[TOBE].STOREMatrix.Translation);

				Q_Forge->Forge[TOBE].Avatar.Actor->IDflag = TOBE;

				Q_Forge->Forge[TOBE].WeaponAimer = 1.7;

				NamePlateUpdate();

				//### Load Avatar Weapon

				if(1)
					{
					egen3d_LoadActor(Q_Forge->Forge[TOBE].Weapon.ActorXform, Q_Forge->Forge[TOBE].CharDATA.ItemDATA[Q_Forge->Forge[TOBE].CharDATA.CurrWEAPON].ItemActorREF);

					Q_Forge->Forge[TOBE].Weapon.Mins.X = -20.f;
					Q_Forge->Forge[TOBE].Weapon.Mins.Y = -20.f;
					Q_Forge->Forge[TOBE].Weapon.Mins.Z = -20.f;
					Q_Forge->Forge[TOBE].Weapon.Maxs.X = 20.f;
					Q_Forge->Forge[TOBE].Weapon.Maxs.Y = 20.f;
					Q_Forge->Forge[TOBE].Weapon.Maxs.Z = 20.f;

					Q_Forge->Forge[TOBE].Weapon.ActorDef = egen3d_FullAccess_ActorDef();
					Q_Forge->Forge[TOBE].Weapon.Actor = egen3d_FullAccess_Actor();
					Q_Forge->Forge[TOBE].Weapon.ActorXform = egen3d_FullAccess_ActorXform();

					geActor_SetScale(Q_Forge->Forge[TOBE].Weapon.Actor, 1.2 + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height/100)-0.5)*2)), 1.2 + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)), 1.2 + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
					geWorld_AddActor(World, Q_Forge->Forge[TOBE].Weapon.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0xffffffff);
					Q_Forge->Forge[TOBE].Weapon.Actor->Visible = GE_true;

					Ange.X=-(PI/2);
					Ange.Y=PI;
					Ange.Z=0;

					geXForm3d_RotateX(&Q_Forge->Forge[TOBE].Weapon.ActorXform, Ange.X);
					geXForm3d_RotateY(&Q_Forge->Forge[TOBE].Weapon.ActorXform, Ange.Y);
					geXForm3d_RotateZ(&Q_Forge->Forge[TOBE].Weapon.ActorXform, Ange.Z);
					geVec3d_Copy(&_->Origon, &Q_Forge->Forge[TOBE].Weapon.ActorXform.Translation);

					geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Weapon.Actor,GE_true,&goup,255,255,255,170,170,170,GE_false,0,NULL,GE_true);
					geActor_ClearPose(Q_Forge->Forge[TOBE].Weapon.Actor, &Q_Forge->Forge[TOBE].Weapon.ActorXform);

					geActor_SetAlpha(Q_Forge->Forge[TOBE].Weapon.Actor, 0);

					Q_Forge->Forge[TOBE].WeaponDISPLAY = 0;
					}

				NamePlateUpdate();

				if(Q_Forge->Forge[TOBE].CharDATA.Class == 2)
					{
					Q_Forge->Forge[TOBE].Shield.Mins.X = -500.f;
					Q_Forge->Forge[TOBE].Shield.Mins.Y = -500.f;
					Q_Forge->Forge[TOBE].Shield.Mins.Z = -500.f;
					Q_Forge->Forge[TOBE].Shield.Maxs.X = 500.f;
					Q_Forge->Forge[TOBE].Shield.Maxs.Y = 500.f;
					Q_Forge->Forge[TOBE].Shield.Maxs.Z = 500.f;

					egen3d_LoadActor(Q_Forge->Forge[TOBE].Shield.ActorXform, "Actors\\ShockWave.act");
					Q_Forge->Forge[TOBE].Shield.ActorDef = egen3d_FullAccess_ActorDef();
					Q_Forge->Forge[TOBE].Shield.Actor = egen3d_FullAccess_Actor();
					Q_Forge->Forge[TOBE].Shield.ActorXform = egen3d_FullAccess_ActorXform();

					geActor_SetScale(Q_Forge->Forge[TOBE].Shield.Actor, 0.65f,0.65f,0.65f);
					geWorld_AddActor(World, Q_Forge->Forge[TOBE].Shield.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0xffffffff);
					geActor_SetAlpha(Q_Forge->Forge[TOBE].Shield.Actor, 40);

					fogbox.Min.X = Q_Forge->Forge[TOBE].Shield.Mins.X;
					fogbox.Min.Y = Q_Forge->Forge[TOBE].Shield.Mins.Y;
					fogbox.Min.Z = Q_Forge->Forge[TOBE].Shield.Mins.Z;
					fogbox.Max.X = Q_Forge->Forge[TOBE].Shield.Maxs.X;
					fogbox.Max.Y = Q_Forge->Forge[TOBE].Shield.Maxs.Y;
					fogbox.Max.Z = Q_Forge->Forge[TOBE].Shield.Maxs.Z;
					
					geActor_SetExtBox(Q_Forge->Forge[TOBE].Shield.Actor, &fogbox, NULL);

					geActor_ClearPose(Q_Forge->Forge[TOBE].Shield.Actor, &Q_Forge->Forge[TOBE].Shield.ActorXform);
					geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Shield.Actor, GE_false, &goup, 0, 0, 0, 255, 255, 255, GE_false, 0, NULL, GE_false);
					geVec3d_Copy(&_->Origon, &Q_Forge->Forge[TOBE].Shield.ActorXform.Translation);

					Q_Forge->Forge[TOBE].Shield.Actor->IDflag = 251;
					}

				NamePlateUpdate();

				//### Load Fighter Shadows

				Q_Forge->Forge[TOBE].ShadowsOn = GE_false;

				Q_Forge->Forge[TOBE].ShadowALPHA = 240;

				SHADOW = 0;
				while(SHADOW <= 2)
					{
					SHADOW++;

					egen3d_LoadActor(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform, Q_Forge->Forge[TOBE].CharDATA.ShadowREF);

					NamePlateUpdate();

					Q_Forge->Forge[TOBE].Shadows[SHADOW].Mins.X = -20.f;
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Mins.Y = -20.f;
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Mins.Z = -20.f;
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Maxs.X = 20.f;
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Maxs.Y = 20.f;
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Maxs.Z = 20.f;

					Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef = egen3d_FullAccess_ActorDef();
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor = egen3d_FullAccess_Actor();
					Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform = egen3d_FullAccess_ActorXform();

					geActor_SetScale(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

					geWorld_AddActor(World, Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0x00000001);
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor->Visible = GE_true;

					NamePlateUpdate();

					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[0] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Idle" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[1] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Walk" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[2] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Run" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[3] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Sidestep" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[4] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Jump" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[5] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LLPunch" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[6] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RLPunch" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[7] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RHPunch2" );	//RHPunch
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[8] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RMKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[9] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LMPunch" );	//LSPunch needs a home
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[10] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RMPunch" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[11] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LLPunchA" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[12] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "WalkL" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[13] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "WalkR" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[14] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunL" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[15] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunR" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[16] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SidestepL" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[17] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SidestepR" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[18] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Renzou" );		//TODO: Combine these two
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[19] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RenzouE" );		//TODO: Into one
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[20] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RSPunch" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[21] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Uppercut" );	//Uppercut
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[22] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HBlock" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[23] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Idle2" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[24] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RenzouR" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[25] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Weapon1" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[26] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunWep1L" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[27] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunWep1R" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[28] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AimWep1" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[29] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AXKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[30] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SPKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[31] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JumpL" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[32] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JumpR" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[33] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Cartwheel" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[34] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Weapon1UPP" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[35] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AimWep1UPP" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[36] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "CartWep1" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[37] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Idle3" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[38] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RenzouL" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[39] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HoldDash" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[40] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Knee" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[41] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JumpKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[42] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Wave" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[43] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HitStom" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[44] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HitUpper" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[45] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JumpSpiral" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[46] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "DodgeL" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[47] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "FKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[48] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AirJink" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[49] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RunBack" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[50] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AirRushFront" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[51] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HitStorm" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[52] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RapidKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[53] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "FallHead" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[54] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RHKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[55] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "FlameUpperCut" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[56] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HBlockHit" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[57] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "BackFlip" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[58] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "WeaponReload" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[59] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SpinKickFull" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[60] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Crouch" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[61] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "CrouchL" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[62] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "CrouchR" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[63] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LLPunchUPP" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[64] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RLPunchUPP" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[65] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LMPunchUPP" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[66] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LMKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[67] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "VHKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[71] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Golrekka" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[72] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SkyPush" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[76] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Crunch" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[77] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Hitwall" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[78] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AttFlip" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[84] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Hadouken" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[85] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HadoukenAir" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[86] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "AirDash" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[87] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "HoverKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[88] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RollF" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[90] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "Sakurat" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[91] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "BrollyT" );
					//Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[92] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "PCombo1" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[96] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "TwistKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[101] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "PCombo2" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[102] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "RushElbow" );

					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[118] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JSRUSH" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[119] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JSRUSHPUNCH" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[120] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JSRUSHBG" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[121] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "JSRUSHKICK" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[122] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "StaticKick" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[127] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "PowerBomb" );

					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[128] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LeapDownStrike" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[129] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "CartwheelAtt" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[130] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "SpinoutLeft" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[131] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "OverheadPinwheel" );
					Q_Forge->Forge[TOBE].Shadows[SHADOW].Motion[132] = geActor_GetMotionByName(Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorDef, "LeapDownFist" );

					NamePlateUpdate();

					Ange.X=-(PI/2);
					Ange.Y=PI;
					Ange.Z=0;

					geXForm3d_RotateX(&Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform, Ange.X);
					geXForm3d_RotateY(&Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform, Ange.Y);
					geXForm3d_RotateZ(&Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform, Ange.Z);
					geVec3d_Copy(&_->Origon, &Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform.Translation);

					//geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor,GE_true,&goup,255/((SHADOW+1)/2),255/((SHADOW+1)/2),255/((SHADOW+1)/2),255/((SHADOW+1)/2),255/((SHADOW+1)/2),255/((SHADOW+1)/2),GE_false,0,NULL,GE_true);
					geActor_SetLightingOptions(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor,GE_true,&goup,255,255,255,255,255,255,GE_false,0,NULL,GE_true);
					geActor_SetEnvironOptions(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, &ActorEnviro );

					geActor_ClearPose(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, &Q_Forge->Forge[TOBE].Shadows[SHADOW].ActorXform);

					//geActor_SetAlpha(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, 150/(SHADOW+1));
					geActor_SetAlpha(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, 255/(SHADOW+1));

					Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor->IDflag = TOBE;

					NamePlateUpdate();

					//##### ANGEL COLOUR EDIT
					if(Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.ANGELEDITFLAG == 1)
						{
						K=0;
						while(K < 38)
							{
							geActor_GetMaterial(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
							geActor_SetMaterial(Q_Forge->Forge[TOBE].Shadows[SHADOW].Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.BLUE[K]);
							K++;
							}
						}
					}

				//#### Set Up Trail Flags
				Q_Forge->Forge[TOBE].TrailFadeSpan[0][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[1][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[2][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[3][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[4][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[5][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[6][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[7][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[8][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[9][0] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[0][1] = 0;
				Q_Forge->Forge[TOBE].TrailFadeSpan[1][1] = 1;
				Q_Forge->Forge[TOBE].TrailFadeSpan[2][1] = 2;
				Q_Forge->Forge[TOBE].TrailFadeSpan[3][1] = 3;
				Q_Forge->Forge[TOBE].TrailFadeSpan[4][1] = 4;
				Q_Forge->Forge[TOBE].TrailFadeSpan[5][1] = 5;
				Q_Forge->Forge[TOBE].TrailFadeSpan[6][1] = 6;
				Q_Forge->Forge[TOBE].TrailFadeSpan[7][1] = 7;
				Q_Forge->Forge[TOBE].TrailFadeSpan[8][1] = 8;
				Q_Forge->Forge[TOBE].TrailFadeSpan[9][1] = 9;

				//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

				NamePlateUpdate();


				//####### ACTIVATE ITEM ATTRIBUTES
				Q_ActivateItemsAI(TOBE);

				//#### RESET SCALE AND LIGHTING
				geActor_SetScale(Q_Forge->Forge[TOBE].Avatar.Actor, Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[TOBE].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

				NamePlateUpdate();

				if(Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.ANGELEDITFLAG == 1)
					{
					//##### ANGEL COLOUR EDIT
					K=0;
					while(K < 38)
						{
						geActor_GetMaterial(Q_Forge->Forge[TOBE].Avatar.Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
						geActor_SetMaterial(Q_Forge->Forge[TOBE].Avatar.Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.BLUE[K]);
						K++;
						}
					}

				//#### Update Flag
				Q_Forge->Forge[TOBE].Updated = 1;
				if(TOBE >= _->NomAI) _->NomAI++;
				}

			helly2++;
			}


		//##### Actor Removal Loop
		helly2=0;
		while(helly2 < _->NomAI)
			{
			if((helly2 != Q_Netplayer->Netplayer[0].LocalCONTROLID) && (Q_Forge->Forge[helly2].LIVE == 1) && (Q_Forge->Forge[helly2].Updated == 0))
				{
				Q_Forge->Forge[helly2].LIVE = 0;

				geWorld_RemoveActor(World, Q_Forge->Forge[helly2].Avatar.Actor);
				geWorld_RemoveActor(World, Q_Forge->Forge[helly2].Weapon.Actor);
				geWorld_RemoveActor(World, Q_Forge->Forge[helly2].Shadows[1].Actor);
				geWorld_RemoveActor(World, Q_Forge->Forge[helly2].Shadows[2].Actor);
				geWorld_RemoveActor(World, Q_Forge->Forge[helly2].Shadows[3].Actor);

				//geActor_Destroy(&Q_Forge->Forge[helly2].Avatar.Actor);
				//geActor_Destroy(&Q_Forge->Forge[helly2].Weapon.Actor);
				//geActor_Destroy(&Q_Forge->Forge[helly2].Shadows[1].Actor);
				//geActor_Destroy(&Q_Forge->Forge[helly2].Shadows[2].Actor);
				//geActor_Destroy(&Q_Forge->Forge[helly2].Shadows[3].Actor);

				//geActor_DefDestroy(&Q_Forge->Forge[helly2].Avatar.ActorDef);
				//geActor_DefDestroy(&Q_Forge->Forge[helly2].Weapon.ActorDef);
				//geActor_DefDestroy(&Q_Forge->Forge[helly2].Shadows[1].ActorDef);
				//geActor_DefDestroy(&Q_Forge->Forge[helly2].Shadows[2].ActorDef);
				//geActor_DefDestroy(&Q_Forge->Forge[helly2].Shadows[3].ActorDef);

				if(helly2 >= (_->NomAI - 1) && (_->NomAI != 0))
					{
					Q_Forge->Forge[_->NomAI].LIVE = 0;
					Q_Forge->Forge[_->NomAI-1].LIVE = 0;
					_->NomAI--;
					}
				}
			helly2++;
			}

		//MessageBox(NULL,"Success 2  \n","ERROR",MB_OK);
		}
	else Buffer_Set(Buffer, 0, 55000);
}


//=====================================================================================
//	Receive Single Character Update
//=====================================================================================
static void QNETWORKReceiveUpdateCharData(Buffer_Data *Buffer, float Time)
{
	float		DeltaTime, MoveTime/*, NetTime*/;
	geVec3d		Origin = {0.0f, 0.0f, 0.0f};
	uint16		ButtonBits;

	Buffer_GetFloat(Buffer, &Time);

	Buffer_GetByte(Buffer, &TempUint8);

	if(TempUint8 == 50)
		{
		//###### PREPARE Player Update  #####
		Buffer_GetByte(Buffer, &player[g_Player]->UpdateCHAR);
		Buffer_GetByte(Buffer, &player[g_Player]->NewITEMREF.RefNUM);

		//### Actor Reference
		Buffer_GetString(Buffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorREF);
		Buffer_GetString(Buffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ShadowREF);

		//### Send Mouse Bytes
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].TEAM);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Class);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Level);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorSCALE);

		//### Send Key Bytes
		player[g_Player]->PrevUNUSEDXP = player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP;

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP);

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.EnergyEff);

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSTRENGTH);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSTRENGTH);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSTRENGTH);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSTRENGTH);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSNAP);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSNAP);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSNAP);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSNAP);

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Height);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Weight);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.PhysicalStr);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Quickness);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Dexterity);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Constitution);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.AggPower);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.DefPower);

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.Accuracy);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.DrawSPD);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.ReloadSPD);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.RecoilHEIGHTrecover);

		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailTYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailRED);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailGREEN);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailBLUE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailALPHA);
		
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkRED);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkGREEN);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkBLUE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkALPHA);
		
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamTYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamRED);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamGREEN);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamBLUE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamALPHA);
		
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeTYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeRED);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeGREEN);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeBLUE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeALPHA);

		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[0]);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[1]);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[2]);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[3]);

		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrWEAPON);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrHEADARMOUR);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrUPPERARMOUR);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrLOWERARMOUR);

		//######### -  ITEM DATA LOOP  - #########

		//### Number of Items
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS);

		jet=0;
		while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS)
			{
			//##### - Set ITEM Name
			Buffer_GetString(Buffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Name);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemREF);

			if(player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type == 0)
				{
				//##### - Set Character Item Actor Reference
				Buffer_GetString(Buffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemActorREF);
				}

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemScaleFACT);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QualLVL);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Power);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Ammo);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilHeight);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilDistance);

			//##### - Get Item Fire Rate
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FireRate);

			//##### - Get Item Accuracy
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Accuracy);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].BulletCNT);

			//##### - Set Item Scope Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeTYPE);

			//##### - Set Item Scope Type
			Buffer_GetAngle(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeLOC);

			//##### - Set Item Laser Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserTYPE);

			//##### - Set Item Laser Type
			Buffer_GetAngle(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserLOC);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_Fire);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltIn);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipIn);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourFACTOR);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourAMOUNT);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourREGEN);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ExpandSTRENGTH);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_NoWEP);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_TimeScale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Gravity);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LifeINC);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyINC);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyEff);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Height);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Weight);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Strength);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Quickness);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Dexterity);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Constitution);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_AggPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_DefPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKpower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINK3intensity);

			jet++;
			}

		//#### ACTIVE SPELLS
		jet=0;
		while(jet < 3)
			{
			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_TYPE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_INTENSITY);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_SWITCH);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_EnergyEff);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Height);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Weight);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Strength);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Quickness);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Dexterity);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Constitution);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_AggPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_DefPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKpower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].LIVE);

			jet++;
			}

		//######### -  Physical Attacks SPEC DATA LOOP  - #########

		jet=0;
		while(jet < 30)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Power);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].MoveSpeed);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].NumRotate);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].ExpRadius);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Accuracy);

			jet++;
			}


		//######### -  Cleric Class Skills LOOP  - #########

		jet=0;
		while(jet < 12)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Cost);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Potency);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Amount);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Speed);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Duration);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Accuracy);

			jet++;
			}


		//######### -  SPELL DATA LOOP  - #########

		//### Number of Spells
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells);

		jet=0;
		while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells)
			{
			//##### - Get Spell Quality
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QualityLVL);

			//##### - Set Spell Attribute IDs
			SHADOW=0;
			while(SHADOW < 10)
				{
				Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].AttributeID[SHADOW]);
				SHADOW++;
				}

			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_TYPE);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_INTENSITY);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_SWITCH);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00ALPHA);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01ALPHA);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02ALPHA);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03ALPHA);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04ALPHA);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_IntBoost);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_EnergyEff);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Height);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Weight);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Strength);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Quickness);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Dexterity);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Constitution);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_AggPower);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_DefPower);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmStr);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmStr);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegStr);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegStr);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPAccuracy);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPDrawSPD);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPReloadSPD);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPRecoilHR);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKmovespeed);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKpower);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINK3intensity);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
			jet++;
			}


		//#### GET ANGEL COLOUR EDIT
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.ANGELEDITFLAG);

		jet2=0;
		while(jet2 < 38)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.RED[jet2]);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.GREEN[jet2]);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.BLUE[jet2]);

			jet2++;
			}


		if(player[g_Player]->UpdateCHAR == 1 || player[g_Player]->UpdateCHAR == 2)
			{
			if(player[g_Player]->PrevUNUSEDXP < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP)
				{
				player[g_Player]->MSG_XPON = 1;
				player[g_Player]->MSG_XPInit = 0;
				player[g_Player]->MSG_XPScreenDIST = 0;
				player[g_Player]->MSG_XPScreenDistINC = 50;
				player[g_Player]->MSG_XPScreenDIR = 0;
				player[g_Player]->MSG_XpInc = player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP - player[g_Player]->PrevUNUSEDXP;
				}
			}

		if(player[g_Player]->UpdateCHAR == 2)
			{
			player[g_Player]->MSG_ItemREF = player[g_Player]->NewITEMREF;
			player[g_Player]->MSG_ITEMON = 1;
			player[g_Player]->MSG_ITEMInit = 0;
			player[g_Player]->MSG_ITEMScreenDIST = 800;
			player[g_Player]->MSG_ITEMScreenDistINC = 17;
			player[g_Player]->MSG_ITEMScreenDIR = 0;

			//SET Knockout
			_->KnockOutFLAG = 1;
			_->KnockOutTIMER = 0;
			_->KnockOutCNT = 0;
			_->KnockOutINIT = 0;
			_->KnockOutHEIGHT = 0;
			}

		//### Write out CHARDATA
		//WriteNEWCharacterData(*player[g_Player]->CDATA);

		//####### REACTIVATE ITEM ATTRIBUTES
		//Q_ActivateItems();
		}
	else
		{
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		//### Actor Reference
		Buffer_GetString(Buffer, TempString);
		Buffer_GetString(Buffer, TempString);
		//### Send Mouse Bytes
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		//### Send Key Bytes
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);

		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);

		//######### -  ITEM DATA LOOP  - #########

		//### Number of Items
		Buffer_GetByte(Buffer, &TempUint8);

		jet=0;
		while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS)
			{
			//##### - Set ITEM Name
			Buffer_GetString(Buffer, TempString);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &TempUint8);

			if(player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type == 0)
				{
				//##### - Set Character Item Actor Reference
				Buffer_GetString(Buffer, TempString);
				}

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Fire Rate
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Accuracy
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Scope Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Scope Type
			Buffer_GetAngle(Buffer, &TempAngle);

			//##### - Set Item Laser Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Laser Type
			Buffer_GetAngle(Buffer, &TempAngle);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &TempFloat);


			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);


			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			jet++;
			}

		//#### ACTIVE SPELLS
		jet=0;
		while(jet < 3)
			{
			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			jet++;
			}

		//######### -  Attack SPEC DATA LOOP  - #########

		jet=0;
		while(jet < 30)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			jet++;
			}

		//#### GET ANGEL COLOUR EDIT
		/*Buffer_GetByte(Buffer, &TempUint8);

		jet2=0;
		while(jet2 < 38)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &TempFloat);

			jet2++;
			}*/

		/*if(player[g_Player]->UpdateCHAR == 1 || player[g_Player]->UpdateCHAR == 2)
			{
			if(player[g_Player]->PrevUNUSEDXP < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP)
				{
				player[g_Player]->MSG_XPON = 1;
				player[g_Player]->MSG_XPInit = 0;
				player[g_Player]->MSG_XPScreenDIST = 0;
				player[g_Player]->MSG_XPScreenDistINC = 50;
				player[g_Player]->MSG_XPScreenDIR = 0;
				player[g_Player]->MSG_XpInc = player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP - player[g_Player]->PrevUNUSEDXP;
				}
			}

		if(player[g_Player]->UpdateCHAR == 2)
			{
			player[g_Player]->MSG_ItemREF = player[g_Player]->NewITEMREF;
			player[g_Player]->MSG_ITEMON = 1;
			player[g_Player]->MSG_ITEMInit = 0;
			player[g_Player]->MSG_ITEMScreenDIST = 800;
			player[g_Player]->MSG_ITEMScreenDistINC = 17;
			player[g_Player]->MSG_ITEMScreenDIR = 0;

			//SET Knockout
			_->KnockOutFLAG = 1;
			_->KnockOutTIMER = 0;
			_->KnockOutCNT = 0;
			_->KnockOutINIT = 0;
			_->KnockOutHEIGHT = 0;
			}

		//### Write out CHARDATA
		WriteNEWCharacterData(*player[g_Player]->CDATA);

		//####### REACTIVATE ITEM ATTRIBUTES
		Q_ActivateItems();*/
		}
	}



//=====================================================================================
//	Receive 'ALL' Character Update
//=====================================================================================
static void QNETWORKReceiveUpdateCharDataALL(Buffer_Data *Buffer, float Time)
{
	float		DeltaTime, MoveTime;
	geVec3d		Origin = {0.0f, 0.0f, 0.0f};
	uint16		ButtonBits;

	Buffer_GetFloat(Buffer, &Time);

	Buffer_GetByte(Buffer, &TempUint8);

	//MessageBox(NULL,"QNETWORKReceiveUpdateCharDataALL: S  \n","ERROR",MB_OK);

	if(TempUint8 == 101)
		{
		//###### PREPARE Player Update  #####
		Buffer_GetByte(Buffer, &player[g_Player]->UpdateCHAR);

		//### Actor Reference
		Buffer_GetString(Buffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorREF);
		Buffer_GetString(Buffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ShadowREF);

		//### Send Mouse Bytes
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].TEAM);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Class);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Level);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorSCALE);

		//### Send Key Bytes
		player[g_Player]->PrevUNUSEDXP = player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP;

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP);

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.EnergyEff);

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSTRENGTH);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSTRENGTH);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSTRENGTH);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSTRENGTH);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSNAP);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSNAP);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSNAP);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSNAP);

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Height);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Weight);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.PhysicalStr);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Quickness);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Dexterity);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Constitution);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.AggPower);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.DefPower);

		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.Accuracy);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.DrawSPD);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.ReloadSPD);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.RecoilHEIGHTrecover);

		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailTYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailRED);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailGREEN);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailBLUE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailALPHA);
		
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkRED);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkGREEN);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkBLUE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkALPHA);
		
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamTYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamRED);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamGREEN);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamBLUE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamALPHA);
		
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeTYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeRED);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeGREEN);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeBLUE);
		Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeALPHA);

		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[0]);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[1]);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[2]);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[3]);

		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrWEAPON);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrHEADARMOUR);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrUPPERARMOUR);
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrLOWERARMOUR);

		//######### -  ITEM DATA LOOP  - #########

		//### Number of Items
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS);

		jet=0;
		while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS)
			{
			//##### - Set ITEM Name
			Buffer_GetString(Buffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Name);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemREF);

			if(player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type == 0)
				{
				//##### - Set Character Item Actor Reference
				Buffer_GetString(Buffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemActorREF);
				}

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemScaleFACT);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QualLVL);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Power);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Ammo);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilHeight);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilDistance);

			//##### - Get Item Fire Rate
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FireRate);

			//##### - Get Item Accuracy
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Accuracy);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].BulletCNT);

			//##### - Set Item Scope Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeTYPE);

			//##### - Set Item Scope Type
			Buffer_GetAngle(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeLOC);

			//##### - Set Item Laser Type
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserTYPE);

			//##### - Set Item Laser Type
			Buffer_GetAngle(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserLOC);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_Fire);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltIn);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipIn);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourFACTOR);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourAMOUNT);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourREGEN);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ExpandSTRENGTH);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_NoWEP);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_TimeScale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Gravity);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LifeINC);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyINC);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyEff);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Height);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Weight);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Strength);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Quickness);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Dexterity);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Constitution);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_AggPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_DefPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKpower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINK3intensity);

			jet++;
			}

		//#### ACTIVE SPELLS
		jet=0;
		while(jet < 3)
			{
			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_TYPE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_INTENSITY);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_SWITCH);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_EnergyEff);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Height);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Weight);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Strength);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Quickness);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Dexterity);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Constitution);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_AggPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_DefPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKpower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].LIVE);

			jet++;
			}

		//######### -  Physical Attacks SPEC DATA LOOP  - #########

		jet=0;
		while(jet < 30)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Power);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].MoveSpeed);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].NumRotate);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].ExpRadius);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Accuracy);

			jet++;
			}


		//######### -  Cleric Class Skills LOOP  - #########

		jet=0;
		while(jet < 12)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Cost);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Potency);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Amount);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Speed);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Duration);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Accuracy);

			jet++;
			}


		//######### -  SPELL DATA LOOP  - #########

		//### Number of Spells
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells);

		jet=0;
		while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells)
			{
			//##### - Get Spell Quality
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QualityLVL);

			//##### - Set Spell Attribute IDs
			SHADOW=0;
			while(SHADOW < 10)
				{
				Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].AttributeID[SHADOW]);
				SHADOW++;
				}

			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_TYPE);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_INTENSITY);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_SWITCH);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00ALPHA);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01ALPHA);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02ALPHA);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03ALPHA);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04RED);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04GREEN);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04BLUE);
			Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04ALPHA);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_IntBoost);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_EnergyEff);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Height);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Weight);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Strength);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Quickness);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Dexterity);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Constitution);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_AggPower);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_DefPower);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmStr);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmStr);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegStr);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegStr);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPAccuracy);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPDrawSPD);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPReloadSPD);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPRecoilHR);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKmovespeed);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKpower);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINK3intensity);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
			jet++;
			}


		//#### GET ANGEL COLOUR EDIT
		Buffer_GetByte(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.ANGELEDITFLAG);

		jet2=0;
		while(jet2 < 38)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.RED[jet2]);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.GREEN[jet2]);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &player[g_Player]->BFO->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.BLUE[jet2]);

			jet2++;
			}


		//### Write out CHARDATA
		WriteNEWCharacterDataV2(&player[g_Player]->BFO);

		//####### ACTIVATE ITEM ATTRIBUTES
		Q_ActivateItems();

		//######- Update Server Attributes -######

		//### Actor Reference
		Buffer_GetString(Buffer, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ActorREF);
		Buffer_GetString(Buffer, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ShadowREF);

		//### Send Mouse Bytes
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.TEAM);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Class);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Level);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ActorSCALE);

		//### Send Key Bytes
		player[g_Player]->PrevUNUSEDXP = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.UnusedXP;

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.UnusedXP);

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.EnergyEff);

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.LeftArmSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.RightArmSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.LeftLegSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.RightLegSTRENGTH);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.LeftArmSNAP);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.RightArmSNAP);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.LeftLegSNAP);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.RightLegSNAP);

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Height);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Weight);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.PhysicalStr);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Quickness);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Dexterity);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.Constitution);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.AggPower);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.BodySKILL.DefPower);

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.WeaponSKILL.Accuracy);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.WeaponSKILL.DrawSPD);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.WeaponSKILL.ReloadSPD);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);

		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailTYPE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailRED);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailGREEN);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailBLUE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.TrailALPHA);
		
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkTYPE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkRED);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkGREEN);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkBLUE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.JinkALPHA);
		
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamTYPE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamRED);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamGREEN);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamBLUE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SteamALPHA);
		
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeTYPE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeRED);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeGREEN);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeBLUE);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelEFFECTS.SpikeALPHA);

		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellContainerID[0]);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellContainerID[1]);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellContainerID[2]);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellContainerID[3]);

		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrWEAPON);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrHEADARMOUR);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrUPPERARMOUR);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CurrLOWERARMOUR);

		//######### -  ITEM DATA LOOP  - #########

		//### Number of Items
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.NomITEMS);

		jet=0;
		while(jet < Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.NomITEMS)
			{
			//##### - Set ITEM Name
			Buffer_GetString(Buffer, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Name);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Type);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemREF);

			if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Type == 0)
				{
				//##### - Set Character Item Actor Reference
				Buffer_GetString(Buffer, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemActorREF);
				}

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].ItemScaleFACT);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QualLVL);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Power);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Ammo);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].RecoilHeight);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].RecoilDistance);

			//##### - Get Item Fire Rate
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FireRate);

			//##### - Get Item Accuracy
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Accuracy);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].BulletCNT);

			//##### - Set Item Scope Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].ScopeTYPE);

			//##### - Set Item Scope Type
			Buffer_GetAngle(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].ScopeLOC);

			//##### - Set Item Laser Type
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].LaserTYPE);

			//##### - Set Item Laser Type
			Buffer_GetAngle(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].LaserLOC);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_Fire);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadBoltOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadBoltIn);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadClipOut);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QAS_ReloadClipIn);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourFACTOR);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourAMOUNT);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].ArmourREGEN);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Smoke.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[0].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[1].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[2].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[3].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Effect[4].CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].Fog.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.TYPE);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.INT);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.ON);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Red);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Green);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Blue);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Alpha);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.Scale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.TIMER);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].FogLight.CNT);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].ExpandSTRENGTH);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_NoWEP);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_TimeScale);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Gravity);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LifeINC);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyINC);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyEff);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Height);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Weight);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Strength);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Quickness);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Dexterity);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_Constitution);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_AggPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_DefPower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegStr);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegSnap);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKpower);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.ItemDATA[jet].QA_ITEMINC_JINK3intensity);

			jet++;
			}

		//#### ACTIVE SPELLS
		jet=0;
		while(jet < 3)
			{
			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_TYPE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_INTENSITY);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_SWITCH);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04RED);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04GREEN);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04BLUE);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_IntBoost);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_EnergyEff);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Height);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Weight);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Strength);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Quickness);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Dexterity);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_Constitution);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_AggPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_DefPower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegStr);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegSnap);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKpower);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.SpellSLOT[jet].LIVE);

			jet++;
			}

		//######### -  Physical Attacks SPEC DATA LOOP  - #########

		jet=0;
		while(jet < 30)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AttackSKILL[jet].Power);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AttackSKILL[jet].Damage);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AttackSKILL[jet].MoveSpeed);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AttackSKILL[jet].NumRotate);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AttackSKILL[jet].ExpRadius);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AttackSKILL[jet].Accuracy);

			jet++;
			}


		//######### -  Cleric Class Skills LOOP  - #########

		jet=0;
		while(jet < 12)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Cost);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Potency);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Amount);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Speed);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Duration);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.CLSClericSKILL[jet].Accuracy);

			jet++;
			}


		//######### -  SPELL DATA LOOP  - #########

		//### Number of Spells
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA_->NomSpells);

		jet=0;
		while(jet < Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA_->NomSpells)
			{
			//##### - Get Spell Quality
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QualityLVL);

			//##### - Set Spell Attribute IDs
			SHADOW=0;
			while(SHADOW < 10)
				{
				Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].AttributeID[SHADOW]);
				SHADOW++;
				}

			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_TYPE);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
			Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Height);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Weight);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Strength);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
			jet++;
			}


		//#### GET ANGEL COLOUR EDIT
		Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

		jet2=0;
		while(jet2 < 38)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.RED[jet2]);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.GREEN[jet2]);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].CharDATA.AngelCOLOURS.BLUE[jet2]);

			jet2++;
			}


		//####### ACTIVATE ITEM ATTRIBUTES
		Q_ActivateItemsAI(Q_Netplayer->Netplayer[0].LocalCONTROLID);


		//##### - ITERATE THROUGH AVATARS - #####
		Buffer_GetByte(Buffer, &TempUint8);
		_->NomAIAvatars = TempUint8;

		helly=0;
		while(helly < _->NomAIAvatars)
			{
			//#### Fill AI Avatars
			Buffer_GetByte(Buffer, &TempUint8);
			TOBE = TempUint8;

			if(TOBE != player[g_Player]->NetUPDATE.ServerCONTROLID)
				{
				//### Actor Reference
				Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ActorREF);
				Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ShadowREF);

				//### Send Mouse Bytes
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.TEAM);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Class);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Level);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ActorSCALE);

				//### Send Key Bytes
				player[g_Player]->PrevUNUSEDXP = Q_Forge->Forge[TOBE].CharDATA.UnusedXP;

				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.UnusedXP);

				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.EnergyEff);

				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftArmSTRENGTH);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightArmSTRENGTH);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftLegSTRENGTH);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightLegSTRENGTH);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftArmSNAP);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightArmSNAP);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.LeftLegSNAP);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.RightLegSNAP);

				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Height);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Weight);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.PhysicalStr);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Quickness);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Dexterity);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.Constitution);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.AggPower);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.BodySKILL.DefPower);

				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.Accuracy);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.DrawSPD);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.ReloadSPD);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);

				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailTYPE);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailRED);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailGREEN);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailBLUE);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.TrailALPHA);
				
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkTYPE);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkRED);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkGREEN);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkBLUE);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.JinkALPHA);
				
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamTYPE);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamRED);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamGREEN);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamBLUE);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SteamALPHA);
				
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeTYPE);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeRED);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeGREEN);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeBLUE);
				Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelEFFECTS.SpikeALPHA);

				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[0]);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[1]);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[2]);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellContainerID[3]);

				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrWEAPON);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrHEADARMOUR);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrUPPERARMOUR);
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CurrLOWERARMOUR);

				//######### -  ITEM DATA LOOP  - #########

				//### Number of Items
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.NomITEMS);

				jet=0;
				while(jet < Q_Forge->Forge[TOBE].CharDATA.NomITEMS)
					{
					//##### - Set ITEM Name
					Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Name);

					//##### - Set Item Type
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Type);

					//##### - Set Item Type
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].ItemREF);

					if(Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Type == 0)
						{
						//##### - Set Character Item Actor Reference
						Buffer_GetString(Buffer, Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].ItemActorREF);
						}

					//##### - Set Item Scale Factor
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].ItemScaleFACT);

					//##### - Set Item Quality Level
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QualLVL);

					//##### - Get Item Damage
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Damage);

					//##### - Get Item Power
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Power);

					//##### - Get Item Ammo
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Ammo);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].RecoilHeight);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].RecoilDistance);

					//##### - Get Item Fire Rate
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FireRate);

					//##### - Get Item Accuracy
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Accuracy);

					//##### - Set Item Type
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].BulletCNT);

					//##### - Set Item Scope Type
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].ScopeTYPE);

					//##### - Set Item Scope Type
					Buffer_GetAngle(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].ScopeLOC);

					//##### - Set Item Laser Type
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].LaserTYPE);

					//##### - Set Item Laser Type
					Buffer_GetAngle(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].LaserLOC);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QAS_Fire);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QAS_ReloadBoltOut);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QAS_ReloadBoltIn);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QAS_ReloadClipOut);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QAS_ReloadClipIn);

					//##### - Get Item Armour
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].ArmourFACTOR);

					//##### - Get Item Armour
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].ArmourAMOUNT);

					//##### - Get Item Armour
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].ArmourREGEN);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.TYPE);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.INT);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.ON);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.Red);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.Green);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.Blue);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.Alpha);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.Scale);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.TIMER);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Smoke.CNT);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].TYPE);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].INT);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].ON);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].Red);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].Green);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].Blue);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].Alpha);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].Scale);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].TIMER);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[0].CNT);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].TYPE);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].INT);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].ON);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].Red);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].Green);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].Blue);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].Alpha);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].Scale);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].TIMER);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[1].CNT);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].TYPE);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].INT);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].ON);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].Red);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].Green);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].Blue);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].Alpha);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].Scale);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].TIMER);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[2].CNT);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].TYPE);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].INT);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].ON);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].Red);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].Green);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].Blue);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].Alpha);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].Scale);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].TIMER);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[3].CNT);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].TYPE);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].INT);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].ON);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].Red);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].Green);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].Blue);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].Alpha);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].Scale);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].TIMER);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Effect[4].CNT);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.TYPE);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.INT);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.ON);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.Red);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.Green);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.Blue);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.Alpha);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.Scale);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.TIMER);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].Fog.CNT);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.TYPE);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.INT);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.ON);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.Red);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.Green);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.Blue);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.Alpha);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.Scale);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.TIMER);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].FogLight.CNT);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].ExpandSTRENGTH);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_NoWEP);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_TimeScale);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_Gravity);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_LifeINC);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyINC);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_IntBoost);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyEff);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_Height);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_Weight);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_Strength);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_Quickness);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_Dexterity);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_Constitution);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_AggPower);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_DefPower);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmStr);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmStr);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegStr);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegStr);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmSnap);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmSnap);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegSnap);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegSnap);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKpower);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.ItemDATA[jet].QA_ITEMINC_JINK3intensity);

					jet++;
					}

				//#### ACTIVE SPELLS
				jet=0;
				while(jet < 3)
					{
					//##### - Get Item QA Effect Type
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_TYPE);

					//##### - Set Item QA Effect Intensity
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_INTENSITY);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_SWITCH);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00RED);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01RED);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02RED);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03RED);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04RED);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04GREEN);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04BLUE);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_IntBoost);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_EnergyEff);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_Height);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_Weight);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_Strength);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_Quickness);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_Dexterity);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_Constitution);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_AggPower);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_DefPower);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmStr);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmStr);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegStr);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegStr);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmSnap);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmSnap);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegSnap);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegSnap);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKpower);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.SpellSLOT[jet].LIVE);

					jet++;
					}

				//######### -  Attack SPEC DATA LOOP  - #########

				jet=0;
				while(jet < 30)
					{
					//##### - Get Item Type
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet].Power);

					//##### - Get Item Damage
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet].Damage);

					//##### - Get Item Power
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet].MoveSpeed);

					//##### - Get Item Ammo
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet].NumRotate);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet].ExpRadius);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AttackSKILL[jet].Accuracy);

					jet++;
					}


				//######### -  Cleric Class Skills LOOP  - #########

				jet=0;
				while(jet < 12)
					{
					//##### - Get Item Type
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Cost);

					//##### - Get Item Damage
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Potency);

					//##### - Get Item Power
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Amount);

					//##### - Get Item Ammo
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Speed);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Duration);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.CLSClericSKILL[jet].Accuracy);

					jet++;
					}


				//######### -  SPELL DATA LOOP  - #########

				//### Number of Spells
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA_->NomSpells);

				jet=0;
				while(jet < Q_Forge->Forge[TOBE].CharDATA_->NomSpells)
					{
					//##### - Get Spell Quality
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QualityLVL);

					//##### - Set Spell Attribute IDs
					SHADOW=0;
					while(SHADOW < 10)
						{
						Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].AttributeID[SHADOW]);
						SHADOW++;
						}

					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_TYPE);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
					Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Height);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Weight);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Strength);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
					jet++;
					}


				//#### GET ANGEL COLOUR EDIT
				Buffer_GetByte(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

				jet2=0;
				while(jet2 < 38)
					{
					//##### - Get Item Type
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.RED[jet2]);

					//##### - Get Item Damage
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.GREEN[jet2]);

					//##### - Get Item Power
					Buffer_GetFloat(Buffer, &Q_Forge->Forge[TOBE].CharDATA.AngelCOLOURS.BLUE[jet2]);

					jet2++;
					}


				//####### ACTIVATE ITEM ATTRIBUTES
				Q_ActivateItemsAI(TOBE);
				}
			else
				{
				//### Actor Reference
				Buffer_GetString(Buffer, TempString);
				Buffer_GetString(Buffer, TempString);
				//### Send Mouse Bytes
				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				//### Send Key Bytes
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);

				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);

				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);

				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				
				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				
				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				
				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);
				Buffer_GetFloat(Buffer, &TempFloat);

				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetByte(Buffer, &TempUint8);

				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetByte(Buffer, &TempUint8);
				Buffer_GetByte(Buffer, &TempUint8);

				//######### -  ITEM DATA LOOP  - #########

				//### Number of Items
				Buffer_GetByte(Buffer, &TempUint8C);

				jet=0;
				while(jet < TempUint8C)
					{
					//##### - Set ITEM Name
					Buffer_GetString(Buffer, TempString);

					//##### - Set Item Type
					Buffer_GetByte(Buffer, &TempUint8SPEC);

					//##### - Set Item Type
					Buffer_GetByte(Buffer, &TempUint8);

					if(TempUint8SPEC == 0)
						{
						//##### - Set Character Item Actor Reference
						Buffer_GetString(Buffer, TempString);
						}

					//##### - Set Item Scale Factor
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Quality Level
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Damage
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Power
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Ammo
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Fire Rate
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Accuracy
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Type
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Scope Type
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Scope Type
					Buffer_GetAngle(Buffer, &TempAngle);

					//##### - Set Item Laser Type
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Laser Type
					Buffer_GetAngle(Buffer, &TempAngle);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Sound
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Get Item Armour
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Armour
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Armour
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item Attribute
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					jet++;
					}

				//#### ACTIVE SPELLS
				jet=0;
				while(jet < 3)
					{
					//##### - Get Item QA Effect Type
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item QA Effect Intensity
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get SPELL Attributes
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Set Item QA Effect Intensity
					Buffer_GetByte(Buffer, &TempUint8);

					jet++;
					}

				//######### -  Attack SPEC DATA LOOP  - #########

				jet=0;
				while(jet < 30)
					{
					//##### - Get Item Type
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Damage
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Power
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Ammo
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Recoil
					Buffer_GetFloat(Buffer, &TempFloat);

					jet++;
					}

				//#### GET ANGEL COLOUR EDIT
				/*Buffer_GetByte(Buffer, &TempUint8);

				jet2=0;
				while(jet2 < 38)
					{
					//##### - Get Item Type
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Damage
					Buffer_GetFloat(Buffer, &TempFloat);

					//##### - Get Item Power
					Buffer_GetFloat(Buffer, &TempFloat);

					jet2++;
					}*/
				}

			helly++;
			}

		}
	else
		{
		Buffer_GetByte(Buffer, &TempUint8);
		//### Actor Reference
		Buffer_GetString(Buffer, TempString);
		Buffer_GetString(Buffer, TempString);
		//### Send Mouse Bytes
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		//### Send Key Bytes
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);

		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);

		//######### -  ITEM DATA LOOP  - #########

		//### Number of Items
		Buffer_GetByte(Buffer, &TempUint8);

		jet=0;
		while(jet < TempUint8)
			{
			//##### - Set ITEM Name
			Buffer_GetString(Buffer, TempString);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &TempUint8SPEC);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &TempUint8);

			if(TempUint8SPEC == 0)
				{
				//##### - Set Character Item Actor Reference
				Buffer_GetString(Buffer, TempString);
				}

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Fire Rate
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Accuracy
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Scope Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Scope Type
			Buffer_GetAngle(Buffer, &TempAngle);

			//##### - Set Item Laser Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Laser Type
			Buffer_GetAngle(Buffer, &TempAngle);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			jet++;
			}

		//#### ACTIVE SPELLS
		jet=0;
		while(jet < 3)
			{
			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			jet++;
			}

		//######### -  Attack SPEC DATA LOOP  - #########

		jet=0;
		while(jet < 30)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			jet++;
			}

		//#### GET ANGEL COLOUR EDIT
		/*Buffer_GetByte(Buffer, &TempUint8);

		jet2=0;
		while(jet2 < 38)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &TempFloat);

			jet2++;
			}*/

		//### Actor Reference
		Buffer_GetString(Buffer, TempString);
		Buffer_GetString(Buffer, TempString);
		//### Send Mouse Bytes
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		//### Send Key Bytes
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);
		Buffer_GetFloat(Buffer, &TempFloat);

		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);

		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);
		Buffer_GetByte(Buffer, &TempUint8);

		//######### -  ITEM DATA LOOP  - #########

		//### Number of Items
		Buffer_GetByte(Buffer, &TempUint8);

		jet=0;
		while(jet < TempUint8)
			{
			//##### - Set ITEM Name
			Buffer_GetString(Buffer, TempString);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &TempUint8SPEC);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &TempUint8);

			if(TempUint8SPEC == 0)
				{
				//##### - Set Character Item Actor Reference
				Buffer_GetString(Buffer, TempString);
				}

			//##### - Set Item Scale Factor
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Quality Level
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Fire Rate
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Accuracy
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Scope Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Scope Type
			Buffer_GetAngle(Buffer, &TempAngle);

			//##### - Set Item Laser Type
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Laser Type
			Buffer_GetAngle(Buffer, &TempAngle);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Sound
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Armour
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item Attribute
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			jet++;
			}

		//#### ACTIVE SPELLS
		jet=0;
		while(jet < 3)
			{
			//##### - Get Item QA Effect Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get SPELL Attributes
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Set Item QA Effect Intensity
			Buffer_GetByte(Buffer, &TempUint8);

			jet++;
			}

		//######### -  Attack SPEC DATA LOOP  - #########

		jet=0;
		while(jet < 30)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Ammo
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Recoil
			Buffer_GetFloat(Buffer, &TempFloat);

			jet++;
			}

		//#### GET ANGEL COLOUR EDIT
		/*Buffer_GetByte(Buffer, &TempUint8);

		jet2=0;
		while(jet2 < 38)
			{
			//##### - Get Item Type
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Damage
			Buffer_GetFloat(Buffer, &TempFloat);

			//##### - Get Item Power
			Buffer_GetFloat(Buffer, &TempFloat);

			jet2++;
			}*/

		//##### - ITERATE THROUGH AVATARS - #####
		Buffer_GetByte(Buffer, &TempUint8);
		_->NomAIAvatars = TempUint8;

		helly=0;
		while(helly < _->NomAIAvatars)
			{
			//#### Fill AI Avatars
			Buffer_GetByte(Buffer, &TempUint8);

			//### Actor Reference
			Buffer_GetString(Buffer, TempString);
			Buffer_GetString(Buffer, TempString);
			//### Send Mouse Bytes
			Buffer_GetByte(Buffer, &TempUint8);
			Buffer_GetByte(Buffer, &TempUint8);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			//### Send Key Bytes
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);

			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);

			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);

			Buffer_GetByte(Buffer, &TempUint8);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			
			Buffer_GetByte(Buffer, &TempUint8);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			
			Buffer_GetByte(Buffer, &TempUint8);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			
			Buffer_GetByte(Buffer, &TempUint8);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);
			Buffer_GetFloat(Buffer, &TempFloat);

			Buffer_GetByte(Buffer, &TempUint8);
			Buffer_GetByte(Buffer, &TempUint8);
			Buffer_GetByte(Buffer, &TempUint8);
			Buffer_GetByte(Buffer, &TempUint8);

			//######### -  ITEM DATA LOOP  - #########

			//### Number of Items
			Buffer_GetByte(Buffer, &TempUint8);

			jet=0;
			while(jet < TempUint8)
				{
				//##### - Set ITEM Name
				Buffer_GetString(Buffer, TempString);

				//##### - Set Item Type
				Buffer_GetByte(Buffer, &TempUint8SPEC);

				//##### - Set Item Type
				Buffer_GetByte(Buffer, &TempUint8);

				if(TempUint8SPEC == 0)
					{
					//##### - Set Character Item Actor Reference
					Buffer_GetString(Buffer, TempString);
					}

				//##### - Set Item Scale Factor
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Quality Level
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Damage
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Power
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Ammo
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Fire Rate
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Accuracy
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Type
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Scope Type
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Scope Type
				Buffer_GetAngle(Buffer, &TempAngle);

				//##### - Set Item Laser Type
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Laser Type
				Buffer_GetAngle(Buffer, &TempAngle);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Sound
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Get Item Armour
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Armour
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Armour
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item Attribute
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				jet++;
				}

			//#### ACTIVE SPELLS
			jet=0;
			while(jet < 3)
				{
				//##### - Get Item QA Effect Type
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item QA Effect Intensity
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get SPELL Attributes
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Set Item QA Effect Intensity
				Buffer_GetByte(Buffer, &TempUint8);

				jet++;
				}

			//######### -  Attack SPEC DATA LOOP  - #########

			jet=0;
			while(jet < 30)
				{
				//##### - Get Item Type
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Damage
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Power
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Ammo
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Recoil
				Buffer_GetFloat(Buffer, &TempFloat);

				jet++;
				}

			//#### GET ANGEL COLOUR EDIT
			/*Buffer_GetByte(Buffer, &TempUint8);

			jet2=0;
			while(jet2 < 38)
				{
				//##### - Get Item Type
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Damage
				Buffer_GetFloat(Buffer, &TempFloat);

				//##### - Get Item Power
				Buffer_GetFloat(Buffer, &TempFloat);

				jet2++;
				}*/

			helly++;
			}

		}

	//MessageBox(NULL,"QNETWORKReceiveUpdateCharDataALL:  Fin \n","ERROR",MB_OK);
	}


//=====================================================================================
//	ParseClientCharData
//=====================================================================================
static void QNETWORKParseClientCharData(Server_Server *Server, Buffer_Data *Buffer, Server_Client *Client, float Time)
{
	float		DeltaTime, MoveTime/*, NetTime*/;
	geVec3d		Origin = {0.0f, 0.0f, 0.0f};
	uint16		ButtonBits;

	Buffer_GetFloat(Buffer, &MoveTime);
	
	//###### Update Player #####

	//#########  - EMPTY BUFFER -  #########

	//### Find Q_Netplayer->Netplayer ID
	helly=0;
	while(Q_Netplayer->Netplayer[helly].ID != Client->NetID)
		{ helly++; }

	//### Actor Reference
	Buffer_GetString(Buffer, Q_Netplayer->Netplayer[helly].CharDATA.ActorREF);
	Buffer_GetString(Buffer, Q_Netplayer->Netplayer[helly].CharDATA.ShadowREF);

	//### Send Mouse Bytes
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.TEAM);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Class);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Level);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ActorSCALE);

	//### Send Key Bytes
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.UnusedXP);

	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.EnergyEff);

	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.LeftArmSTRENGTH);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.RightArmSTRENGTH);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.LeftLegSTRENGTH);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.RightLegSTRENGTH);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.LeftArmSNAP);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.RightArmSNAP);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.LeftLegSNAP);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.RightLegSNAP);

	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.Height);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.Weight);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.PhysicalStr);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.Quickness);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.Dexterity);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.Constitution);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.AggPower);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.BodySKILL.DefPower);

	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.WeaponSKILL.Accuracy);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.WeaponSKILL.DrawSPD);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.WeaponSKILL.ReloadSPD);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.WeaponSKILL.RecoilHEIGHTrecover);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.TrailTYPE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.TrailRED);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.TrailGREEN);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.TrailBLUE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.TrailALPHA);
	
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.JinkTYPE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.JinkRED);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.JinkGREEN);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.JinkBLUE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.JinkALPHA);
	
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SteamTYPE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SteamRED);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SteamGREEN);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SteamBLUE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SteamALPHA);
	
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SpikeTYPE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SpikeRED);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SpikeGREEN);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SpikeBLUE);
	Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelEFFECTS.SpikeALPHA);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellContainerID[0]);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellContainerID[1]);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellContainerID[2]);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellContainerID[3]);

	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CurrWEAPON);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CurrHEADARMOUR);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CurrUPPERARMOUR);
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CurrLOWERARMOUR);

	//######### -  ITEM DATA LOOP  - #########

	//### Number of Items
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.NomITEMS);

	jet=0;
	while(jet < Q_Netplayer->Netplayer[helly].CharDATA.NomITEMS)
		{
		//##### - Set ITEM Name
		Buffer_GetString(Buffer, Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Name);

		//##### - Set Item Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Type);

		//##### - Set Item Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].ItemREF);

		if(Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Type == 0)
			{
			//##### - Set Character Item Actor Reference
			Buffer_GetString(Buffer, Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].ItemActorREF);
			}

		//##### - Set Item Scale Factor
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].ItemScaleFACT);

		//##### - Set Item Quality Level
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QualLVL);

		//##### - Get Item Damage
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Damage);

		//##### - Get Item Power
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Power);

		//##### - Get Item Ammo
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Ammo);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].RecoilHeight);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].RecoilDistance);

		//##### - Get Item Fire Rate
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FireRate);

		//##### - Get Item Accuracy
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Accuracy);

		//##### - Set Item Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].BulletCNT);

		//##### - Set Item Scope Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].ScopeTYPE);

		//##### - Set Item Scope Type
		Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].ScopeLOC);

		//##### - Set Item Laser Type
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].LaserTYPE);

		//##### - Set Item Laser Type
		Buffer_GetAngle(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].LaserLOC);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QAS_Fire);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QAS_ReloadBoltOut);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QAS_ReloadBoltIn);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QAS_ReloadClipOut);

		//##### - Set Item Sound
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QAS_ReloadClipIn);

		//##### - Get Item Armour
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].ArmourFACTOR);

		//##### - Get Item Armour
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].ArmourAMOUNT);

		//##### - Get Item Armour
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].ArmourREGEN);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Smoke.CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[0].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[1].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[2].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[3].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Effect[4].CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].Fog.CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.TYPE);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.INT);

		//##### - Set Item Attribute
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.ON);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.Red);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.Green);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.Blue);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.Alpha);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.Scale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.TIMER);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].FogLight.CNT);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].ExpandSTRENGTH);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_NoWEP);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_TimeScale);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Gravity);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LifeINC);

		//##### - Set Item Attribute
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyINC);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_EnergyEff);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Height);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Weight);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Strength);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Quickness);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Dexterity);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_Constitution);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_AggPower);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_DefPower);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmStr);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmStr);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegStr);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegStr);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RArmSnap);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LArmSnap);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_RLegSnap);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_LLegSnap);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINKpower);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.ItemDATA[jet].QA_ITEMINC_JINK3intensity);

		jet++;
		}

	//#### ACTIVE SPELLS
	jet=0;
	while(jet < 3)
		{
		//##### - Get Item QA Effect Type
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_TYPE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_INTENSITY);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_SWITCH);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04RED);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_EnergyEff);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Height);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Weight);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Strength);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Quickness);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Dexterity);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_Constitution);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_AggPower);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_DefPower);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmStr);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmStr);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegStr);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegStr);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RArmSnap);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LArmSnap);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_RLegSnap);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_LLegSnap);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINKpower);

		//##### - Get SPELL Attributes
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

		//##### - Set Item QA Effect Intensity
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.SpellSLOT[jet].LIVE);

		jet++;
		}


	//######### -  Physical Attacks SPEC DATA LOOP  - #########

	jet=0;
	while(jet < 30)
		{
		//##### - Get Item Type
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AttackSKILL[jet].Power);

		//##### - Get Item Damage
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AttackSKILL[jet].Damage);

		//##### - Get Item Power
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AttackSKILL[jet].MoveSpeed);

		//##### - Get Item Ammo
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AttackSKILL[jet].NumRotate);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AttackSKILL[jet].ExpRadius);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AttackSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  Cleric Class Skills LOOP  - #########

	jet=0;
	while(jet < 12)
		{
		//##### - Get Item Type
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CLSClericSKILL[jet].Cost);

		//##### - Get Item Damage
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CLSClericSKILL[jet].Potency);

		//##### - Get Item Power
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CLSClericSKILL[jet].Amount);

		//##### - Get Item Ammo
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CLSClericSKILL[jet].Speed);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CLSClericSKILL[jet].Duration);

		//##### - Get Item Recoil
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.CLSClericSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  SPELL DATA LOOP  - #########

	//### Number of Spells
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA_->NomSpells);

	jet=0;
	while(jet < Q_Netplayer->Netplayer[helly].CharDATA_->NomSpells)
		{
		//##### - Get Spell Quality
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QualityLVL);

		//##### - Set Spell Attribute IDs
		SHADOW=0;
		while(SHADOW < 10)
			{
			Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].AttributeID[SHADOW]);
			SHADOW++;
			}

		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_TYPE);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_INTENSITY);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_SWITCH);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL00RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL00GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL00BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL00ALPHA);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL01RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL01GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL01BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL01ALPHA);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL02RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL02GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL02BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL02ALPHA);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL03RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL03GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL03BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL03ALPHA);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL04RED);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL04GREEN);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL04BLUE);
		Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_EFFECT_COL04ALPHA);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_IntBoost);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_EnergyEff);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_Height);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_Weight);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_Strength);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_Quickness);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_Dexterity);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_Constitution);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_AggPower);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_DefPower);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegStr);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPAccuracy);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPDrawSPD);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPReloadSPD);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_WEPRecoilHR);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_JINKmovespeed);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_JINKpower);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_JINK3intensity);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.Spells[jet].QA_SPELLINC_LLegSnap);
		jet++;
		}


	//#### SEND ANGEL COLOUR EDIT
	Buffer_GetByte(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelCOLOURS.ANGELEDITFLAG);

	jet2=0;
	while(jet2 < 38)
		{
		//##### - Get Item Type
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelCOLOURS.RED[jet2]);

		//##### - Get Item Damage
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelCOLOURS.GREEN[jet2]);

		//##### - Get Item Power
		Buffer_GetFloat(Buffer, &Q_Netplayer->Netplayer[helly].CharDATA.AngelCOLOURS.BLUE[jet2]);

		jet2++;
		}


	//########### Prepare to Spawn Realworld avatar
	Q_Netplayer->Netplayer[helly].SpawnREADY = 1;

	Q_SpawnQ_Netplayer->Netplayer(helly,Q_Netplayer->Netplayer[helly].CharDATA.TEAM);
}


//=====================================================================================
//	SendPlayerCharacterData(void)
//	Send Player Character Data to Server
//=====================================================================================
geBoolean QNETWORKSendPlayerCharacterData(void)
{
	uint8			Data[555000];

	Buffer_Set(&QHost.NMgr->ClientToServerBuffer, Data, 555000);	//512

	//#########  - FILL SEND BUFFER -  #########

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, NETMGR_MSG_CLIENT_CHARACTER_DATA);			// Let server know we're moving
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, Time);				// Current Time
	//Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, Client->ServerPingBack);		// Current Time

	Buffer_FillString(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorREF);
	Buffer_FillString(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ShadowREF);

	//### Send Mouse Bytes
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].TEAM);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Class);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Level);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ActorSCALE);

	//### Send Key Bytes
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].UnusedXP);

	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.EnergyEff);

	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSTRENGTH);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightArmSNAP);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.LeftLegSNAP);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.RightLegSNAP);

	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Height);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Weight);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.PhysicalStr);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Quickness);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Dexterity);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.Constitution);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.AggPower);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].BodySKILL.DefPower);

	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.Accuracy);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.DrawSPD);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.ReloadSPD);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].WeaponSKILL.RecoilHEIGHTrecover);

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailTYPE);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailRED);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailGREEN);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailBLUE);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.TrailALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkTYPE);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkRED);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkGREEN);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkBLUE);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.JinkALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamTYPE);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamRED);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamGREEN);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamBLUE);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SteamALPHA);
	
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeTYPE);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeRED);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeGREEN);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeBLUE);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelEFFECTS.SpikeALPHA);

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[0]);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[1]);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[2]);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellContainerID[3]);

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrWEAPON);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrHEADARMOUR);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrUPPERARMOUR);
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CurrLOWERARMOUR);

	//######### -  ITEM DATA LOOP  - #########

	//### Number of Items
	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS);

	jet=0;
	while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomITEMS)
		{
		//##### - Set ITEM Name
		Buffer_FillString(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Name);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemREF);

		if(player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Type == 0)
			{
			//##### - Set Character Item Actor Reference
			Buffer_FillString(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemActorREF);
			}

		//##### - Set Item Scale Factor
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ItemScaleFACT);

		//##### - Set Item Quality Level
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QualLVL);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Power);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Ammo);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilHeight);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].RecoilDistance);

		//##### - Get Item Fire Rate
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FireRate);

		//##### - Get Item Accuracy
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Accuracy);

		//##### - Set Item Type
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].BulletCNT);

		//##### - Set Item Scope Type
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeTYPE);

		//##### - Set Item Scope Type
		Buffer_FillAngle(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ScopeLOC);

		//##### - Set Item Laser Type
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserTYPE);

		//##### - Set Item Laser Type
		Buffer_FillAngle(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].LaserLOC);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_Fire);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadBoltIn);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipOut);

		//##### - Set Item Sound
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QAS_ReloadClipIn);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourFACTOR);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourAMOUNT);

		//##### - Get Item Armour
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ArmourREGEN);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Smoke.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[0].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[1].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[2].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[3].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Effect[4].CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].Fog.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TYPE);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.INT);

		//##### - Set Item Attribute
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.ON);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Red);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Green);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Blue);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Alpha);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.Scale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.TIMER);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].FogLight.CNT);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].ExpandSTRENGTH);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_NoWEP);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_TimeScale);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Gravity);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LifeINC);

		//##### - Set Item Attribute
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyINC);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_EnergyEff);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Height);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Weight);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Strength);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Quickness);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Dexterity);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_Constitution);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_AggPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_DefPower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegStr);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LArmSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_RLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_LLegSnap);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPAccuracy);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPDrawSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPReloadSPD);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_WEPRecoilHR);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKmovespeed);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINKpower);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].ItemDATA[jet].QA_ITEMINC_JINK3intensity);

		jet++;
		}

	//#### ACTIVE SPELLS
	jet=0;
	while(jet < 3)
		{
		//##### - Get Item QA Effect Type
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_TYPE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_INTENSITY);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_SWITCH);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL00ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL01ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL02ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL03ALPHA);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04RED);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04GREEN);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04BLUE);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_EFFECT_COL04ALPHA);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_IntBoost);

		//##### - Get Item Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_EnergyEff);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Height);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Weight);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Strength);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Quickness);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Dexterity);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_Constitution);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_AggPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_DefPower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegStr);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LArmSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_RLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_LLegSnap);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPAccuracy);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPDrawSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPReloadSPD);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_WEPRecoilHR);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKmovespeed);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINKpower);

		//##### - Get SPELL Attributes
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].QA_SPELLINC_JINK3intensity);

		//##### - Set Item QA Effect Intensity
		Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].SpellSLOT[jet].LIVE);

		jet++;
		}

	//######### -  Physical Attacks SPEC DATA LOOP  - #########

	jet=0;
	while(jet < 30)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Power);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Damage);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].MoveSpeed);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].NumRotate);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].ExpRadius);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AttackSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  Cleric Class Skills LOOP  - #########

	jet=0;
	while(jet < 12)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Cost);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Potency);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Amount);

		//##### - Get Item Ammo
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Speed);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Duration);

		//##### - Get Item Recoil
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].CLSClericSKILL[jet].Accuracy);

		jet++;
		}


	//######### -  SPELL DATA LOOP  - #########

	//### Number of Spells
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells);

	jet=0;
	while(jet < player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].NomSpells)
		{
		//##### - Get Spell Quality
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QualityLVL);

		//##### - Set Spell Attribute IDs
		SHADOW=0;
		while(SHADOW < 10)
			{
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].AttributeID[SHADOW]);
			SHADOW++;
			}

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_INTENSITY);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_SWITCH);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL00ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL01ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL02ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL03ALPHA);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04RED);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04GREEN);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04BLUE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_EFFECT_COL04ALPHA);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_IntBoost);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_EnergyEff);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Height);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Weight);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Strength);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Quickness);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Dexterity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_Constitution);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_AggPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_DefPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPAccuracy);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPDrawSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPReloadSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_WEPRecoilHR);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKmovespeed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINKpower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_JINK3intensity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].Spells[jet].QA_SPELLINC_LLegSnap);
		jet++;
		}


	//#### SEND ANGEL COLOUR EDIT
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.ANGELEDITFLAG);

	jet2=0;
	while(jet2 < 38)
		{
		//##### - Get Item Type
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.RED[jet2]);

		//##### - Get Item Damage
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.GREEN[jet2]);

		//##### - Get Item Power
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, player[g_Player]->CDATA->CharDATA[player[g_Player]->CDATA->CurrCHAR].AngelCOLOURS.BLUE[jet2]);

		jet2++;
		}


	if (!geCSNetMgr_SendToServer(QHost.NMgr->CSNetMgr, GE_false, QHost.NMgr->ClientToServerBuffer.Data, QHost.NMgr->ClientToServerBuffer.Pos))
		return GE_false;

	return GE_true;
}



geBoolean QNETWORKSendWorldToClient(geCSNetMgr_NetID NID, float Time)
{
	//Buffer_Data		Buffer;
	uint8			Data[555000];


	Buffer_Set(&QHost.NMgr->ServerToClientBuffer, Data, 555000);


	//SET MESSAGE TYPE AND SERVER TIME
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, NETMGR_MSG_UPDATE_CLIENT_WORLD);			// Let client know its updating
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Time);								// Current Time
	//Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Client->ServerPingBack);			// Current Time


	//###### PREPARE Player Update  #####
	//#### Find Player Avatar
	helly=0;
	while(Q_Netplayer->Netplayer[helly].ID != NID)
		{ helly++; }

	//#### Prepare Player Update
	QHost.PlayerUPDATE.Pos = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].Avatar.ActorXform.Translation;
	QHost.PlayerUPDATE.Mposestate = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].Mposestate;
	if(Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].EnergySWITCHOFF > 0)
		{
		Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].EnergySWITCHOFF--;
		QHost.PlayerUPDATE.Aposestate = 205;
		}
	else QHost.PlayerUPDATE.Aposestate = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].Aposestate;
	QHost.PlayerUPDATE.attackon = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].attackon;
	QHost.PlayerUPDATE.WeaponStatus = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].WeaponStatus;
	QHost.PlayerUPDATE.MFlash = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].NETMFlash;
	QHost.PlayerUPDATE.Block = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].Block;
	QHost.PlayerUPDATE.BlockHit = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].BlockHit;
	QHost.PlayerUPDATE.BlockHeight = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].BlockHeight;
	QHost.PlayerUPDATE.Crouch = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].Crouch;
	QHost.PlayerUPDATE.HitReactScale = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].HitReactScale;
	QHost.PlayerUPDATE.MoveReactVec = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].MoveReactVec;
	QHost.PlayerUPDATE.MoveReactSpeed = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].MoveReactSpeed;
	QHost.PlayerUPDATE.SpecLvlRESET = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].SpecLvlRESET;
	QHost.PlayerUPDATE.SNDTRIGEnergy = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].SNDTRIGEnergy;
	QHost.PlayerUPDATE.HB_Health = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].HB_Health;
	QHost.PlayerUPDATE.HB_Energy = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].HB_Energy;
	QHost.PlayerUPDATE.WallRunCollNormal = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].WallRunCollision.Plane.Normal;
	QHost.PlayerUPDATE.JINK3_PowerFactor = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].JINK3_PowerFactor;
	QHost.PlayerUPDATE.PlayerMode = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].PlayerMode;

	QHost.PlayerUPDATE.idleposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].idleposecnt;
	QHost.PlayerUPDATE.runposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].runposecnt;
	QHost.PlayerUPDATE.attposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].attposecnt;
	QHost.PlayerUPDATE.crohposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].crohposecnt;
	QHost.PlayerUPDATE.jumpposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].jumpposecnt;

	Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].SNDTRIGEnergy = 0;
	Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].SpecLvlRESET = 0;
	Q_Forge->Forge[Q_Netplayer->Netplayer[helly].LocalCONTROLID].NETMFlash = 0;


	//### FILL BUFFER
	Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.Pos);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.Mposestate);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.Aposestate);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.attackon);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.WeaponStatus);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.MFlash);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.Block);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.BlockHit);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.BlockHeight);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.Crouch);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.HitReactScale);
	Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.MoveReactVec);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.MoveReactSpeed);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.SpecLvlRESET);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.SNDTRIGEnergy);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.HB_Health);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.HB_Energy);
	Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.WallRunCollNormal);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.JINK3_PowerFactor);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.PlayerMode);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.idleposecnt);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.runposecnt);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.attposecnt);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.crohposecnt);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.jumpposecnt);


	//###### PREPARE SERVER'S Player Update  #####
	//#### Find Server Avatar
	
	//#### Prepare Server Player Update
	QHost.ServerPlayerUPDATE.Pos = playact.ActorXform.Translation;
	geXForm3d_GetUp(&playact.ActorXform, &QHost.ServerPlayerUPDATE.Angle);
	QHost.ServerPlayerUPDATE.Mposestate = player[g_Player]->Mposestate;
	if(player[g_Player]->EnergySWITCHOFF > 0)
		{
		player[g_Player]->EnergySWITCHOFF--;
		QHost.ServerPlayerUPDATE.Aposestate = 205;
		}
	else QHost.ServerPlayerUPDATE.Aposestate = player[g_Player]->Aposestate;
	QHost.ServerPlayerUPDATE.attackon = player[g_Player]->attackon;
	QHost.ServerPlayerUPDATE.WeaponStatus = player[g_Player]->WeaponStatus;
	QHost.ServerPlayerUPDATE.MFlash = player[g_Player]->NETMFlash;
	QHost.ServerPlayerUPDATE.Block = player[g_Player]->Block;
	QHost.ServerPlayerUPDATE.BlockHit = player[g_Player]->BlockHit;
	QHost.ServerPlayerUPDATE.BlockHeight = player[g_Player]->BlockHeight;
	QHost.ServerPlayerUPDATE.Crouch = player[g_Player]->Crouch;
	QHost.ServerPlayerUPDATE.HitReactScale = player[g_Player]->HitReactScale;
	QHost.ServerPlayerUPDATE.MoveReactVec = player[g_Player]->MoveReactVec;
	QHost.ServerPlayerUPDATE.MoveReactSpeed = player[g_Player]->MoveReactSpeed;
	QHost.ServerPlayerUPDATE.HB_Health = player[g_Player]->HB_Health;
	QHost.ServerPlayerUPDATE.HB_Energy = player[g_Player]->HB_Energy;
	QHost.ServerPlayerUPDATE.WallRunCollNormal = player[g_Player]->WallRunCollision.Plane.Normal;
	QHost.ServerPlayerUPDATE.JINK3_PowerFactor = player[g_Player]->JINK3_PowerFactor;
	QHost.ServerPlayerUPDATE.PlayerMode = player[g_Player]->PlayerMode;

	QHost.ServerPlayerUPDATE.idleposecnt = player[g_Player]->idleposecnt;
	QHost.ServerPlayerUPDATE.runposecnt = player[g_Player]->runposecnt;
	QHost.ServerPlayerUPDATE.attposecnt = player[g_Player]->attposecnt;
	QHost.ServerPlayerUPDATE.crohposecnt = player[g_Player]->crohposecnt;
	QHost.ServerPlayerUPDATE.jumpposecnt = player[g_Player]->jumpposecnt;

	player[g_Player]->NETMFlash = 0;


	//### FILL BUFFER
	Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.Pos);
	Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.Angle);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.Mposestate);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.Aposestate);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.attackon);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.WeaponStatus);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.MFlash);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.Block);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.BlockHit);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.BlockHeight);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.Crouch);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.HitReactScale);
	Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.MoveReactVec);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.MoveReactSpeed);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.HB_Health);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.HB_Energy);
	Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.WallRunCollNormal);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.JINK3_PowerFactor);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.PlayerMode);

	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.idleposecnt);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.runposecnt);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.attposecnt);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.crohposecnt);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.ServerPlayerUPDATE.jumpposecnt);


	//######  - Other Worldly Avatars -  #####

	//#### Fill AI Avatars
	QHost.PlayerUPDATE.AvatarCount=0;
	helly2=0;
	while(helly2 < _->NomAI)
		{
		if((Q_Forge->Forge[helly2].LIVE == 1) && (helly2 != Q_Netplayer->Netplayer[helly].LocalCONTROLID)) QHost.PlayerUPDATE.AvatarCount++;
		helly2++;
		}

	//### Set the Avatar Count
	QHost.PlayerUPDATE.AvatarCount = _->NomAI - 1;
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.PlayerUPDATE.AvatarCount);


	//##### AVATAR UPDATE PREP LOOP
	jet=0;
	while(jet < _->NomAI)
		{
		if((Q_Forge->Forge[jet].LIVE == 1) && (jet != Q_Netplayer->Netplayer[helly].LocalCONTROLID))
			{
			//###  PREP AVATAR UPDATE VALUES
			QHost.AvatarUPDATE->Pos = Q_Forge->Forge[jet].Avatar.ActorXform.Translation;
			geXForm3d_GetUp(&Q_Forge->Forge[jet].Avatar.ActorXform, &QHost.AvatarUPDATE->Angle);
			QHost.AvatarUPDATE->Mposestate = Q_Forge->Forge[jet].Mposestate;
			if(Q_Forge->Forge[jet].EnergySWITCHOFF > 0)
				{
				Q_Forge->Forge[jet].EnergySWITCHOFF--;
				QHost.AvatarUPDATE->Aposestate = 205;
				}
			else QHost.AvatarUPDATE->Aposestate = Q_Forge->Forge[jet].Aposestate;
			QHost.AvatarUPDATE->attackon = Q_Forge->Forge[jet].attackon;
			QHost.AvatarUPDATE->WeaponStatus = Q_Forge->Forge[jet].WeaponStatus;
			QHost.AvatarUPDATE->MFlash = Q_Forge->Forge[jet].NETMFlash;
			QHost.AvatarUPDATE->Block = Q_Forge->Forge[jet].Block;
			QHost.AvatarUPDATE->BlockHit = Q_Forge->Forge[jet].BlockHit;
			QHost.AvatarUPDATE->BlockHeight = Q_Forge->Forge[jet].BlockHeight;
			QHost.AvatarUPDATE->Crouch = Q_Forge->Forge[jet].Crouch;
			QHost.AvatarUPDATE->HitReactScale = Q_Forge->Forge[jet].HitReactScale;
			QHost.AvatarUPDATE->MoveReactVec = Q_Forge->Forge[jet].MoveReactVec;
			QHost.AvatarUPDATE->MoveReactSpeed = Q_Forge->Forge[jet].MoveReactSpeed;
			QHost.AvatarUPDATE->HB_Health = Q_Forge->Forge[jet].HB_Health;
			QHost.AvatarUPDATE->HB_Energy = Q_Forge->Forge[jet].HB_Energy;
			QHost.AvatarUPDATE->WallRunCollNormal = Q_Forge->Forge[jet].WallRunCollision.Plane.Normal;
			QHost.AvatarUPDATE->JINK3_PowerFactor = Q_Forge->Forge[jet].JINK3_PowerFactor;
			QHost.AvatarUPDATE->PlayerMode = Q_Forge->Forge[jet].PlayerMode;

			QHost.AvatarUPDATE->idleposecnt = Q_Forge->Forge[jet].idleposecnt;
			QHost.AvatarUPDATE->runposecnt = Q_Forge->Forge[jet].runposecnt;
			QHost.AvatarUPDATE->attposecnt = Q_Forge->Forge[jet].attposecnt;
			QHost.AvatarUPDATE->crohposecnt = Q_Forge->Forge[jet].crohposecnt;
			QHost.AvatarUPDATE->jumpposecnt = Q_Forge->Forge[jet].jumpposecnt;

			Q_Forge->Forge[jet].NETMFlash = 0;

			//### UPDATE AVATAR FORGE ID
			QHost.AvatarUPDATE->AvID = jet;


			//### FILL BUFFER
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->AvID);

			//###Get Player Data to Client
			Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Pos);				//Avatar Position
			Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Angle);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Mposestate);		//Avatar Move Pose State
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Aposestate);		//Avatar Attack Pose State
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->attackon);		//Avatar Attack Pose State
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->WeaponStatus);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MFlash);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Block);			//Avatar Attack Pose State
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BlockHit);		//Avatar Attack Pose State
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BlockHeight);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Crouch);			//Avatar Attack Pose State
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->HitReactScale);
			Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MoveReactVec);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MoveReactSpeed);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->HB_Health);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->HB_Energy);
			Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->WallRunCollNormal);
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->JINK3_PowerFactor);
			Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->PlayerMode);

			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->idleposecnt);		//Avatar Idle Pose Counter
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->runposecnt);		//Avatar Run Pose Counter
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->attposecnt);		//Avatar Attack Pose Counter
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->crohposecnt);		//Avatar Attack Pose Counter
			Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->jumpposecnt);		//Avatar Attack Pose Counter
			}

		jet++;
		}


	//##### Prepare Q_Object->ObjectS
	QHost.AvatarUPDATE->_->NomQObject = _->NomQObject;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomQObject);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomQObject)
		{
		QHost.AvatarUPDATE->Q_Object->ObjectStrength = Q_Object->Object[aero].StrengthBANK;

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_Object->ObjectStrength);
		
		aero++;
		}


	//##### Prepare World Bullets
	QHost.AvatarUPDATE->_->NomBullet = _->NomBullet;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomBullet);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomBullet)
		{
		QHost.AvatarUPDATE->Bullets[aero].Live = Q_Bullet->Bullet[aero].Live;
		QHost.AvatarUPDATE->Bullets[aero].TrajVec = Q_Bullet->Bullet[aero].TrajVec;
		QHost.AvatarUPDATE->Bullets[aero].WorldPos = Q_Bullet->Bullet[aero].WorldPos;
		QHost.AvatarUPDATE->Bullets[aero].Speed = Q_Bullet->Bullet[aero].Speed;
		QHost.AvatarUPDATE->Bullets[aero].ActorID = Q_Bullet->Bullet[aero].ActorID;
		QHost.AvatarUPDATE->Bullets[aero].ORIGPos = Q_Bullet->Bullet[aero].ORIGPos;
		QHost.AvatarUPDATE->Bullets[aero].ZSpin = Q_Bullet->Bullet[aero].ZSpin;
		QHost.AvatarUPDATE->Bullets[aero].AX = Q_Bullet->Bullet[aero].AlignMatrix.AX;
		QHost.AvatarUPDATE->Bullets[aero].AY = Q_Bullet->Bullet[aero].AlignMatrix.AY;
		QHost.AvatarUPDATE->Bullets[aero].AZ = Q_Bullet->Bullet[aero].AlignMatrix.AZ;
		QHost.AvatarUPDATE->Bullets[aero].BX = Q_Bullet->Bullet[aero].AlignMatrix.BX;
		QHost.AvatarUPDATE->Bullets[aero].BY = Q_Bullet->Bullet[aero].AlignMatrix.BY;
		QHost.AvatarUPDATE->Bullets[aero].BZ = Q_Bullet->Bullet[aero].AlignMatrix.BZ;
		QHost.AvatarUPDATE->Bullets[aero].CX = Q_Bullet->Bullet[aero].AlignMatrix.CX;
		QHost.AvatarUPDATE->Bullets[aero].CY = Q_Bullet->Bullet[aero].AlignMatrix.CY;
		QHost.AvatarUPDATE->Bullets[aero].CZ = Q_Bullet->Bullet[aero].AlignMatrix.CZ;
		QHost.AvatarUPDATE->Bullets[aero].Translation = Q_Bullet->Bullet[aero].AlignMatrix.Translation;
		QHost.AvatarUPDATE->Bullets[aero].JDamageLVL = Q_Bullet->Bullet[aero].JDamageLVL;


		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].Live);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].TrajVec);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].WorldPos);		//Avatar Move Pose State
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].Speed);		//Avatar Attack Pose State
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].ActorID);		//Avatar Attack Pose State
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].ORIGPos);		//Avatar Attack Pose State
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].ZSpin);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].AX);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].AY);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].AZ);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].BX);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].BY);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].BZ);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].CX);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].CY);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].CZ);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].Translation);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Bullets[aero].JDamageLVL);
		aero++;
		}


	//##### Prepare World Bullet Hits
	QHost.AvatarUPDATE->_->NomBulHit = _->NomBulHit;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomBulHit);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomBulHit)
		{
		QHost.AvatarUPDATE->BulletHits[aero].Live = Q_BulletHit->BulletHit[aero].Live;
		QHost.AvatarUPDATE->BulletHits[aero].Init = Q_BulletHit->BulletHit[aero].Init;
		QHost.AvatarUPDATE->BulletHits[aero].EffectType = Q_BulletHit->BulletHit[aero].EffectType;
		QHost.AvatarUPDATE->BulletHits[aero].ActorID = Q_BulletHit->BulletHit[aero].ActorID;
		QHost.AvatarUPDATE->BulletHits[aero].ActorHITID = Q_BulletHit->BulletHit[aero].ActorHITID;

		QHost.AvatarUPDATE->BulletHits[aero].BulletDMG = Q_BulletHit->BulletHit[aero].BulletDMG;
		QHost.AvatarUPDATE->BulletHits[aero].BulletPWR = Q_BulletHit->BulletHit[aero].BulletPWR;

		QHost.AvatarUPDATE->BulletHits[aero].Pos = Q_BulletHit->BulletHit[aero].Pos;
		QHost.AvatarUPDATE->BulletHits[aero].BulletTraj = Q_BulletHit->BulletHit[aero].BulletTraj;
		QHost.AvatarUPDATE->BulletHits[aero].CollNormal = Q_BulletHit->BulletHit[aero].CollNormal;


		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].Live);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].Init);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].EffectType);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].ActorID);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].ActorHITID);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].BulletDMG);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].BulletPWR);

		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].Pos);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].BulletTraj);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->BulletHits[aero].CollNormal);

		aero++;
		}


	//##### Prepare World Melee Hits
	QHost.AvatarUPDATE->_->NomMelHit = _->NomMelHit;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomMelHit);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomMelHit)
		{
		QHost.AvatarUPDATE->MeleeHits[aero].Live = Q_MeleeHit->MeleeHit[aero].Live;
		QHost.AvatarUPDATE->MeleeHits[aero].HitTYPE = Q_MeleeHit->MeleeHit[aero].HitTYPE;
		QHost.AvatarUPDATE->MeleeHits[aero].HitRESULT = Q_MeleeHit->MeleeHit[aero].HitRESULT;

		QHost.AvatarUPDATE->MeleeHits[aero].Impact = Q_MeleeHit->MeleeHit[aero].Impact;
		QHost.AvatarUPDATE->MeleeHits[aero].Bonenum = Q_MeleeHit->MeleeHit[aero].Bonenum;
		QHost.AvatarUPDATE->MeleeHits[aero].ReactionNorm = Q_MeleeHit->MeleeHit[aero].ReactionNorm;
		QHost.AvatarUPDATE->MeleeHits[aero].HitPowerPercent = Q_MeleeHit->MeleeHit[aero].HitPowerPercent;
		QHost.AvatarUPDATE->MeleeHits[aero].BloodAmt = Q_MeleeHit->MeleeHit[aero].BloodAmt;

		QHost.AvatarUPDATE->MeleeHits[aero].Radius = Q_MeleeHit->MeleeHit[aero].Expandro3D.Radius;
		QHost.AvatarUPDATE->MeleeHits[aero].MaxRadius = Q_MeleeHit->MeleeHit[aero].Expandro3D.MaxRadius;
		QHost.AvatarUPDATE->MeleeHits[aero].StartFade = Q_MeleeHit->MeleeHit[aero].Expandro3D.StartFade;
		QHost.AvatarUPDATE->MeleeHits[aero].Red = Q_MeleeHit->MeleeHit[aero].Expandro3D.Red;
		QHost.AvatarUPDATE->MeleeHits[aero].Green = Q_MeleeHit->MeleeHit[aero].Expandro3D.Green;
		QHost.AvatarUPDATE->MeleeHits[aero].Blue = Q_MeleeHit->MeleeHit[aero].Expandro3D.Blue;

		QHost.AvatarUPDATE->MeleeHits[aero].AttackSTRENGTH = Q_MeleeHit->MeleeHit[aero].AttackSTRENGTH;
		QHost.AvatarUPDATE->MeleeHits[aero].AttackSNAP = Q_MeleeHit->MeleeHit[aero].AttackSNAP;

		QHost.AvatarUPDATE->MeleeHits[aero].AX = Q_MeleeHit->MeleeHit[aero].AttboneXF.AX;
		QHost.AvatarUPDATE->MeleeHits[aero].AY = Q_MeleeHit->MeleeHit[aero].AttboneXF.AY;
		QHost.AvatarUPDATE->MeleeHits[aero].AZ = Q_MeleeHit->MeleeHit[aero].AttboneXF.AZ;
		QHost.AvatarUPDATE->MeleeHits[aero].BX = Q_MeleeHit->MeleeHit[aero].AttboneXF.BX;
		QHost.AvatarUPDATE->MeleeHits[aero].BY = Q_MeleeHit->MeleeHit[aero].AttboneXF.BY;
		QHost.AvatarUPDATE->MeleeHits[aero].BZ = Q_MeleeHit->MeleeHit[aero].AttboneXF.BZ;
		QHost.AvatarUPDATE->MeleeHits[aero].CX = Q_MeleeHit->MeleeHit[aero].AttboneXF.CX;
		QHost.AvatarUPDATE->MeleeHits[aero].CY = Q_MeleeHit->MeleeHit[aero].AttboneXF.CY;
		QHost.AvatarUPDATE->MeleeHits[aero].CZ = Q_MeleeHit->MeleeHit[aero].AttboneXF.CZ;
		QHost.AvatarUPDATE->MeleeHits[aero].Translation = Q_MeleeHit->MeleeHit[aero].AttboneXF.Translation;


		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].Live);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].HitTYPE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].HitRESULT);

		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].Impact);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].Bonenum);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].ReactionNorm);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].HitPowerPercent);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].BloodAmt);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].Radius);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].MaxRadius);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].StartFade);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].Red);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].Green);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].Blue);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].AttackSTRENGTH);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].AttackSNAP);
		
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].AX);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].AY);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].AZ);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].BX);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].BY);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].BZ);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].CX);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].CY);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].CZ);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->MeleeHits[aero].Translation);

		aero++;
		}


	//##### Prepare Small Energy
	QHost.AvatarUPDATE->_->NomSEnergy = _->NomSEnergy;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomSEnergy);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomSEnergy)
		{
		QHost.AvatarUPDATE->Q_SEnergys[aero].Live = Q_SEnergy->SEnergy[aero].Live;
		QHost.AvatarUPDATE->Q_SEnergys[aero].LightPos = Q_SEnergy->SEnergy[aero].LightPos;
		QHost.AvatarUPDATE->Q_SEnergys[aero].TraVec = Q_SEnergy->SEnergy[aero].TraVec;
		QHost.AvatarUPDATE->Q_SEnergys[aero].Speed = Q_SEnergy->SEnergy[aero].Speed;
		QHost.AvatarUPDATE->Q_SEnergys[aero].Scale = Q_SEnergy->SEnergy[aero].Scale;
		QHost.AvatarUPDATE->Q_SEnergys[aero].Alpha = Q_SEnergy->SEnergy[aero].Alpha;
		QHost.AvatarUPDATE->Q_SEnergys[aero].TargetLock = Q_SEnergy->SEnergy[aero].TargetLock;
		QHost.AvatarUPDATE->Q_SEnergys[aero].TargetID = Q_SEnergy->SEnergy[aero].TargetID;
		QHost.AvatarUPDATE->Q_SEnergys[aero].AngleX = Q_SEnergy->SEnergy[aero].AngleX;
		QHost.AvatarUPDATE->Q_SEnergys[aero].AngleY = Q_SEnergy->SEnergy[aero].AngleY;
		QHost.AvatarUPDATE->Q_SEnergys[aero].AngleZ = Q_SEnergy->SEnergy[aero].AngleZ;

		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].Live);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].LightPos);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].TraVec);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].Speed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].Scale);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].Alpha);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].TargetLock);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].TargetID);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].AngleX);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].AngleY);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_SEnergys[aero].AngleZ);
		aero++;
		}


	//##### Prepare Large Energy
	QHost.AvatarUPDATE->_->NomLEnergy = _->NomLEnergy;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomLEnergy);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomLEnergy)
		{
		QHost.AvatarUPDATE->Q_LEnergys[aero].Live = Q_LEnergy->LEnergy[aero].Live;
		QHost.AvatarUPDATE->Q_LEnergys[aero].LightPos = Q_LEnergy->LEnergy[aero].LightPos;
		QHost.AvatarUPDATE->Q_LEnergys[aero].TraVec = Q_LEnergy->LEnergy[aero].TraVec;
		QHost.AvatarUPDATE->Q_LEnergys[aero].Speed = Q_LEnergy->LEnergy[aero].Speed;
		QHost.AvatarUPDATE->Q_LEnergys[aero].Scale = Q_LEnergy->LEnergy[aero].Scale;
		QHost.AvatarUPDATE->Q_LEnergys[aero].Alpha = Q_LEnergy->LEnergy[aero].Alpha;
		QHost.AvatarUPDATE->Q_LEnergys[aero].EnergyLive = Q_LEnergy->LEnergy[aero].EnergyLive;
		QHost.AvatarUPDATE->Q_LEnergys[aero].EnergyFire = Q_LEnergy->LEnergy[aero].EnergyFire;

		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_LEnergys[aero].Live);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_LEnergys[aero].LightPos);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_LEnergys[aero].TraVec);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_LEnergys[aero].Speed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_LEnergys[aero].Scale);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_LEnergys[aero].Alpha);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_LEnergys[aero].EnergyLive);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_LEnergys[aero].EnergyFire);
		aero++;
		}


	//##### Prepare World Explosions
	QHost.AvatarUPDATE->_->NomExplosions = _->NomExplosions;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomExplosions);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomExplosions)
		{
		QHost.AvatarUPDATE->Q_Explosions[aero].Live = Q_Explosion->Explosion[aero].Live;
		QHost.AvatarUPDATE->Q_Explosions[aero].Pos = Q_Explosion->Explosion[aero].Pos;
		QHost.AvatarUPDATE->Q_Explosions[aero].ExpSize = Q_Explosion->Explosion[aero].ExpSize;
		QHost.AvatarUPDATE->Q_Explosions[aero].LargeEnergyActorID = Q_Explosion->Explosion[aero].LargeEnergyActorID;
		QHost.AvatarUPDATE->Q_Explosions[aero].CollPlaneNormal = Q_Explosion->Explosion[aero].CollPlaneNormal;

		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_Explosions[aero].Live);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_Explosions[aero].Pos);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_Explosions[aero].ExpSize);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_Explosions[aero].LargeEnergyActorID);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_Explosions[aero].CollPlaneNormal);
		aero++;
		}


	//##### Prepare Cleric Heal Sparks
	QHost.AvatarUPDATE->_->NomHSpark = _->NomHSpark;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomHSpark);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomHSpark)
		{
		QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].Live = Q_HealSpark->HealSpark[aero].Live;
		QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].HTYPE = Q_HealSpark->HealSpark[aero].HTYPE;
		QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].Pos = Q_HealSpark->HealSpark[aero].Pos;
		QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].TraVec = Q_HealSpark->HealSpark[aero].TraVec;
		QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].Released = Q_HealSpark->HealSpark[aero].Released;
		QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].Absorbed = Q_HealSpark->HealSpark[aero].Absorbed;
		QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].HealTarget = Q_HealSpark->HealSpark[aero].HealTarget;
		QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].AlpFade = Q_HealSpark->HealSpark[aero].AlpFade;
		QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].ScaleSTR = Q_HealSpark->HealSpark[aero].ScaleSTR;

		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].Live);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].HTYPE);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].Pos);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].TraVec);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].Released);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].Absorbed);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].HealTarget);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].AlpFade);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_HealSpark->HealSpark[aero].ScaleSTR);
		aero++;
		}


	//##### Prepare Cleric Spells
	QHost.AvatarUPDATE->_->NomSpell = _->NomSpell;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomSpell);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomSpell)
		{
		QHost.AvatarUPDATE->Q_ClericSpells[aero].Live = Q_ClericSpell->ClericSpell[aero].Live;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].HealTarget = Q_ClericSpell->ClericSpell[aero].HealTarget;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].NumSpheres = Q_ClericSpell->ClericSpell[aero].NumSpheres;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].LightPos = Q_ClericSpell->ClericSpell[aero].LightPos;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].LightPow = Q_ClericSpell->ClericSpell[aero].LightPow;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].Absorbed = Q_ClericSpell->ClericSpell[aero].Absorbed;

		QHost.AvatarUPDATE->Q_ClericSpells[aero].Radius[0] = Q_ClericSpell->ClericSpell[aero].Sphere[0].Radius;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].Radius[1] = Q_ClericSpell->ClericSpell[aero].Sphere[1].Radius;

		QHost.AvatarUPDATE->Q_ClericSpells[aero].StartFade[0] = Q_ClericSpell->ClericSpell[aero].Sphere[0].StartFade;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].StartFade[1] = Q_ClericSpell->ClericSpell[aero].Sphere[1].StartFade;

		QHost.AvatarUPDATE->Q_ClericSpells[aero].Leftvec[0] = Q_ClericSpell->ClericSpell[aero].Sphere[0].Leftvec;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].Upvec[0] = Q_ClericSpell->ClericSpell[aero].Sphere[0].Upvec;

		QHost.AvatarUPDATE->Q_ClericSpells[aero].Leftvec[1] = Q_ClericSpell->ClericSpell[aero].Sphere[1].Leftvec;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].Upvec[1] = Q_ClericSpell->ClericSpell[aero].Sphere[1].Upvec;

		QHost.AvatarUPDATE->Q_ClericSpells[aero].Leftvec[2] = Q_ClericSpell->ClericSpell[aero].Sphere[2].Leftvec;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].Upvec[2] = Q_ClericSpell->ClericSpell[aero].Sphere[2].Upvec;

		QHost.AvatarUPDATE->Q_ClericSpells[aero].Leftvec[3] = Q_ClericSpell->ClericSpell[aero].Sphere[3].Leftvec;
		QHost.AvatarUPDATE->Q_ClericSpells[aero].Upvec[3] = Q_ClericSpell->ClericSpell[aero].Sphere[3].Upvec;

		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Live);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].HealTarget);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].NumSpheres);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].LightPos);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].LightPow);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Absorbed);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Radius[0]);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Radius[1]);

		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].StartFade[0]);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].StartFade[1]);

		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Leftvec[0]);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Upvec[0]);

		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Leftvec[1]);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Upvec[1]);

		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Leftvec[2]);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Upvec[2]);

		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Leftvec[3]);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericSpells[aero].Upvec[3]);

		aero++;
		}


	//##### Prepare Cleric Plasma
	QHost.AvatarUPDATE->_->NomPlasma = _->NomPlasma;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomPlasma);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomPlasma)
		{
		QHost.AvatarUPDATE->Q_ClericPlasmas[aero].Live = Q_ClericPlasma->ClericPlasma[aero].Live;
		QHost.AvatarUPDATE->Q_ClericPlasmas[aero].Pos = Q_ClericPlasma->ClericPlasma[aero].Pos;
		QHost.AvatarUPDATE->Q_ClericPlasmas[aero].TraVec = Q_ClericPlasma->ClericPlasma[aero].TraVec;
		QHost.AvatarUPDATE->Q_ClericPlasmas[aero].Speed = Q_ClericPlasma->ClericPlasma[aero].Speed;
		QHost.AvatarUPDATE->Q_ClericPlasmas[aero].Alpha = Q_ClericPlasma->ClericPlasma[aero].Alpha;
		QHost.AvatarUPDATE->Q_ClericPlasmas[aero].PartType = Q_ClericPlasma->ClericPlasma[aero].PartType;

		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericPlasmas[aero].Live);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericPlasmas[aero].Pos);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericPlasmas[aero].TraVec);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericPlasmas[aero].Speed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericPlasmas[aero].Alpha);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_ClericPlasmas[aero].PartType);
		aero++;
		}


	//##### Prepare Net Effects Control
	QHost.AvatarUPDATE->_->NomNetEffectControl = _->NomNetEffectControl;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomNetEffectControl);

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomNetEffectControl)
		{
		QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].Live = Q_NetEffectControl->NetEffectControl[aero].Live;
		QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].Type = Q_NetEffectControl->NetEffectControl[aero].Type;
		QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].Pos = Q_NetEffectControl->NetEffectControl[aero].Pos;
		QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].EffIntensity = Q_NetEffectControl->NetEffectControl[aero].EffIntensity;
		QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].ActorID = Q_NetEffectControl->NetEffectControl[aero].ActorID;

		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].Live);
		if(Q_NetEffectControl->NetEffectControl[aero].Type == 0) Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].Type);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].Pos);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].EffIntensity);
		if(Q_NetEffectControl->NetEffectControl[aero].Type == 1) Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetEffectControl->NetEffectControls[aero].ActorID);
		
		aero++;
		}


	//###### ---- Net Effects Control ---- ######
	aero = 0;
	while(aero < _->NomNetEffectControl)
		{
		if(Q_NetEffectControl->NetEffectControl[aero].Live > 1)
			{	//#### COUNTER ####
			Q_NetEffectControl->NetEffectControl[aero].Live--;
			}
		else
			{
			Q_NetEffectControl->NetEffectControl[aero].Live = 0;

			if(Q_NetEffectControl->NetEffectControl[aero].Type = 0)
				{
				//### Energy Array Reorder
				K = aero;
				while(K < _->NomNetEffectControl - 1)
					{
					Q_NetEffectControl->NetEffectControl[K] = Q_NetEffectControl->NetEffectControl[K+1];
					K++;
					}
				}

			_->NomNetEffectControl--;
			}
		aero++;
		}


	//##### Prepare Net Zone Increment
	QHost.AvatarUPDATE->NomNetZonesINC = Q_EnergyMatrix->EnergyMatrix.NomNetZonesINC;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->NomNetZonesINC);
	Q_EnergyMatrix->EnergyMatrix.NomNetZonesINC = 0;

	aero = 0;
	while(aero < QHost.AvatarUPDATE->NomNetZonesINC)
		{
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].AVID = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].AVID;

		QHost.AvatarUPDATE->Q_NetZONEINC[aero].Maxs = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].Maxs;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].Mins = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].Mins;

		QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].Smoke;

		QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0] = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].Effect[0];
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1] = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].Effect[1];
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2] = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].Effect[2];
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3] = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].Effect[3];
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4] = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].Effect[4];

		QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].Fog;

		QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].FogLight;

		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ExpandMINS = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ExpandMINS;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ExpandMAXS = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ExpandMAXS;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ExpandSTRENGTH = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ExpandSTRENGTH;

		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_TimeScale = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_TimeScale;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Gravity = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_Gravity;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LifeINC = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_LifeINC;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_EnergyINC = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_EnergyINC;

		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_IntBoost = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_IntBoost;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_EnergyEff = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_EnergyEff;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Height = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_Height;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Weight = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_Weight;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Strength = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_Strength;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Quickness = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_Quickness;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Dexterity = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_Dexterity;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Constitution = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_Constitution;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_AggPower = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_AggPower;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_DefPower = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_DefPower;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_RArmStr = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_RArmStr;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LArmStr = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_LArmStr;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_RLegStr = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_RLegStr;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LLegStr = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_LLegStr;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_RArmSnap = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_RArmSnap;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LArmSnap = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_LArmSnap;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_RLegSnap = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_RLegSnap;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LLegSnap = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_LLegSnap;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_WEPAccuracy = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_WEPAccuracy;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_WEPDrawSPD = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_WEPDrawSPD;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_WEPReloadSPD = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_WEPReloadSPD;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_WEPRecoilHR = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_WEPRecoilHR;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_JINKmovespeed = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_JINKmovespeed;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_JINKpower = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_JINKpower;
		QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_JINK3intensity = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NetZONEINC[aero]].ZONEINC_JINK3intensity;


		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].AVID);

		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Maxs);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Mins);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.INT);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.ON);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.Red);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.Green);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.Blue);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.Alpha);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.Scale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.TIMER);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Smoke.CNT);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].INT);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].ON);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].Red);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].Green);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].Blue);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].Alpha);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].Scale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].TIMER);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[0].CNT);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].INT);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].ON);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].Red);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].Green);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].Blue);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].Alpha);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].Scale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].TIMER);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[1].CNT);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].INT);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].ON);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].Red);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].Green);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].Blue);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].Alpha);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].Scale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].TIMER);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[2].CNT);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].INT);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].ON);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].Red);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].Green);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].Blue);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].Alpha);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].Scale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].TIMER);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[3].CNT);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].INT);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].ON);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].Red);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].Green);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].Blue);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].Alpha);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].Scale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].TIMER);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Effect[4].CNT);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.INT);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.ON);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.Red);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.Green);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.Blue);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.Alpha);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.Scale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.TIMER);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].Fog.CNT);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.INT);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.ON);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.Red);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.Green);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.Blue);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.Alpha);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.Scale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.TIMER);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].FogLight.CNT);

		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ExpandMINS);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ExpandMAXS);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ExpandSTRENGTH);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_TimeScale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Gravity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LifeINC);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_EnergyINC);

		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_IntBoost);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_EnergyEff);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Height);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Weight);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Strength);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Quickness);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Dexterity);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_Constitution);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_AggPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_DefPower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_RArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LArmStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_RLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LLegStr);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_RArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LArmSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_RLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_LLegSnap);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_WEPAccuracy);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_WEPDrawSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_WEPReloadSPD);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_WEPRecoilHR);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_JINKmovespeed);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_JINKpower);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZONEINC[aero].ZONEINC_JINK3intensity);

		aero++;
		}


	//##### Prepare Net Zone ENTITY Increment
	QHost.AvatarUPDATE->_->NomNetZoneENTITY = _->NomNetZoneENTITY;
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->_->NomNetZoneENTITY);
	_->NomNetZoneENTITY = 0;

	aero = 0;
	while(aero < QHost.AvatarUPDATE->_->NomNetZoneENTITY)
		{
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].TYPE = Q_NetZoneENTITY->NetZoneENTITY[aero].TYPE;
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].ID = Q_NetZoneENTITY->NetZoneENTITY[aero].ID;
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].ZoneID = Q_BMSentry->BMSentry[Q_NetZoneENTITY->NetZoneENTITY[aero].ID].ZoneID;
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].QObjID = Q_BMSentry->BMSentry[Q_NetZoneENTITY->NetZoneENTITY[aero].ID].QObjID;
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].Pos = Q_BMSentry->BMSentry[Q_NetZoneENTITY->NetZoneENTITY[aero].ID].Pos;
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].Range = Q_BMSentry->BMSentry[Q_NetZoneENTITY->NetZoneENTITY[aero].ID].Range;
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].Scale = Q_Object->Object[Q_BMSentry->BMSentry[Q_NetZoneENTITY->NetZoneENTITY[aero].ID].QObjID].Scale;
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].StrengthMAX = Q_Object->Object[Q_BMSentry->BMSentry[Q_NetZoneENTITY->NetZoneENTITY[aero].ID].QObjID].StrengthMAX;
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].CollisionTYPE = Q_Object->Object[Q_BMSentry->BMSentry[Q_NetZoneENTITY->NetZoneENTITY[aero].ID].QObjID].CollisionTYPE;
		QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].AvatarID = Q_Object->Object[Q_BMSentry->BMSentry[Q_NetZoneENTITY->NetZoneENTITY[aero].ID].QObjID].AvatarID;

		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].TYPE);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].ID);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].ZoneID);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].QObjID);
		Buffer_FillAngle(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].Pos);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].Range);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].Scale);
		Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].StrengthMAX);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].CollisionTYPE);
		Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, QHost.AvatarUPDATE->Q_NetZoneENTITY->NetZoneENTITYINC[aero].AvatarID);

		aero++;
		}


	//FRLs
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, _->FRLtarget);
	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Netplayer->Netplayer[helly].FRLswitch);


	if (!geCSNetMgr_SendToClient(QHost.NMgr->CSNetMgr, NID, GE_true, QHost.NMgr->ServerToClientBuffer.Data, QHost.NMgr->ServerToClientBuffer.Pos))
		return GE_false;

	return GE_true;
}


static void QNETWORKUpdateClientWorld(Buffer_Data *Buffer, float Time)
{
	float				DeltaTime, MoveTime/*, NetTime*/;
	geVec3d				Origin = {0.0f, 0.0f, 0.0f};
	uint16				ButtonBits;
	uint8				AvatarID;
	geCSNetMgr_NetID	ServerIdent;


	//##Check Time
	Buffer_GetFloat(Buffer, &MoveTime);
	
	//###### Update Player #####
	//###Get Player Data to Client
	Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Pos);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Mposestate);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Aposestate);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.attackon);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.WeaponStatus);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.MFlash);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Block);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.BlockHit);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.BlockHeight);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Crouch);
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.HitReactScale);
	Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.MoveReactVec);
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MoveReactSpeed);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.SpecLvlRESET);
	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.SNDTRIGEnergy);
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.HB_Health);
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.HB_Energy);
	Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.WallRunCollNormal);
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.JINK3_PowerFactor);

	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.idleposecnt);
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.runposecnt);
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.attposecnt);
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.crohposecnt);
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.jumpposecnt);


	//#### Update Player
	playact.ActorXform.Translation = player[g_Player]->NetUPDATE.Pos;
	player[g_Player]->Mposestate = player[g_Player]->NetUPDATE.Mposestate;
	player[g_Player]->attackon = player[g_Player]->NetUPDATE.attackon;
	player[g_Player]->WeaponStatus = player[g_Player]->NetUPDATE.WeaponStatus;
	if(player[g_Player]->NetUPDATE.MFlash > 0 && Q_MFlash->MFlash[250].SkipFlag == 0) player[g_Player]->MFlash = player[g_Player]->NetUPDATE.MFlash;
	player[g_Player]->Block = player[g_Player]->NetUPDATE.Block;
	player[g_Player]->BlockHit = player[g_Player]->NetUPDATE.BlockHit;
	player[g_Player]->BlockHeight = player[g_Player]->NetUPDATE.BlockHeight;
	player[g_Player]->Crouch = player[g_Player]->NetUPDATE.Crouch;
	player[g_Player]->HitReactScale = player[g_Player]->NetUPDATE.HitReactScale;
	player[g_Player]->MoveReactVec = player[g_Player]->NetUPDATE.MoveReactVec;
	player[g_Player]->MoveReactSpeed = player[g_Player]->NetUPDATE.MoveReactSpeed;

	if(player[g_Player]->JINK3_PowerFactor != player[g_Player]->NetUPDATE.JINK3_PowerFactor)
		{
		Q_DeactivateItems();
		
		player[g_Player]->JINK3_PowerFactor = player[g_Player]->NetUPDATE.JINK3_PowerFactor;

		Q_ActivateItems();
		}

	player[g_Player]->HB_Energy = player[g_Player]->NetUPDATE.HB_Energy;

	if(player[g_Player]->HB_Health - player[g_Player]->NetUPDATE.HB_Health > 8)
		{
		player[g_Player]->HB_ReduceOld = player[g_Player]->HB_Health;

		player[g_Player]->HB_HReduceON = 1;
		player[g_Player]->HB_ReduceHInc = 10;
		player[g_Player]->HB_ReduceHeight = 573;
		player[g_Player]->HB_ReduceRectColor.r = 255;
		player[g_Player]->HB_ReduceRectColor.g = 0;
		player[g_Player]->HB_ReduceRectColor.b = 0;
		player[g_Player]->HB_ReduceRectColor.a = 255;
		}

	if((player[g_Player]->HB_Health > 0) && (player[g_Player]->NetUPDATE.HB_Health <= 0))
		{
		geSound3D_GetConfig(World, &player[g_Player]->ViewXForm, &player[g_Player]->ViewXForm.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
		geSound_PlaySoundDef(SoundSys, Medias->S_PlayerKO, _->Volume, _->Pan, _->S_TimeScale, GE_false);
		}

	player[g_Player]->HB_Health = player[g_Player]->NetUPDATE.HB_Health;
	
	if(player[g_Player]->NetUPDATE.SpecLvlRESET != 0 && player[g_Player]->SpecLvlRESET == 0) player[g_Player]->SpecLvlRESET = player[g_Player]->NetUPDATE.SpecLvlRESET;

	if(player[g_Player]->SNDTRIGEnergy == 0) player[g_Player]->SNDTRIGEnergy = player[g_Player]->NetUPDATE.SNDTRIGEnergy;

	player[g_Player]->idleposecnt = player[g_Player]->NetUPDATE.idleposecnt;
	player[g_Player]->runposecnt = player[g_Player]->NetUPDATE.runposecnt;
	player[g_Player]->attposecnt = player[g_Player]->NetUPDATE.attposecnt;
	player[g_Player]->crohposecnt = player[g_Player]->NetUPDATE.crohposecnt;
	player[g_Player]->jumpposecnt = player[g_Player]->NetUPDATE.jumpposecnt;

	if(player[g_Player]->Aposestate != player[g_Player]->NetUPDATE.Aposestate) player[g_Player]->JinkInit = 0;
	else if(player[g_Player]->attposecnt > 0.3 || player[g_Player]->attposecnt == 0) player[g_Player]->JinkInit = 1;

	if(player[g_Player]->NetUPDATE.Aposestate == 205) player[g_Player]->EnergySWITCHOFF = 1;
	if(player[g_Player]->EnergySWITCHOFF == 1)
		{
		player[g_Player]->Aposestate = 205;
		player[g_Player]->attackon = 1;
		}
	else player[g_Player]->Aposestate = player[g_Player]->NetUPDATE.Aposestate;

	player[g_Player]->WallRunCollision.Plane.Normal = player[g_Player]->NetUPDATE.WallRunCollNormal;


	//###### Update ServerPlayer #####
	//###Get Server Player Data to Client
	Buffer_GetAngle(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Pos);
	Buffer_GetAngle(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Angle);
	Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Mposestate);
	Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Aposestate);
	Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.attackon);
	Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.WeaponStatus);
	Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.MFlash);
	Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Block);
	Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.BlockHit);
	Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.BlockHeight);
	Buffer_GetByte(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Crouch);
	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.HitReactScale);
	Buffer_GetAngle(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.MoveReactVec);
	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.MoveReactSpeed);
	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.HB_Health);
	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.HB_Energy);
	Buffer_GetAngle(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.WallRunCollNormal);
	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.JINK3_PowerFactor);

	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.idleposecnt);
	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.runposecnt);
	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.attposecnt);
	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.crohposecnt);
	Buffer_GetFloat(Buffer, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.jumpposecnt);


	//#### Update ServerPlayer
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.ActorXform.Translation = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Pos;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].AnglesVec = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Angle;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Mposestate = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Mposestate;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].attackon = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.attackon;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].WeaponStatus = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.WeaponStatus;
	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.MFlash == 1 && Q_MFlash->MFlash[Q_Netplayer->Netplayer[0].LocalCONTROLID].SkipFlag == 0) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].MFlash = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.MFlash;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Block = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Block;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].BlockHit = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.BlockHit;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].BlockHeight = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.BlockHeight;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Crouch = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Crouch;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HitReactScale = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.HitReactScale;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].MoveReactVec = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.MoveReactVec;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].MoveReactSpeed = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.MoveReactSpeed;

	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].JINK3_PowerFactor != Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.JINK3_PowerFactor)
		{
		Q_DeactivateItemsAI(Q_Netplayer->Netplayer[0].LocalCONTROLID);
		
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].JINK3_PowerFactor = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.JINK3_PowerFactor;

		Q_ActivateItemsAI(Q_Netplayer->Netplayer[0].LocalCONTROLID);
		}

	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_Energy = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.HB_Energy;

	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_Health - Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.HB_Health > 8)
		{
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_ReduceOld = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_Health;

		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_HReduceON = 1;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_ReduceHInc = 10;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_ReduceHeight = 573;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_ReduceRectColor.r = 255;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_ReduceRectColor.g = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_ReduceRectColor.b = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_ReduceRectColor.a = 255;
		}

	if((Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_Health > 0) && (Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.HB_Health <= 0))
		{
		geSound3D_GetConfig(World, &player[g_Player]->ViewXForm, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].RFistPos.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
		geSound_PlaySoundDef(SoundSys, Medias->S_EnemyKO, _->Volume, _->Pan, _->S_TimeScale, GE_false);
		}

	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].HB_Health = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.HB_Health;

	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].idleposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.idleposecnt;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].runposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.runposecnt;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].attposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.attposecnt;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].crohposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.crohposecnt;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].jumpposecnt = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.jumpposecnt;

	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Aposestate != Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Aposestate) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].JinkInit = 0;
	else if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].attposecnt > 0.3 || Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].attposecnt == 0) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].JinkInit = 1;

	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Aposestate == 205) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].EnergySWITCHOFF = 1;
	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].EnergySWITCHOFF == 1)
		{
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Aposestate = 205;
		Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].attackon = 1;
		}
	else Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Aposestate = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.Aposestate;

	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].WallRunCollision.Plane.Normal = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].NetUPDATE.WallRunCollNormal;


	geXForm3d_GetUp(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.ActorXform, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Up);
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].TempVec1 = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].AnglesVec;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].TempVec1.Y = 0;
	geVec3d_Normalize(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].TempVec1);
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Up.Y = 0;
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanTurnAng = geVec3d_DistanceBetween(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].TempVec1, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Up);

	//### Check Distance between Pure Left and Right to work out direction of Turn
	geXForm3d_GetLeft(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.ActorXform, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Left);
	geXForm3d_GetIn(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.ActorXform, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Up);
	geVec3d_Copy(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Left, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Right);
	geVec3d_Inverse(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Right);

	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanDistL = geVec3d_DistanceBetween(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].TempVec1, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Left);
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanDistR = geVec3d_DistanceBetween(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].TempVec1, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Right);

	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanDistL > Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanDistR) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanTurnAng *= -1;

	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].trueAngles.Y += Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanTurnAng / 3;

	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y += Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanTurnAng / 3;
	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y > (PI*2)) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y = 0;
	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y < 0) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y = (PI*2);

	geXForm3d_SetZRotation(&RotateMatrix, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanTurnAng / 3);
	geXForm3d_Multiply(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.ActorXform, &RotateMatrix, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.ActorXform);

	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].LIVE = 1;


	/*//### UPDATE SERVER ANGLES
	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanTurnAng = player[g_Player]->NetUPDATE.Angle.Y - Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y;
	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y > (PI*2)) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y = 0;
	if(Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y < 0) Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y = (PI*2);

	Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y = Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Angles.Y + Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanTurnAng;

	geXForm3d_SetZRotation(&AIfriendly, Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].ScanTurnAng);
	geXForm3d_Multiply(&Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.ActorXform, &AIfriendly, &Q_Forge->Forge[Q_Netplayer->Netplayer[0].LocalCONTROLID].Avatar.ActorXform);*/


	//######  - Other Worldly Avatars -  #####

	Buffer_GetByte(Buffer, &_->NETNomWorldAvatars);

	//##### Avatar Update Loop
	helly=0;
	while(helly < _->NETNomWorldAvatars)
		{
		//###### Get Avatars Q_Netplayer->Netplayer #####
		Buffer_GetByte(Buffer, &AvatarID);

		//###Get Player Data to Client
		Buffer_GetAngle(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.Pos);				//Avatar Position
		Buffer_GetAngle(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.Angle);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.Mposestate);		//Avatar Move Pose State
		Buffer_GetByte(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.Aposestate);		//Avatar Attack Pose State
		Buffer_GetByte(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.attackon);		//Avatar Attack Pose State
		Buffer_GetByte(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.WeaponStatus);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.MFlash);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.Block);			//Avatar Attack Pose State
		Buffer_GetByte(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.BlockHit);		//Avatar Attack Pose State
		Buffer_GetByte(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.BlockHeight);
		Buffer_GetByte(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.Crouch);			//Avatar Attack Pose State
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.HitReactScale);
		Buffer_GetAngle(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.MoveReactVec);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.MoveReactSpeed);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.HB_Health);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.HB_Energy);
		Buffer_GetAngle(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.WallRunCollNormal);
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.JINK3_PowerFactor);

		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.idleposecnt);		//Avatar Idle Pose Counter
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.runposecnt);		//Avatar Run Pose Counter
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.attposecnt);		//Avatar Attack Pose Counter
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.crohposecnt);		//Avatar Attack Pose Counter
		Buffer_GetFloat(Buffer, &Q_Forge->Forge[AvatarID].NetUPDATE.jumpposecnt);		//Avatar Attack Pose Counter

		//### UPDATE AVATAR VALUES
		Q_Forge->Forge[AvatarID].Avatar.ActorXform.Translation = Q_Forge->Forge[AvatarID].NetUPDATE.Pos;	//Avatar Position
		//Q_Forge->Forge[AvatarID].Angles = Q_Forge->Forge[AvatarID].NetUPDATE.Angle;	//Avatar Position
		Q_Forge->Forge[AvatarID].AnglesVec = Q_Forge->Forge[AvatarID].NetUPDATE.Angle;	//Avatar Position
		Q_Forge->Forge[AvatarID].Mposestate = Q_Forge->Forge[AvatarID].NetUPDATE.Mposestate;				//Avatar Move Pose State
		Q_Forge->Forge[AvatarID].attackon = Q_Forge->Forge[AvatarID].NetUPDATE.attackon;					//Avatar Attack Pose State
		Q_Forge->Forge[AvatarID].WeaponStatus = Q_Forge->Forge[AvatarID].NetUPDATE.WeaponStatus;	
		if(Q_Forge->Forge[AvatarID].NetUPDATE.MFlash == 1 && Q_MFlash->MFlash[AvatarID].SkipFlag == 0) Q_Forge->Forge[AvatarID].MFlash = Q_Forge->Forge[AvatarID].NetUPDATE.MFlash;	
		Q_Forge->Forge[AvatarID].Block = Q_Forge->Forge[AvatarID].NetUPDATE.Block;						//Avatar Attack Pose State
		Q_Forge->Forge[AvatarID].BlockHit = Q_Forge->Forge[AvatarID].NetUPDATE.BlockHit;					//Avatar Attack Pose State
		Q_Forge->Forge[AvatarID].BlockHeight = Q_Forge->Forge[AvatarID].NetUPDATE.BlockHeight;
		Q_Forge->Forge[AvatarID].Crouch = Q_Forge->Forge[AvatarID].NetUPDATE.Crouch;						//Avatar Attack Pose State
		Q_Forge->Forge[AvatarID].HitReactScale = Q_Forge->Forge[AvatarID].NetUPDATE.HitReactScale;
		Q_Forge->Forge[AvatarID].MoveReactVec = Q_Forge->Forge[AvatarID].NetUPDATE.MoveReactVec;						//Avatar Attack Pose State
		Q_Forge->Forge[AvatarID].MoveReactSpeed = Q_Forge->Forge[AvatarID].NetUPDATE.MoveReactSpeed;
		
		if(Q_Forge->Forge[AvatarID].JINK3_PowerFactor != Q_Forge->Forge[AvatarID].NetUPDATE.JINK3_PowerFactor)
			{
			Q_DeactivateItemsAI(AvatarID);
			
			Q_Forge->Forge[AvatarID].JINK3_PowerFactor = Q_Forge->Forge[AvatarID].NetUPDATE.JINK3_PowerFactor;

			Q_ActivateItemsAI(AvatarID);
			}

		Q_Forge->Forge[AvatarID].HB_Energy = Q_Forge->Forge[AvatarID].NetUPDATE.HB_Energy;

		if(Q_Forge->Forge[AvatarID].HB_Health - Q_Forge->Forge[AvatarID].NetUPDATE.HB_Health > 8)
			{
			Q_Forge->Forge[AvatarID].HB_ReduceOld = Q_Forge->Forge[AvatarID].HB_Health;

			Q_Forge->Forge[AvatarID].HB_HReduceON = 1;
			Q_Forge->Forge[AvatarID].HB_ReduceHInc = 10;
			Q_Forge->Forge[AvatarID].HB_ReduceHeight = 573;
			Q_Forge->Forge[AvatarID].HB_ReduceRectColor.r = 255;
			Q_Forge->Forge[AvatarID].HB_ReduceRectColor.g = 0;
			Q_Forge->Forge[AvatarID].HB_ReduceRectColor.b = 0;
			Q_Forge->Forge[AvatarID].HB_ReduceRectColor.a = 255;
			}

		if((Q_Forge->Forge[AvatarID].HB_Health > 0) && (Q_Forge->Forge[AvatarID].NetUPDATE.HB_Health <= 0))
			{
			geSound3D_GetConfig(World, &player[g_Player]->ViewXForm, &Q_Forge->Forge[AvatarID].RFistPos.Translation, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
			geSound_PlaySoundDef(SoundSys, Medias->S_EnemyKO, _->Volume, _->Pan, _->S_TimeScale, GE_false);
			}

		Q_Forge->Forge[AvatarID].HB_Health = Q_Forge->Forge[AvatarID].NetUPDATE.HB_Health;

		Q_Forge->Forge[AvatarID].idleposecnt = Q_Forge->Forge[AvatarID].NetUPDATE.idleposecnt;			//Avatar Idle Pose Counter
		Q_Forge->Forge[AvatarID].runposecnt = Q_Forge->Forge[AvatarID].NetUPDATE.runposecnt;				//Avatar Run Pose Counter
		Q_Forge->Forge[AvatarID].attposecnt = Q_Forge->Forge[AvatarID].NetUPDATE.attposecnt;				//Avatar Attack Pose Counter
		Q_Forge->Forge[AvatarID].crohposecnt = Q_Forge->Forge[AvatarID].NetUPDATE.crohposecnt;				//Avatar Attack Pose Counter
		Q_Forge->Forge[AvatarID].jumpposecnt = Q_Forge->Forge[AvatarID].NetUPDATE.jumpposecnt;				//Avatar Attack Pose Counter

		if(Q_Forge->Forge[AvatarID].Aposestate != Q_Forge->Forge[AvatarID].NetUPDATE.Aposestate) Q_Forge->Forge[AvatarID].JinkInit = 0;
		else if(Q_Forge->Forge[AvatarID].attposecnt > 0.3 || Q_Forge->Forge[AvatarID].attposecnt == 0) Q_Forge->Forge[AvatarID].JinkInit = 1;

		//### Avatar Attack Pose State
		if(Q_Forge->Forge[AvatarID].NetUPDATE.Aposestate == 205) Q_Forge->Forge[AvatarID].EnergySWITCHOFF = 1;
		if(Q_Forge->Forge[AvatarID].EnergySWITCHOFF == 1)
			{
			Q_Forge->Forge[AvatarID].Aposestate = 205;
			Q_Forge->Forge[AvatarID].attackon = 1;
			}
		else Q_Forge->Forge[AvatarID].Aposestate = Q_Forge->Forge[AvatarID].NetUPDATE.Aposestate;

		Q_Forge->Forge[AvatarID].WallRunCollision.Plane.Normal = Q_Forge->Forge[AvatarID].NetUPDATE.WallRunCollNormal;

		geXForm3d_GetUp(&Q_Forge->Forge[AvatarID].Avatar.ActorXform, &Q_Forge->Forge[AvatarID].Up);
		Q_Forge->Forge[AvatarID].TempVec1 = Q_Forge->Forge[AvatarID].AnglesVec;
		Q_Forge->Forge[AvatarID].TempVec1.Y = 0;
		geVec3d_Normalize(&Q_Forge->Forge[AvatarID].TempVec1);
		Q_Forge->Forge[AvatarID].Up.Y = 0;
		Q_Forge->Forge[AvatarID].ScanTurnAng = geVec3d_DistanceBetween(&Q_Forge->Forge[AvatarID].TempVec1, &Q_Forge->Forge[AvatarID].Up);

		//### Check Distance between Pure Left and Right to work out direction of Turn
		geXForm3d_GetLeft(&Q_Forge->Forge[AvatarID].Avatar.ActorXform, &Q_Forge->Forge[AvatarID].Left);
		geXForm3d_GetIn(&Q_Forge->Forge[AvatarID].Avatar.ActorXform, &Q_Forge->Forge[AvatarID].Up);
		geVec3d_Copy(&Q_Forge->Forge[AvatarID].Left, &Q_Forge->Forge[AvatarID].Right);
		geVec3d_Inverse(&Q_Forge->Forge[AvatarID].Right);

		Q_Forge->Forge[AvatarID].ScanDistL = geVec3d_DistanceBetween(&Q_Forge->Forge[AvatarID].TempVec1, &Q_Forge->Forge[AvatarID].Left);
		Q_Forge->Forge[AvatarID].ScanDistR = geVec3d_DistanceBetween(&Q_Forge->Forge[AvatarID].TempVec1, &Q_Forge->Forge[AvatarID].Right);

		if(Q_Forge->Forge[AvatarID].ScanDistL > Q_Forge->Forge[AvatarID].ScanDistR) Q_Forge->Forge[AvatarID].ScanTurnAng *= -1;

		Q_Forge->Forge[AvatarID].trueAngles.Y += Q_Forge->Forge[AvatarID].ScanTurnAng / 3;

		Q_Forge->Forge[AvatarID].Angles.Y += Q_Forge->Forge[AvatarID].ScanTurnAng / 3;
		if(Q_Forge->Forge[AvatarID].Angles.Y > (PI*2)) Q_Forge->Forge[AvatarID].Angles.Y = 0;
		if(Q_Forge->Forge[AvatarID].Angles.Y < 0) Q_Forge->Forge[AvatarID].Angles.Y = (PI*2);

		geXForm3d_SetZRotation(&RotateMatrix, Q_Forge->Forge[AvatarID].ScanTurnAng / 3);
		geXForm3d_Multiply(&Q_Forge->Forge[AvatarID].Avatar.ActorXform, &RotateMatrix, &Q_Forge->Forge[AvatarID].Avatar.ActorXform);


		//### UPDATE AVATAR ANGLES
		/*Q_Forge->Forge[AvatarID].ScanTurnAng = Q_Forge->Forge[AvatarID].NetUPDATE.Angle.Y - Q_Forge->Forge[AvatarID].Angles.Y;
		if(Q_Forge->Forge[AvatarID].Angles.Y > (PI*2)) Q_Forge->Forge[AvatarID].Angles.Y = 0;
		if(Q_Forge->Forge[AvatarID].Angles.Y < 0) Q_Forge->Forge[AvatarID].Angles.Y = (PI*2);

		Q_Forge->Forge[AvatarID].Angles.Y = Q_Forge->Forge[_->Multipass].Angles.Y + Q_Forge->Forge[AvatarID].ScanTurnAng;

		geXForm3d_SetZRotation(&AIfriendly, Q_Forge->Forge[AvatarID].ScanTurnAng);
		geXForm3d_Multiply(&Q_Forge->Forge[AvatarID].Avatar.ActorXform, &AIfriendly, &Q_Forge->Forge[AvatarID].Avatar.ActorXform);*/

		helly++;
		}


	//MessageBox(NULL,"Update 1 Bullets \n","ERROR",MB_OK);


	//##### Update Q_Object->ObjectS
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomQObject);
	_->NomQObject = player[g_Player]->NetUPDATE_->NomQObject;

	aero = 0;
	while(aero < _->NomQObject)
		{
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_Object->ObjectStrength);

		Q_Object->Object[aero].StrengthBANK = player[g_Player]->NetUPDATE.Q_Object->ObjectStrength;
		
		aero++;
		}


	//#### Update Bullets
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomBullet);
	_->NomBullet = player[g_Player]->NetUPDATE_->NomBullet;

	aero = 0;
	while(aero < _->NomBullet)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].Live);				//Avatar Position
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].TrajVec);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].WorldPos);		//Avatar Move Pose State
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].Speed);		//Avatar Attack Pose State
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].ActorID);		//Avatar Attack Pose State
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].ORIGPos);		//Avatar Attack Pose State
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].ZSpin);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].AX);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].AY);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].AZ);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].BX);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].BY);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].BZ);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].CX);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].CY);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].CZ);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].Translation);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Bullets[aero].JDamageLVL);

		Q_Bullet->Bullet[aero].Live = player[g_Player]->NetUPDATE.Bullets[aero].Live;
		Q_Bullet->Bullet[aero].TrajVec = player[g_Player]->NetUPDATE.Bullets[aero].TrajVec;
		Q_Bullet->Bullet[aero].WorldPos = player[g_Player]->NetUPDATE.Bullets[aero].WorldPos;
		Q_Bullet->Bullet[aero].ORIGPos = player[g_Player]->NetUPDATE.Bullets[aero].ORIGPos;
		Q_Bullet->Bullet[aero].Speed = player[g_Player]->NetUPDATE.Bullets[aero].Speed;

		//#### Player Bullet
		//### Find Q_Netplayer->Netplayer ID
		ServerIdent = geCSNetMgr_GetServerID(QHost.NMgr->CSNetMgr);

		Q_Bullet->Bullet[aero].ActorID = player[g_Player]->NetUPDATE.Bullets[aero].ActorID;
		if(player[g_Player]->NetUPDATE.Bullets[aero].ActorID == player[g_Player]->NetUPDATE.ServerCONTROLID) Q_Bullet->Bullet[aero].ActorID = 250;
		if(player[g_Player]->NetUPDATE.Bullets[aero].ActorID == 250) Q_Bullet->Bullet[aero].ActorID = Q_Netplayer->Netplayer[0].LocalCONTROLID;
		
		Q_Bullet->Bullet[aero].ZSpin = player[g_Player]->NetUPDATE.Bullets[aero].ZSpin;
		Q_Bullet->Bullet[aero].AlignMatrix.AX = player[g_Player]->NetUPDATE.Bullets[aero].AX;
		Q_Bullet->Bullet[aero].AlignMatrix.AY = player[g_Player]->NetUPDATE.Bullets[aero].AY;
		Q_Bullet->Bullet[aero].AlignMatrix.AZ = player[g_Player]->NetUPDATE.Bullets[aero].AZ;
		Q_Bullet->Bullet[aero].AlignMatrix.BX = player[g_Player]->NetUPDATE.Bullets[aero].BX;
		Q_Bullet->Bullet[aero].AlignMatrix.BY = player[g_Player]->NetUPDATE.Bullets[aero].BY;
		Q_Bullet->Bullet[aero].AlignMatrix.BZ = player[g_Player]->NetUPDATE.Bullets[aero].BZ;
		Q_Bullet->Bullet[aero].AlignMatrix.CX = player[g_Player]->NetUPDATE.Bullets[aero].CX;
		Q_Bullet->Bullet[aero].AlignMatrix.CY = player[g_Player]->NetUPDATE.Bullets[aero].CY;
		Q_Bullet->Bullet[aero].AlignMatrix.CZ = player[g_Player]->NetUPDATE.Bullets[aero].CZ;
		Q_Bullet->Bullet[aero].AlignMatrix.Translation = player[g_Player]->NetUPDATE.Bullets[aero].Translation;
		Q_Bullet->Bullet[aero].JDamageLVL = player[g_Player]->NetUPDATE.Bullets[aero].JDamageLVL;

		aero++;
		}


	//MessageBox(NULL,"BulHits  \n","ERROR",MB_OK);


	//#### Update Bullet Hits
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.NomBulHit);

	if(player[g_Player]->NetUPDATE.NomBulHit < _->NomBulHit)
		{
		aero = player[g_Player]->NetUPDATE.NomBulHit;
		while(aero < _->NomBulHit)
			{
			Q_BulletHit->BulletHit[aero].Scale = 1;
			Q_BulletHit->BulletHit[aero].Live = 0;
			Q_BulletHit->BulletHit[aero].Init = 0;
			aero++;
			}
		}

	_->NomBulHit = player[g_Player]->NetUPDATE.NomBulHit;

	aero = 0;
	while(aero < player[g_Player]->NetUPDATE.NomBulHit)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].Live);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].Init);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].EffectType);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].ActorID);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].ActorHITID);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].BulletDMG);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].BulletPWR);

		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].Pos);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].BulletTraj);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.BulletHits[aero].CollNormal);


		if(player[g_Player]->NetUPDATE.BulletHits[aero].Live == 1 && player[g_Player]->NetUPDATE.BulletHits[aero].Init == 1)
			{
			if(Q_BulletHit->BulletHit[aero].Live == 0) Q_BulletHit->BulletHit[aero].Init = 0;
			Q_BulletHit->BulletHit[aero].Live = player[g_Player]->NetUPDATE.BulletHits[aero].Live;
			Q_BulletHit->BulletHit[aero].EffectType = player[g_Player]->NetUPDATE.BulletHits[aero].EffectType;

			Q_BulletHit->BulletHit[aero].ActorID = player[g_Player]->NetUPDATE.BulletHits[aero].ActorID;
			if(player[g_Player]->NetUPDATE.BulletHits[aero].ActorID == player[g_Player]->NetUPDATE.ServerCONTROLID) Q_BulletHit->BulletHit[aero].ActorID = 250;
			if(player[g_Player]->NetUPDATE.BulletHits[aero].ActorID == 250) Q_BulletHit->BulletHit[aero].ActorID = Q_Netplayer->Netplayer[0].LocalCONTROLID;

			Q_BulletHit->BulletHit[aero].ActorHITID = player[g_Player]->NetUPDATE.BulletHits[aero].ActorHITID;
			if(player[g_Player]->NetUPDATE.BulletHits[aero].ActorHITID == player[g_Player]->NetUPDATE.ServerCONTROLID) Q_BulletHit->BulletHit[aero].ActorHITID = 250;
			if(player[g_Player]->NetUPDATE.BulletHits[aero].ActorHITID == 250) Q_BulletHit->BulletHit[aero].ActorHITID = Q_Netplayer->Netplayer[0].LocalCONTROLID;

			Q_BulletHit->BulletHit[aero].BulletDMG = player[g_Player]->NetUPDATE.BulletHits[aero].BulletDMG;
			Q_BulletHit->BulletHit[aero].BulletPWR = player[g_Player]->NetUPDATE.BulletHits[aero].BulletPWR;

			Q_BulletHit->BulletHit[aero].Pos = player[g_Player]->NetUPDATE.BulletHits[aero].Pos;
			Q_BulletHit->BulletHit[aero].BulletTraj = player[g_Player]->NetUPDATE.BulletHits[aero].BulletTraj;
			Q_BulletHit->BulletHit[aero].CollNormal = player[g_Player]->NetUPDATE.BulletHits[aero].CollNormal;
			}

		aero++;
		}


	//MessageBox(NULL,"Melee Hits  \n","ERROR",MB_OK);


	//#### Update Melee Hits
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomMelHit);

	if(player[g_Player]->NetUPDATE_->NomMelHit < _->NomMelHit)
		{
		aero = player[g_Player]->NetUPDATE_->NomMelHit;
		while(aero < _->NomMelHit)
			{
			Q_MeleeHit->MeleeHit[aero].Live = 0;
			Q_MeleeHit->MeleeHit[aero].INIT = 0;
			Q_MeleeHit->MeleeHit[aero].Expandro3D.Radius = 301;
			geWorld_RemoveLight(World, Q_MeleeHit->MeleeHit[aero].Light);
			aero++;
			}
		}

	_->NomMelHit = player[g_Player]->NetUPDATE_->NomMelHit;

	aero = 0;
	while(aero < player[g_Player]->NetUPDATE_->NomMelHit)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].Live);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].HitTYPE);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].HitRESULT);

		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].Impact);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].Bonenum);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].ReactionNorm);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].HitPowerPercent);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].BloodAmt);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].Radius);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].MaxRadius);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].StartFade);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].Red);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].Green);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].Blue);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].AttackSTRENGTH);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].AttackSNAP);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].AX);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].AY);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].AZ);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].BX);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].BY);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].BZ);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].CX);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].CY);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].CZ);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.MeleeHits[aero].Translation);

		if(player[g_Player]->NetUPDATE.MeleeHits[aero].Live == 1)
			{
			if(Q_MeleeHit->MeleeHit[aero].Live == 0) Q_MeleeHit->MeleeHit[aero].INIT = 0;

			Q_MeleeHit->MeleeHit[aero].Live = player[g_Player]->NetUPDATE.MeleeHits[aero].Live;
			Q_MeleeHit->MeleeHit[aero].HitTYPE = player[g_Player]->NetUPDATE.MeleeHits[aero].HitTYPE;
			Q_MeleeHit->MeleeHit[aero].HitRESULT = player[g_Player]->NetUPDATE.MeleeHits[aero].HitRESULT;

			Q_MeleeHit->MeleeHit[aero].Impact = player[g_Player]->NetUPDATE.MeleeHits[aero].Impact;
			Q_MeleeHit->MeleeHit[aero].Bonenum = player[g_Player]->NetUPDATE.MeleeHits[aero].Bonenum;
			Q_MeleeHit->MeleeHit[aero].ReactionNorm = player[g_Player]->NetUPDATE.MeleeHits[aero].ReactionNorm;
			Q_MeleeHit->MeleeHit[aero].HitPowerPercent = player[g_Player]->NetUPDATE.MeleeHits[aero].HitPowerPercent;
			Q_MeleeHit->MeleeHit[aero].BloodAmt = player[g_Player]->NetUPDATE.MeleeHits[aero].BloodAmt;

			Q_MeleeHit->MeleeHit[aero].Expandro3D.Radius = player[g_Player]->NetUPDATE.MeleeHits[aero].Radius;
			Q_MeleeHit->MeleeHit[aero].Expandro3D.MaxRadius = player[g_Player]->NetUPDATE.MeleeHits[aero].MaxRadius;
			Q_MeleeHit->MeleeHit[aero].Expandro3D.StartFade = player[g_Player]->NetUPDATE.MeleeHits[aero].StartFade;
			Q_MeleeHit->MeleeHit[aero].Expandro3D.Red = player[g_Player]->NetUPDATE.MeleeHits[aero].Red;
			Q_MeleeHit->MeleeHit[aero].Expandro3D.Green = player[g_Player]->NetUPDATE.MeleeHits[aero].Green;
			Q_MeleeHit->MeleeHit[aero].Expandro3D.Blue = player[g_Player]->NetUPDATE.MeleeHits[aero].Blue;

			Q_MeleeHit->MeleeHit[aero].AttackSTRENGTH = player[g_Player]->NetUPDATE.MeleeHits[aero].AttackSTRENGTH;
			Q_MeleeHit->MeleeHit[aero].AttackSNAP = player[g_Player]->NetUPDATE.MeleeHits[aero].AttackSNAP;

			Q_MeleeHit->MeleeHit[aero].AttboneXF.AX = player[g_Player]->NetUPDATE.MeleeHits[aero].AX ;
			Q_MeleeHit->MeleeHit[aero].AttboneXF.AY = player[g_Player]->NetUPDATE.MeleeHits[aero].AY;
			Q_MeleeHit->MeleeHit[aero].AttboneXF.AZ = player[g_Player]->NetUPDATE.MeleeHits[aero].AZ;
			Q_MeleeHit->MeleeHit[aero].AttboneXF.BX = player[g_Player]->NetUPDATE.MeleeHits[aero].BX;
			Q_MeleeHit->MeleeHit[aero].AttboneXF.BY = player[g_Player]->NetUPDATE.MeleeHits[aero].BY;
			Q_MeleeHit->MeleeHit[aero].AttboneXF.BZ = player[g_Player]->NetUPDATE.MeleeHits[aero].BZ;
			Q_MeleeHit->MeleeHit[aero].AttboneXF.CX = player[g_Player]->NetUPDATE.MeleeHits[aero].CX;
			Q_MeleeHit->MeleeHit[aero].AttboneXF.CY = player[g_Player]->NetUPDATE.MeleeHits[aero].CY;
			Q_MeleeHit->MeleeHit[aero].AttboneXF.CZ = player[g_Player]->NetUPDATE.MeleeHits[aero].CZ;
			Q_MeleeHit->MeleeHit[aero].AttboneXF.Translation = player[g_Player]->NetUPDATE.MeleeHits[aero].Translation; 
			}

		aero++;
		}

	//MessageBox(NULL,"Small Energy  \n","ERROR",MB_OK);

	//##### Update Small Energy
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomSEnergy);

	if(player[g_Player]->NetUPDATE_->NomSEnergy < _->NomSEnergy)
		{
		jet = _->NomSEnergy - 1;
		while(jet >= player[g_Player]->NetUPDATE_->NomSEnergy)
			{
			Q_SEnergy->SEnergy[jet].Live = 0;
			if(Q_SEnergy->SEnergy[jet].Light != NULL) geWorld_RemoveLight(World, Q_SEnergy->SEnergy[jet].Light);
			if(Q_SEnergy->SEnergy[jet].Sound != NULL) geSound_StopSound(SoundSys, Q_SEnergy->SEnergy[jet].Sound);

			helly = 0;
			while(helly < Q_SEnergy->SEnergy[jet].NomActors)
				{
				geVec3d_Copy(&_->Origon, &Q_SEnergy->SEnergy[jet].ActorFlag[helly].ActorXform.Translation);
				geActor_ClearPose(Q_SEnergy->SEnergy[jet].ActorFlag[helly].Actor, &Q_SEnergy->SEnergy[jet].ActorFlag[helly].ActorXform);
				helly++;
				}

			jet--;
			}
		}

	_->NomSEnergy = player[g_Player]->NetUPDATE_->NomSEnergy;

	aero = 0;
	while(aero < _->NomSEnergy)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].Live);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].LightPos);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].TraVec);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].Speed);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].Scale);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].Alpha);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].TargetLock);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].TargetID);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].AngleX);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].AngleY);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_SEnergys[aero].AngleZ);


		if(player[g_Player]->NetUPDATE.Q_SEnergys[aero].Live == 1)
			{
			if(Q_SEnergy->SEnergy[aero].Live == 0) Q_SEnergy->SEnergy[aero].Init = 0;
			Q_SEnergy->SEnergy[aero].Live = player[g_Player]->NetUPDATE.Q_SEnergys[aero].Live;
			Q_SEnergy->SEnergy[aero].LightPos = player[g_Player]->NetUPDATE.Q_SEnergys[aero].LightPos;
			Q_SEnergy->SEnergy[aero].TraVec = player[g_Player]->NetUPDATE.Q_SEnergys[aero].TraVec;
			Q_SEnergy->SEnergy[aero].Speed = player[g_Player]->NetUPDATE.Q_SEnergys[aero].Speed;
			Q_SEnergy->SEnergy[aero].Scale = player[g_Player]->NetUPDATE.Q_SEnergys[aero].Scale;
			Q_SEnergy->SEnergy[aero].Alpha = player[g_Player]->NetUPDATE.Q_SEnergys[aero].Alpha;
			Q_SEnergy->SEnergy[aero].TargetLock = player[g_Player]->NetUPDATE.Q_SEnergys[aero].TargetLock;

			Q_SEnergy->SEnergy[aero].TargetID = player[g_Player]->NetUPDATE.Q_SEnergys[aero].TargetID;
			if(player[g_Player]->NetUPDATE.Q_SEnergys[aero].TargetID == player[g_Player]->NetUPDATE.ServerCONTROLID) Q_SEnergy->SEnergy[aero].TargetID = 250;
			if(player[g_Player]->NetUPDATE.Q_SEnergys[aero].TargetID == 250) Q_SEnergy->SEnergy[aero].TargetID = Q_Netplayer->Netplayer[0].LocalCONTROLID;

			Q_SEnergy->SEnergy[aero].AngleX = player[g_Player]->NetUPDATE.Q_SEnergys[aero].AngleX;
			Q_SEnergy->SEnergy[aero].AngleY = player[g_Player]->NetUPDATE.Q_SEnergys[aero].AngleY;
			Q_SEnergy->SEnergy[aero].AngleZ = player[g_Player]->NetUPDATE.Q_SEnergys[aero].AngleZ;
			}

		aero++;
		}

	//MessageBox(NULL,"Large Energy  \n","ERROR",MB_OK);

	//##### Update Large Energy
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomLEnergy);

	if(player[g_Player]->NetUPDATE_->NomLEnergy < _->NomLEnergy)
		{
		jet = _->NomLEnergy - 1;
		while(jet >= player[g_Player]->NetUPDATE_->NomLEnergy)
			{
			geWorld_RemoveLight(World, Q_LEnergy->LEnergy[jet].Light);
			Q_LEnergy->LEnergy[jet].Init = 0;
			Q_LEnergy->LEnergy[jet].Live = 0;
			Q_LEnergy->LEnergy[jet].EnergyLive = 0;
			Q_LEnergy->LEnergy[jet].EnergyFire = 0;
			geVec3d_Copy(&_->Origon, &Q_LEnergy->LEnergy[jet].EnergyBall.ActorXform.Translation);
			geActor_SetScale(Q_LEnergy->LEnergy[jet].EnergyBall.Actor, 0,0,0);
			geActor_ClearPose(Q_LEnergy->LEnergy[jet].EnergyBall.Actor, &Q_LEnergy->LEnergy[jet].EnergyBall.ActorXform);

			jet--;
			}
		}

	_->NomLEnergy = player[g_Player]->NetUPDATE_->NomLEnergy;

	aero = 0;
	while(aero < _->NomLEnergy)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_LEnergys[aero].Live);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_LEnergys[aero].LightPos);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_LEnergys[aero].TraVec);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_LEnergys[aero].Speed);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_LEnergys[aero].Scale);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_LEnergys[aero].Alpha);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_LEnergys[aero].EnergyLive);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_LEnergys[aero].EnergyFire);

		if(player[g_Player]->NetUPDATE.Q_LEnergys[aero].Live == 1)
			{
			if(Q_LEnergy->LEnergy[aero].Live == 0) Q_LEnergy->LEnergy[aero].Init = 0;
			Q_LEnergy->LEnergy[aero].Live = player[g_Player]->NetUPDATE.Q_LEnergys[aero].Live;
			Q_LEnergy->LEnergy[aero].LightPos = player[g_Player]->NetUPDATE.Q_LEnergys[aero].LightPos;
			Q_LEnergy->LEnergy[aero].TraVec = player[g_Player]->NetUPDATE.Q_LEnergys[aero].TraVec;
			Q_LEnergy->LEnergy[aero].Speed = player[g_Player]->NetUPDATE.Q_LEnergys[aero].Speed;
			Q_LEnergy->LEnergy[aero].Scale = player[g_Player]->NetUPDATE.Q_LEnergys[aero].Scale;
			Q_LEnergy->LEnergy[aero].Alpha = player[g_Player]->NetUPDATE.Q_LEnergys[aero].Alpha;
			Q_LEnergy->LEnergy[aero].EnergyLive = player[g_Player]->NetUPDATE.Q_LEnergys[aero].EnergyLive;
			Q_LEnergy->LEnergy[aero].EnergyFire = player[g_Player]->NetUPDATE.Q_LEnergys[aero].EnergyFire;
			}
		aero++;
		}

	//MessageBox(NULL,"World Explosions  \n","ERROR",MB_OK);

	//##### Update World Explosions
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomExplosions);

	if(player[g_Player]->NetUPDATE_->NomExplosions >= _->NomExplosions)
		{ _->NomExplosions = player[g_Player]->NetUPDATE_->NomExplosions; }

	aero = 0;
	while(aero < player[g_Player]->NetUPDATE_->NomExplosions)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_Explosions[aero].Live);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_Explosions[aero].Pos);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_Explosions[aero].ExpSize);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_Explosions[aero].LargeEnergyActorID);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_Explosions[aero].CollPlaneNormal);

		if(player[g_Player]->NetUPDATE.Q_Explosions[aero].Live == 1)
			{
			if(Q_Explosion->Explosion[aero].Live == 0) Q_Explosion->Explosion[aero].Init = 0;
			Q_Explosion->Explosion[aero].Live = player[g_Player]->NetUPDATE.Q_Explosions[aero].Live;
			Q_Explosion->Explosion[aero].Pos = player[g_Player]->NetUPDATE.Q_Explosions[aero].Pos;
			Q_Explosion->Explosion[aero].ExpSize = player[g_Player]->NetUPDATE.Q_Explosions[aero].ExpSize;
			Q_Explosion->Explosion[aero].LargeEnergyActorID = player[g_Player]->NetUPDATE.Q_Explosions[aero].LargeEnergyActorID;
			Q_Explosion->Explosion[aero].CollPlaneNormal = player[g_Player]->NetUPDATE.Q_Explosions[aero].CollPlaneNormal;
			}
		aero++;
		}

	//MessageBox(NULL,"Cleric Heal  \n","ERROR",MB_OK);

	//##### Update Cleric Heal Energy
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomHSpark);

	if(player[g_Player]->NetUPDATE_->NomHSpark < _->NomHSpark)
		{
		jet = _->NomHSpark - 1;
		while(jet >= player[g_Player]->NetUPDATE_->NomHSpark)
			{
			Q_HealSpark->HealSpark[jet].Live = 0;
			if(Q_HealSpark->HealSpark[jet].Light != NULL) geWorld_RemoveLight(World, Q_HealSpark->HealSpark[jet].Light);
			Q_HealSpark->HealSpark[jet].LightON = 0;
			jet--;
			}
		}

	_->NomHSpark = player[g_Player]->NetUPDATE_->NomHSpark;

	aero = 0;
	while(aero < _->NomHSpark)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].Live);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].HTYPE);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].Pos);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].TraVec);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].Released);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].Absorbed);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].HealTarget);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].AlpFade);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].ScaleSTR);

		if(player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].Live == 1)
			{
			Q_HealSpark->HealSpark[aero].Live = player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].Live;
			Q_HealSpark->HealSpark[aero].HTYPE = player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].HTYPE;
			Q_HealSpark->HealSpark[aero].Pos = player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].Pos;
			Q_HealSpark->HealSpark[aero].TraVec = player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].TraVec;
			Q_HealSpark->HealSpark[aero].Released = player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].Released;
			Q_HealSpark->HealSpark[aero].Absorbed = player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].Absorbed;

			Q_HealSpark->HealSpark[aero].HealTarget = player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].HealTarget;
			if(player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].HealTarget == player[g_Player]->NetUPDATE.ServerCONTROLID) Q_HealSpark->HealSpark[aero].HealTarget = 250;
			if(player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].HealTarget == 250) Q_HealSpark->HealSpark[aero].HealTarget = Q_Netplayer->Netplayer[0].LocalCONTROLID;

			Q_HealSpark->HealSpark[aero].AlpFade = player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].AlpFade;
			Q_HealSpark->HealSpark[aero].ScaleSTR = player[g_Player]->NetUPDATE.Q_HealSpark->HealSpark[aero].ScaleSTR;
			}

		aero++;
		}

	//MessageBox(NULL,"Cleric Spells  \n","ERROR",MB_OK);

	//##### Update Cleric Spells
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomSpell);

	if(player[g_Player]->NetUPDATE_->NomSpell < _->NomSpell)
		{
		jet = _->NomSpell - 1;
		while(jet >= player[g_Player]->NetUPDATE_->NomSpell)
			{
			Q_ClericSpell->ClericSpell[jet].Live = 0;
			if(Q_ClericSpell->ClericSpell[jet].Light != NULL) geWorld_RemoveLight(World, Q_ClericSpell->ClericSpell[jet].Light);
			Q_ClericSpell->ClericSpell[jet].LightON = 0;
			jet--;
			}
		}

	_->NomSpell = player[g_Player]->NetUPDATE_->NomSpell;

	aero = 0;
	while(aero < _->NomSpell)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Live);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].HealTarget);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].NumSpheres);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].LightPos);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].LightPow);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Absorbed);
		
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Radius[0]);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Radius[1]);
		
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].StartFade[0]);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].StartFade[1]);

		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Leftvec[0]);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Upvec[0]);

		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Leftvec[1]);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Upvec[1]);

		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Leftvec[2]);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Upvec[2]);

		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Leftvec[3]);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Upvec[3]);


		if(player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Live == 1)
			{
			Q_ClericSpell->ClericSpell[aero].Live = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Live;
			Q_ClericSpell->ClericSpell[aero].NumSpheres = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].NumSpheres;

			Q_ClericSpell->ClericSpell[aero].HealTarget = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].HealTarget;
			if(player[g_Player]->NetUPDATE.Q_ClericSpells[aero].HealTarget == player[g_Player]->NetUPDATE.ServerCONTROLID) Q_ClericSpell->ClericSpell[aero].HealTarget = 250;
			if(player[g_Player]->NetUPDATE.Q_ClericSpells[aero].HealTarget == 250) Q_ClericSpell->ClericSpell[aero].HealTarget = Q_Netplayer->Netplayer[0].LocalCONTROLID;
			
			Q_ClericSpell->ClericSpell[aero].LightPos = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].LightPos;
			Q_ClericSpell->ClericSpell[aero].LightPow = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].LightPow;
			Q_ClericSpell->ClericSpell[aero].Absorbed = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Absorbed;
			
			Q_ClericSpell->ClericSpell[aero].Sphere[0].Radius = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Radius[0];
			Q_ClericSpell->ClericSpell[aero].Sphere[1].Radius = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Radius[1];

			Q_ClericSpell->ClericSpell[aero].Sphere[0].StartFade = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].StartFade[0];
			Q_ClericSpell->ClericSpell[aero].Sphere[1].StartFade = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].StartFade[1];

			Q_ClericSpell->ClericSpell[aero].Sphere[0].Leftvec = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Leftvec[0];
			Q_ClericSpell->ClericSpell[aero].Sphere[0].Upvec = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Upvec[0];

			Q_ClericSpell->ClericSpell[aero].Sphere[1].Leftvec = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Leftvec[1];
			Q_ClericSpell->ClericSpell[aero].Sphere[1].Upvec = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Upvec[1];

			Q_ClericSpell->ClericSpell[aero].Sphere[2].Leftvec = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Leftvec[2];
			Q_ClericSpell->ClericSpell[aero].Sphere[2].Upvec = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Upvec[2];

			Q_ClericSpell->ClericSpell[aero].Sphere[3].Leftvec = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Leftvec[3];
			Q_ClericSpell->ClericSpell[aero].Sphere[3].Upvec = player[g_Player]->NetUPDATE.Q_ClericSpells[aero].Upvec[3];
			}

		aero++;
		}

	//MessageBox(NULL,"Cleric Plasma  \n","ERROR",MB_OK);

	//##### Update Cleric Plasma
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomPlasma);

	if(player[g_Player]->NetUPDATE_->NomPlasma < _->NomPlasma)
		{
		jet = _->NomPlasma - 1;
		while(jet >= player[g_Player]->NetUPDATE_->NomPlasma)
			{
			Q_ClericPlasma->ClericPlasma[jet].Live = 0;
			if(Q_ClericPlasma->ClericPlasma[jet].Light != NULL) geWorld_RemoveLight(World, Q_ClericPlasma->ClericPlasma[jet].Light);
			Q_ClericPlasma->ClericPlasma[jet].LightON = 0;
			jet--;
			}
		}

	_->NomPlasma = player[g_Player]->NetUPDATE_->NomPlasma;

	aero = 0;
	while(aero < _->NomPlasma)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].Live);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].Pos);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].TraVec);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].Speed);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].Alpha);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].PartType);

		if(player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].Live == 1)
			{
			Q_ClericPlasma->ClericPlasma[aero].Live = player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].Live;
			Q_ClericPlasma->ClericPlasma[aero].Pos = player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].Pos;
			Q_ClericPlasma->ClericPlasma[aero].TraVec = player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].TraVec;
			Q_ClericPlasma->ClericPlasma[aero].Speed = player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].Speed;
			Q_ClericPlasma->ClericPlasma[aero].Alpha = player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].Alpha;
			Q_ClericPlasma->ClericPlasma[aero].PartType = player[g_Player]->NetUPDATE.Q_ClericPlasmas[aero].PartType;
			}

		aero++;
		}

	//MessageBox(NULL,"Net Effects Control  \n","ERROR",MB_OK);

	//##### Update Net Effects Control
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomNetEffectControl);

	_->NomNetEffectControl = player[g_Player]->NetUPDATE_->NomNetEffectControl;

	aero = 0;
	while(aero < _->NomNetEffectControl)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].Live);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].Type);
		if(player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].Type == 0) Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].Pos);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].EffIntensity);
		if(player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].Type == 1) Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].ActorID);

		if(player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].Live > Q_NetEffectControl->NetEffectControl[aero].Live)
			{ Q_NetEffectControl->NetEffectControl[aero].Active = 1; }

		Q_NetEffectControl->NetEffectControl[aero].Live = player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].Live;
		Q_NetEffectControl->NetEffectControl[aero].Type = player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].Type;
		Q_NetEffectControl->NetEffectControl[aero].Pos = player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].Pos;
		Q_NetEffectControl->NetEffectControl[aero].EffIntensity = player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].EffIntensity;
		Q_NetEffectControl->NetEffectControl[aero].ActorID = player[g_Player]->NetUPDATE.Q_NetEffectControl->NetEffectControls[aero].ActorID;

		aero++;
		}


	//##### Update Net Zone Increment
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.NomNetZonesINC);

	aero = 0;
	while(aero < player[g_Player]->NetUPDATE.NomNetZonesINC)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].AVID);

		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Maxs);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Mins);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.TYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.INT);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.ON);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.Red);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.Green);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.Blue);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.Alpha);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.Scale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.TIMER);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke.CNT);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].TYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].INT);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].ON);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].Red);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].Green);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].Blue);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].Alpha);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].Scale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].TIMER);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0].CNT);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].TYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].INT);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].ON);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].Red);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].Green);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].Blue);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].Alpha);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].Scale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].TIMER);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1].CNT);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].TYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].INT);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].ON);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].Red);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].Green);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].Blue);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].Alpha);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].Scale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].TIMER);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2].CNT);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].TYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].INT);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].ON);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].Red);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].Green);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].Blue);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].Alpha);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].Scale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].TIMER);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3].CNT);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].TYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].INT);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].ON);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].Red);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].Green);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].Blue);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].Alpha);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].Scale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].TIMER);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4].CNT);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.TYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.INT);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.ON);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.Red);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.Green);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.Blue);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.Alpha);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.Scale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.TIMER);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog.CNT);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.TYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.INT);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.ON);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.Red);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.Green);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.Blue);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.Alpha);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.Scale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.TIMER);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight.CNT);

		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ExpandMINS);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ExpandMAXS);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ExpandSTRENGTH);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_TimeScale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Gravity);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LifeINC);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_EnergyINC);

		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_IntBoost);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_EnergyEff);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Height);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Weight);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Strength);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Quickness);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Dexterity);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Constitution);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_AggPower);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_DefPower);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_RArmStr);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LArmStr);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_RLegStr);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LLegStr);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_RArmSnap);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LArmSnap);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_RLegSnap);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LLegSnap);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_WEPAccuracy);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_WEPDrawSPD);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_WEPReloadSPD);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_WEPRecoilHR);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_JINKmovespeed);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_JINKpower);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_JINK3intensity);


		//====---- AQUIRE ZONE ----====
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Active = 1;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].AVID = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].AVID;

		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Mins = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Mins;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Maxs = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Maxs;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ExpandMINS = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ExpandMINS;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ExpandMAXS = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ExpandMAXS;

		//### FIND CORE
		geVec3d_Subtract(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Core);
		geVec3d_Scale(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Core, 0.5, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Core);
		geVec3d_Add(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Mins, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Core);

		//### EXPAND OUTWARDS MINS AND MAXS
		geVec3d_Subtract(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ExpandMINS, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].MINS2Core);
		geVec3d_Normalize(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].MINS2Core);
		geVec3d_MA(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ExpandMINS, -(Q_EnergyMatrix->EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].MINS2Core, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ExpandMINS);

		geVec3d_Subtract(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ExpandMAXS, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Core, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].MAXS2Core);
		geVec3d_Normalize(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].MAXS2Core);
		geVec3d_MA(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ExpandMAXS, -(Q_EnergyMatrix->EnergyMatrix.GlobalSCALE/4), &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].MAXS2Core, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ExpandMAXS);

		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ExpandSTRENGTH = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ExpandSTRENGTH;

		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Smoke = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Smoke;

		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Effect[0] = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[0];
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Effect[1] = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[1];
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Effect[2] = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[2];
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Effect[3] = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[3];
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Effect[4] = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Effect[4];

		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Fog = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].Fog;

		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].FogLight = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].FogLight;

		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_TimeScale = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_TimeScale;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_Gravity = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Gravity;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_LifeINC = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LifeINC;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyINC = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_EnergyINC;

		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_IntBoost = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_IntBoost;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_EnergyEff = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_EnergyEff;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_Height = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Height;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_Weight = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Weight;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_Strength = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Strength;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_Quickness = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Quickness;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_Dexterity = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Dexterity;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_Constitution = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_Constitution;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_AggPower = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_AggPower;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_DefPower = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_DefPower;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_RArmStr = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_RArmStr;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_LArmStr = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LArmStr;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_RLegStr = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_RLegStr;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_LLegStr = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LLegStr;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_RArmSnap = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_RArmSnap;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_LArmSnap = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LArmSnap;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_RLegSnap = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_RLegSnap;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_LLegSnap = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_LLegSnap;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_WEPAccuracy = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_WEPAccuracy;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_WEPDrawSPD = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_WEPDrawSPD;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_WEPReloadSPD = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_WEPReloadSPD;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_WEPRecoilHR = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_WEPRecoilHR;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_JINKmovespeed = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_JINKmovespeed;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_JINKpower = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_JINKpower;
		Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].ZONEINC_JINK3intensity = player[g_Player]->NetUPDATE.Q_NetZONEINC[aero].ZONEINC_JINK3intensity;

		Corner = Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Mins;
		geVec3d_Subtract(&Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Maxs, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Mins, &TempVec1);
		DX = TempVec1;
		DX.Y = 0;
		DX.Z = 0;
		DY = TempVec1;
		DY.X = 0;
		DY.Z = 0;
		DZ = TempVec1;
		DZ.Y = 0;
		DZ.X = 0;
		DrawOrientedBoundBox(World, &Corner, &DX, &DY, &DZ);

		if(Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks < 9998) Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks++;

		geSound3D_GetConfig(World, &player[g_Player]->ViewXForm, &Q_EnergyMatrix->EnergyMatrix.QMATBlock[Q_EnergyMatrix->EnergyMatrix.NomQMatBlocks].Core, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
		geSound_PlaySoundDef(SoundSys, Medias->S_ZoneCapture, _->Volume, _->Pan, _->S_TimeScale, GE_false);

		aero++;
		}


	//##### Update Net Zone ENTITY Increment
	Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE_->NomNetZoneENTITY);

	aero = 0;
	while(aero < player[g_Player]->NetUPDATE_->NomNetZoneENTITY)
		{
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].TYPE);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].ID);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].ZoneID);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].QObjID);
		Buffer_GetAngle(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].Pos);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].Range);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].Scale);
		Buffer_GetFloat(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].StrengthMAX);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].CollisionTYPE);
		Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].AvatarID);


		switch(player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].TYPE)
			{
			case 0:
				{
				//====----- SENTRY BUILD ------====

				if(_->NomBMSentry < 148)
					{
					Q_BMSentry->BMSentry[_->NomBMSentry].Pos = player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].Pos;
					Q_BMSentry->BMSentry[_->NomBMSentry].ZoneID = player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].ZoneID;
					Q_BMSentry->BMSentry[_->NomBMSentry].QObjID = player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].QObjID;
					Q_BMSentry->BMSentry[_->NomBMSentry].Range = player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].Range;
					Q_BMSentry->BMSentry[_->NomBMSentry].LIVE = 1;

					_->NomBMSentry++;
					}

				//#### INITIALISE THE Q_Object->Object TO HOUSE THE SENTRY

				if(_->NomQObject < 148)
					{
					Q_Object->Object[_->NomQObject].Pos = player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].Pos;
					Q_Object->Object[_->NomQObject].Scale = player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].Scale;
					Q_Object->Object[_->NomQObject].StrengthMAX = player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].StrengthMAX;
					Q_Object->Object[_->NomQObject].StrengthBANK = Q_Object->Object[_->NomQObject].StrengthMAX;
					Q_Object->Object[_->NomQObject].CollisionTYPE = player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].CollisionTYPE;
					Q_Object->Object[_->NomQObject].AvatarID = player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].AvatarID;
					Q_Object->Object[_->NomQObject].LIVE = 1;

					_->NomQObject++;
					}

				geSound3D_GetConfig(World, &player[g_Player]->ViewXForm, &player[g_Player]->NetUPDATE.Q_NetZoneENTITY->NetZoneENTITYINC[aero].Pos, 600.0f, 2.0f, &Volume, &Pan, &Frequency);
						//'Jink Ready'
				geSound_PlaySoundDef(SoundSys, Medias->S_Build, _->Volume, _->Pan, _->S_TimeScale, GE_false);
				}break;
			}
		aero++;
		}


	//MessageBox(NULL,"Update Success 1  \n","ERROR",MB_OK);


	//FRLs
	Buffer_GetFloat(Buffer, &_->FRLtarget);
	Buffer_GetByte(Buffer, &FRLON);
	//FRLON = 0;

	//MessageBox(NULL,"Update Success 2  \n","ERROR",MB_OK);
}



//###### SEARCH PLAYERS #######

void Q_SearchPlayers(void)
	{
	//Search For Unspawned Players
	jet=0;
	while(jet < _->NETNomNetplayer)
		{
		if(Q_Netplayer->Netplayer[jet].Live == 1 && Q_Netplayer->Netplayer[jet].Spawned == 0 && Q_Netplayer->Netplayer[jet].SpawnREADY == 1)
			{
			////MessageBox(NULL,"Q_SpawnQ_Netplayer->Netplayer(jet,1);  \n","ERROR",MB_OK);

			Q_SpawnNetplayer(jet,1);
			}
		jet++;
		}

	}


//###### SPAWN PLAYERS #######

void Q_SpawnQ_Netplayer->Netplayer(int NetPID, int Team)
	{
	//########## Setup Multiplayer Avatars ##########
	//Change Spawning variables
	//DEFAULT
	//Q_Netplayer->Netplayer[NetPID].SpawnPos = Q_PlayerEntity->PlayerEntity.Pos;
	//Q_Netplayer->Netplayer[NetPID].SpawnAng = player[g_Player]->trueAngles;
	//Q_Netplayer->Netplayer[NetPID].SpawnAng.Y = Q_Netplayer->Netplayer[NetPID].SpawnAng.Y + (PI/2);

	////MessageBox(NULL,"Q_SpawnQ_Netplayer->Netplayer(jet,1);  \n","ERROR",MB_OK);

	//##### ASSIGN AVATAR SLOT #####
	if(_->NetworkOption == 2)
		{
		AVSLOT=0;
		while(Q_Forge->Forge[AVSLOT].LIVE == 1) AVSLOT++;

		Q_Netplayer->Netplayer[NetPID].LocalCONTROLID = AVSLOT;
		}
	else
		{
		if((_->NetworkOption == 1) && (NetPID == 0))
			{
			AVSLOT=0;
			while(Q_Forge->Forge[AVSLOT].LIVE == 1) AVSLOT++;

			Q_Netplayer->Netplayer[NetPID].LocalCONTROLID = AVSLOT;
			}
		}


	//EDIT!!!
	//Q_Netplayer->Netplayer[NetPID].LocalCONTROLID = 0;

	Q_Netplayer->Netplayer[NetPID].Live = 1;
	if(Q_Netplayer->Netplayer[NetPID].LocalCONTROLID >= _->NomAI) _->NomAI++;

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].LIVE = 1;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].NetPID = NetPID;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA = Q_Netplayer->Netplayer[NetPID].CharDATA;

	//###### TEST AVATAR SELECT

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].NetplayerFLAG = 1;

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.upspeed = -15;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ModelCounter = 0;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Mins.X = -30.f;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Mins.Y = -45.f;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Mins.Z = -30.f;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Maxs.X = 30.f;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Maxs.Y = 45.f;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Maxs.Z = 30.f;

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].PlayerSpeed = PLAYER_SPEED;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].NetMoveScale = 1;

	//Fill Weapon Ammo
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].WeaponAmmo = 32;

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_Illumination = 255;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_Dead = 0;

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Q_Brain.Aggression = 70;
	
	//### Obtain Correct Character Data for Avatar

	//#### Set Role
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Team = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.TEAM;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Role = 0;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Rank = 1;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].LEVEL = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.Level;

	egen3d_LoadActor(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorREF);

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef = egen3d_FullAccess_ActorDef();
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor = egen3d_FullAccess_Actor();
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform = egen3d_FullAccess_ActorXform();

	geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].idlespeed = 0.1;

	if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].LEVEL > 1000) Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].LEVELFactor = 1;
	else Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].LEVELFactor = (((float)Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].LEVEL + 1) / 1000);

	////if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_MaxHealth = 500 * (((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Constitution/100)*0.6)+0.4);
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_Health = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_MaxHealth;

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_MaxEnergy = 500;
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_Energy = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_MaxEnergy;

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_Armour = ((float)(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].HB_MaxArmour = ((float)(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);

	//####### RELATIVE MOVEMENT SPEED
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.RELQuickness = 0.2 + (((float)Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Quickness / 100) * 0.8);

	//####### RELATIVE ENERGY EFFICIENCY
	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.RELEnergyEff = 1 + ((float)Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.EnergyEff / 6000);

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].JINK3_PowerFactor = 1;

	Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].GravityAlter = 1;

										//CAUTION EDIT HERE TEAM BASED ACTOR SELECTION
		//ACTOR SETUP AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA


		geWorld_AddActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, GE_ACTOR_RENDER_NORMAL | GE_ACTOR_COLLIDE, 0x00000001);
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor->Visible = GE_true;

		//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);


		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[0] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Idle" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[1] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Walk" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[2] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Run" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[3] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Sidestep" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[4] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Jump" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[5] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LLPunch" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[6] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RLPunch" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[7] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RHPunch2" );	//RHPunch
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[8] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RMKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[9] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LMPunch" );	//LSPunch needs a home
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[10] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RMPunch" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[12] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "WalkL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[13] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "WalkR" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[14] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RunL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[15] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RunR" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[16] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "SidestepL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[17] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "SidestepR" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[18] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Renzou" );		//TODO: Combine these two
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[19] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RenzouE" );		//TODO: Into one
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[20] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RSPunch" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[21] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Uppercut" );	//Uppercut
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[22] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "HBlock" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[23] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Idle2" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[24] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RenzouR" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[25] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Weapon1" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[26] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RunWep1L" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[27] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RunWep1R" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[28] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AimWep1" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[29] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AXKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[30] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "SPKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[31] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JumpL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[32] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JumpR" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[33] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Cartwheel" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[34] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Weapon1UPP" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[35] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AimWep1UPP" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[36] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "CartWep1" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[37] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Idle3" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[38] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RenzouL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[40] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Knee" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[41] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JumpKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[42] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Wave" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[43] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "HitStom" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[44] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "HitUpper" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[45] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JumpSpiral" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[46] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "DodgeL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[47] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "FKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[48] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AirJink" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[49] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RunBack" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[50] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AirRushFront" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[52] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RapidKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[53] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "FallHead" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[54] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RHKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[55] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "FlameUpperCut" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[56] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "HBlockHit" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[57] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "BackFlip" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[58] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "WeaponReload" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[59] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "SpinKickFull" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[60] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Crouch" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[61] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "CrouchL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[62] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "CrouchR" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[67] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "VHKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[68] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Entro" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[69] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "TwinDragon1" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[70] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "TwinDragon2" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[71] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Golrekka" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[72] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "SkyPush" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[73] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Lowtro" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[74] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Lowkick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[75] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Legsweep" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[76] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Crunch" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[77] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Hitwall" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[78] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AttFlip" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[79] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RunAttP" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[80] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LowPunchL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[81] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LowPunchR" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[82] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LBlock" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[83] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LBlockHit" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[84] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Hadouken" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[85] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "HadoukenAir" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[86] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AirDash" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[87] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "HoverKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[88] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RollF" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[89] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Taunt1" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[90] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Sakurat" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[91] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "BrollyT" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[93] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "SpiralDown" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[94] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JumpSpiralOver" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[95] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JumpSmall" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[96] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "TwistKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[97] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "BackFlipAtt" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[98] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Deflect" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[99] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JumpSmallL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[100] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JumpSmallR" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[101] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "PCombo2" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[102] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RushElbow" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[103] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "HoldBarge" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[104] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "DoubleStrike" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[105] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LowLunge" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[106] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "SideChop" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[107] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "SpinChop" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[108] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RollLowL" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[109] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RollLowR" );
		//VEHICLE MOTIONS UNUSED
		//Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[110] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "BikeMount" );
		//Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[111] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "BikeRush" );
		//Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[112] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "BikeWheelie" );
		//Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[113] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "BikeIdle" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[114] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RenzouP" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[115] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RenzouPR" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[116] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AttFlipE" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[117] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "HandSlap" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[118] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JSRUSH" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[119] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JSRUSHPUNCH" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[120] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JSRUSHBG" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[121] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "JSRUSHKICK" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[122] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "StaticKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[123] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RunAttK" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[124] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RDoubleKick" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[125] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "WeaponReloadUPP" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[126] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RunAttK" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[127] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "PowerBomb" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[128] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LeapDownStrike" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[129] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "RSPINSTRIKE" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[130] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "SpinoutLeft" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[131] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "OverheadPinwheel" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[132] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LeapDownFist" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[140] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "LookRight" );

		if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.Class == 2)
			{
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[63] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Glance" );
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[65] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "HealUPP" );
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[66] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Heal" );
			}

		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[133] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Weapon2" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[134] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "Weapon2UPP" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[135] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AimWep2" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[136] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "AimWep2UPP" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[137] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "WeaponReload2" );
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Motion[138] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef, "WeaponReload2UPP" );

		//Lighting
		//if(Team == 0)	//Friendly AI
		//	{
			/*if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.Class == 0)*/	geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor,GE_true,&goup,200,200,200,190,145,100,GE_false,8,NULL,GE_true);
		//	if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.Class == 1)	geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor,GE_true,&goup,230,200,200,230,175,155,GE_false,8,NULL,GE_true);
		//	if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.Class == 2)	geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor,GE_true,&goup,230,200,200,230,175,155,GE_false,8,NULL,GE_true);
		//	}

		//if(Team == 1)	//Enemy AI
		//	{
		//	if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.Class == 0)	geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor,GE_true,&poop,255,180,180,220,220,220,GE_false,8,NULL,GE_true);
		//	}

		//Shadows
		//geActor_SetShadow(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor,GE_true,30.0,shadow,NULL);

		//Starting Rotation
		//Ange.Y = Q_Netplayer->Netplayer[NetPID].SpawnAng.Y+(PI/2);
		/*Ange.Y=PI;
		if(Ange.Y>(2*PI)) Ange.Y = Ange.Y - (PI*2);

		Ange.X=-(PI/2);
		Ange.Z=0;


		// Set the actor's angle
		geXForm3d_RotateX(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform, Ange.X);		//Update Avatar's starting facing direction
		geXForm3d_RotateY(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform, Ange.Y);
		geXForm3d_RotateZ(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform, Ange.Z);
		// Set the actor to its position
		geVec3d_Copy(&Q_Netplayer->Netplayer[NetPID].SpawnPos, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform.Translation);
		geActor_ClearPose(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform);*/


		//##### Starting position		NON FUNKTIONERT
		Ange.Y=Q_StartPoints->StartPoints[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Team].Ang.Y; //Q_PlayerEntity->PlayerEntity.Ang.Y;//+(PI/2);
		if(Ange.Y>(2*PI)) Ange.Y = Ange.Y - (PI*2);
		Ange.X=-(PI/2);
		Ange.Z=0;

		// Set the actor's angle
		geXForm3d_RotateX(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform, Ange.X);
		geXForm3d_RotateY(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform, Ange.Y);
		geXForm3d_RotateZ(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform, Ange.Z);

		// Set the actor to its position
		geVec3d_Copy(&Q_StartPoints->StartPoints[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Team].Pos, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform.Translation);
		geActor_ClearPose(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform);

		geVec3d_Copy(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform.Translation, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].ORIGSTARTPOINT);


		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Angles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Team].Ang.Y;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].trueAngles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Team].Ang.Y;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].STOREAngles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Team].Ang.Y;

		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Extenbox.Min.X = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Mins.X;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Extenbox.Min.Y = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Mins.Y;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Extenbox.Min.Z = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Mins.Z;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Extenbox.Max.X = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Maxs.X;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Extenbox.Max.Y = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Maxs.Y;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Extenbox.Max.Z = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Maxs.Z;
		
		geActor_SetExtBox(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Extenbox, "BIP01");

		// Get body of actor
		//LisaBody = geActor_GetBody(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorDef);

		ActorEnviro.UseEnvironmentMapping = GE_true;
		ActorEnviro.Supercede = GE_true;
		ActorEnviro.PercentEnvironment = 1.0f;
		ActorEnviro.PercentMaterial = 1.0f;
		ActorEnviro.PercentPuppet = 1.0f;

		geActor_SetEnvironOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, &ActorEnviro );

		geActor_SetStaticLightingOptions( Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, GE_true, GE_true, 10 );

		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor->IDflag = Q_Netplayer->Netplayer[NetPID].LocalCONTROLID;

		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].WeaponAimer = 1.7;

		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].STOREMatrix = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform;
		geVec3d_Copy(&Origin, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].STOREMatrix.Translation);

		//### Load Avatar Weapon

		if(1)
			{
			/*if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.WepREF == 0)*/ egen3d_LoadActor(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ItemDATA[Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.CurrWEAPON].ItemActorREF);
			//if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.WepREF == 1) egen3d_LoadActor(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform, "Actors\\Swat552.act");
			//if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.WepREF == 2) egen3d_LoadActor(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform, "Actors\\M4A1.act");
			//if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.WepREF == 3) egen3d_LoadActor(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform, "Actors\\IncapacitatorMKII.act");

			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Mins.X = -20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Mins.Y = -20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Mins.Z = -20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Maxs.X = 20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Maxs.Y = 20.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Maxs.Z = 20.f;

			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorDef = egen3d_FullAccess_ActorDef();
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Actor = egen3d_FullAccess_Actor();
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform = egen3d_FullAccess_ActorXform();

			//geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Actor, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.WepSCALE, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.WepSCALE, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.WepSCALE);
			geWorld_AddActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Actor, GE_ACTOR_RENDER_NORMAL | GE_ACTOR_COLLIDE, 0xffffffff);

			geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Actor, 1.2 + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Height/100)-0.5)*2)), 1.2 + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)), 1.2 + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Actor->Visible = GE_true;

			//Poser.X=400;
			//Poser.Y=-150;		//Create Weapon Rack Somewhere
			//Poser.Z=-0;

			Ange.X=-(PI/2);
			Ange.Y=PI;
			Ange.Z=0;

			geXForm3d_RotateX(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform, Ange.X);
			geXForm3d_RotateY(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform, Ange.Y);
			geXForm3d_RotateZ(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform, Ange.Z);
			geVec3d_Copy(&_->Origon, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform.Translation);

			geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Actor,GE_true,&goup,255,255,255,170,170,170,GE_false,0,NULL,GE_true);
			geActor_ClearPose(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Actor, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.ActorXform);

			geActor_SetAlpha(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Weapon.Actor, 0);
			}

		//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);

		if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.Class == 2)
			{
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Mins.X = -500.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Mins.Y = -500.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Mins.Z = -500.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Maxs.X = 500.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Maxs.Y = 500.f;
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Maxs.Z = 500.f;

			egen3d_LoadActor(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.ActorXform, "Actors\\ShockWave.act");
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.ActorDef = egen3d_FullAccess_ActorDef();
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Actor = egen3d_FullAccess_Actor();
			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.ActorXform = egen3d_FullAccess_ActorXform();

			geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Actor, 0.65f,0.65f,0.65f);
			geWorld_AddActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0x00000001);
			geActor_SetAlpha(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Actor, 40);

			fogbox.Min.X = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Mins.X;
			fogbox.Min.Y = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Mins.Y;
			fogbox.Min.Z = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Mins.Z;
			fogbox.Max.X = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Maxs.X;
			fogbox.Max.Y = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Maxs.Y;
			fogbox.Max.Z = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Maxs.Z;
			
			geActor_SetExtBox(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Actor, &fogbox, NULL);

			geActor_ClearPose(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Actor, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.ActorXform);
			geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Actor, GE_false, &goup, 0, 0, 0, 255, 255, 255, GE_false, 0, NULL, GE_false);
			geVec3d_Copy(&_->Origon, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.ActorXform.Translation);

			Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shield.Actor->IDflag = 251;
			}

		//### Load Shadows

		//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);

			warp = 0;
			while(warp <= 2)
				{
				warp++;

				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].ShadowsOn = GE_false;

				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].ShadowALPHA = 240;

				egen3d_LoadActor(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorXform, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ShadowREF);

				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Mins.X = -20.f;
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Mins.Y = -20.f;
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Mins.Z = -20.f;
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Maxs.X = 20.f;
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Maxs.Y = 20.f;
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Maxs.Z = 20.f;

				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef = egen3d_FullAccess_ActorDef();
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor = egen3d_FullAccess_Actor();
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorXform = egen3d_FullAccess_ActorXform();

				//geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor, 0.43f,0.43f,0.43f);
				//geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor, 1.2f,1.2f,1.2f);
				geWorld_AddActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor, GE_ACTOR_RENDER_NORMAL | GE_ACTOR_COLLIDE, 0xffffffff);
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor->Visible = GE_true;
				geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[0] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Idle" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[1] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Walk" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[2] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Run" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[3] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Sidestep" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[4] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Jump" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[5] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "LLPunch" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[6] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RLPunch" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[7] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RHPunch2" );	//RHPunch
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[8] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RMKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[9] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "LMPunch" );	//LSPunch needs a home
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[10] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RMPunch" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[11] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "LLPunchA" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[12] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "WalkL" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[13] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "WalkR" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[14] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RunL" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[15] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RunR" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[16] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "SidestepL" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[17] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "SidestepR" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[18] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Renzou" );		//TODO: Combine these two
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[19] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RenzouE" );		//TODO: Into one
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[20] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RSPunch" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[21] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Uppercut" );	//Uppercut
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[22] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "HBlock" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[23] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Idle2" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[24] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RenzouR" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[25] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Weapon1" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[26] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RunWep1L" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[27] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RunWep1R" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[28] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "AimWep1" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[29] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "AXKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[30] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "SPKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[31] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "JumpL" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[32] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "JumpR" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[33] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Cartwheel" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[34] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Weapon1UPP" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[35] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "AimWep1UPP" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[36] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "CartWep1" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[37] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Idle3" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[38] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RenzouL" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[39] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "HoldDash" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[40] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Knee" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[41] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "JumpKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[42] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Wave" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[43] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "HitStom" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[44] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "HitUpper" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[45] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "JumpSpiral" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[46] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "DodgeL" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[47] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "FKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[48] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "AirJink" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[49] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RunBack" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[50] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "AirRushFront" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[51] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "HitStorm" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[52] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RapidKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[53] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "FallHead" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[54] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RHKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[55] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "FlameUpperCut" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[56] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "HBlockHit" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[57] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "BackFlip" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[58] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "WeaponReload" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[59] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "SpinKickFull" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[60] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Crouch" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[61] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "CrouchL" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[62] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "CrouchR" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[63] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "LLPunchUPP" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[64] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RLPunchUPP" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[65] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "LMPunchUPP" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[66] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "LMKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[67] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "VHKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[71] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Golrekka" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[72] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "SkyPush" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[76] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Crunch" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[77] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Hitwall" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[78] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "AttFlip" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[84] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Hadouken" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[85] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "HadoukenAir" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[86] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "AirDash" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[87] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "HoverKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[88] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RollF" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[90] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "Sakurat" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[91] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "BrollyT" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[94] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "JumpSpiralOver" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[96] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "TwistKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[101] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "PCombo2" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[102] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RushElbow" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[118] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "JSRUSH" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[119] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "JSRUSHPUNCH" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[120] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "JSRUSHBG" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[121] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "JSRUSHKICK" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[122] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "StaticKick" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[126] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RunAttK" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[127] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "PowerBomb" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[128] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "LeapDownStrike" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[129] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "RSPINSTRIKE" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[130] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "SpinoutLeft" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[131] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "OverheadPinwheel" );
				Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Motion[132] = geActor_GetMotionByName(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorDef, "LeapDownFist" );

				Ange.X=-(PI/2);
				Ange.Y=PI;
				Ange.Z=0;

				geXForm3d_RotateX(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorXform, Ange.X);
				geXForm3d_RotateY(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorXform, Ange.Y);
				geXForm3d_RotateZ(&Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorXform, Ange.Z);
				geVec3d_Copy(&_->Origon, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorXform.Translation);

				//geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor,GE_true,&goup,255/((warp+1)/2),255/((warp+1)/2),255/((warp+1)/2),255/((warp+1)/2),255/((warp+1)/2),255/((warp+1)/2),GE_false,0,NULL,GE_true);
				geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor,GE_true,&goup,255,255,255,255,255,255,GE_false,0,NULL,GE_true);
				geActor_SetEnvironOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor, &ActorEnviro );

				geActor_ClearPose(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor, &Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].ActorXform);

				geActor_SetAlpha(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor, 255/(warp+1));

				if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.AngelCOLOURS.ANGELEDITFLAG == 1)
					{
					//##### ANGEL COLOUR EDIT
					K=0;
					while(K < 38)
						{
						geActor_GetMaterial(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
						geActor_SetMaterial(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Shadows[warp].Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.AngelCOLOURS.BLUE[K]);
						K++;
						}
					}
				}


		//#### Set Up Trail Flags
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[0][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[1][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[2][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[3][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[4][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[5][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[6][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[7][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[8][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[9][0] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[0][1] = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[1][1] = 1;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[2][1] = 2;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[3][1] = 3;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[4][1] = 4;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[5][1] = 5;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[6][1] = 6;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[7][1] = 7;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[8][1] = 8;
		Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].TrailFadeSpan[9][1] = 9;


		//####### ACTIVATE ITEM ATTRIBUTES
		//Q_ActivateItemsAI(Q_Netplayer->Netplayer[NetPID].LocalCONTROLID);

		//#### RESET SCALE AND LIGHTING
		geActor_SetScale(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
		//geActor_SetLightingOptions(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor,GE_true,&goup,200,200,200,190,145,100,GE_false,8,NULL,GE_true);

		if(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.AngelCOLOURS.ANGELEDITFLAG == 1)
			{
			//##### ANGEL COLOUR EDIT
			K=0;
			while(K < 38)
				{
				geActor_GetMaterial(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
				geActor_SetMaterial(Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].CharDATA.AngelCOLOURS.BLUE[K]);
				K++;
				}
			}

		//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA


		SCRAM = 0;
		while(SCRAM < 25)
			{
			//# Effect Type
			Q_HHSpike->HHSpike[_->NomSpikes].EffectType = 2;

			//## Speed
			Q_HHSpike->HHSpike[_->NomSpikes].Speed = 15;

			//### Width
			Q_HHSpike->HHSpike[_->NomSpikes].Width = 1;

			//#### Gravity
			Q_HHSpike->HHSpike[_->NomSpikes].Gravity = 0;

			//##### Alpha Level
			Q_HHSpike->HHSpike[_->NomSpikes].AlpFade = 0;
			Q_HHSpike->HHSpike[_->NomSpikes].FadeDir = 0;

			//###### Center Position
			Q_HHSpike->HHSpike[_->NomSpikes].CenterPos = Q_Forge->Forge[Q_Netplayer->Netplayer[NetPID].LocalCONTROLID].Avatar.ActorXform.Translation;
			Q_HHSpike->HHSpike[_->NomSpikes].CenterPos.Y += 53;
			Q_HHSpike->HHSpike[_->NomSpikes].FrontPos = Q_HHSpike->HHSpike[_->NomSpikes].CenterPos;
			Q_HHSpike->HHSpike[_->NomSpikes].TailPos = Q_HHSpike->HHSpike[_->NomSpikes].CenterPos;

			//####### Create Trajectory Vector From Random Numbers
			Q_HHSpike->HHSpike[_->NomSpikes].TraVec.X = (((float)rand() / 32767)-0.5)*2;
			Q_HHSpike->HHSpike[_->NomSpikes].TraVec.Y = (((float)rand() / 32767)-0.5)*2;
			Q_HHSpike->HHSpike[_->NomSpikes].TraVec.Z = (((float)rand() / 32767)-0.5)*2;

			//######## Set Timers
			Q_HHSpike->HHSpike[_->NomSpikes].Timer = 0;
			Q_HHSpike->HHSpike[_->NomSpikes].MoveTail = 0;

			//######### Make Live
			Q_HHSpike->HHSpike[_->NomSpikes].Live = 1;

			_->NomSpikes++;
			if(_->NomSpikes > 499) _->NomSpikes = 0;

			SCRAM++;
			}

		//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);

		//#### Small Energy Attacks
		warp=0;
		while(warp < 1)
			{
			SCRAM=0;
			while(SCRAM < 5)
				{
				egen3d_LoadActor(Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorXform, "Actors\\Renzou.act");

				Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Mins.X = -20.f;
				Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Mins.Y = -20.f;
				Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Mins.Z = -20.f;
				Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Maxs.X = 20.f;
				Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Maxs.Y = 20.f;
				Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Maxs.Z = 20.f;

				Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorDef = egen3d_FullAccess_ActorDef();
				Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Actor = egen3d_FullAccess_Actor();
				Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorXform = egen3d_FullAccess_ActorXform();

				geActor_SetScale(Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Actor, 0.1f,0.1f,0.1f);
				geWorld_AddActor(World, Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE , 0xffffffff);
				geVec3d_Copy(&Origin, &Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorXform.Translation);

				geActor_ClearPose(Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Actor, &Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorXform);
				NamePlateUpdate();
				SCRAM++;
				}

			Q_SEnergy->SEnergy[_->MaxNomSEnergy].Const_TurnDull = 2500;
			Q_SEnergy->SEnergy[_->MaxNomSEnergy].Const_AngleInc = 0.2;

			_->MaxNomSEnergy++;
			warp++;

			//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);
			}

		//Hadouken
		warp=0;
		while(warp < 1)
			{
			egen3d_LoadActor(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform, "Actors\\SpiritBomb.act");

			Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Mins.X = -20.f;
			Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Mins.Y = -20.f;
			Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Mins.Z = -20.f;
			Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Maxs.X = 20.f;
			Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Maxs.Y = 20.f;
			Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Maxs.Z = 20.f;

			Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorDef = egen3d_FullAccess_ActorDef();
			Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor = egen3d_FullAccess_Actor();
			Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform = egen3d_FullAccess_ActorXform();

			geActor_SetScale(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, 0.01f,0.01f,0.01f);
			geWorld_AddActor(World, Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0xffffffff);
			geActor_SetAlpha(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, 150);

			Ange.X=-(PI/2);
			geXForm3d_RotateX(&Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform, Ange.X);

			geActor_ClearPose(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, &Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform);
			geActor_SetLightingOptions(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, GE_false, &goup, 0, 0, 0, 255, 255, 255, GE_false, 0, NULL, GE_false);
			geVec3d_Copy(&_->Origon, &Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform.Translation);

			_->MaxNomLEnergy++;
			warp++;

			//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);
			}

	QNETWORKSendClientActorRef(Q_Netplayer->Netplayer[NetPID].ID, TIME);

	Q_Netplayer->Netplayer[NetPID].Spawned = 1;
	}


//###### SPAWN PLAYERS #######

void Q_SpawnAvatarAI(int AIcounter, int Team)
	{
	//########## Setup Multiplayer Avatars ##########

	//###### TEST AVATAR SELECT

	Q_Forge->Forge[AIcounter].LIVE = 1;
	Q_Forge->Forge[AIcounter].Avatar.upspeed = -15;
	Q_Forge->Forge[AIcounter].Avatar.ModelCounter = 0;
	Q_Forge->Forge[AIcounter].Avatar.Mins.X = -25.f;
	Q_Forge->Forge[AIcounter].Avatar.Mins.Y = -45.f;
	Q_Forge->Forge[AIcounter].Avatar.Mins.Z = -25.f;
	Q_Forge->Forge[AIcounter].Avatar.Maxs.X = 25.f;
	Q_Forge->Forge[AIcounter].Avatar.Maxs.Y = 45.f;
	Q_Forge->Forge[AIcounter].Avatar.Maxs.Z = 25.f;

	Q_Forge->Forge[AIcounter].PlayerSpeed = PLAYER_SPEED;

	//Fill Weapon Ammo
	Q_Forge->Forge[AIcounter].WeaponAmmo = 32;

	Q_Forge->Forge[AIcounter].HB_Illumination = 255;
	Q_Forge->Forge[AIcounter].HB_Dead = 0;

	Q_Forge->Forge[AIcounter].Q_Brain.Aggression = 70;

	Q_Forge->Forge[AIcounter].Role = 0;
	Q_Forge->Forge[AIcounter].Rank = 1;
	Q_Forge->Forge[AIcounter].LEVEL = Q_Forge->Forge[AIcounter].CharDATA.Level;

	//###### AVATAR SELECTION

	egen3d_LoadActor(Q_Forge->Forge[AIcounter].Avatar.ActorXform, Q_Forge->Forge[AIcounter].CharDATA.ActorREF);
	//egen3d_LoadActor(Q_Forge->Forge[AIcounter].Avatar.ActorXform, "Actors\\LisaVARI.act");
	Q_Forge->Forge[AIcounter].Avatar.ActorDef = egen3d_FullAccess_ActorDef();
	Q_Forge->Forge[AIcounter].Avatar.Actor = egen3d_FullAccess_Actor();
	Q_Forge->Forge[AIcounter].Avatar.ActorXform = egen3d_FullAccess_ActorXform();

	geActor_SetScale(Q_Forge->Forge[AIcounter].Avatar.Actor, Q_Forge->Forge[AIcounter].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[AIcounter].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[AIcounter].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
	Q_Forge->Forge[AIcounter].idlespeed = 0.1;

	if(Q_Forge->Forge[AIcounter].LEVEL > 1000) Q_Forge->Forge[AIcounter].LEVELFactor = 1;
	else Q_Forge->Forge[AIcounter].LEVELFactor = (((float)Q_Forge->Forge[AIcounter].LEVEL + 1) / 1000);


	Q_Forge->Forge[AIcounter].HB_MaxHealth = 500 * (((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Constitution/100)*0.6)+0.4);
	Q_Forge->Forge[AIcounter].HB_Health = Q_Forge->Forge[AIcounter].HB_MaxHealth;

	Q_Forge->Forge[AIcounter].HB_MaxEnergy = 500;
	Q_Forge->Forge[AIcounter].HB_Energy = Q_Forge->Forge[AIcounter].HB_MaxEnergy;

	Q_Forge->Forge[AIcounter].HB_Armour = ((float)(Q_Forge->Forge[AIcounter].CharDATA.ItemDATA[Q_Forge->Forge[AIcounter].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[AIcounter].CharDATA.ItemDATA[Q_Forge->Forge[AIcounter].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[AIcounter].CharDATA.ItemDATA[Q_Forge->Forge[AIcounter].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);
	Q_Forge->Forge[AIcounter].HB_MaxArmour = ((float)(Q_Forge->Forge[AIcounter].CharDATA.ItemDATA[Q_Forge->Forge[AIcounter].CharDATA.CurrHEADARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[AIcounter].CharDATA.ItemDATA[Q_Forge->Forge[AIcounter].CharDATA.CurrUPPERARMOUR].ArmourAMOUNT / 5000) * 250) + ((Q_Forge->Forge[AIcounter].CharDATA.ItemDATA[Q_Forge->Forge[AIcounter].CharDATA.CurrLOWERARMOUR].ArmourAMOUNT / 5000) * 250);

	Q_Forge->Forge[AIcounter].JINK3_PowerFactor = 1;

	Q_Forge->Forge[AIcounter].GravityAlter = 1;

	//ACTOR SETUP AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	//####### RELATIVE ATTACK SPEED
	Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.RELQuickness = 0.2 + (((float)Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Quickness / 100) * 0.8);

	//####### RELATIVE ENERGY EFFICIENCY
	Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.RELEnergyEff = 1 + ((float)Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.EnergyEff / 6000);


	geWorld_AddActor(World, Q_Forge->Forge[AIcounter].Avatar.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0x00000001);
	Q_Forge->Forge[AIcounter].Avatar.Actor->Visible = GE_true;

	//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);

	Q_Forge->Forge[AIcounter].Avatar.Motion[0] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Idle" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[1] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Walk" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[2] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Run" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[3] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Sidestep" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[4] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Jump" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[5] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LLPunch" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[6] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RLPunch" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[7] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RHPunch2" );	//RHPunch
	Q_Forge->Forge[AIcounter].Avatar.Motion[8] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RMKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[9] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LMPunch" );	//LSPunch needs a home
	Q_Forge->Forge[AIcounter].Avatar.Motion[10] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RMPunch" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[12] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "WalkL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[13] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "WalkR" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[14] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RunL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[15] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RunR" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[16] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "SidestepL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[17] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "SidestepR" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[18] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Renzou" );		//TODO: Combine these two
	Q_Forge->Forge[AIcounter].Avatar.Motion[19] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RenzouE" );		//TODO: Into one
	Q_Forge->Forge[AIcounter].Avatar.Motion[20] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RSPunch" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[21] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Uppercut" );	//Uppercut
	Q_Forge->Forge[AIcounter].Avatar.Motion[22] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HBlock" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[23] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Idle2" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[24] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RenzouR" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[25] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Weapon1" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[26] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RunWep1L" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[27] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RunWep1R" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[28] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "AimWep1" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[29] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "AXKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[30] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "SPKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[31] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JumpL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[32] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JumpR" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[33] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Cartwheel" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[34] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Weapon1UPP" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[35] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "AimWep1UPP" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[36] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "CartWep1" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[37] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Idle3" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[38] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RenzouL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[39] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HoldDash" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[40] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Knee" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[41] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JumpKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[42] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Wave" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[43] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HitStom" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[44] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HitUpper" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[45] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JumpSpiral" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[46] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "DodgeL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[47] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "FKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[48] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RunBack" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[53] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "FallHead" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[54] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RHKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[55] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "FlameUpperCut" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[56] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HBlockHit" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[57] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "BackFlip" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[58] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "WeaponReload" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[59] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "SpinKickFull" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[60] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Crouch" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[61] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "CrouchL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[62] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "CrouchR" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[67] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "VHKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[68] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Entro" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[69] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "TwinDragon1" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[70] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "TwinDragon2" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[71] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Golrekka" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[72] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "SkyPush" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[73] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Lowtro" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[74] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Lowkick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[75] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Legsweep" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[76] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Crunch" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[77] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Hitwall" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[78] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "AttFlip" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[79] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RunAttP" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[80] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LowPunchL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[81] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LowPunchR" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[82] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LBlock" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[83] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LBlockHit" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[84] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Hadouken" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[85] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HadoukenAir" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[86] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "AirDash" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[87] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HoverKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[88] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RollF" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[89] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Taunt1" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[90] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Sakurat" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[91] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "BrollyT" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[92] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "PCombo1" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[93] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "SpiralDown" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[94] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JumpSpiralOver" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[95] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JumpSmall" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[96] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "TwistKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[97] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "BackFLipAtt" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[98] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Deflect" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[99] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JumpSmallL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[100] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JumpSmallR" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[101] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "PCombo2" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[102] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RushElbow" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[103] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HoldBarge" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[104] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "DoubleStrike" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[105] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LowLunge" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[106] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "SideChop" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[107] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "SpinChop" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[108] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RollLowL" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[109] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RollLowR" );
	//VEHICLE MOTIONS UNUSED
	//Q_Forge->Forge[AIcounter].Avatar.Motion[110] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "BikeMount" );
	//Q_Forge->Forge[AIcounter].Avatar.Motion[111] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "BikeRush" );
	//Q_Forge->Forge[AIcounter].Avatar.Motion[112] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "BikeWheelie" );
	//Q_Forge->Forge[AIcounter].Avatar.Motion[113] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "BikeIdle" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[114] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RenzouP" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[115] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RenzouPR" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[116] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "AttFlipE" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[117] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HandSlap" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[118] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JSRUSH" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[119] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JSRUSHPUNCH" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[120] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JSRUSHBG" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[121] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "JSRUSHKICK" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[122] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "StaticKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[123] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RunAttK" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[124] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RDoubleKick" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[125] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "WeaponReloadUPP" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[126] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RunAttK" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[127] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "PowerBomb" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[128] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LeapDownStrike" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[129] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "RSPINSTRIKE" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[130] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "SpinoutLeft" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[131] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "OverheadPinwheel" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[132] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LeapDownFist" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[140] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "LookRight" );

	if(Q_Forge->Forge[AIcounter].CharDATA.Class == 2)
		{
		Q_Forge->Forge[AIcounter].Avatar.Motion[63] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Glance" );
		Q_Forge->Forge[AIcounter].Avatar.Motion[65] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "HealUPP" );
		Q_Forge->Forge[AIcounter].Avatar.Motion[66] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Heal" );
		}

	Q_Forge->Forge[AIcounter].Avatar.Motion[133] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Weapon2" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[134] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "Weapon2UPP" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[135] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "AimWep2" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[136] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "AimWep2UPP" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[137] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "WeaponReload2" );
	Q_Forge->Forge[AIcounter].Avatar.Motion[138] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Avatar.ActorDef, "WeaponReload2UPP" );

	//##### ATTENTION REQUIRED
	//geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Avatar.Actor,GE_true,&goup,230,200,200,230,175,155,GE_false,8,NULL,GE_true);
	geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Avatar.Actor,GE_true,&goup,200,200,200,190,145,100,GE_false,8,NULL,GE_true);

	//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);

	//Lighting
	/*if(Q_AvatarEntity->AvatarEntity[AIcounter].Team == 0)	//Friendly AI
		{
		if(Q_AvatarEntity->AvatarEntity[AIcounter].Type == 0)	geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Avatar.Actor,GE_true,&goup,200,200,200,190,145,100,GE_false,8,NULL,GE_true);
		if(Q_AvatarEntity->AvatarEntity[AIcounter].Type == 1)	geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Avatar.Actor,GE_true,&goup,230,200,200,230,175,155,GE_false,8,NULL,GE_true);
		if(Q_AvatarEntity->AvatarEntity[AIcounter].Type == 2)	geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Avatar.Actor,GE_true,&goup,230,200,200,230,175,155,GE_false,8,NULL,GE_true);
		}

	if(Q_AvatarEntity->AvatarEntity[AIcounter].Team == 1)	//Enemy AI
		{
		if(Q_AvatarEntity->AvatarEntity[AIcounter].Type == 0) 
			{
			//geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Avatar.Actor,GE_true,&poop,255,180,180,220,220,220,GE_false,8,NULL,GE_true);
			geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Avatar.Actor,GE_true,&goup,200,200,200,190,145,100,GE_false,8,NULL,GE_true);
			}
		}*/

	//Shadows
	//geActor_SetShadow(Q_Forge->Forge[AIcounter].Avatar.Actor,GE_true,30.0,shadow,NULL);

	//Starting Rotation
	Ange.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].Ang.Y + (PI);
	if(Ange.Y>(2*PI)) Ange.Y = Ange.Y - (PI*2);

	Ange.X=-(PI/2);
	Ange.Z=0;

	// Set the actor's angle
	geXForm3d_RotateX(&Q_Forge->Forge[AIcounter].Avatar.ActorXform, Ange.X);		//Update Avatar's starting facing direction
	geXForm3d_RotateY(&Q_Forge->Forge[AIcounter].Avatar.ActorXform, Ange.Y);
	geXForm3d_RotateZ(&Q_Forge->Forge[AIcounter].Avatar.ActorXform, Ange.Z);

	Q_Forge->Forge[AIcounter].Angles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].Ang.Y;
	Q_Forge->Forge[AIcounter].trueAngles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].Ang.Y;
	Q_Forge->Forge[AIcounter].STOREAngles.Y = Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].Ang.Y;


	//ATTENTION START POINT CONTROL	***********************************************

	geXForm3d_GetIn(&Q_Forge->Forge[AIcounter].Avatar.ActorXform,&Q_Forge->Forge[AIcounter].In);

	Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].TempVec.X = 0;
	Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].TempVec.Y = 1;
	Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].TempVec.Z = 0;

	geVec3d_CrossProduct(&Q_Forge->Forge[AIcounter].In, &Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].TempVec, &Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].VecRight);
	geVec3d_Normalize(&Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].VecRight);

	Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].Push += 40;
	if(Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].Push > 300) Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].Push = 0;

	geVec3d_MA(&Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].Pos, Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].Push, &Q_StartPoints->StartPoints[Q_Forge->Forge[AIcounter].Team].VecRight, &Q_Forge->Forge[AIcounter].Avatar.ActorXform.Translation);

	//###### Set the actor to its position
	geVec3d_Copy(&Q_Forge->Forge[AIcounter].Avatar.ActorXform.Translation, &Q_Forge->Forge[AIcounter].ORIGSTARTPOINT);

	//*****************************************************************************


	geActor_ClearPose(Q_Forge->Forge[AIcounter].Avatar.Actor, &Q_Forge->Forge[AIcounter].Avatar.ActorXform);


	Q_Forge->Forge[AIcounter].Extenbox.Min.X = Q_Forge->Forge[AIcounter].Avatar.Mins.X;
	Q_Forge->Forge[AIcounter].Extenbox.Min.Y = Q_Forge->Forge[AIcounter].Avatar.Mins.Y;
	Q_Forge->Forge[AIcounter].Extenbox.Min.Z = Q_Forge->Forge[AIcounter].Avatar.Mins.Z;
	Q_Forge->Forge[AIcounter].Extenbox.Max.X = Q_Forge->Forge[AIcounter].Avatar.Maxs.X;
	Q_Forge->Forge[AIcounter].Extenbox.Max.Y = Q_Forge->Forge[AIcounter].Avatar.Maxs.Y;
	Q_Forge->Forge[AIcounter].Extenbox.Max.Z = Q_Forge->Forge[AIcounter].Avatar.Maxs.Z;
	
	geActor_SetExtBox(Q_Forge->Forge[AIcounter].Avatar.Actor, &Q_Forge->Forge[AIcounter].Extenbox, "BIP01");

	// Get body of actor
	//LisaBody = geActor_GetBody(Q_Forge->Forge[AIcounter].Avatar.ActorDef);

	geActor_SetEnvironOptions(Q_Forge->Forge[AIcounter].Avatar.Actor, &ActorEnviro );

	geActor_SetStaticLightingOptions( Q_Forge->Forge[AIcounter].Avatar.Actor, GE_true, GE_true, 10 );

	Q_Forge->Forge[AIcounter].STOREMatrix = Q_Forge->Forge[AIcounter].Avatar.ActorXform;
	geVec3d_Copy(&Origin, &Q_Forge->Forge[AIcounter].STOREMatrix.Translation);

	Q_Forge->Forge[AIcounter].Avatar.Actor->IDflag = AIcounter;

	Q_Forge->Forge[AIcounter].WeaponAimer = 1.7;

	//### Load Avatar Weapon

	if(1)
		{
		egen3d_LoadActor(Q_Forge->Forge[AIcounter].Weapon.ActorXform, Q_Forge->Forge[AIcounter].CharDATA.ItemDATA[Q_Forge->Forge[AIcounter].CharDATA.CurrWEAPON].ItemActorREF);
		//egen3d_LoadActor(Q_Forge->Forge[AIcounter].Weapon.ActorXform, "Actors\\w_sg5520.act");

		Q_Forge->Forge[AIcounter].Weapon.Mins.X = -20.f;
		Q_Forge->Forge[AIcounter].Weapon.Mins.Y = -20.f;
		Q_Forge->Forge[AIcounter].Weapon.Mins.Z = -20.f;
		Q_Forge->Forge[AIcounter].Weapon.Maxs.X = 20.f;
		Q_Forge->Forge[AIcounter].Weapon.Maxs.Y = 20.f;
		Q_Forge->Forge[AIcounter].Weapon.Maxs.Z = 20.f;

		Q_Forge->Forge[AIcounter].Weapon.ActorDef = egen3d_FullAccess_ActorDef();
		Q_Forge->Forge[AIcounter].Weapon.Actor = egen3d_FullAccess_Actor();
		Q_Forge->Forge[AIcounter].Weapon.ActorXform = egen3d_FullAccess_ActorXform();

		geActor_SetScale(Q_Forge->Forge[AIcounter].Weapon.Actor, 1.2 + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Height/100)-0.5)*2)), 1.2 + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Weight/100)-0.5)*2)), 1.2 + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Weight/100)-0.5)*2)));
		geWorld_AddActor(World, Q_Forge->Forge[AIcounter].Weapon.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0xffffffff);
		Q_Forge->Forge[AIcounter].Weapon.Actor->Visible = GE_true;

		//Poser.X=400;
		//Poser.Y=-150;		//Create Weapon Rack Somewhere
		//Poser.Z=-0;

		Ange.X=-(PI/2);
		Ange.Y=PI;
		Ange.Z=0;

		geXForm3d_RotateX(&Q_Forge->Forge[AIcounter].Weapon.ActorXform, Ange.X);
		geXForm3d_RotateY(&Q_Forge->Forge[AIcounter].Weapon.ActorXform, Ange.Y);
		geXForm3d_RotateZ(&Q_Forge->Forge[AIcounter].Weapon.ActorXform, Ange.Z);
		geVec3d_Copy(&_->Origon, &Q_Forge->Forge[AIcounter].Weapon.ActorXform.Translation);

		geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Weapon.Actor,GE_true,&goup,255,255,255,170,170,170,GE_false,0,NULL,GE_true);
		geActor_ClearPose(Q_Forge->Forge[AIcounter].Weapon.Actor, &Q_Forge->Forge[AIcounter].Weapon.ActorXform);

		geActor_SetAlpha(Q_Forge->Forge[AIcounter].Weapon.Actor, 0);
		}

	//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);

	if(Q_Forge->Forge[AIcounter].CharDATA.Class == 2)
		{
		Q_Forge->Forge[AIcounter].Shield.Mins.X = -500.f;
		Q_Forge->Forge[AIcounter].Shield.Mins.Y = -500.f;
		Q_Forge->Forge[AIcounter].Shield.Mins.Z = -500.f;
		Q_Forge->Forge[AIcounter].Shield.Maxs.X = 500.f;
		Q_Forge->Forge[AIcounter].Shield.Maxs.Y = 500.f;
		Q_Forge->Forge[AIcounter].Shield.Maxs.Z = 500.f;

		egen3d_LoadActor(Q_Forge->Forge[AIcounter].Shield.ActorXform, "Actors\\ShockWave.act");
		Q_Forge->Forge[AIcounter].Shield.ActorDef = egen3d_FullAccess_ActorDef();
		Q_Forge->Forge[AIcounter].Shield.Actor = egen3d_FullAccess_Actor();
		Q_Forge->Forge[AIcounter].Shield.ActorXform = egen3d_FullAccess_ActorXform();

		geActor_SetScale(Q_Forge->Forge[AIcounter].Shield.Actor, 0.65f,0.65f,0.65f);
		geWorld_AddActor(World, Q_Forge->Forge[AIcounter].Shield.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0x00000001);
		geActor_SetAlpha(Q_Forge->Forge[AIcounter].Shield.Actor, 40);

		fogbox.Min.X = Q_Forge->Forge[AIcounter].Shield.Mins.X;
		fogbox.Min.Y = Q_Forge->Forge[AIcounter].Shield.Mins.Y;
		fogbox.Min.Z = Q_Forge->Forge[AIcounter].Shield.Mins.Z;
		fogbox.Max.X = Q_Forge->Forge[AIcounter].Shield.Maxs.X;
		fogbox.Max.Y = Q_Forge->Forge[AIcounter].Shield.Maxs.Y;
		fogbox.Max.Z = Q_Forge->Forge[AIcounter].Shield.Maxs.Z;

		geActor_ClearPose(Q_Forge->Forge[AIcounter].Shield.Actor, &Q_Forge->Forge[AIcounter].Shield.ActorXform);
		geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Shield.Actor, GE_false, &goup, 0, 0, 0, 255, 255, 255, GE_false, 0, NULL, GE_false);
		geVec3d_Copy(&_->Origon, &Q_Forge->Forge[AIcounter].Shield.ActorXform.Translation);
		
		geActor_SetExtBox(Q_Forge->Forge[AIcounter].Shield.Actor, &fogbox, NULL);

		Q_Forge->Forge[AIcounter].Shield.Actor->IDflag = 251;
		}

	//### Load Fighter Shadows

	Q_Forge->Forge[AIcounter].ShadowsOn = GE_false;

	Q_Forge->Forge[AIcounter].ShadowALPHA = 240;

	//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);


	warp = 0;
	while(warp <= 2)
		{
		warp++;

		egen3d_LoadActor(Q_Forge->Forge[AIcounter].Shadows[warp].ActorXform, Q_Forge->Forge[AIcounter].CharDATA.ShadowREF);
		//egen3d_LoadActor(Q_Forge->Forge[AIcounter].Shadows[warp].ActorXform, "Actors\\LisaVARS.act");

		Q_Forge->Forge[AIcounter].Shadows[warp].Mins.X = -20.f;
		Q_Forge->Forge[AIcounter].Shadows[warp].Mins.Y = -20.f;
		Q_Forge->Forge[AIcounter].Shadows[warp].Mins.Z = -20.f;
		Q_Forge->Forge[AIcounter].Shadows[warp].Maxs.X = 20.f;
		Q_Forge->Forge[AIcounter].Shadows[warp].Maxs.Y = 20.f;
		Q_Forge->Forge[AIcounter].Shadows[warp].Maxs.Z = 20.f;

		Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef = egen3d_FullAccess_ActorDef();
		Q_Forge->Forge[AIcounter].Shadows[warp].Actor = egen3d_FullAccess_Actor();
		Q_Forge->Forge[AIcounter].Shadows[warp].ActorXform = egen3d_FullAccess_ActorXform();

		geActor_SetScale(Q_Forge->Forge[AIcounter].Shadows[warp].Actor, Q_Forge->Forge[AIcounter].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[AIcounter].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[AIcounter].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

		geWorld_AddActor(World, Q_Forge->Forge[AIcounter].Shadows[warp].Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0xffffffff);
		Q_Forge->Forge[AIcounter].Shadows[warp].Actor->Visible = GE_true;

		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[0] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Idle" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[1] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Walk" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[2] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Run" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[3] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Sidestep" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[4] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Jump" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[5] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "LLPunch" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[6] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RLPunch" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[7] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RHPunch2" );	//RHPunch
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[8] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RMKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[9] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "LMPunch" );	//LSPunch needs a home
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[10] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RMPunch" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[11] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "LLPunchA" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[12] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "WalkL" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[13] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "WalkR" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[14] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RunL" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[15] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RunR" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[16] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "SidestepL" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[17] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "SidestepR" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[18] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Renzou" );		//TODO: Combine these two
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[19] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RenzouE" );		//TODO: Into one
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[20] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RSPunch" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[21] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Uppercut" );	//Uppercut
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[22] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "HBlock" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[23] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Idle2" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[24] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RenzouR" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[25] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Weapon1" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[26] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RunWep1L" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[27] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RunWep1R" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[28] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "AimWep1" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[29] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "AXKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[30] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "SPKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[31] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "JumpL" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[32] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "JumpR" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[33] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Cartwheel" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[34] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Weapon1UPP" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[35] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "AimWep1UPP" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[36] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "CartWep1" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[37] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Idle3" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[38] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RenzouL" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[39] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "HoldDash" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[40] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Knee" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[41] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "JumpKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[42] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Wave" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[43] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "HitStom" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[44] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "HitUpper" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[45] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "JumpSpiral" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[46] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "DodgeL" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[47] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "FKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[48] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "AirJink" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[49] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RunBack" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[50] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "AirRushFront" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[51] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "HitStorm" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[52] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RapidKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[53] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "FallHead" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[54] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RHKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[55] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "FlameUpperCut" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[56] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "HBlockHit" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[57] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "BackFlip" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[58] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "WeaponReload" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[59] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "SpinKickFull" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[60] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Crouch" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[61] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "CrouchL" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[62] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "CrouchR" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[63] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "LLPunchUPP" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[64] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RLPunchUPP" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[65] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "LMPunchUPP" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[66] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "LMKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[67] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "VHKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[71] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Golrekka" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[72] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "SkyPush" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[76] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Crunch" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[77] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Hitwall" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[78] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "AttFlip" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[84] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Hadouken" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[85] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "HadoukenAir" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[86] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "AirDash" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[87] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "HoverKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[88] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RollF" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[90] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "Sakurat" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[91] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "BrollyT" );
		//Q_Forge->Forge[AIcounter].Shadows[warp].Motion[92] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "PCombo1" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[96] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "TwistKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[101] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "PCombo2" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[102] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "RushElbow" );

		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[118] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "JSRUSH" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[119] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "JSRUSHPUNCH" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[120] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "JSRUSHBG" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[121] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "JSRUSHKICK" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[122] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "StaticKick" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[127] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "PowerBomb" );

		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[128] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "LeapDownStrike" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[129] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "CartwheelAtt" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[130] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "SpinoutLeft" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[131] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "OverheadPinwheel" );
		Q_Forge->Forge[AIcounter].Shadows[warp].Motion[132] = geActor_GetMotionByName(Q_Forge->Forge[AIcounter].Shadows[warp].ActorDef, "LeapDownFist" );

		Ange.X=-(PI/2);
		Ange.Y=PI;
		Ange.Z=0;

		geXForm3d_RotateX(&Q_Forge->Forge[AIcounter].Shadows[warp].ActorXform, Ange.X);
		geXForm3d_RotateY(&Q_Forge->Forge[AIcounter].Shadows[warp].ActorXform, Ange.Y);
		geXForm3d_RotateZ(&Q_Forge->Forge[AIcounter].Shadows[warp].ActorXform, Ange.Z);
		geVec3d_Copy(&_->Origon, &Q_Forge->Forge[AIcounter].Shadows[warp].ActorXform.Translation);

		//geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Shadows[warp].Actor,GE_true,&goup,255/((warp+1)/2),255/((warp+1)/2),255/((warp+1)/2),255/((warp+1)/2),255/((warp+1)/2),255/((warp+1)/2),GE_false,0,NULL,GE_true);
		geActor_SetLightingOptions(Q_Forge->Forge[AIcounter].Shadows[warp].Actor,GE_true,&goup,255,255,255,255,255,255,GE_false,0,NULL,GE_true);
		geActor_SetEnvironOptions(Q_Forge->Forge[AIcounter].Shadows[warp].Actor, &ActorEnviro );

		geActor_ClearPose(Q_Forge->Forge[AIcounter].Shadows[warp].Actor, &Q_Forge->Forge[AIcounter].Shadows[warp].ActorXform);

		//geActor_SetAlpha(Q_Forge->Forge[AIcounter].Shadows[warp].Actor, 150/(warp+1));
		geActor_SetAlpha(Q_Forge->Forge[AIcounter].Shadows[warp].Actor, 255/(warp+1));

		Q_Forge->Forge[AIcounter].Shadows[warp].Actor->IDflag = AIcounter;

		if(Q_Forge->Forge[AIcounter].CharDATA.AngelCOLOURS.ANGELEDITFLAG == 1)
			{
			//##### ANGEL COLOUR EDIT
			K=0;
			while(K < 38)
				{
				geActor_GetMaterial(Q_Forge->Forge[AIcounter].Shadows[warp].Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
				geActor_SetMaterial(Q_Forge->Forge[AIcounter].Shadows[warp].Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[AIcounter].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[AIcounter].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[AIcounter].CharDATA.AngelCOLOURS.BLUE[K]);
				K++;
				}
			}
		}

	//#### Set Up Trail Flags
	Q_Forge->Forge[AIcounter].TrailFadeSpan[0][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[1][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[2][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[3][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[4][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[5][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[6][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[7][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[8][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[9][0] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[0][1] = 0;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[1][1] = 1;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[2][1] = 2;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[3][1] = 3;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[4][1] = 4;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[5][1] = 5;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[6][1] = 6;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[7][1] = 7;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[8][1] = 8;
	Q_Forge->Forge[AIcounter].TrailFadeSpan[9][1] = 9;

	//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	NamePlateUpdate();

	//####### ACTIVATE ITEM ATTRIBUTES
	Q_ActivateItemsAI(AIcounter);

	//#### RESET SCALE AND LIGHTING
	geActor_SetScale(Q_Forge->Forge[AIcounter].Avatar.Actor, Q_Forge->Forge[AIcounter].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Height/100)-0.5)*2)), Q_Forge->Forge[AIcounter].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Weight/100)-0.5)*2)),Q_Forge->Forge[AIcounter].CharDATA.ActorSCALE + (0.16*(((Q_Forge->Forge[AIcounter].CharDATA.BodySKILL.Weight/100)-0.5)*2)));

	NamePlateUpdate();

	if(Q_Forge->Forge[AIcounter].CharDATA.AngelCOLOURS.ANGELEDITFLAG == 1)
		{
		//##### ANGEL COLOUR EDIT
		K=0;
		while(K < 38)
			{
			geActor_GetMaterial(Q_Forge->Forge[AIcounter].Avatar.Actor, K, &Medias->ANGELeditBitmap, &_->ANGELeditBitmapRed, &_->ANGELeditBitmapGreen, &_->ANGELeditBitmapBlue);
			geActor_SetMaterial(Q_Forge->Forge[AIcounter].Avatar.Actor, K, Medias->ANGELeditBitmap, Q_Forge->Forge[AIcounter].CharDATA.AngelCOLOURS.RED[K], Q_Forge->Forge[AIcounter].CharDATA.AngelCOLOURS.GREEN[K], Q_Forge->Forge[AIcounter].CharDATA.AngelCOLOURS.BLUE[K]);
			K++;
			}
		}

	//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	SCRAM = 0;
	while(SCRAM < 25)
		{
		//# Effect Type
		Q_HHSpike->HHSpike[_->NomSpikes].EffectType = 2;

		//## Speed
		Q_HHSpike->HHSpike[_->NomSpikes].Speed = 15;

		//### Width
		Q_HHSpike->HHSpike[_->NomSpikes].Width = 1;

		//#### Gravity
		Q_HHSpike->HHSpike[_->NomSpikes].Gravity = 0;

		//##### Alpha Level
		Q_HHSpike->HHSpike[_->NomSpikes].AlpFade = 0;
		Q_HHSpike->HHSpike[_->NomSpikes].FadeDir = 0;

		//###### Center Position
		Q_HHSpike->HHSpike[_->NomSpikes].CenterPos = Q_Forge->Forge[AIcounter].Avatar.ActorXform.Translation;
		Q_HHSpike->HHSpike[_->NomSpikes].CenterPos.Y += 53;
		Q_HHSpike->HHSpike[_->NomSpikes].FrontPos = Q_HHSpike->HHSpike[_->NomSpikes].CenterPos;
		Q_HHSpike->HHSpike[_->NomSpikes].TailPos = Q_HHSpike->HHSpike[_->NomSpikes].CenterPos;

		//####### Create Trajectory Vector From Random Numbers
		Q_HHSpike->HHSpike[_->NomSpikes].TraVec.X = (((float)rand() / 32767)-0.5)*2;
		Q_HHSpike->HHSpike[_->NomSpikes].TraVec.Y = (((float)rand() / 32767)-0.5)*2;
		Q_HHSpike->HHSpike[_->NomSpikes].TraVec.Z = (((float)rand() / 32767)-0.5)*2;

		//######## Set Timers
		Q_HHSpike->HHSpike[_->NomSpikes].Timer = 0;
		Q_HHSpike->HHSpike[_->NomSpikes].MoveTail = 0;

		//######### Make Live
		Q_HHSpike->HHSpike[_->NomSpikes].Live = 1;

		_->NomSpikes++;
		if(_->NomSpikes > 499) _->NomSpikes = 0;

		SCRAM++;
		}

	//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);

	//#### Small Energy Attacks
	warp=0;
	while(warp < 2)
		{
		SCRAM=0;
		while(SCRAM < 5)
			{
			egen3d_LoadActor(Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorXform, "Actors\\Renzou.act");

			Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Mins.X = -20.f;
			Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Mins.Y = -20.f;
			Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Mins.Z = -20.f;
			Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Maxs.X = 20.f;
			Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Maxs.Y = 20.f;
			Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Maxs.Z = 20.f;

			Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorDef = egen3d_FullAccess_ActorDef();
			Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Actor = egen3d_FullAccess_Actor();
			Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorXform = egen3d_FullAccess_ActorXform();

			geActor_SetScale(Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Actor, 0.1f,0.1f,0.1f);
			geWorld_AddActor(World, Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE , 0xffffffff);
			geVec3d_Copy(&Origin, &Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorXform.Translation);

			geActor_ClearPose(Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].Actor, &Q_SEnergy->SEnergy[_->MaxNomSEnergy].ActorFlag[SCRAM].ActorXform);
			NamePlateUpdate();
			SCRAM++;
			}

		Q_SEnergy->SEnergy[_->MaxNomSEnergy].Const_TurnDull = 2500;
		Q_SEnergy->SEnergy[_->MaxNomSEnergy].Const_AngleInc = 0.2;

		_->MaxNomSEnergy++;
		warp++;

		//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);
		}

	//Hadouken
	warp=0;
	while(warp < 2)
		{
		egen3d_LoadActor(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform, "Actors\\SpiritBomb.act");

		Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Mins.X = -20.f;
		Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Mins.Y = -20.f;
		Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Mins.Z = -20.f;
		Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Maxs.X = 20.f;
		Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Maxs.Y = 20.f;
		Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Maxs.Z = 20.f;

		Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorDef = egen3d_FullAccess_ActorDef();
		Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor = egen3d_FullAccess_Actor();
		Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform = egen3d_FullAccess_ActorXform();

		geActor_SetScale(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, 0.01f,0.01f,0.01f);
		geWorld_AddActor(World, Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, GE_ACTOR_RENDER_ALWAYS | GE_ACTOR_COLLIDE, 0xffffffff);
		geActor_SetAlpha(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, 150);

		Ange.X=-(PI/2);
		geXForm3d_RotateX(&Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform, Ange.X);

		geActor_ClearPose(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, &Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform);
		geActor_SetLightingOptions(Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.Actor, GE_false, &goup, 0, 0, 0, 255, 255, 255, GE_false, 0, NULL, GE_false);
		geVec3d_Copy(&_->Origon, &Q_LEnergy->LEnergy[_->MaxNomLEnergy].EnergyBall.ActorXform.Translation);

		_->MaxNomLEnergy++;
		warp++;

		//if(_->NetworkOption == 1) QNETWORKClientHALFFrame(QHost.Client,Time);
		}

	if(AIcounter >= _->NomAI) _->NomAI++;
	}


geBoolean QNETWORKSendClientActorRef(geCSNetMgr_NetID NID, float Time)
{
	uint8			Data[512];

	Buffer_Set(&QHost.NMgr->ServerToClientBuffer, Data, 512);

	//#########  - FILL SEND BUFFER -  #########

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, NETMGR_MSG_CLIENT_ACTOR_REF);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Time);							// Current Time
	

	//### Find Q_Netplayer->Netplayer ID
	helly=0;
	while(Q_Netplayer->Netplayer[helly].ID != NID)
		{ helly++; }

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, Q_Netplayer->Netplayer[helly].LocalCONTROLID);


	if (!geCSNetMgr_SendToClient(QHost.NMgr->CSNetMgr, NID, GE_true, QHost.NMgr->ServerToClientBuffer.Data, QHost.NMgr->ServerToClientBuffer.Pos))
		return GE_false;

	return GE_true;
}


geBoolean QNETWORKSendServerActivation(void)	//Send Code to activate Q_Netplayer->Netplayer
{
	uint8			Data[512];

	Buffer_Set(&QHost.NMgr->ClientToServerBuffer, Data, 512);

	//#########  - FILL SEND BUFFER -  #########

	Buffer_FillByte(&QHost.NMgr->ClientToServerBuffer, NETMGR_MSG_CLIENT_ACTIVATION);
	Buffer_FillFloat(&QHost.NMgr->ClientToServerBuffer, Time);							// Current Time

	if (!geCSNetMgr_SendToServer(QHost.NMgr->CSNetMgr, GE_false, QHost.NMgr->ClientToServerBuffer.Data, QHost.NMgr->ClientToServerBuffer.Pos))
		return GE_false;

	return GE_true;
}


static void QNETWORKReceiveClientActivation(Server_Server *Server, Buffer_Data *Buffer, Server_Client *Client, float Time)
{
	float		DeltaTime, MoveTime;
	geVec3d		Origin = {0.0f, 0.0f, 0.0f};
	uint16		ButtonBits;


	Buffer_GetFloat(Buffer, &Time);

	helly=0;
	while(Q_Netplayer->Netplayer[helly].ID != Client->NetID)
		{ helly++; }

	//### Activate Client ###
	Q_Netplayer->Netplayer[helly].Activated++;
}


geBoolean QNETWORKSendClientDisconnect(geCSNetMgr_NetID NID, float Time, uint8 NetplayID)
{
	uint8			Data[512];

	Buffer_Set(&QHost.NMgr->ServerToClientBuffer, Data, 512);

	//#########  - FILL SEND BUFFER -  #########

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, NETMGR_MSG_DISCONNECT_CLIENT);
	Buffer_FillFloat(&QHost.NMgr->ServerToClientBuffer, Time);							// Current Time
	

	//### Find Q_Netplayer->Netplayer ID
	helly=0;
	while(Q_Netplayer->Netplayer[helly].ID != NID)
		{ helly++; }

	Buffer_FillByte(&QHost.NMgr->ServerToClientBuffer, NetplayID);


	if (!geCSNetMgr_SendToClient(QHost.NMgr->CSNetMgr, NID, GE_true, QHost.NMgr->ServerToClientBuffer.Data, QHost.NMgr->ServerToClientBuffer.Pos))
		return GE_false;

	return GE_true;
}


//=====================================================================================
//	Receive From Server the client Actor Ref
//=====================================================================================
static void QNETWORKReceiveClientActorRef(Buffer_Data *Buffer, float Time)
{
	float		DeltaTime, MoveTime;
	geVec3d		Origin = {0.0f, 0.0f, 0.0f};
	uint16		ButtonBits;


	Buffer_GetFloat(Buffer, &Time);
	
	//###### PREPARE Player Update  #####

	Buffer_GetByte(Buffer, &player[g_Player]->NetUPDATE.ServerCONTROLID);

	player[g_Player]->NetUPDATE.ReceivedIdFlag = 1;
}


//=====================================================================================
//	Receive From Server the Disconnected Client
//=====================================================================================
static void QNETWORKReceiveDisconnectClient(Buffer_Data *Buffer, float Time)
{
	float		DeltaTime, MoveTime;
	geVec3d		Origin = {0.0f, 0.0f, 0.0f};
	uint16		ButtonBits;
	uint8		DisconID;


	Buffer_GetFloat(Buffer, &Time);
	
	//###### PREPARE Player Update  #####

	Buffer_GetByte(Buffer, &DisconID);

	
		//###### -  REMOVE AND DESTROY ACTORS  - ######
	if(Q_Netplayer->Netplayer[DisconID].Spawned > 0)
		{
		Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].NetplayerFLAG = 0;
		Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].LIVE = 0;
		
		geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Avatar.Actor);
		geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Weapon.Actor);
		geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Shadows[1].Actor);
		geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Shadows[2].Actor);
		geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Shadows[3].Actor);

		geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Avatar.Actor);
		geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Weapon.Actor);
		geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Shadows[1].Actor);
		geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Shadows[2].Actor);
		geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Shadows[3].Actor);

		//##### Destroy Small Energy Actors
		jet = 0;
		aero = _->MaxNomSEnergy - 1;
		while((aero >= 0) && (jet < 2))
			{
			if(Q_SEnergy->SEnergy[aero].Live == 0)
				{
				//### Destroy Actors
				SCRAM=0;
				while(SCRAM < 5)
					{
					geWorld_RemoveActor(World, Q_SEnergy->SEnergy[aero].ActorFlag[SCRAM].Actor);
					geActor_Destroy(&Q_SEnergy->SEnergy[aero].ActorFlag[SCRAM].Actor);
					SCRAM++;
					}

				//### Increment Destruction Counter
				jet++;

				//### Reorder Array
				K = aero;
				while(K < _->MaxNomSEnergy - 1)
					{
					Q_SEnergy->SEnergy[K] = Q_SEnergy->SEnergy[K+1];
					K++;
					}
				_->MaxNomSEnergy--;
				}
			aero--;
			}

		//##### Destroy Large Energy Actors
		jet = 0;
		aero = _->MaxNomLEnergy - 1;
		while((aero >= 0) && (jet < 2))
			{
			if(Q_LEnergy->LEnergy[aero].Live == 0)
				{
				//### Destroy Actors
				geWorld_RemoveActor(World, Q_LEnergy->LEnergy[aero].EnergyBall.Actor);
				geActor_Destroy(&Q_LEnergy->LEnergy[aero].EnergyBall.Actor);

				//### Increment Destruction Counter
				jet++;

				//### Reorder Array
				K = aero;
				while(K < _->MaxNomLEnergy - 1)
					{
					Q_LEnergy->LEnergy[K] = Q_LEnergy->LEnergy[K+1];
					K++;
					}
				_->MaxNomLEnergy--;
				}
			aero--;
			}

		//#### Avatar Destruction effect
		jet=0;
		while((jet < 25) && (_->NomPntSprite < 24999))
			{
			Q_PntSprite->PntSprite[_->NomPntSprite].Type = GE_TEXTURED_POINT;
			Q_PntSprite->PntSprite[_->NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
			Q_PntSprite->PntSprite[_->NomPntSprite].Scale = 0.1f;		//0.025f//0.002f
			Q_PntSprite->PntSprite[_->NomPntSprite].PartType = 11;

			Q_PntSprite->PntSprite[_->NomPntSprite].IR = 0;
			Q_PntSprite->PntSprite[_->NomPntSprite].IG = 0;
			Q_PntSprite->PntSprite[_->NomPntSprite].IB = 0;

			Q_PntSprite->PntSprite[_->NomPntSprite].Alpha = 255;
			Q_PntSprite->PntSprite[_->NomPntSprite].Speed = 2;
			Q_PntSprite->PntSprite[_->NomPntSprite].Pos = Q_Forge->Forge[Q_Netplayer->Netplayer[DisconID].LocalCONTROLID].Avatar.ActorXform.Translation;
			Q_PntSprite->PntSprite[_->NomPntSprite].Pos.Y += 60;

			Q_PntSprite->PntSprite[_->NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
			Q_PntSprite->PntSprite[_->NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
			Q_PntSprite->PntSprite[_->NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

			Q_PntSprite->PntSprite[_->NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*7;
			Q_PntSprite->PntSprite[_->NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*7;
			Q_PntSprite->PntSprite[_->NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*7;

			Q_PntSprite->PntSprite[_->NomPntSprite].Live = 1;

			_->NomPntSprite++;
			jet++;
			}

		//### Forge Array Reorder
		/*K = Q_Netplayer->Netplayer[DisconID].LocalCONTROLID;
		while(K < _->NomAI - 1)
			{
			Q_Forge->Forge[K] = Q_Forge->Forge[K+1];
			K++;
			}*/

		//_->NomAI--;
		}


	if(Q_Netplayer->Netplayer[DisconID].Live == 1)
		{
		Q_Netplayer->Netplayer[DisconID].FRLswitch = 0;
		Q_Netplayer->Netplayer[DisconID].Spawned = 0;
		Q_Netplayer->Netplayer[DisconID].SpawnREADY = 0;
		Q_Netplayer->Netplayer[DisconID].UpdateCHAR = 0;
		Q_Netplayer->Netplayer[DisconID].Activated = 0;
		Q_Netplayer->Netplayer[DisconID].Live = 0;

		//### Q_Netplayer->Netplayer Array Reorder
		K = DisconID;
		while(K < _->NETNomNetplayer - 1)
			{
			Q_Netplayer->Netplayer[K] = Q_Netplayer->Netplayer[K+1];
			K++;
			}

		_->NETNomNetplayer--;
		}
}




//=====================================================================================
//	Server_ClientDisconnect
//=====================================================================================
geBoolean Server_ClientDisconnect(Server_Server *Server, geCSNetMgr_NetID Id)
{
	int32			i;
	Server_Client	*SClient;
	uint8			DisconNUM;

	assert(Server);

	for (i=0; i< NETMGR_MAX_CLIENTS; i++)
	{
		SClient = &Server->Clients[i];

		if (!SClient->Active)	
			continue;

		if (SClient->NetID == Id)
		{
			Buffer_Data		Buffer;
			char			Data[512];

			//##### Destroy Q_Netplayer->Netplayer
			//### Find Q_Netplayer->Netplayer ID
			DisconNUM=0;
			while(Q_Netplayer->Netplayer[DisconNUM].ID != Id)
				{ DisconNUM++; }

				//###### -  REMOVE AND DESTROY ACTORS  - ######
			if(Q_Netplayer->Netplayer[DisconNUM].Spawned > 0)
				{
				Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].LIVE = 0;
				Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].NetplayerFLAG = 0;
				
				geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Avatar.Actor);
				geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Weapon.Actor);
				geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Shadows[1].Actor);
				geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Shadows[2].Actor);
				geWorld_RemoveActor(World, Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Shadows[3].Actor);

				geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Avatar.Actor);
				geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Weapon.Actor);
				geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Shadows[1].Actor);
				geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Shadows[2].Actor);
				geActor_Destroy(&Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Shadows[3].Actor);

				//##### Destroy Small Energy Actors
				jet = 0;
				aero = _->MaxNomSEnergy - 1;
				while((aero >= 0) && (jet < 2))
					{
					if(Q_SEnergy->SEnergy[aero].Live == 0)
						{
						//### Destroy Actors
						SCRAM=0;
						while(SCRAM < 5)
							{
							geWorld_RemoveActor(World, Q_SEnergy->SEnergy[aero].ActorFlag[SCRAM].Actor);
							geActor_Destroy(&Q_SEnergy->SEnergy[aero].ActorFlag[SCRAM].Actor);
							SCRAM++;
							}

						//### Increment Destruction Counter
						jet++;

						//### Reorder Array
						K = aero;
						while(K < _->MaxNomSEnergy - 1)
							{
							Q_SEnergy->SEnergy[K] = Q_SEnergy->SEnergy[K+1];
							K++;
							}
						_->MaxNomSEnergy--;
						}
					aero--;
					}

				//##### Destroy Large Energy Actors
				jet = 0;
				aero = _->MaxNomLEnergy - 1;
				while((aero >= 0) && (jet < 2))
					{
					if(Q_LEnergy->LEnergy[aero].Live == 0)
						{
						//### Destroy Actors
						geWorld_RemoveActor(World, Q_LEnergy->LEnergy[aero].EnergyBall.Actor);
						geActor_Destroy(&Q_LEnergy->LEnergy[aero].EnergyBall.Actor);

						//### Increment Destruction Counter
						jet++;

						//### Reorder Array
						K = aero;
						while(K < _->MaxNomLEnergy - 1)
							{
							Q_LEnergy->LEnergy[K] = Q_LEnergy->LEnergy[K+1];
							K++;
							}
						_->MaxNomLEnergy--;
						}
					aero--;
					}

				//#### Avatar Destruction effect
				jet=0;
				while((jet < 25) && (_->NomPntSprite < 24999))
					{
					Q_PntSprite->PntSprite[_->NomPntSprite].Type = GE_TEXTURED_POINT;
					Q_PntSprite->PntSprite[_->NomPntSprite].RenderFlags =	GE_RENDER_DO_NOT_OCCLUDE_OTHERS;		//GE_RENDER_DEPTH_SORT_BF
					Q_PntSprite->PntSprite[_->NomPntSprite].Scale = 0.2f;		//0.025f//0.002f
					Q_PntSprite->PntSprite[_->NomPntSprite].PartType = 11;

					Q_PntSprite->PntSprite[_->NomPntSprite].IR = 0;
					Q_PntSprite->PntSprite[_->NomPntSprite].IG = 0;
					Q_PntSprite->PntSprite[_->NomPntSprite].IB = 0;

					Q_PntSprite->PntSprite[_->NomPntSprite].Alpha = 255;
					Q_PntSprite->PntSprite[_->NomPntSprite].Speed = 2;
					Q_PntSprite->PntSprite[_->NomPntSprite].Pos = Q_Forge->Forge[Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID].Avatar.ActorXform.Translation;
					Q_PntSprite->PntSprite[_->NomPntSprite].Pos.Y += 60;

					Q_PntSprite->PntSprite[_->NomPntSprite].TraVec.X = (((float)rand() / 32767)-0.5);
					Q_PntSprite->PntSprite[_->NomPntSprite].TraVec.Y = (((float)rand() / 32767)-0.5);
					Q_PntSprite->PntSprite[_->NomPntSprite].TraVec.Z = (((float)rand() / 32767)-0.5);

					Q_PntSprite->PntSprite[_->NomPntSprite].Pos.X += (((float)rand() / 32767)-0.5)*7;
					Q_PntSprite->PntSprite[_->NomPntSprite].Pos.Y += (((float)rand() / 32767)-0.5)*7;
					Q_PntSprite->PntSprite[_->NomPntSprite].Pos.Z += (((float)rand() / 32767)-0.5)*7;

					Q_PntSprite->PntSprite[_->NomPntSprite].Live = 1;

					_->NomPntSprite++;
					jet++;
					}

				//### Forge Array Reorder
				/*K = Q_Netplayer->Netplayer[DisconNUM].LocalCONTROLID;
				while(K < _->NomAI - 1)
					{
					Q_Forge->Forge[K] = Q_Forge->Forge[K+1];
					K++;
					}

				_->NomAI--;*/
				}

			if(Q_Netplayer->Netplayer[DisconNUM].Live == 1)
				{
				Q_Netplayer->Netplayer[DisconNUM].FRLswitch = 0;
				Q_Netplayer->Netplayer[DisconNUM].Spawned = 0;
				Q_Netplayer->Netplayer[DisconNUM].SpawnREADY = 0;
				Q_Netplayer->Netplayer[DisconNUM].UpdateCHAR = 0;
				Q_Netplayer->Netplayer[DisconNUM].Activated = 0;
				Q_Netplayer->Netplayer[DisconNUM].Live = 0;

				//### Q_Netplayer->Netplayer Array Reorder
				K = DisconNUM;
				while(K < _->NETNomNetplayer - 1)
					{
					Q_Netplayer->Netplayer[K] = Q_Netplayer->Netplayer[K+1];
					K++;
					}

				_->NETNomNetplayer--;
				}
			
			//#### Destroy Player Instance
			FRLON = 0;
			SClient->Active = GE_false;

			//###### Tell all clients (except this one of course), that this client is not active
			jet=0;
			while(jet < _->NETNomNetplayer)
				{
				QNETWORKSendClientDisconnect(Q_Netplayer->Netplayer[jet].ID, TIME, DisconNUM);
				jet++;
				}

			//Console_Printf(GameMgr_GetConsole(Server->GMgr), "[SERVER] Client disconnected: %s, %i...\n", Name, Id);
			return GE_true;
		}
	}

	//Console_Printf(GameMgr_GetConsole(Server->GMgr), "[SERVER] Client not found for disconnect: %s, %i...\n", Name, Id);

	return GE_false;
}


void QNETWORKFrame(void)
{
//Process a network frame
/*if(_->NetworkOption == 1)
	{
	//###### SEARCH PLAYERS #######
	Q_SearchPlayers();

	QNETWORKClientFrame(QHost.Client,Time);
	}*/

/*if(_->NetworkOption == 2)
	{
	//###### SEARCH PLAYERS #######
	Q_SearchPlayers();

	//###### PROCESS FRAME #######
	QNETWORKHostFrame();
	}*/
}
