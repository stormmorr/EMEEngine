struct a2v 
{
    float4 pos       : POSITION;
    float3 normal    : NORMAL;
    float2 texcoord  : TEXCOORD0;
    float4 tangent   : TEXCOORD1;
    float4 binormal  : TEXCOORD2;
	float2 curvature : TEXCOORD3;
};

struct v2f
{
	float4 hpos : POSITION;
	float3 vpos : TEXCOORD0;
	float2 texcoord : TEXCOORD1;
	float3 view : TEXCOORD2;
	float3 light : TEXCOORD3;
	float3 scale : TEXCOORD4;
	float2 curvature : TEXCOORD5;
};

struct f2s
{	
	float4 color : COLOR;
#ifdef RM_DEPTHCORRECT
	float depth : DEPTH; 
#endif
};

v2f view_space(
	a2v IN,
	uniform float4 lightpos,
	uniform float depth,
	uniform float tile)
{
	v2f OUT;

	// vertex position in object space
	float4 pos=float4(IN.pos.x,IN.pos.y,IN.pos.z,1.0);

	// vertex position in clip space
	OUT.hpos=mul(glstate.matrix.mvp,pos);

	// copy texture coordinates
	OUT.texcoord=IN.texcoord.xy*tile;

	// compute modelview rotation only part
	float3x3 modelviewrot=float3x3(glstate.matrix.modelview[0]);

	// vertex position in view space (with model transformations)
	OUT.vpos=mul(glstate.matrix.modelview[0],pos).xyz;

	// tangent vectors in view space
	float3 tangent=mul(modelviewrot,IN.tangent.xyz);
	float3 binormal=mul(modelviewrot,IN.binormal.xyz);
	float3 normal=mul(modelviewrot,IN.normal);
	float3x3 tangentspace=float3x3(tangent,binormal,normal);

	// scale and curvature
	OUT.scale=float3(IN.tangent.w,IN.binormal.w,depth)/tile;
	OUT.curvature=IN.curvature;

	// view and light in tangent space
	OUT.view=mul(tangentspace,OUT.vpos);
	OUT.light=mul(tangentspace,lightpos.xyz-OUT.vpos);

	return OUT;
}

/////////////////
// NORMAL MAPPING

f2s main_normal(
	v2f IN,
	uniform sampler2D rmtex:TEXUNIT0,		// rm texture map 
	uniform sampler2D colortex:TEXUNIT1,	// color texture map 
	uniform float4 ambient,		// ambinet color
	uniform float4 diffuse,		// diffuse color
	uniform float4 specular)	// specular color
{
	f2s OUT;

	float3 normal=tex2D(rmtex,IN.texcoord).xyz;
	normal=normalize(normal-0.5);

	// color map
	float4 color=tex2D(colortex,IN.texcoord);

	// view and light directions
	float3 v = normalize(IN.view);
	float3 l = normalize(IN.light);

	// compute diffuse and specular terms
	float diff=saturate(dot(l,normal));
	float spec=saturate(dot(normalize(l-v),normal));

	// attenuation factor
	float att=1.0-max(0,l.z); att=1.0-att*att;

	// compute final color
	float4 finalcolor;
	finalcolor.xyz = ambient.xyz*color.xyz + 
		att*(color.xyz*diffuse.xyz*diff + 
		specular.xyz*pow(spec,specular.w));
	finalcolor.w=1.0;

	OUT.color=finalcolor;

	return OUT;
}

///////////////////
// PARALLAX MAPPING

f2s main_parallax(
	v2f IN,
	uniform sampler2D rmtex:TEXUNIT0,		// rm texture map 
	uniform sampler2D colortex:TEXUNIT1,	// color texture map 
	uniform float4 ambient,		// ambinet color
	uniform float4 diffuse,		// diffuse color
	uniform float4 specular)	// specular color
{
	f2s OUT;

	  // view and light directions
	float3 v = normalize(IN.view);
	float3 l = normalize(IN.light);

	// texcoord
	float2 uv=IN.texcoord;

	// parallax code
	float height = tex2D(rmtex,uv).w * 0.06 - 0.03;
	uv += height * v.xy;

	// normal map
	float3 normal=tex2D(rmtex,uv).xyz;
	normal=normalize(normal-0.5);

	// color map
	float4 color=tex2D(colortex,uv);

	// compute diffuse and specular terms
	float diff=saturate(dot(l,normal));
	float spec=saturate(dot(normalize(l-v),normal));

	// attenuation factor
	float att=1.0-max(0,l.z); att=1.0-att*att;

	// compute final color
	float4 finalcolor;
	finalcolor.xyz = ambient.xyz*color.xyz+
		att*(color.xyz*diffuse.xyz*diff + 
		specular.xyz*pow(spec,specular.w));
	finalcolor.w=1.0;

	OUT.color=finalcolor;

	return OUT;
}

/////////////////
// RELIEF MAPPING

float3 ray_position(
	in float t,		// search parameters
	in float2 tx,	// original pixel texcoord
	in float3 v,	// view vector in texture space
	in float dataz)		// data constants
{
	float3 r=v*t;
	r.z-=t*t*dataz;
	r.xy+=tx;
	return r;
}

float ray_intersect_rm_curved(
		in sampler2D reliefmap,
		in float2 tx,
		in float3 v,
		in float tmax,
		in float dataz)
{
#ifdef RM_DOUBLEPRECISION
   const int linear_search_steps=20;
#else
   const int linear_search_steps=10;
#endif

   float t=0.0;
   float size=(tmax+0.001)/linear_search_steps;

   // search front to back for first point inside object
   for( int i=0;i<linear_search_steps;i++ )
   {
		float3 p=ray_position(t,tx,v,dataz);
		float4 tex=tex2D(reliefmap,p.xy);
		if (p.z<tex.w)
			t+=size;
   }

   const int binary_search_steps=5;

   // recurse around first point for closest match
   for( int i=0;i<binary_search_steps;i++ )
   {
      size*=0.5;
	  float3 p=ray_position(t,tx,v,dataz);
      float4 tex=tex2D(reliefmap,p.xy);
      if (p.z<tex.w)
         t+=2*size;
      t-=size;
   }

   return t;
}

f2s main_relief(
	v2f IN,
	uniform sampler2D rmtex:TEXUNIT0,		// rm texture map 
	uniform sampler2D colortex:TEXUNIT1,	// color texture map 
	uniform float4 ambient,			// ambient color
	uniform float4 diffuse,			// diffuse color
	uniform float4 specular,		// specular color
	uniform float2 planes)			// near and far plane information

{
	f2s OUT;

	// view vector in eye space
	float3 v=normalize(IN.view);
	v.z=-v.z;

	// vector perpendicular to view closest to (0,0,1)
	float3 u=normalize(2*v*v.z-float3(0,0,2));

	// mapping scale from object to texture space
	float3 mapping=1.0/IN.scale;

	// quadric constants
	float dataz=IN.curvature.x*v.x*v.x+IN.curvature.y*v.y*v.y; 
	dataz=sign(dataz)*max(abs(dataz),0.001);

	// compute max distance for search min(t(z=0),t(z=1))
	float d=v.z*v.z-4*dataz*IN.scale.z;
	float tmax=50;
	if (d>0)		// t when z=1
		tmax=min(tmax,(-v.z+sqrt(d))/(-2*dataz));
	d=v.z/dataz;	// t when z=0
	if (d>0)
		tmax=min(tmax,d);
	
	// transform view and quadric data to texture space
	v*=mapping;
	dataz*=mapping.z;

	// ray intersect depth map
	float t=ray_intersect_rm_curved(rmtex,IN.texcoord,v,tmax,dataz);
	float alpha=1;
	if (t>tmax)
		alpha=0; // no intesection, discard fragment
	
	// compute intersected position
	float3 p=ray_position(t,IN.texcoord,v,dataz);

	// get normal and color
	float4 n=tex2D(rmtex,p.xy);
	float4 c=tex2D(colortex,p.xy);

	// expand normal from normal map
	n.xyz=normalize(n.xyz-0.5);

	// restore view vector
	v=normalize(IN.view);

#ifdef RM_DEPTHCORRECT
	// a=-far/(far-near)
	// b=-far*near/(far-near)
	// Z=(a*z+b)/-z
	float3 pos=IN.vpos-normalize(IN.vpos)*p.z*IN.scale.z/v.z;
	OUT.depth=((planes.x*pos.z+planes.y)/-pos.z);
#endif

	float3 light=normalize(IN.light);

	// compute diffuse and specular terms
	float diff=saturate(dot(light,n.xyz));
	float spec=saturate(dot(normalize(light-v),n.xyz));

	// attenuation factor
	float att=1.0-max(0,light.z); att=1.0-att*att;

	// ambient term
	float4 finalcolor=ambient*c;

	// compute final color
	finalcolor.xyz += att*(c.xyz*diffuse.xyz*diff + 
		specular.xyz*pow(spec,specular.w));
	finalcolor.w=alpha;

	OUT.color=finalcolor;
	return OUT;
}

